{
    "files": [
        {
            "location": "./../../dockers/CVE-2019-14234/custom_no_tool/docker-compose.yml",
            "content": "version: \"3.8\"\nservices:\n  web:\n    build: ./web\n    ports:\n      - \"5000:5000\"\n    environment: []\n    depends_on:\n      - django\n  django:\n    build: ./django\n    ports:\n      - \"8000:8000\"\n    environment:\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=postgres\n      - POSTGRES_DB=postgres\n      - POSTGRES_HOST=postgres\n    depends_on:\n      postgres:\n        condition: service_healthy\n  postgres:\n    image: postgres:12\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_DB: postgres\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - pgdata:/var/lib/postgresql/data\n    restart: unless-stopped\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U $$POSTGRES_USER\"]\n      interval: 5s\n      timeout: 5s\n      retries: 5\n      start_period: 5s\nvolumes:\n  pgdata:\n"
        },
        {
            "location": "./../../dockers/CVE-2019-14234/custom_no_tool/web/Dockerfile",
            "content": "FROM python:3.7-slim\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\nRUN mkdir -p /app/files\nCOPY files/ /app/files/\nCOPY app.py .\nEXPOSE 5000\nCMD [\"python\", \"app.py\"]\n"
        },
        {
            "location": "./../../dockers/CVE-2019-14234/custom_no_tool/web/requirements.txt",
            "content": "Flask==2.2.5\nWerkzeug>=2.2.0\nitsdangerous>=2.1.0\nJinja2>=3.0.0\nmarkupsafe>=2.0.1\n"
        },
        {
            "location": "./../../dockers/CVE-2019-14234/custom_no_tool/web/app.py",
            "content": "from flask import Flask, request, abort, send_from_directory\nimport os\n\napp = Flask(__name__)\n\nBASE_DIR = '/app/files'\n\n@app.route('/file')\ndef file():\n    filename = request.args.get('path')\n    if not filename:\n        return 'No path provided', 400\n    # Prevent directory traversal attacks\n    safe_path = os.path.normpath(filename)\n    if safe_path.startswith('..'):\n        return 'Invalid path', 403\n    # Ensure the final path stays within BASE_DIR\n    full_path = os.path.join(BASE_DIR, safe_path)\n    if not os.path.abspath(full_path).startswith(os.path.abspath(BASE_DIR) + os.sep):\n        return 'Forbidden', 403\n    if os.path.isfile(full_path):\n        return send_from_directory(BASE_DIR, safe_path)\n    else:\n        return 'File not found', 404\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\n"
        },
        {
            "location": "./../../dockers/CVE-2019-14234/custom_no_tool/web/files/sample.txt",
            "content": "This is a sample file for testing the secure file download endpoint.\n"
        },
        {
            "location": "./../../dockers/CVE-2019-14234/custom_no_tool/django/Dockerfile",
            "content": "FROM python:3.7-slim\nWORKDIR /app\n# Install system dependencies required for psycopg2 and pg_isready\nRUN apt-get update && apt-get install -y libpq-dev gcc postgresql-client && rm -rf /var/lib/apt/lists/*\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\nCOPY . /app\n# Add entrypoint script\nCOPY entrypoint.sh /app/entrypoint.sh\nRUN chmod +x /app/entrypoint.sh\nENTRYPOINT [\"/app/entrypoint.sh\"]\nCMD [\"python\", \"manage.py\", \"runserver\", \"0.0.0.0:8000\"]\n"
        },
        {
            "location": "./../../dockers/CVE-2019-14234/custom_no_tool/django/requirements.txt",
            "content": "Django>=2.2.4,<2.3\npsycopg2-binary>=2.8\n"
        },
        {
            "location": "./../../dockers/CVE-2019-14234/custom_no_tool/django/manage.py",
            "content": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"
        },
        {
            "location": "./../../dockers/CVE-2019-14234/custom_no_tool/django/myproject/__init__.py",
            "content": ""
        },
        {
            "location": "./../../dockers/CVE-2019-14234/custom_no_tool/django/myproject/settings.py",
            "content": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'replace-this-with-a-secure-key'\nDEBUG = False\nALLOWED_HOSTS = ['*']\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': os.getenv('POSTGRES_DB', 'postgres'),\n        'USER': os.getenv('POSTGRES_USER', 'postgres'),\n        'PASSWORD': os.getenv('POSTGRES_PASSWORD', 'postgres'),\n        'HOST': os.getenv('POSTGRES_HOST', 'postgres'),\n        'PORT': '5432',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = []\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"
        },
        {
            "location": "./../../dockers/CVE-2019-14234/custom_no_tool/django/myproject/urls.py",
            "content": "from django.contrib import admin\nfrom django.urls import path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n]\n"
        },
        {
            "location": "./../../dockers/CVE-2019-14234/custom_no_tool/django/myproject/wsgi.py",
            "content": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\napplication = get_wsgi_application()\n"
        },
        {
            "location": "./../../dockers/CVE-2019-14234/custom_no_tool/django/entrypoint.sh",
            "content": "#!/bin/sh\n# Wait for the PostgreSQL service to become reachable\nwhile ! pg_isready -h \"$POSTGRES_HOST\" -p 5432 > /dev/null 2>&1; do\n  echo \"Waiting for PostgreSQL...\"\n  sleep 1\ndone\necho \"PostgreSQL is ready. Applying migrations...\"\npython manage.py migrate --noinput\necho \"Loading initial data...\"\npython manage.py loaddata initial_data.json || true\n# Execute the command passed to the container (runserver)\nexec \"$@\"\n"
        },
        {
            "location": "./../../dockers/CVE-2019-14234/custom_no_tool/django/myapp/__init__.py",
            "content": ""
        },
        {
            "location": "./../../dockers/CVE-2019-14234/custom_no_tool/django/myapp/apps.py",
            "content": "from django.apps import AppConfig\n\nclass MyappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'myapp'\n"
        },
        {
            "location": "./../../dockers/CVE-2019-14234/custom_no_tool/django/myapp/models.py",
            "content": "from django.db import models\n\nclass Item(models.Model):\n    name = models.CharField(max_length=100)\n    description = models.TextField(blank=True)\n\n    def __str__(self):\n        return self.name\n"
        },
        {
            "location": "./../../dockers/CVE-2019-14234/custom_no_tool/django/myapp/admin.py",
            "content": "from django.contrib import admin\nfrom .models import Item\n\nadmin.site.register(Item)\n"
        },
        {
            "location": "./../../dockers/CVE-2019-14234/custom_no_tool/django/myapp/views.py",
            "content": "from django.http import JsonResponse\nfrom .models import Item\n\ndef item_list(request):\n    items = list(Item.objects.values())\n    return JsonResponse(items, safe=False)\n"
        },
        {
            "location": "./../../dockers/CVE-2019-14234/custom_no_tool/django/myapp/migrations/__init__.py",
            "content": ""
        },
        {
            "location": "./../../dockers/CVE-2019-14234/custom_no_tool/django/myapp/migrations/0001_initial.py",
            "content": "from django.db import migrations, models\nimport django.db.models.deletion\n\nclass Migration(migrations.Migration):\n    initial = True\n    dependencies = []\n    operations = [\n        migrations.CreateModel(\n            name='Item',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),\n                ('description', models.TextField(blank=True)),\n            ],\n            options={\n                'abstract': False,\n            },\n        ),\n    ]\n"
        },
        {
            "location": "./../../dockers/CVE-2019-14234/custom_no_tool/django/myapp/fixtures/initial_data.json",
            "content": "[\n  {\n    \"model\": \"myapp.item\",\n    \"pk\": 1,\n    \"fields\": {\n      \"name\": \"Sample Item\",\n      \"description\": \"A sample item for initial data.\"\n    }\n  }\n]\n"
        }
    ],
    "directory_tree": "CVE-2019-14234/custom_no_tool"
}