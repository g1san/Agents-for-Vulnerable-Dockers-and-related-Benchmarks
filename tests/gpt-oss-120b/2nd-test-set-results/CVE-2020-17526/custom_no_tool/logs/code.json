{
    "files": [
        {
            "location": "./../../dockers/CVE-2020-17526/custom_no_tool/docker-compose.yml",
            "content": "version: '3.8'\nservices:\n  docker:\n    image: docker:19.03.11-dind\n    privileged: true\n    environment:\n      - DOCKER_TLS_CERTDIR=\n    ports:\n      - \"2375:2375\"\n    restart: unless-stopped\n\n  postgres:\n    image: postgres:13-alpine\n    environment:\n      POSTGRES_USER: airflow\n      POSTGRES_PASSWORD: airflow\n      POSTGRES_DB: airflow\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n      - ./init_db.sql:/docker-entrypoint-initdb.d/init_db.sql\n    ports:\n      - \"5432:5432\"\n    restart: unless-stopped\n\n  redis:\n    image: redis:6-alpine\n    ports:\n      - \"6379:6379\"\n    restart: unless-stopped\n\n  airflow:\n    image: apache/airflow:1.10.12\n    environment:\n      AIRFLOW__CORE__EXECUTOR: CeleryExecutor\n      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow\n      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0\n    volumes:\n      - ./airflow.cfg:/usr/local/airflow/airflow.cfg\n    depends_on:\n      - postgres\n      - redis\n    command: bash -c \"airflow initdb && airflow webserver\"\n    ports:\n      - \"8080:8080\"\n    restart: unless-stopped\n\n  vulnerable_app:\n    build: ./vulnerable_app\n    depends_on:\n      - docker\n      - airflow\n      - postgres\n      - redis\n    ports:\n      - \"8090:8090\"\n    restart: unless-stopped\n\nvolumes:\n  postgres_data:\n"
        },
        {
            "location": "./../../dockers/CVE-2020-17526/custom_no_tool/airflow.cfg",
            "content": "[core]\nload_examples = False\nexecutor = CeleryExecutor\nsql_alchemy_conn = postgresql+psycopg2://airflow:airflow@postgres/airflow\n\n[webserver]\nsecret_key = temporary_key\nweb_server_port = 8080\n\n[celery]\nbroker_url = redis://redis:6379/0\n"
        },
        {
            "location": "./../../dockers/CVE-2020-17526/custom_no_tool/vulnerable_app/Dockerfile",
            "content": "FROM python:3.8-slim\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\nCOPY app.py .\nCMD [\"python\", \"app.py\"]\n"
        },
        {
            "location": "./../../dockers/CVE-2020-17526/custom_no_tool/vulnerable_app/app.py",
            "content": "import os\nimport requests\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\nDOCKER_HOST = os.getenv('DOCKER_HOST', 'http://docker:2375')\n\n@app.route('/')\ndef index():\n    payload = {\n        \"Image\": \"alpine\",\n        \"Cmd\": [\"sh\", \"-c\", \"id && cat /etc/passwd\"],\n        \"HostConfig\": {\"Privileged\": True}\n    }\n    try:\n        r = requests.post(f\"{DOCKER_HOST}/containers/create\", json=payload)\n        r.raise_for_status()\n        container_id = r.json().get('Id')\n        start_resp = requests.post(f\"{DOCKER_HOST}/containers/{container_id}/start\")\n        start_resp.raise_for_status()\n        logs = requests.get(f\"{DOCKER_HOST}/containers/{container_id}/logs?stdout=1&stderr=1\")\n        return jsonify({\"status\": \"container started\", \"logs\": logs.text})\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8090)\n"
        },
        {
            "location": "./../../dockers/CVE-2020-17526/custom_no_tool/vulnerable_app/requirements.txt",
            "content": "flask\nrequests\n"
        },
        {
            "location": "./../../dockers/CVE-2020-17526/custom_no_tool/init_db.sql",
            "content": "CREATE TABLE IF NOT EXISTS test (\n    id SERIAL PRIMARY KEY,\n    data TEXT NOT NULL\n);\nINSERT INTO test (data) VALUES ('sample data');\n"
        }
    ],
    "directory_tree": "./../../dockers/CVE-2020-17526/custom_no_tool"
}