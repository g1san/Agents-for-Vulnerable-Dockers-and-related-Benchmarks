{
    "files": [
        {
            "location": "./../../dockers/CVE-2025-4123/custom_no_tool/app/requirements.txt",
            "content": "flask==2.0.1\nWerkzeug==2.0.3\npsycopg2-binary==2.9.9\ngunicorn==20.1.0"
        },
        {
            "location": "./../../dockers/CVE-2025-4123/custom_no_tool/app/Dockerfile",
            "content": "FROM python:3.9-slim\n\n# Install system dependencies needed for psycopg2 and netcat\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends gcc libpq-dev netcat-openbsd && \\\n    rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\n# Copy all source files from the build context into the container\nCOPY . /app/\n\nRUN pip install --no-cache-dir -r requirements.txt\n\nEXPOSE 5000\n\n# Wait for PostgreSQL to become reachable before starting gunicorn\nCMD [\"sh\", \"-c\", \"while ! nc -z $POSTGRES_HOST 5432; do sleep 1; done && exec gunicorn -b 0.0.0.0:5000 app:app\"]"
        },
        {
            "location": "./../../dockers/CVE-2025-4123/custom_no_tool/docker-compose.yml",
            "content": "version: '3.8'\n\nservices:\n  app:\n    build:\n      context: ./app\n    container_name: cve2025_4123_app\n    ports:\n      - \"5000:5000\"\n    environment:\n      - POSTGRES_HOST=postgres\n      - POSTGRES_DB=demo\n      - POSTGRES_USER=demo_user\n      - POSTGRES_PASSWORD=demo_pass\n    depends_on:\n      - postgres\n      - grafana\n\n  postgres:\n    image: postgres:15.4\n    container_name: cve2025_4123_postgres\n    environment:\n      POSTGRES_USER: demo_user\n      POSTGRES_PASSWORD: demo_pass\n      POSTGRES_DB: demo\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - pgdata:/var/lib/postgresql/data\n      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro\n\n  grafana:\n    image: grafana/grafana:12.0.0\n    container_name: cve2025_4123_grafana\n    ports:\n      - \"3000:3000\"\n    environment:\n      GF_SECURITY_ALLOW_EMBEDDING: \"true\"\n    depends_on:\n      - postgres\n\nvolumes:\n  pgdata:\n    driver: local"
        },
        {
            "location": "./../../dockers/CVE-2025-4123/custom_no_tool/app/app.py",
            "content": "from flask import Flask, request, jsonify\nfrom vulnlib import process\n\napp = Flask(__name__)\n\n@app.route('/process', methods=['POST'])\ndef handle_process():\n    if not request.is_json:\n        return jsonify({'error': 'JSON payload required'}), 400\n    payload = request.get_json()\n    data = payload.get('data')\n    result = process(data)\n    return jsonify({'result': result})\n\nif __name__ == '__main__':\n    # When running directly (e.g., for debugging), start the Flask dev server.\n    app.run(host='0.0.0.0', port=5000)"
        },
        {
            "location": "./../../dockers/CVE-2025-4123/custom_no_tool/app/vulnlib.py",
            "content": "def process(data):\n    \"\"\"Simple placeholder processing function.\"\"\"\n    # In a real vulnerable library this might contain unsafe behavior.\n    # For demo purposes, just return the input unchanged.\n    return data"
        },
        {
            "location": "./../../dockers/CVE-2025-4123/custom_no_tool/init.sql",
            "content": "CREATE TABLE IF NOT EXISTS test_data (\n    id SERIAL PRIMARY KEY,\n    info TEXT NOT NULL\n);\n\nINSERT INTO test_data (info) VALUES ('sample entry 1'), ('sample entry 2');"
        }
    ],
    "directory_tree": "./../../dockers/CVE-2025-4123/custom_no_tool"
}