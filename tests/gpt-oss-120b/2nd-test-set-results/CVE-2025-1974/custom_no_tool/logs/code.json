{
    "files": [
        {
            "location": "./../../dockers/CVE-2025-1974/custom_no_tool/docker-compose.yml",
            "content": "services:\n  web:\n    build: ./web\n    ports:\n      - \"8080:8080\"\n    environment:\n      DB_HOST: db\n      DB_USER: root\n      DB_PASSWORD: examplepass\n      DB_NAME: vulnapp\n    depends_on:\n      - db\n      - ingress-controller\n  db:\n    image: mysql:5.7\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: examplepass\n      MYSQL_DATABASE: vulnapp\n    ports:\n      - \"3306:3306\"\n    volumes:\n      - db_data:/var/lib/mysql\n      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql\n    healthcheck:\n      test: [\"CMD\", \"mysqladmin\", \"ping\", \"-h\", \"localhost\"]\n      interval: 5s\n      timeout: 2s\n      retries: 5\n  ingress-controller:\n    # Updated to the new registry location where the image is available\n    image: registry.k8s.io/ingress-nginx/controller:v1.10.9\n    ports:\n      - \"8443:8443\"\n    command: [\"/nginx-ingress-controller\"]\nvolumes:\n  db_data:\n"
        },
        {
            "location": "./../../dockers/CVE-2025-1974/custom_no_tool/web/Dockerfile",
            "content": "FROM node:14-bullseye-slim\nWORKDIR /app\n\n# Copy package definitions and install Node dependencies\nCOPY package*.json ./\nRUN npm install\n\n# Install netcat (nc) utility required by wait-for-db.sh\nRUN apt-get update && apt-get install -y netcat-openbsd && rm -rf /var/lib/apt/lists/*\n\n# Copy application source code and helper scripts\nCOPY . .\nCOPY wait-for-db.sh /app/wait-for-db.sh\nRUN chmod +x /app/wait-for-db.sh\n\nEXPOSE 8080\n\n# The script will wait for MySQL then exec the Node app\nCMD [\"/app/wait-for-db.sh\"]"
        },
        {
            "location": "./../../dockers/CVE-2025-1974/custom_no_tool/web/package.json",
            "content": "{\n  \"name\": \"vulnapp\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Demo app vulnerable to CVE-2025-1974\",\n  \"main\": \"app.js\",\n  \"scripts\": {\n    \"start\": \"node app.js\"\n  },\n  \"dependencies\": {\n    \"express\": \"4.16.0\",\n    \"mysql\": \"2.18.1\"\n  }\n}"
        },
        {
            "location": "./../../dockers/CVE-2025-1974/custom_no_tool/web/app.js",
            "content": "const express = require('express');\nconst mysql = require('mysql');\nconst { exec } = require('child_process');\nconst app = express();\nconst port = 8080;\n\nconst db = mysql.createConnection({\n  host: process.env.DB_HOST || 'localhost',\n  user: process.env.DB_USER || 'root',\n  password: process.env.DB_PASSWORD || '',\n  database: process.env.DB_NAME || 'vulnapp'\n});\n\n// Connection will be established after the wait\u2011for\u2011db script ensures MySQL is reachable.\n\ndb.connect(err => {\n  if (err) {\n    console.error('DB connection error:', err);\n    process.exit(1);\n  }\n  console.log('Connected to DB');\n});\n\n// Vulnerable endpoint illustrating CVE-2025-1974 (unsanitized command execution)\napp.get('/search', (req, res) => {\n  const q = req.query.q || '';\n  // CWE-78: OS Command Injection\n  exec(`grep -i \"${q}\" /app/data.txt`, (error, stdout, stderr) => {\n    if (error) {\n      return res.status(500).send('Error executing command');\n    }\n    res.send(`<pre>${stdout}</pre>`);\n  });\n});\n\napp.get('/users', (req, res) => {\n  db.query('SELECT id, username FROM users', (err, results) => {\n    if (err) return res.status(500).send('DB error');\n    res.json(results);\n  });\n});\n\napp.listen(port, () => {\n  console.log(`Vulnerable app listening on port ${port}`);\n});"
        },
        {
            "location": "./../../dockers/CVE-2025-1974/custom_no_tool/web/data.txt",
            "content": "Sample line one\nAnother example line\nSensitive information\nTest data for grep"
        },
        {
            "location": "./../../dockers/CVE-2025-1974/custom_no_tool/web/wait-for-db.sh",
            "content": "#!/bin/sh\n# Simple script to wait for MySQL to be reachable before starting the Node app.\nHOST=\"${DB_HOST:-db}\"\nPORT=3306\nMAX_RETRIES=30\nINTERVAL=2\ncount=0\nwhile ! nc -z \"$HOST\" \"$PORT\"; do\n  count=$((count+1))\n  if [ \"$count\" -ge \"$MAX_RETRIES\" ]; then\n    echo \"MySQL not reachable after $MAX_RETRIES attempts, exiting.\"\n    exit 1\n  fi\n  echo \"Waiting for MySQL at $HOST:$PORT... ($count)\"\n  sleep $INTERVAL\ndone\necho \"MySQL is up, starting the application.\"\nexec node app.js\n"
        },
        {
            "location": "./../../dockers/CVE-2025-1974/custom_no_tool/db/init.sql",
            "content": "CREATE TABLE IF NOT EXISTS users (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password VARCHAR(255) NOT NULL\n);\nINSERT INTO users (username, password) VALUES\n('alice', 'password123'),\n('bob', 'qwerty'),\n('charlie', 'letmein');\n"
        }
    ],
    "directory_tree": "CVE-2025-1974/custom_no_tool"
}