{
    "files": [
        {
            "location": "./../../dockers/CVE-2019-9053/custom_no_tool/docker-compose.yml",
            "content": "services:\n  vulnerable-docker:\n    image: docker:18.09.5-dind\n    container_name: vulnerable_docker\n    privileged: true\n    environment:\n      - DOCKER_TLS_CERTDIR=\n    volumes:\n      - docker-data:/var/lib/docker\n    ports:\n      - \"2375:2375\"\n    healthcheck:\n      test: [\"CMD\", \"docker\", \"info\"]\n      interval: 5s\n      timeout: 2s\n      retries: 5\n      start_period: 10s\n  test-app:\n    build:\n      context: ./app\n    container_name: test_app\n    depends_on:\n      vulnerable-docker:\n        condition: service_healthy\n    environment:\n      DOCKER_HOST: tcp://vulnerable-docker:2375\n    ports:\n      - \"8080:8080\"\nvolumes:\n  docker-data:\n    driver: local"
        },
        {
            "location": "./../../dockers/CVE-2019-9053/custom_no_tool/app/Dockerfile",
            "content": "FROM python:3.7-slim\nWORKDIR /app\n# Install system build dependencies and certificates required for pip to fetch packages over HTTPS\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n        ca-certificates \\\n        build-essential \\\n        gcc \\\n        libc6-dev \\\n        libffi-dev \\\n        libssl-dev \\\n        python3-dev \\\n        musl-dev && \\\n    rm -rf /var/lib/apt/lists/*\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n# Remove build tools to keep the image small\nRUN apt-get purge -y --auto-remove build-essential gcc libc6-dev libffi-dev libssl-dev python3-dev musl-dev && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*\nCOPY . .\nEXPOSE 8080\nCMD [\"python\", \"app.py\"]"
        },
        {
            "location": "./../../dockers/CVE-2019-9053/custom_no_tool/app/app.py",
            "content": "import time\nimport urllib.request\nfrom flask import Flask, request, jsonify\nimport docker\nimport docker.errors\n\napp = Flask(__name__)\n\n# Helper: wait for the Docker daemon inside the DIND container to be ready (optional fallback)\nDOCKER_PING_URL = 'http://vulnerable-docker:2375/_ping'\n\ndef wait_for_docker(timeout=60):\n    start = time.time()\n    while time.time() - start < timeout:\n        try:\n            with urllib.request.urlopen(DOCKER_PING_URL, timeout=5) as resp:\n                if resp.read().strip() == b'OK':\n                    return True\n        except Exception:\n            pass\n        time.sleep(1)\n    return False\n\n# The service now relies on Docker Compose healthcheck; the eager check is retained as a harmless fallback.\nif not wait_for_docker():\n    print('Warning: Docker daemon not immediately reachable at startup')\n\n@app.route('/')\ndef index():\n    return 'Vulnerable Test App \u2013 CVE-2019-9053'\n\n# Endpoint that runs a container on the vulnerable Docker Engine\n@app.route('/run', methods=['POST'])\ndef run_container():\n    # Create Docker client lazily with version negotiation and retry logic\n    client = None\n    for _ in range(10):\n        try:\n            client = docker.DockerClient(base_url='http://vulnerable-docker:2375', version='auto')\n            client.ping()\n            break\n        except docker.errors.DockerException:\n            time.sleep(1)\n    if client is None:\n        return jsonify({'error': 'Unable to connect to Docker daemon'}), 500\n\n    image = request.json.get('image', 'alpine:3.9')\n    cmd = request.json.get('cmd', 'id')\n    try:\n        cont = client.containers.run(image, cmd, detach=True)\n        # Wait for container to finish execution\n        cont.wait()\n        output = cont.logs().decode('utf-8')\n        cont.remove(force=True)\n        return jsonify({'status': 'started', 'output': output})\n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8080)"
        },
        {
            "location": "./../../dockers/CVE-2019-9053/custom_no_tool/app/requirements.txt",
            "content": "flask==1.1.2\njinja2==2.11.3\nmarkupsafe==2.0.1\nitsdangerous==1.1.0\ndocker==4.2.0\nrequests==2.31.0\nwerkzeug<2.1\nclick>=5.1\nsix>=1.4.0\nwebsocket-client>=0.32.0"
        }
    ],
    "directory_tree": "CVE-2019-9053/\n\u2514\u2500\u2500 custom_no_tool/\n    \u251c\u2500\u2500 docker-compose.yml\n    \u2514\u2500\u2500 app/\n        \u251c\u2500\u2500 Dockerfile\n        \u251c\u2500\u2500 app.py\n        \u2514\u2500\u2500 requirements.txt"
}