{
    "files": [
        {
            "location": "./../../dockers/CVE-2022-34265/custom_no_tool/docker-compose.yml",
            "content": "services:\n  web:\n    build:\n      context: ./web\n    command: [\"./wait-for-db.sh\", \"python\", \"manage.py\", \"runserver\", \"0.0.0.0:8000\"]\n    ports:\n      - \"8000:8000\"\n    depends_on:\n      db:\n        condition: service_healthy\n    environment:\n      - DB_HOST=db\n      - DB_NAME=django_db\n      - DB_USER=django_user\n      - DB_PASSWORD=django_pass\n    networks:\n      - cve_net\n  db:\n    image: postgres:13-alpine\n    environment:\n      POSTGRES_DB: django_db\n      POSTGRES_USER: django_user\n      POSTGRES_PASSWORD: django_pass\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - db_data:/var/lib/postgresql/data\n      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro\n    healthcheck:\n      test: [\"CMD\", \"pg_isready\", \"-U\", \"django_user\", \"-d\", \"django_db\", \"-h\", \"localhost\"]\n      interval: 5s\n      timeout: 5s\n      retries: 5\n    networks:\n      - cve_net\nnetworks:\n  cve_net:\n    driver: bridge\nvolumes:\n  db_data:"
        },
        {
            "location": "./../../dockers/CVE-2022-34265/custom_no_tool/web/Dockerfile",
            "content": "FROM python:3.11-slim\nWORKDIR /app\n# Install PostgreSQL client for pg_isready used by wait script\nRUN apt-get update && apt-get install -y --no-install-recommends postgresql-client && rm -rf /var/lib/apt/lists/*\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\nCOPY . .\nCOPY wait-for-db.sh .\nRUN chmod +x wait-for-db.sh\nEXPOSE 8000"
        },
        {
            "location": "./../../dockers/CVE-2022-34265/custom_no_tool/web/requirements.txt",
            "content": "Django==4.0.5\npsycopg2-binary"
        },
        {
            "location": "./../../dockers/CVE-2022-34265/custom_no_tool/web/manage.py",
            "content": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"app.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"
        },
        {
            "location": "./../../dockers/CVE-2022-34265/custom_no_tool/web/wait-for-db.sh",
            "content": "#!/bin/sh\n# Simple script to wait for PostgreSQL to become available\nset -e\n\nHOST=${DB_HOST:-db}\nPORT=${DB_PORT:-5432}\nUSER=${DB_USER:-django_user}\nDB=${DB_NAME:-django_db}\n\nuntil pg_isready -h \"$HOST\" -p \"$PORT\" -U \"$USER\" -d \"$DB\" >/dev/null 2>&1; do\n  echo \"Waiting for PostgreSQL at $HOST:$PORT...\"\n  sleep 2\ndone\n\necho \"PostgreSQL is ready.\"\nexec \"$@\""
        },
        {
            "location": "./../../dockers/CVE-2022-34265/custom_no_tool/web/app/__init__.py",
            "content": ""
        },
        {
            "location": "./../../dockers/CVE-2022-34265/custom_no_tool/web/app/asgi.py",
            "content": "import os\nfrom django.core.asgi import get_asgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'app.settings')\napplication = get_asgi_application()"
        },
        {
            "location": "./../../dockers/CVE-2022-34265/custom_no_tool/web/app/wsgi.py",
            "content": "import os\nfrom django.core.wsgi import get_wsgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'app.settings')\napplication = get_wsgi_application()"
        },
        {
            "location": "./../../dockers/CVE-2022-34265/custom_no_tool/web/app/settings.py",
            "content": "import os\nfrom pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'replace-this-with-a-secure-key'\nDEBUG = True\nALLOWED_HOSTS = ['*']\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'app.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'app.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': os.getenv('DB_NAME', 'django_db'),\n        'USER': os.getenv('DB_USER', 'django_user'),\n        'PASSWORD': os.getenv('DB_PASSWORD', 'django_pass'),\n        'HOST': os.getenv('DB_HOST', 'db'),\n        'PORT': '5432',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = []\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"
        },
        {
            "location": "./../../dockers/CVE-2022-34265/custom_no_tool/web/app/urls.py",
            "content": "from django.contrib import admin\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.index, name='index'),\n]"
        },
        {
            "location": "./../../dockers/CVE-2022-34265/custom_no_tool/web/app/views.py",
            "content": "from django.http import HttpResponse\n\ndef index(request):\n    return HttpResponse('CVE-2022-34265 demo application is running.')"
        },
        {
            "location": "./../../dockers/CVE-2022-34265/custom_no_tool/web/app/models.py",
            "content": "from django.db import models\n\nclass Demo(models.Model):\n    name = models.CharField(max_length=100)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name"
        },
        {
            "location": "./../../dockers/CVE-2022-34265/custom_no_tool/db/init.sql",
            "content": "CREATE TABLE IF NOT EXISTS test_table (\n    id SERIAL PRIMARY KEY,\n    info TEXT NOT NULL\n);\n\nINSERT INTO test_table (info) VALUES ('sample data 1');\nINSERT INTO test_table (info) VALUES ('sample data 2');\n"
        }
    ],
    "directory_tree": "CVE-2022-34265/\n\u2514\u2500 custom_no_tool/\n   \u251c\u2500 docker-compose.yml\n   \u251c\u2500 db/\n   \u2502   \u2514\u2500 init.sql\n   \u2514\u2500 web/\n       \u251c\u2500 Dockerfile\n       \u251c\u2500 requirements.txt\n       \u251c\u2500 manage.py\n       \u251c\u2500 wait-for-db.sh\n       \u2514\u2500 app/\n           \u251c\u2500 __init__.py\n           \u251c\u2500 asgi.py\n           \u251c\u2500 wsgi.py\n           \u251c\u2500 settings.py\n           \u251c\u2500 urls.py\n           \u251c\u2500 views.py\n           \u2514\u2500 models.py"
}