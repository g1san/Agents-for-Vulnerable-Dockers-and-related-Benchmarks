{
    "files": [
        {
            "location": "./../../dockers/CVE-2024-43441/custom_no_tool/docker-compose.yml",
            "content": "services:\n  webapp:\n    build:\n      context: ./webapp\n    ports:\n      - \"8080:80\"\n    depends_on:\n      - hugegraph\n      - init_hg\n    environment:\n      - HG_HOST=hugegraph\n      - HG_PORT=8182\n  hugegraph:\n    build:\n      context: ./hugegraph\n    container_name: hugegraph\n    ports:\n      - \"8182:8182\"\n    environment:\n      - HUGRAPH_GREMLIN_SERVER_HOST=0.0.0.0\n      - HUGRAPH_GREMLIN_SERVER_PORT=8182\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8182/gremlin\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n  init_hg:\n    build:\n      context: ./init_hg\n    depends_on:\n      hugegraph:\n        condition: service_healthy\n    environment:\n      - HG_HOST=hugegraph\n      - HG_PORT=8182\n    command: [\"/init.sh\"]"
        },
        {
            "location": "./../../dockers/CVE-2024-43441/custom_no_tool/hugegraph/Dockerfile",
            "content": "FROM apache/hugegraph:1.4.2\n# Debian\u2011based image \u2013 install curl with apt\u2011get\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends curl && \\\n    rm -rf /var/lib/apt/lists/*"
        },
        {
            "location": "./../../dockers/CVE-2024-43441/custom_no_tool/webapp/Dockerfile",
            "content": "FROM python:3.10-slim\nWORKDIR /app\nCOPY requirements.txt ./\nRUN pip install --no-cache-dir -r requirements.txt\nCOPY . ./\nEXPOSE 80\nCMD [\"gunicorn\", \"-b\", \"0.0.0.0:80\", \"app:app\"]"
        },
        {
            "location": "./../../dockers/CVE-2024-43441/custom_no_tool/webapp/requirements.txt",
            "content": "flask==2.3.2\ngunicorn==21.2.0\nrequests==2.31.0"
        },
        {
            "location": "./../../dockers/CVE-2024-43441/custom_no_tool/webapp/app.py",
            "content": "import os\nimport json\nimport requests\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\nHG_HOST = os.getenv('HG_HOST', 'hugegraph')\nHG_PORT = os.getenv('HG_PORT', '8182')\nHG_URL = f'http://{HG_HOST}:{HG_PORT}'\n\ndef hg_query(gremlin):\n    payload = {'gremlin': gremlin}\n    resp = requests.post(f'{HG_URL}/gremlin', json=payload)\n    resp.raise_for_status()\n    return resp.json()\n\n@app.route('/')\ndef index():\n    return \"Vulnerable WebApp ready (HugeGraph backend)\"\n\n@app.route('/process', methods=['POST'])\ndef process():\n    data = request.json or {}\n    result = data.get('input', '')\n    return jsonify({\"result\": result})\n\n# Example endpoint that returns all vertices of label 'person'\n@app.route('/users')\ndef list_users():\n    try:\n        result = hg_query(\"g.V().hasLabel('person').valueMap()\")\n        # Transform result to a more friendly format\n        vertices = []\n        for item in result.get('result', []):\n            vertex = {k: v[0] if isinstance(v, list) else v for k, v in item.items()}\n            vertices.append(vertex)\n        return jsonify(vertices)\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=80)"
        },
        {
            "location": "./../../dockers/CVE-2024-43441/custom_no_tool/init_hg/Dockerfile",
            "content": "FROM python:3.10-slim\nWORKDIR /init\n# Install curl and the Python requests library needed by the init script\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends curl && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    pip install --no-cache-dir requests\nCOPY init.sh .\nRUN chmod +x init.sh\nENTRYPOINT [\"/init.sh\"]"
        },
        {
            "location": "./../../dockers/CVE-2024-43441/custom_no_tool/init_hg/init.sh",
            "content": "#!/bin/sh\nset -e\nHG_HOST=${HG_HOST:-hugegraph}\nHG_PORT=${HG_PORT:-8182}\nHG_URL=\"http://$HG_HOST:$HG_PORT\"\n\n# Wait for HugeGraph to be ready\necho \"Waiting for HugeGraph to become ready...\"\nwhile ! curl -s \"$HG_URL/gremlin\" > /dev/null; do\n  sleep 2\ndone\n\necho \"HugeGraph is ready, inserting test data...\"\n# Create sample vertices with label 'person' and property 'name'\npython3 - <<PY\nimport requests, os\nhg_url = os.getenv('HG_URL', f'http://{HG_HOST}:{HG_PORT}')\n\ndef add_vertex(name):\n    gremlin = f\"g.addV('person').property('name', '{name}')\"\n    resp = requests.post(f'{hg_url}/gremlin', json={'gremlin': gremlin})\n    resp.raise_for_status()\n    print(f'Added vertex {name}')\n\nfor n in ['alice', 'bob']:\n    add_vertex(n)\nPY\n\necho \"Test data inserted. Exiting init container.\""
        }
    ],
    "directory_tree": "custom_no_tool/\n\u251c\u2500 docker-compose.yml\n\u251c\u2500 hugegraph/\n\u2502   \u2514\u2500 Dockerfile\n\u251c\u2500 webapp/\n\u2502   \u251c\u2500 Dockerfile\n\u2502   \u251c\u2500 requirements.txt\n\u2502   \u2514\u2500 app.py\n\u251c\u2500 init_hg/\n\u2502   \u251c\u2500 Dockerfile\n\u2502   \u2514\u2500 init.sh"
}