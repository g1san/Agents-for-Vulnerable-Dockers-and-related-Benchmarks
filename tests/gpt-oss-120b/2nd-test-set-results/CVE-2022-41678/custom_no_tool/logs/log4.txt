#1 [internal] load local bake definitions
#1 reading from stdin 703B done
#1 DONE 0.0s

#2 [internal] load build definition from Dockerfile
#2 transferring dockerfile: 517B done
#2 DONE 0.1s

#3 [internal] load metadata for docker.io/library/node:14-bullseye
#3 DONE 0.6s

#4 [internal] load .dockerignore
#4 transferring context: 2B done
#4 DONE 0.1s

#5 [internal] load build context
#5 transferring context: 2.96kB done
#5 DONE 0.1s

#6 [1/6] FROM docker.io/library/node:14-bullseye@sha256:c0bff0d29a742f40650d5f0305dd581351c10954e6cb6676fc96f47590b9666e
#6 resolve docker.io/library/node:14-bullseye@sha256:c0bff0d29a742f40650d5f0305dd581351c10954e6cb6676fc96f47590b9666e 0.2s done
#6 CACHED

#7 [2/6] RUN apt-get update && apt-get install -y --no-install-recommends build-essential python3 && apt-get clean && rm -rf /var/lib/apt/lists/*
#7 0.624 Get:1 http://deb.debian.org/debian bullseye InRelease [75.1 kB]
#7 0.916 Get:2 http://deb.debian.org/debian-security bullseye-security InRelease [27.2 kB]
#7 0.944 Get:3 http://deb.debian.org/debian bullseye-updates InRelease [44.0 kB]
#7 1.061 Get:4 http://deb.debian.org/debian bullseye/main amd64 Packages [8066 kB]
#7 25.56 Get:5 http://deb.debian.org/debian-security bullseye-security/main amd64 Packages [420 kB]
#7 25.83 Get:6 http://deb.debian.org/debian bullseye-updates/main amd64 Packages [18.8 kB]
#7 26.35 Fetched 8652 kB in 25s (348 kB/s)
#7 26.35 Reading package lists...
#7 26.75 Reading package lists...
#7 27.14 Building dependency tree...
#7 27.23 Reading state information...
#7 27.36 python3 is already the newest version (3.9.2-3).
#7 27.36 python3 set to manually installed.
#7 27.36 The following NEW packages will be installed:
#7 27.36   build-essential
#7 27.44 0 upgraded, 1 newly installed, 0 to remove and 156 not upgraded.
#7 27.44 Need to get 7704 B of archives.
#7 27.44 After this operation, 20.5 kB of additional disk space will be used.
#7 27.44 Get:1 http://deb.debian.org/debian bullseye/main amd64 build-essential amd64 12.9 [7704 B]
#7 27.61 debconf: delaying package configuration, since apt-utils is not installed
#7 27.64 Fetched 7704 B in 0s (113 kB/s)
#7 27.67 Selecting previously unselected package build-essential.
#7 27.67 (Reading database ... 
(Reading database ... 5%
(Reading database ... 10%
(Reading database ... 15%
(Reading database ... 20%
(Reading database ... 25%
(Reading database ... 30%
(Reading database ... 35%
(Reading database ... 40%
(Reading database ... 45%
(Reading database ... 50%
(Reading database ... 55%
(Reading database ... 60%
(Reading database ... 65%
(Reading database ... 70%
(Reading database ... 75%
(Reading database ... 80%
(Reading database ... 85%
(Reading database ... 90%
(Reading database ... 95%
(Reading database ... 100%
(Reading database ... 22794 files and directories currently installed.)
#7 27.77 Preparing to unpack .../build-essential_12.9_amd64.deb ...
#7 27.78 Unpacking build-essential (12.9) ...
#7 27.81 Setting up build-essential (12.9) ...
#7 DONE 27.9s

#8 [3/6] WORKDIR /app
#8 DONE 0.1s

#9 [4/6] COPY package.json package-lock.json ./
#9 DONE 0.0s

#10 [5/6] RUN npm ci --only=production
#10 0.934 npm ERR! accepts not accessible from express
#10 0.939 
#10 0.939 npm ERR! A complete log of this run can be found in:
#10 0.939 npm ERR!     /root/.npm/_logs/2025-10-30T21_39_51_531Z-debug.log
#10 ERROR: process "/bin/sh -c npm ci --only=production" did not complete successfully: exit code: 1
------
 > [5/6] RUN npm ci --only=production:
0.934 npm ERR! accepts not accessible from express
0.939 
0.939 npm ERR! A complete log of this run can be found in:
0.939 npm ERR!     /root/.npm/_logs/2025-10-30T21_39_51_531Z-debug.log
------
Dockerfile:13

--------------------

  11 |     # Install only production dependencies using the lockfile

  12 |     COPY package.json package-lock.json ./

  13 | >>> RUN npm ci --only=production

  14 |     

  15 |     # Copy application source

--------------------

failed to solve: process "/bin/sh -c npm ci --only=production" did not complete successfully: exit code: 1

