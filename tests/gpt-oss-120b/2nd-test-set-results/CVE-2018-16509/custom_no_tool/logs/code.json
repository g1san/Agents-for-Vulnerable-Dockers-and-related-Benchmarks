{
    "files": [
        {
            "location": "./../../dockers/CVE-2018-16509/custom_no_tool/docker-compose.yml",
            "content": "services:\n  web:\n    build: ./app\n    ports:\n      - \"5000:5000\"\n    environment:\n      - DB_HOST=db\n      - DB_USER=root\n      - DB_PASSWORD=example\n      - DB_NAME=vuln_db\n    depends_on:\n      - db\n\n  db:\n    image: mysql:5.7\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: example\n      MYSQL_DATABASE: vuln_db\n    volumes:\n      - db_data:/var/lib/mysql\n      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql\n    ports:\n      - \"3306:3306\"\n\nvolumes:\n  db_data:"
        },
        {
            "location": "./../../dockers/CVE-2018-16509/custom_no_tool/app/Dockerfile",
            "content": "FROM python:3.9-slim\n\n# Upgrade pip to a specific version\nRUN python -m pip install --upgrade \"pip==20.3.4\"\n\n# Install required Python packages (Flask, MySQL connector, Pillow)\nRUN pip install Flask==2.2.5 mysql-connector-python==8.0.33 Pillow==9.5.0\n\n# Install vulnerable Ghostscript 9.23 from a Debian stretch snapshot\nRUN echo \"deb [trusted=yes] http://snapshot.debian.org/archive/debian/20210201T000000Z stretch main\" > /etc/apt/sources.list.d/snapshot.list && \\\n    apt-get update -o Acquire::Check-Valid-Until=false && \\\n    apt-get install -y --no-install-recommends ghostscript && \\\n    rm -rf /var/lib/apt/lists/* /etc/apt/sources.list.d/snapshot.list\n\nWORKDIR /app\nCOPY app.py .\n\nEXPOSE 5000\nCMD [\"python\", \"app.py\"]"
        },
        {
            "location": "./../../dockers/CVE-2018-16509/custom_no_tool/app/app.py",
            "content": "from flask import Flask, request, jsonify\nimport mysql.connector\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    conn = mysql.connector.connect(\n        host='db',\n        user='root',\n        password='example',\n        database='vuln_db'\n    )\n    return conn\n\n@app.route('/')\ndef index():\n    return 'Vulnerable Flask app ready.'\n\n# Simple endpoint that is vulnerable to SQL injection; this is used for CVE\u20112018\u201116509 demonstration\n@app.route('/search')\ndef search():\n    query = request.args.get('q', '')\n    conn = get_db_connection()\n    cursor = conn.cursor()\n    # NOTE: intentionally vulnerable (SQL injection)\n    sql = \"SELECT id, username FROM users WHERE username LIKE '%\" + query + \"%'\"\n    cursor.execute(sql)\n    results = cursor.fetchall()\n    cursor.close()\n    conn.close()\n    return jsonify([{'id': r[0], 'username': r[1]} for r in results])\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
        },
        {
            "location": "./../../dockers/CVE-2018-16509/custom_no_tool/db/init.sql",
            "content": "CREATE TABLE IF NOT EXISTS users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\n\nINSERT INTO users (username, password) VALUES\n('alice', 'password1'),\n('bob', 'password2'),\n('charlie', 'password3');"
        }
    ],
    "directory_tree": "CVE-2018-16509/custom_no_tool"
}