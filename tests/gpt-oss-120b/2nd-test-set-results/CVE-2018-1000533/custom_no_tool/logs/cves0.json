{
  "version": "15.0.6",
  "vulnerabilities": [
    {
      "id": "7a4aa5d74115027a9a7782c778526e00957f885654f111b4d663390d96a09ec9",
      "category": "container_scanning",
      "message": "CVE-2024-51744 on github.com/golang-jwt/jwt@4.4.2",
      "description": "### Summary\n\nUnclear documentation of the error behavior in `ParseWithClaims` can lead to situation where users are potentially not checking errors in the way they should be. Especially, if a token is both expired and invalid, the errors returned by `ParseWithClaims` return both error codes. If users only check for the `jwt.ErrTokenExpired ` using `error.Is`, they will ignore the embedded `jwt.ErrTokenSignatureInvalid` and thus potentially accept invalid tokens.\n\n### Fix\n\nWe have back-ported the error handling logic from the `v5` branch to the `v4` branch. In this logic, the `ParseWithClaims` function will immediately return in \"dangerous\" situations (e.g., an invalid signature), limiting the combined errors only to situations where the signature is valid, but further validation failed (e.g., if the signature is valid, but is expired AND has the wrong audience). This fix is part of the 4.5.1 release.\n\n### Workaround \n\nWe are aware that this changes the behaviour of an established function and is not 100 % backwards compatible, so updating to 4.5.1 might break your code. In case you cannot update to 4.5.0, please make sure that you are properly checking for all errors (\"dangerous\" ones first), so that you are not running in the case detailed above.\n\n```Go\ntoken, err := /* jwt.Parse or similar */\nif token.Valid {\n\tfmt.Println(\"You look nice today\")\n} else if errors.Is(err, jwt.ErrTokenMalformed) {\n\tfmt.Println(\"That's not even a token\")\n} else if errors.Is(err, jwt.ErrTokenUnverifiable) {\n\tfmt.Println(\"We could not verify this token\")\n} else if errors.Is(err, jwt.ErrTokenSignatureInvalid) {\n\tfmt.Println(\"This token has an invalid signature\")\n} else if errors.Is(err, jwt.ErrTokenExpired) || errors.Is(err, jwt.ErrTokenNotValidYet) {\n\t// Token is either expired or not active yet\n\tfmt.Println(\"Timing is everything\")\n} else {\n\tfmt.Println(\"Couldn't handle this token:\", err)\n}\n```",
      "cve": "CVE-2024-51744",
      "severity": "Low",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/golang-jwt/jwt@4.4.2 to 4.5.1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/golang-jwt/jwt@4.4.2#v4"
          },
          "version": "4.4.2"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-51744",
          "value": "CVE-2024-51744",
          "url": "https://scout.docker.com/v/CVE-2024-51744?s=github&n=v4&ns=github.com%2Fgolang-jwt%2Fjwt&t=golang&vr=%3C4.5.1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-51744?s=github&n=v4&ns=github.com%2Fgolang-jwt%2Fjwt&t=golang&vr=%3C4.5.1"
        }
      ]
    },
    {
      "id": "a8a9d499a9f104063cf0d1c523d09224e9b9a3849cfbf368cbb85fe1c8f555b2",
      "category": "container_scanning",
      "message": "CVE-2023-25809 on github.com/opencontainers/runc@1.1.3",
      "description": "### Impact\nIt was found that rootless runc makes `/sys/fs/cgroup` writable in following conditons:\n1. when runc is executed inside the user namespace, and the `config.json` does not specify the cgroup namespace to be unshared (e.g.., `(docker|podman|nerdctl) run --cgroupns=host`, with Rootless Docker/Podman/nerdctl)\n2. or, when runc is executed outside the user namespace, and `/sys` is mounted with `rbind, ro` (e.g., `runc spec --rootless`; this condition is very rare)\n\nA container may gain the write access to user-owned cgroup hierarchy `/sys/fs/cgroup/user.slice/...` on the host .\nOther users's cgroup hierarchies are not affected.\n\n### Patches\nv1.1.5 (planned)\n\n### Workarounds\n- Condition 1: Unshare the cgroup namespace (`(docker|podman|nerdctl) run --cgroupns=private)`. This is the default behavior of Docker/Podman/nerdctl on cgroup v2 hosts.\n- Condition 2 (very rare): add `/sys/fs/cgroup` to `maskedPaths`\n",
      "cve": "CVE-2023-25809",
      "severity": "Low",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/opencontainers/runc@1.1.3 to 1.1.5",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/opencontainers/runc@1.1.3"
          },
          "version": "1.1.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-25809",
          "value": "CVE-2023-25809",
          "url": "https://scout.docker.com/v/CVE-2023-25809?s=github&n=runc&ns=github.com%2Fopencontainers&t=golang&vr=%3C1.1.5"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-25809?s=github&n=runc&ns=github.com%2Fopencontainers&t=golang&vr=%3C1.1.5"
        }
      ]
    },
    {
      "id": "5b638fde57773bcc23863d4d96f5c82b3f4a5c911e28b3be4bdb403df64870bb",
      "category": "container_scanning",
      "message": "CVE-2023-29383 on alpine/shadow@4.13-r2",
      "cve": "CVE-2023-29383",
      "severity": "Low",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/shadow@4.13-r2 to 4.13-r3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/shadow@4.13-r2?os_name=alpine&os_version=3.18"
          },
          "version": "4.13-r2"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-29383",
          "value": "CVE-2023-29383",
          "url": "https://scout.docker.com/v/CVE-2023-29383?s=alpine&n=shadow&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C4.13-r3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-29383?s=alpine&n=shadow&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C4.13-r3"
        }
      ]
    },
    {
      "id": "6b900e071f047631f059a675033b76563aa6f9b45da0d3414d7375877f0c57c5",
      "category": "container_scanning",
      "message": "CVE-2025-54410 on github.com/docker/docker@23.0.0-rc.1+incompatible",
      "description": "Moby is an open source container framework developed by Docker Inc. that is distributed as Docker Engine, Mirantis Container Runtime, and various other downstream projects/products. The Moby daemon component (dockerd), which is developed as [moby/moby](https://github.com/moby/moby) is commonly referred to as Docker, or Docker Engine.\n\nFirewalld is a daemon used by some Linux distributions to provide a dynamically managed firewall. When Firewalld is running, Docker uses its iptables backend to create rules, including rules to isolate containers in one bridge network from containers in other bridge networks.\n\n### Impact\n\nThe iptables rules created by Docker are removed when firewalld is reloaded using, for example \"firewall-cmd --reload\", \"killall -HUP firewalld\", or \"systemctl reload firewalld\".\n\nWhen that happens, Docker must re-create the rules. However, in affected versions of Docker, the iptables rules that isolate containers in different bridge networks from each other are not re-created.\n\nOnce these rules have been removed, containers have access to any port, on any container, in any non-internal bridge network, running on the Docker host.\n\nContainers running in networks created with `--internal` or equivalent have no access to other networks. Containers that are only connected to these networks remain isolated after a firewalld reload.\n\nWhere Docker Engine is not running in the host's network namespace, it is unaffected. Including, for example, Rootless Mode, and Docker Desktop.\n\n### Patches\n\nMoby releases 28.0.0 and newer are not affected. A fix is available in moby release 25.0.13.\n\n### Workarounds\nAfter reloading firewalld, either:\n- Restart the docker daemon,\n- Re-create bridge networks, or\n- Use rootless mode.\n\n### References\nhttps://firewalld.org/\nhttps://firewalld.org/documentation/howto/reload-firewalld.html",
      "cve": "CVE-2025-54410",
      "severity": "Low",
      "confidence": "Unknown",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/docker/docker@23.0.0-rc.1%2Bincompatible"
          },
          "version": "23.0.0-rc.1+incompatible"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-54410",
          "value": "CVE-2025-54410",
          "url": "https://scout.docker.com/v/CVE-2025-54410?s=github&n=docker&ns=github.com%2Fdocker&t=golang&vr=%3C%3D25.0.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-54410?s=github&n=docker&ns=github.com%2Fdocker&t=golang&vr=%3C%3D25.0.12"
        }
      ]
    },
    {
      "id": "3a2d050199df01b568bf6013245c78aff6d9c1a8a04b2bd7dda71e65aecfb1fc",
      "category": "container_scanning",
      "message": "CVE-2025-54410 on github.com/docker/docker@23.0.4+incompatible",
      "description": "Moby is an open source container framework developed by Docker Inc. that is distributed as Docker Engine, Mirantis Container Runtime, and various other downstream projects/products. The Moby daemon component (dockerd), which is developed as [moby/moby](https://github.com/moby/moby) is commonly referred to as Docker, or Docker Engine.\n\nFirewalld is a daemon used by some Linux distributions to provide a dynamically managed firewall. When Firewalld is running, Docker uses its iptables backend to create rules, including rules to isolate containers in one bridge network from containers in other bridge networks.\n\n### Impact\n\nThe iptables rules created by Docker are removed when firewalld is reloaded using, for example \"firewall-cmd --reload\", \"killall -HUP firewalld\", or \"systemctl reload firewalld\".\n\nWhen that happens, Docker must re-create the rules. However, in affected versions of Docker, the iptables rules that isolate containers in different bridge networks from each other are not re-created.\n\nOnce these rules have been removed, containers have access to any port, on any container, in any non-internal bridge network, running on the Docker host.\n\nContainers running in networks created with `--internal` or equivalent have no access to other networks. Containers that are only connected to these networks remain isolated after a firewalld reload.\n\nWhere Docker Engine is not running in the host's network namespace, it is unaffected. Including, for example, Rootless Mode, and Docker Desktop.\n\n### Patches\n\nMoby releases 28.0.0 and newer are not affected. A fix is available in moby release 25.0.13.\n\n### Workarounds\nAfter reloading firewalld, either:\n- Restart the docker daemon,\n- Re-create bridge networks, or\n- Use rootless mode.\n\n### References\nhttps://firewalld.org/\nhttps://firewalld.org/documentation/howto/reload-firewalld.html",
      "cve": "CVE-2025-54410",
      "severity": "Low",
      "confidence": "Unknown",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/docker/docker@23.0.4%2Bincompatible"
          },
          "version": "23.0.4+incompatible"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-54410",
          "value": "CVE-2025-54410",
          "url": "https://scout.docker.com/v/CVE-2025-54410?s=github&n=docker&ns=github.com%2Fdocker&t=golang&vr=%3C%3D25.0.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-54410?s=github&n=docker&ns=github.com%2Fdocker&t=golang&vr=%3C%3D25.0.12"
        }
      ]
    },
    {
      "id": "3171ebe794457ce83c10986fc6492d26d172070f72cc312da6d31d7d46c7654d",
      "category": "container_scanning",
      "message": "CVE-2025-58183 on stdlib@1.19.6",
      "description": "tar.Reader does not set a maximum size on the number of sparse region data blocks in GNU tar pax 1.0 sparse files. A maliciously-crafted archive containing a large number of sparse regions can cause a Reader to read an unbounded amount of data from the archive into memory. When reading from a compressed source, a small compressed input can result in large allocations.",
      "cve": "CVE-2025-58183",
      "severity": "Low",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.24.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-58183",
          "value": "CVE-2025-58183",
          "url": "https://scout.docker.com/v/CVE-2025-58183?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-58183?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ]
    },
    {
      "id": "9e56824869ab513cc0b60bb33ea9fe9e76a3de0e87daa68fcb082764348be9ef",
      "category": "container_scanning",
      "message": "CVE-2025-58183 on stdlib@1.20.3",
      "description": "tar.Reader does not set a maximum size on the number of sparse region data blocks in GNU tar pax 1.0 sparse files. A maliciously-crafted archive containing a large number of sparse regions can cause a Reader to read an unbounded amount of data from the archive into memory. When reading from a compressed source, a small compressed input can result in large allocations.",
      "cve": "CVE-2025-58183",
      "severity": "Low",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.24.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-58183",
          "value": "CVE-2025-58183",
          "url": "https://scout.docker.com/v/CVE-2025-58183?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-58183?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ]
    },
    {
      "id": "3a21f1b2c1e53b5c5850efd112a70d204812d01ad8e2063b29601e3acced418f",
      "category": "container_scanning",
      "message": "CVE-2025-58183 on stdlib@1.19.7",
      "description": "tar.Reader does not set a maximum size on the number of sparse region data blocks in GNU tar pax 1.0 sparse files. A maliciously-crafted archive containing a large number of sparse regions can cause a Reader to read an unbounded amount of data from the archive into memory. When reading from a compressed source, a small compressed input can result in large allocations.",
      "cve": "CVE-2025-58183",
      "severity": "Low",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.24.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-58183",
          "value": "CVE-2025-58183",
          "url": "https://scout.docker.com/v/CVE-2025-58183?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-58183?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ]
    },
    {
      "id": "5bfc9fabb613d1153930e6b147112413f05be1f2896f880f9c02da1f54c80f5c",
      "category": "container_scanning",
      "message": "GHSA-7ww5-4wqc-m92c on github.com/containerd/containerd@1.6.16-0.20230124210447-1709cfe273d9",
      "description": "# /sys/devices/virtual/powercap accessible by default to containers\n\nIntel's RAPL (Running Average Power Limit) feature, introduced by the Sandy Bridge microarchitecture, provides software insights into hardware energy consumption. To facilitate this, Intel introduced the powercap framework in Linux kernel 3.13, which reads values via relevant MSRs (model specific registers) and provides unprivileged userspace access via `sysfs`. As RAPL is an interface to access a hardware feature, it is only available when running on bare metal with the module compiled into the kernel.\n\nBy 2019, it was realized that in some cases unprivileged access to RAPL readings could be exploited as a power-based side-channel against security features including AES-NI (potentially inside a SGX enclave) and KASLR (kernel address space layout randomization). Also known as the [PLATYPUS attack](https://platypusattack.com/), Intel assigned [CVE-2020-8694](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8694) and [CVE-2020-8695](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8695), and AMD assigned [CVE-2020-12912](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-12912).\n\nSeveral mitigations were applied; Intel reduced the sampling resolution via a microcode update, and the Linux kernel [prevents access by non-root users](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=949dd0104c496fa7c14991a23c03c62e44637e71) since 5.10. However, this kernel-based mitigation does not apply to many container-based scenarios:\n* Unless using user namespaces, root inside a container has the same level of privilege as root outside the container, but with a slightly more narrow view of the system\n* `sysfs` is mounted inside containers read-only; however only read access is needed to carry out this attack on an unpatched CPU\n\nWhile this is not a direct vulnerability in container runtimes, defense in depth and safe defaults are valuable and preferred, especially as this poses a risk to multi-tenant container environments. This is provided by masking `/sys/devices/virtual/powercap` in the default mount configuration, and adding an additional set of rules to deny it in the default AppArmor profile.\n\nWhile `sysfs` is not the only way to read from the RAPL subsystem, other ways of accessing it require additional capabilities such as `CAP_SYS_RAWIO` which is not available to containers by default, or `perf` paranoia level less than 1, which is a non-default kernel tunable.\n\n## References\n\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8694\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8695\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-12912\n* https://platypusattack.com/\n* https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=949dd0104c496fa7c14991a23c03c62e44637e71\n* https://web.eece.maine.edu/~vweaver/projects/rapl/",
      "cve": "GHSA-7ww5-4wqc-m92c",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/containerd/containerd@1.6.16-0.20230124210447-1709cfe273d9 to 1.6.26",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/containerd/containerd@1.6.16-0.20230124210447-1709cfe273d9"
          },
          "version": "1.6.16-0.20230124210447-1709cfe273d9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "GHSA-7ww5-4wqc-m92c",
          "value": "GHSA-7ww5-4wqc-m92c",
          "url": "https://scout.docker.com/v/GHSA-7ww5-4wqc-m92c?s=github&n=containerd&ns=github.com%2Fcontainerd&t=golang&vr=%3C%3D1.6.25"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/GHSA-7ww5-4wqc-m92c?s=github&n=containerd&ns=github.com%2Fcontainerd&t=golang&vr=%3C%3D1.6.25"
        }
      ]
    },
    {
      "id": "7285d7383869c8bbfe6fb70095c16fb12696dd40ac3863bb7d07dcad5d0b2979",
      "category": "container_scanning",
      "message": "GHSA-7ww5-4wqc-m92c on github.com/containerd/containerd@1.6.19",
      "description": "# /sys/devices/virtual/powercap accessible by default to containers\n\nIntel's RAPL (Running Average Power Limit) feature, introduced by the Sandy Bridge microarchitecture, provides software insights into hardware energy consumption. To facilitate this, Intel introduced the powercap framework in Linux kernel 3.13, which reads values via relevant MSRs (model specific registers) and provides unprivileged userspace access via `sysfs`. As RAPL is an interface to access a hardware feature, it is only available when running on bare metal with the module compiled into the kernel.\n\nBy 2019, it was realized that in some cases unprivileged access to RAPL readings could be exploited as a power-based side-channel against security features including AES-NI (potentially inside a SGX enclave) and KASLR (kernel address space layout randomization). Also known as the [PLATYPUS attack](https://platypusattack.com/), Intel assigned [CVE-2020-8694](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8694) and [CVE-2020-8695](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8695), and AMD assigned [CVE-2020-12912](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-12912).\n\nSeveral mitigations were applied; Intel reduced the sampling resolution via a microcode update, and the Linux kernel [prevents access by non-root users](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=949dd0104c496fa7c14991a23c03c62e44637e71) since 5.10. However, this kernel-based mitigation does not apply to many container-based scenarios:\n* Unless using user namespaces, root inside a container has the same level of privilege as root outside the container, but with a slightly more narrow view of the system\n* `sysfs` is mounted inside containers read-only; however only read access is needed to carry out this attack on an unpatched CPU\n\nWhile this is not a direct vulnerability in container runtimes, defense in depth and safe defaults are valuable and preferred, especially as this poses a risk to multi-tenant container environments. This is provided by masking `/sys/devices/virtual/powercap` in the default mount configuration, and adding an additional set of rules to deny it in the default AppArmor profile.\n\nWhile `sysfs` is not the only way to read from the RAPL subsystem, other ways of accessing it require additional capabilities such as `CAP_SYS_RAWIO` which is not available to containers by default, or `perf` paranoia level less than 1, which is a non-default kernel tunable.\n\n## References\n\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8694\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8695\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-12912\n* https://platypusattack.com/\n* https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=949dd0104c496fa7c14991a23c03c62e44637e71\n* https://web.eece.maine.edu/~vweaver/projects/rapl/",
      "cve": "GHSA-7ww5-4wqc-m92c",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/containerd/containerd@1.6.19 to 1.6.26",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/containerd/containerd@1.6.19"
          },
          "version": "1.6.19"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "GHSA-7ww5-4wqc-m92c",
          "value": "GHSA-7ww5-4wqc-m92c",
          "url": "https://scout.docker.com/v/GHSA-7ww5-4wqc-m92c?s=github&n=containerd&ns=github.com%2Fcontainerd&t=golang&vr=%3C%3D1.6.25"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/GHSA-7ww5-4wqc-m92c?s=github&n=containerd&ns=github.com%2Fcontainerd&t=golang&vr=%3C%3D1.6.25"
        }
      ]
    },
    {
      "id": "3825edc7237df5fb54b48cf6ec7af2598395bf9299660eca2f66323cc1d86b38",
      "category": "container_scanning",
      "message": "GHSA-jq35-85cj-fj4p on github.com/docker/docker@23.0.4+incompatible",
      "description": "Intel's RAPL (Running Average Power Limit) feature, introduced by the Sandy Bridge microarchitecture, provides software insights into hardware energy consumption. To facilitate this, Intel introduced the powercap framework in Linux kernel 3.13, which reads values via relevant MSRs (model specific registers) and provides unprivileged userspace access via `sysfs`. As RAPL is an interface to access a hardware feature, it is only available when running on bare metal with the module compiled into the kernel.\n\nBy 2019, it was realized that in some cases unprivileged access to RAPL readings could be exploited as a power-based side-channel against security features including AES-NI (potentially inside a SGX enclave) and KASLR (kernel address space layout randomization). Also known as the [PLATYPUS attack](https://platypusattack.com/), Intel assigned [CVE-2020-8694](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8694) and [CVE-2020-8695](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8695), and AMD assigned [CVE-2020-12912](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-12912).\n\nSeveral mitigations were applied; Intel reduced the sampling resolution via a microcode update, and the Linux kernel [prevents access by non-root users](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=949dd0104c496fa7c14991a23c03c62e44637e71) since 5.10. However, this kernel-based mitigation does not apply to many container-based scenarios:\n* Unless using user namespaces, root inside a container has the same level of privilege as root outside the container, but with a slightly more narrow view of the system\n* `sysfs` is mounted inside containers read-only; however only read access is needed to carry out this attack on an unpatched CPU\n\nWhile this is not a direct vulnerability in container runtimes, defense in depth and safe defaults are valuable and preferred, especially as this poses a risk to multi-tenant container environments running directly on affected hardware. This is provided by masking `/sys/devices/virtual/powercap` in the default mount configuration, and adding an additional set of rules to deny it in the default AppArmor profile.\n\nWhile `sysfs` is not the only way to read from the RAPL subsystem, other ways of accessing it require additional capabilities such as `CAP_SYS_RAWIO` which is not available to containers by default, or `perf` paranoia level less than 1, which is a non-default kernel tunable.\n\n## References\n\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8694\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8695\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-12912\n* https://platypusattack.com/\n* https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=949dd0104c496fa7c14991a23c03c62e44637e71\n* https://web.eece.maine.edu/~vweaver/projects/rapl/",
      "cve": "GHSA-jq35-85cj-fj4p",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/docker/docker@23.0.4+incompatible to 23.0.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/docker/docker@23.0.4%2Bincompatible"
          },
          "version": "23.0.4+incompatible"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "GHSA-jq35-85cj-fj4p",
          "value": "GHSA-jq35-85cj-fj4p",
          "url": "https://scout.docker.com/v/GHSA-jq35-85cj-fj4p?s=github&n=docker&ns=github.com%2Fdocker&t=golang&vr=%3E%3D21.0.0%2C%3C23.0.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/GHSA-jq35-85cj-fj4p?s=github&n=docker&ns=github.com%2Fdocker&t=golang&vr=%3E%3D21.0.0%2C%3C23.0.8"
        }
      ]
    },
    {
      "id": "08fe8a0ff2c053de45cc77f7a533186b1330fe5f6837c346a0d347734867bb6a",
      "category": "container_scanning",
      "message": "CVE-2023-6992 on alpine/zlib@1.2.13-r1",
      "cve": "CVE-2023-6992",
      "severity": "Medium",
      "confidence": "Unknown",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/zlib@1.2.13-r1?os_name=alpine&os_version=3.18"
          },
          "version": "1.2.13-r1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-6992",
          "value": "CVE-2023-6992",
          "url": "https://scout.docker.com/v/CVE-2023-6992?s=alpine&n=zlib&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C%3D1.2.13-r1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-6992?s=alpine&n=zlib&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C%3D1.2.13-r1"
        }
      ]
    },
    {
      "id": "715dd1b7483c4ee41e379f966bf059564da018458065bf39097dd1ff8e2e1fbe",
      "category": "container_scanning",
      "message": "CVE-2025-22866 on stdlib@1.20.3",
      "description": "Due to the usage of a variable time instruction in the assembly implementation of an internal function, a small number of bits of secret scalars are leaked on the ppc64le architecture. Due to the way this function is used, we do not believe this leakage is enough to allow recovery of the private key when P-256 is used in any well known protocols.",
      "cve": "CVE-2025-22866",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.22.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-22866",
          "value": "CVE-2025-22866",
          "url": "https://scout.docker.com/v/CVE-2025-22866?s=golang&n=stdlib&t=golang&vr=%3C1.22.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-22866?s=golang&n=stdlib&t=golang&vr=%3C1.22.12"
        }
      ]
    },
    {
      "id": "745282db3a3e2c10f8e92b095cfcc8929b863ba5efd1f1f3dbdd7b3c2642264c",
      "category": "container_scanning",
      "message": "CVE-2025-22866 on stdlib@1.19.6",
      "description": "Due to the usage of a variable time instruction in the assembly implementation of an internal function, a small number of bits of secret scalars are leaked on the ppc64le architecture. Due to the way this function is used, we do not believe this leakage is enough to allow recovery of the private key when P-256 is used in any well known protocols.",
      "cve": "CVE-2025-22866",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.22.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-22866",
          "value": "CVE-2025-22866",
          "url": "https://scout.docker.com/v/CVE-2025-22866?s=golang&n=stdlib&t=golang&vr=%3C1.22.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-22866?s=golang&n=stdlib&t=golang&vr=%3C1.22.12"
        }
      ]
    },
    {
      "id": "cabf6505e2e7b3d09341a8acff00da75a4128b262be1cbf33f3e862e38de83b9",
      "category": "container_scanning",
      "message": "CVE-2025-22866 on stdlib@1.19.7",
      "description": "Due to the usage of a variable time instruction in the assembly implementation of an internal function, a small number of bits of secret scalars are leaked on the ppc64le architecture. Due to the way this function is used, we do not believe this leakage is enough to allow recovery of the private key when P-256 is used in any well known protocols.",
      "cve": "CVE-2025-22866",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.22.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-22866",
          "value": "CVE-2025-22866",
          "url": "https://scout.docker.com/v/CVE-2025-22866?s=golang&n=stdlib&t=golang&vr=%3C1.22.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-22866?s=golang&n=stdlib&t=golang&vr=%3C1.22.12"
        }
      ]
    },
    {
      "id": "ff71a001c911fa450612cf3afade5c8208fb8ba65e3b01736c78d0e923634fe7",
      "category": "container_scanning",
      "message": "CVE-2024-13176 on alpine/openssl@3.1.0-r4",
      "cve": "CVE-2024-13176",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@3.1.0-r4 to 3.1.8-r0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@3.1.0-r4?os_name=alpine&os_version=3.18"
          },
          "version": "3.1.0-r4"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-13176",
          "value": "CVE-2024-13176",
          "url": "https://scout.docker.com/v/CVE-2024-13176?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.8-r0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-13176?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.8-r0"
        }
      ]
    },
    {
      "id": "ddd30d7ad09031306f863b1b741ac96b5d34106c4929ed8b2b4788c6d43f4bcc",
      "category": "container_scanning",
      "message": "CVE-2025-0495 on github.com/docker/buildx@0.10.4",
      "description": "### Impact\nSome cache backends allow configuring their credentials by setting secrets directly as attribute values in `cache-to/cache-from` configuration. If this was done by the user, these secure values could be captured together with OpenTelemetry trace as part of the arguments and flags for the traced CLI command. Passing tokens to Github cache backend via environment variables or using registry authentication is not affected.\n\nIf you passed a token value like this and use a custom OpenTelemetry collector for computing traces you should make sure that your traces are kept secure. OpenTelemetry traces are also saved in BuildKit daemon's history records.\n\n### Patches\nIssue has been fixed in Buildx v0.21.3 or newer.\n\n### Workarounds\nAvoid passing cache backend credentials with CLI arguments. Make sure access to traces and BuildKit history records is kept secure.",
      "cve": "CVE-2025-0495",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/docker/buildx@0.10.4 to 0.21.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/docker/buildx@0.10.4"
          },
          "version": "0.10.4"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-0495",
          "value": "CVE-2025-0495",
          "url": "https://scout.docker.com/v/CVE-2025-0495?s=github&n=buildx&ns=github.com%2Fdocker&t=golang&vr=%3C%3D0.21.2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-0495?s=github&n=buildx&ns=github.com%2Fdocker&t=golang&vr=%3C%3D0.21.2"
        }
      ]
    },
    {
      "id": "f751d6b077b806fa286783a39d352401d1db869b0a25b67f33249e7bf846902f",
      "category": "container_scanning",
      "message": "CVE-2023-45289 on stdlib@1.19.6",
      "description": "When following an HTTP redirect to a domain which is not a subdomain match or exact match of the initial domain, an http.Client does not forward sensitive headers such as \"Authorization\" or \"Cookie\". For example, a redirect from foo.com to www.foo.com will forward the Authorization header, but a redirect to bar.com will not.\n\nA maliciously crafted HTTP redirect could cause sensitive headers to be unexpectedly forwarded.",
      "cve": "CVE-2023-45289",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.21.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45289",
          "value": "CVE-2023-45289",
          "url": "https://scout.docker.com/v/CVE-2023-45289?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45289?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ]
    },
    {
      "id": "c4a213a16df68fb2ccca53c31c858945254f7222a4cbd4d680041fa253478af9",
      "category": "container_scanning",
      "message": "CVE-2023-45289 on stdlib@1.20.3",
      "description": "When following an HTTP redirect to a domain which is not a subdomain match or exact match of the initial domain, an http.Client does not forward sensitive headers such as \"Authorization\" or \"Cookie\". For example, a redirect from foo.com to www.foo.com will forward the Authorization header, but a redirect to bar.com will not.\n\nA maliciously crafted HTTP redirect could cause sensitive headers to be unexpectedly forwarded.",
      "cve": "CVE-2023-45289",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.21.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45289",
          "value": "CVE-2023-45289",
          "url": "https://scout.docker.com/v/CVE-2023-45289?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45289?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ]
    },
    {
      "id": "285bcb8bf1e7013e01d2d4bbfcbf5ac800fb6c1f4cc3cba49705593c29da5ba0",
      "category": "container_scanning",
      "message": "CVE-2023-45289 on stdlib@1.19.7",
      "description": "When following an HTTP redirect to a domain which is not a subdomain match or exact match of the initial domain, an http.Client does not forward sensitive headers such as \"Authorization\" or \"Cookie\". For example, a redirect from foo.com to www.foo.com will forward the Authorization header, but a redirect to bar.com will not.\n\nA maliciously crafted HTTP redirect could cause sensitive headers to be unexpectedly forwarded.",
      "cve": "CVE-2023-45289",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.21.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45289",
          "value": "CVE-2023-45289",
          "url": "https://scout.docker.com/v/CVE-2023-45289?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45289?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ]
    },
    {
      "id": "bf10480061d7e0a68c32658e0f1cc91e832af780531f16a6d909d7aea40d0d53",
      "category": "container_scanning",
      "message": "CVE-2024-34155 on stdlib@1.20.3",
      "description": "Calling any of the Parse functions on Go source code which contains deeply nested literals can cause a panic due to stack exhaustion.",
      "cve": "CVE-2024-34155",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.22.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-34155",
          "value": "CVE-2024-34155",
          "url": "https://scout.docker.com/v/CVE-2024-34155?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-34155?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ]
    },
    {
      "id": "f5865e7d59bb63b8afca2188241790ef52043dbff5982ef709f67e445600a817",
      "category": "container_scanning",
      "message": "CVE-2024-34155 on stdlib@1.19.6",
      "description": "Calling any of the Parse functions on Go source code which contains deeply nested literals can cause a panic due to stack exhaustion.",
      "cve": "CVE-2024-34155",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.22.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-34155",
          "value": "CVE-2024-34155",
          "url": "https://scout.docker.com/v/CVE-2024-34155?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-34155?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ]
    },
    {
      "id": "9ff43676341505d401d3e0ad9bfbdfff97565626d1487293f521ea470b872a4b",
      "category": "container_scanning",
      "message": "CVE-2024-34155 on stdlib@1.19.7",
      "description": "Calling any of the Parse functions on Go source code which contains deeply nested literals can cause a panic due to stack exhaustion.",
      "cve": "CVE-2024-34155",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.22.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-34155",
          "value": "CVE-2024-34155",
          "url": "https://scout.docker.com/v/CVE-2024-34155?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-34155?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ]
    },
    {
      "id": "8858ba7902d913d087e23598c7e55183419dffe91c46764d81dd86e77bfa4f06",
      "category": "container_scanning",
      "message": "CVE-2024-9143 on alpine/openssl@3.1.0-r4",
      "cve": "CVE-2024-9143",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@3.1.0-r4 to 3.1.7-r1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@3.1.0-r4?os_name=alpine&os_version=3.18"
          },
          "version": "3.1.0-r4"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-9143",
          "value": "CVE-2024-9143",
          "url": "https://scout.docker.com/v/CVE-2024-9143?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.7-r1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-9143?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.7-r1"
        }
      ]
    },
    {
      "id": "1924b09980e4cc16779ffec023757cb20c639bb91cf93c7a319886917da53612",
      "category": "container_scanning",
      "message": "CVE-2025-22870 on golang.org/x/net@0.4.0",
      "description": "Matching of hosts against proxy patterns can improperly treat an IPv6 zone ID as a hostname component. For example, when the NO_PROXY environment variable is set to \"*.example.com\", a request to \"[::1%25.example.com]:80` will incorrectly match and not be proxied.",
      "cve": "CVE-2025-22870",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/net@0.4.0 to 0.36.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/net@0.4.0"
          },
          "version": "0.4.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-22870",
          "value": "CVE-2025-22870",
          "url": "https://scout.docker.com/v/CVE-2025-22870?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.36.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-22870?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.36.0"
        }
      ]
    },
    {
      "id": "954a55ed81b106957a5daeaa997e64fa50bf71a2c3415e104cffe145ea7d11dc",
      "category": "container_scanning",
      "message": "CVE-2025-22870 on golang.org/x/net@0.7.0",
      "description": "Matching of hosts against proxy patterns can improperly treat an IPv6 zone ID as a hostname component. For example, when the NO_PROXY environment variable is set to \"*.example.com\", a request to \"[::1%25.example.com]:80` will incorrectly match and not be proxied.",
      "cve": "CVE-2025-22870",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/net@0.7.0 to 0.36.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/net@0.7.0"
          },
          "version": "0.7.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-22870",
          "value": "CVE-2025-22870",
          "url": "https://scout.docker.com/v/CVE-2025-22870?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.36.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-22870?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.36.0"
        }
      ]
    },
    {
      "id": "c4e5fe161ba7f30cad2c844280094eb954b4661de11535c5aecf6043a0800fab",
      "category": "container_scanning",
      "message": "CVE-2024-40635 on github.com/containerd/containerd@1.6.19",
      "description": "### Impact\nA bug was found in containerd where containers launched with a User set as a `UID:GID` larger than the maximum 32-bit signed integer can cause an overflow condition where the container ultimately runs as root (UID 0). This could cause unexpected behavior for environments that require containers to run as a non-root user.\n\n### Patches\nThis bug has been fixed in the following containerd versions: \n\n* 2.0.4 (Fixed in https://github.com/containerd/containerd/commit/1a43cb6a1035441f9aca8f5666a9b3ef9e70ab20)\n* 1.7.27 (Fixed in https://github.com/containerd/containerd/commit/05044ec0a9a75232cad458027ca83437aae3f4da)\n* 1.6.38 (Fixed in https://github.com/containerd/containerd/commit/cf158e884cfe4812a6c371b59e4ea9bc4c46e51a)\n\nUsers should update to these versions to resolve the issue.\n\n### Workarounds\nEnsure that only trusted images are used and that only trusted users have permissions to import images.\n\n### Credits\nThe containerd project would like to thank [Benjamin Koltermann](https://github.com/p4ck3t0) and [emxll](https://github.com/emxll) for responsibly disclosing this issue in accordance with the [containerd security policy](https://github.com/containerd/project/blob/main/SECURITY.md).\n\n### References\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-40635\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [containerd](https://github.com/containerd/containerd/issues/new/choose)\n* Email us at [security@containerd.io](mailto:security@containerd.io)\n\nTo report a security issue in containerd:\n* [Report a new vulnerability](https://github.com/containerd/containerd/security/advisories/new)\n* Email us at [security@containerd.io](mailto:security@containerd.io)",
      "cve": "CVE-2024-40635",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/containerd/containerd@1.6.19 to 1.6.38",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/containerd/containerd@1.6.19"
          },
          "version": "1.6.19"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-40635",
          "value": "CVE-2024-40635",
          "url": "https://scout.docker.com/v/CVE-2024-40635?s=github&n=containerd&ns=github.com%2Fcontainerd&t=golang&vr=%3C1.6.38"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-40635?s=github&n=containerd&ns=github.com%2Fcontainerd&t=golang&vr=%3C1.6.38"
        }
      ]
    },
    {
      "id": "2b52489b832f919c8dd833992bcc98fb3ceb75c41404a0cad658f96b5479e7f7",
      "category": "container_scanning",
      "message": "CVE-2024-40635 on github.com/containerd/containerd@1.6.16-0.20230124210447-1709cfe273d9",
      "description": "### Impact\nA bug was found in containerd where containers launched with a User set as a `UID:GID` larger than the maximum 32-bit signed integer can cause an overflow condition where the container ultimately runs as root (UID 0). This could cause unexpected behavior for environments that require containers to run as a non-root user.\n\n### Patches\nThis bug has been fixed in the following containerd versions: \n\n* 2.0.4 (Fixed in https://github.com/containerd/containerd/commit/1a43cb6a1035441f9aca8f5666a9b3ef9e70ab20)\n* 1.7.27 (Fixed in https://github.com/containerd/containerd/commit/05044ec0a9a75232cad458027ca83437aae3f4da)\n* 1.6.38 (Fixed in https://github.com/containerd/containerd/commit/cf158e884cfe4812a6c371b59e4ea9bc4c46e51a)\n\nUsers should update to these versions to resolve the issue.\n\n### Workarounds\nEnsure that only trusted images are used and that only trusted users have permissions to import images.\n\n### Credits\nThe containerd project would like to thank [Benjamin Koltermann](https://github.com/p4ck3t0) and [emxll](https://github.com/emxll) for responsibly disclosing this issue in accordance with the [containerd security policy](https://github.com/containerd/project/blob/main/SECURITY.md).\n\n### References\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-40635\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [containerd](https://github.com/containerd/containerd/issues/new/choose)\n* Email us at [security@containerd.io](mailto:security@containerd.io)\n\nTo report a security issue in containerd:\n* [Report a new vulnerability](https://github.com/containerd/containerd/security/advisories/new)\n* Email us at [security@containerd.io](mailto:security@containerd.io)",
      "cve": "CVE-2024-40635",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/containerd/containerd@1.6.16-0.20230124210447-1709cfe273d9 to 1.6.38",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/containerd/containerd@1.6.16-0.20230124210447-1709cfe273d9"
          },
          "version": "1.6.16-0.20230124210447-1709cfe273d9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-40635",
          "value": "CVE-2024-40635",
          "url": "https://scout.docker.com/v/CVE-2024-40635?s=github&n=containerd&ns=github.com%2Fcontainerd&t=golang&vr=%3C1.6.38"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-40635?s=github&n=containerd&ns=github.com%2Fcontainerd&t=golang&vr=%3C1.6.38"
        }
      ]
    },
    {
      "id": "35e48d25f14fc8bb9d2fdd35ca94aff7ee0eab44a56622b4dad0ac722ae1c34f",
      "category": "container_scanning",
      "message": "CVE-2024-45310 on github.com/opencontainers/runc@1.1.3",
      "description": "### Impact\nrunc 1.1.13 and earlier as well as 1.2.0-rc2 and earlier can be tricked into\ncreating empty files or directories in arbitrary locations in the host\nfilesystem by sharing a volume between two containers and exploiting a race\nwith os.MkdirAll. While this can be used to create empty files, existing\nfiles **will not** be truncated.\n\nAn attacker must have the ability to start containers using some kind of custom\nvolume configuration. Containers using user namespaces are still affected, but\nthe scope of places an attacker can create inodes can be significantly reduced.\nSufficiently strict LSM policies (SELinux/Apparmor) can also in principle block\nthis attack -- we suspect the industry standard SELinux policy may restrict\nthis attack's scope but the exact scope of protection hasn't been analysed.\n\nThis is exploitable using runc directly as well as through Docker and\nKubernetes.\n\nThe CVSS score for this vulnerability is\nCVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:N/I:L/A:N (Low severity, 3.6).\n\n### Workarounds\nUsing user namespaces restricts this attack fairly significantly such that the\nattacker can only create inodes in directories that the remapped root\nuser/group has write access to. Unless the root user is remapped to an actual\nuser on the host (such as with rootless containers that don't use\n/etc/sub[ug]id), this in practice means that an attacker would only be able to\ncreate inodes in world-writable directories.\n\nA strict enough SELinux or AppArmor policy could in principle also restrict the\nscope if a specific label is applied to the runc runtime, though we haven't\nthoroughly tested to what extent the standard existing policies block this\nattack nor what exact policies are needed to sufficiently restrict this attack.\n\n### Patches\nFixed in runc v1.1.14 and v1.2.0-rc3.\n\n* `main` patches:\n  * https://github.com/opencontainers/runc/pull/4359\n  *  https://github.com/opencontainers/runc/commit/63c2908164f3a1daea455bf5bcd8d363d70328c7\n* `release-1.1` patches:\n  * https://github.com/opencontainers/runc/commit/8781993968fd964ac723ff5f360b6f259e809a3e\n  * https://github.com/opencontainers/runc/commit/f0b652ea61ff6750a8fcc69865d45a7abf37accf\n\n### Credits\nThanks to Rodrigo Campos Catelin (@rata) and Alban Crequy (@alban) from\nMicrosoft for discovering and reporting this vulnerability.",
      "cve": "CVE-2024-45310",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/opencontainers/runc@1.1.3 to 1.1.14",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/opencontainers/runc@1.1.3"
          },
          "version": "1.1.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-45310",
          "value": "CVE-2024-45310",
          "url": "https://scout.docker.com/v/CVE-2024-45310?s=github&n=runc&ns=github.com%2Fopencontainers&t=golang&vr=%3C1.1.14"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-45310?s=github&n=runc&ns=github.com%2Fopencontainers&t=golang&vr=%3C1.1.14"
        }
      ]
    },
    {
      "id": "f8dfe2019d71a0bc6327d30cb8b89db12cf4d9f7eb4d416517161bb66e2d9adb",
      "category": "container_scanning",
      "message": "CVE-2024-45310 on github.com/opencontainers/runc@1.1.5",
      "description": "### Impact\nrunc 1.1.13 and earlier as well as 1.2.0-rc2 and earlier can be tricked into\ncreating empty files or directories in arbitrary locations in the host\nfilesystem by sharing a volume between two containers and exploiting a race\nwith os.MkdirAll. While this can be used to create empty files, existing\nfiles **will not** be truncated.\n\nAn attacker must have the ability to start containers using some kind of custom\nvolume configuration. Containers using user namespaces are still affected, but\nthe scope of places an attacker can create inodes can be significantly reduced.\nSufficiently strict LSM policies (SELinux/Apparmor) can also in principle block\nthis attack -- we suspect the industry standard SELinux policy may restrict\nthis attack's scope but the exact scope of protection hasn't been analysed.\n\nThis is exploitable using runc directly as well as through Docker and\nKubernetes.\n\nThe CVSS score for this vulnerability is\nCVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:N/I:L/A:N (Low severity, 3.6).\n\n### Workarounds\nUsing user namespaces restricts this attack fairly significantly such that the\nattacker can only create inodes in directories that the remapped root\nuser/group has write access to. Unless the root user is remapped to an actual\nuser on the host (such as with rootless containers that don't use\n/etc/sub[ug]id), this in practice means that an attacker would only be able to\ncreate inodes in world-writable directories.\n\nA strict enough SELinux or AppArmor policy could in principle also restrict the\nscope if a specific label is applied to the runc runtime, though we haven't\nthoroughly tested to what extent the standard existing policies block this\nattack nor what exact policies are needed to sufficiently restrict this attack.\n\n### Patches\nFixed in runc v1.1.14 and v1.2.0-rc3.\n\n* `main` patches:\n  * https://github.com/opencontainers/runc/pull/4359\n  *  https://github.com/opencontainers/runc/commit/63c2908164f3a1daea455bf5bcd8d363d70328c7\n* `release-1.1` patches:\n  * https://github.com/opencontainers/runc/commit/8781993968fd964ac723ff5f360b6f259e809a3e\n  * https://github.com/opencontainers/runc/commit/f0b652ea61ff6750a8fcc69865d45a7abf37accf\n\n### Credits\nThanks to Rodrigo Campos Catelin (@rata) and Alban Crequy (@alban) from\nMicrosoft for discovering and reporting this vulnerability.",
      "cve": "CVE-2024-45310",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/opencontainers/runc@1.1.5 to 1.1.14",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/opencontainers/runc@1.1.5"
          },
          "version": "1.1.5"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-45310",
          "value": "CVE-2024-45310",
          "url": "https://scout.docker.com/v/CVE-2024-45310?s=github&n=runc&ns=github.com%2Fopencontainers&t=golang&vr=%3C1.1.14"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-45310?s=github&n=runc&ns=github.com%2Fopencontainers&t=golang&vr=%3C1.1.14"
        }
      ]
    },
    {
      "id": "50672e96b065ec34b87b2f3af9db2ceca1e5a46e3ddcb578219784f55983059e",
      "category": "container_scanning",
      "message": "CVE-2023-24532 on stdlib@1.19.6",
      "description": "The ScalarMult and ScalarBaseMult methods of the P256 Curve may return an incorrect result if called with some specific unreduced scalars (a scalar larger than the order of the curve).\n\nThis does not impact usages of crypto/ecdsa or crypto/ecdh.",
      "cve": "CVE-2023-24532",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.19.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-24532",
          "value": "CVE-2023-24532",
          "url": "https://scout.docker.com/v/CVE-2023-24532?s=golang&n=stdlib&t=golang&vr=%3C1.19.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-24532?s=golang&n=stdlib&t=golang&vr=%3C1.19.7"
        }
      ]
    },
    {
      "id": "f4942b19e4b04794b4e61b1d1db807b083faf9624adfcbad36cd72e4bb20e689",
      "category": "container_scanning",
      "message": "CVE-2023-29409 on stdlib@1.19.6",
      "description": "Extremely large RSA keys in certificate chains can cause a client/server to expend significant CPU time verifying signatures.\n\nWith fix, the size of RSA keys transmitted during handshakes is restricted to <= 8192 bits.\n\nBased on a survey of publicly trusted RSA keys, there are currently only three certificates in circulation with keys larger than this, and all three appear to be test certificates that are not actively deployed. It is possible there are larger keys in use in private PKIs, but we target the web PKI, so causing breakage here in the interests of increasing the default safety of users of crypto/tls seems reasonable.",
      "cve": "CVE-2023-29409",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.19.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-29409",
          "value": "CVE-2023-29409",
          "url": "https://scout.docker.com/v/CVE-2023-29409?s=golang&n=stdlib&t=golang&vr=%3C1.19.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-29409?s=golang&n=stdlib&t=golang&vr=%3C1.19.12"
        }
      ]
    },
    {
      "id": "3a43d9cb8f4af4f983448c9244a4a72711205bb20003f98bef67862227eabf9d",
      "category": "container_scanning",
      "message": "CVE-2023-29409 on stdlib@1.20.3",
      "description": "Extremely large RSA keys in certificate chains can cause a client/server to expend significant CPU time verifying signatures.\n\nWith fix, the size of RSA keys transmitted during handshakes is restricted to <= 8192 bits.\n\nBased on a survey of publicly trusted RSA keys, there are currently only three certificates in circulation with keys larger than this, and all three appear to be test certificates that are not actively deployed. It is possible there are larger keys in use in private PKIs, but we target the web PKI, so causing breakage here in the interests of increasing the default safety of users of crypto/tls seems reasonable.",
      "cve": "CVE-2023-29409",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.20.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-29409",
          "value": "CVE-2023-29409",
          "url": "https://scout.docker.com/v/CVE-2023-29409?s=golang&n=stdlib&t=golang&vr=%3E%3D1.20.0-0%2C%3C1.20.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-29409?s=golang&n=stdlib&t=golang&vr=%3E%3D1.20.0-0%2C%3C1.20.7"
        }
      ]
    },
    {
      "id": "951b1b5e1f9a994aa06c25a93c81359a11acd258bea09f1f1a03c6e647b6b486",
      "category": "container_scanning",
      "message": "CVE-2023-29409 on stdlib@1.19.7",
      "description": "Extremely large RSA keys in certificate chains can cause a client/server to expend significant CPU time verifying signatures.\n\nWith fix, the size of RSA keys transmitted during handshakes is restricted to <= 8192 bits.\n\nBased on a survey of publicly trusted RSA keys, there are currently only three certificates in circulation with keys larger than this, and all three appear to be test certificates that are not actively deployed. It is possible there are larger keys in use in private PKIs, but we target the web PKI, so causing breakage here in the interests of increasing the default safety of users of crypto/tls seems reasonable.",
      "cve": "CVE-2023-29409",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.19.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-29409",
          "value": "CVE-2023-29409",
          "url": "https://scout.docker.com/v/CVE-2023-29409?s=golang&n=stdlib&t=golang&vr=%3C1.19.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-29409?s=golang&n=stdlib&t=golang&vr=%3C1.19.12"
        }
      ]
    },
    {
      "id": "8de5b1f176cfe45735c859315e4cf04c63a85f0790902de170f205d4ec641763",
      "category": "container_scanning",
      "message": "CVE-2023-2975 on alpine/openssl@3.1.0-r4",
      "cve": "CVE-2023-2975",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@3.1.0-r4 to 3.1.1-r2",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@3.1.0-r4?os_name=alpine&os_version=3.18"
          },
          "version": "3.1.0-r4"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-2975",
          "value": "CVE-2023-2975",
          "url": "https://scout.docker.com/v/CVE-2023-2975?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.1-r2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-2975?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.1-r2"
        }
      ]
    },
    {
      "id": "f3959ec96a1c2da84735ce4106041eb46207133f5e30542f2086ab8dd773c97b",
      "category": "container_scanning",
      "message": "CVE-2023-3446 on alpine/openssl@3.1.0-r4",
      "cve": "CVE-2023-3446",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@3.1.0-r4 to 3.1.1-r3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@3.1.0-r4?os_name=alpine&os_version=3.18"
          },
          "version": "3.1.0-r4"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-3446",
          "value": "CVE-2023-3446",
          "url": "https://scout.docker.com/v/CVE-2023-3446?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.1-r3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-3446?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.1-r3"
        }
      ]
    },
    {
      "id": "e7e1e581053f75e974d9fb62eef62b5aebc5bb9e5976c8ccc9809c71fff678ef",
      "category": "container_scanning",
      "message": "CVE-2023-3817 on alpine/openssl@3.1.0-r4",
      "cve": "CVE-2023-3817",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@3.1.0-r4 to 3.1.2-r0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@3.1.0-r4?os_name=alpine&os_version=3.18"
          },
          "version": "3.1.0-r4"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-3817",
          "value": "CVE-2023-3817",
          "url": "https://scout.docker.com/v/CVE-2023-3817?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.2-r0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-3817?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.2-r0"
        }
      ]
    },
    {
      "id": "e4f95bd4d00b0ad0cc0b6cb1bcc130af00e102a2908b18c1b6e10eb91f18414b",
      "category": "container_scanning",
      "message": "CVE-2023-39326 on stdlib@1.19.6",
      "description": "A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body.\n\nA malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request.\n\nChunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small.",
      "cve": "CVE-2023-39326",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.20.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-39326",
          "value": "CVE-2023-39326",
          "url": "https://scout.docker.com/v/CVE-2023-39326?s=golang&n=stdlib&t=golang&vr=%3C1.20.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-39326?s=golang&n=stdlib&t=golang&vr=%3C1.20.12"
        }
      ]
    },
    {
      "id": "31b0c6ab16368c90c95c53bcaf5c27435c48cbe12e21d513aaa42057a66b7e67",
      "category": "container_scanning",
      "message": "CVE-2023-39326 on stdlib@1.20.3",
      "description": "A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body.\n\nA malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request.\n\nChunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small.",
      "cve": "CVE-2023-39326",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.20.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-39326",
          "value": "CVE-2023-39326",
          "url": "https://scout.docker.com/v/CVE-2023-39326?s=golang&n=stdlib&t=golang&vr=%3C1.20.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-39326?s=golang&n=stdlib&t=golang&vr=%3C1.20.12"
        }
      ]
    },
    {
      "id": "f2cf2a148d07416d2e47b4c3dc254beb0026bfd855a84597ee9bd1f1fc00a3a1",
      "category": "container_scanning",
      "message": "CVE-2023-39326 on stdlib@1.19.7",
      "description": "A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body.\n\nA malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request.\n\nChunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small.",
      "cve": "CVE-2023-39326",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.20.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-39326",
          "value": "CVE-2023-39326",
          "url": "https://scout.docker.com/v/CVE-2023-39326?s=golang&n=stdlib&t=golang&vr=%3C1.20.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-39326?s=golang&n=stdlib&t=golang&vr=%3C1.20.12"
        }
      ]
    },
    {
      "id": "6d13d76ad8fe91eb204c63d1c4b3ade5441623191b6c68e0b0e70e56768438a3",
      "category": "container_scanning",
      "message": "CVE-2023-45284 on stdlib@1.19.6",
      "description": "On Windows, The IsLocal function does not correctly detect reserved device names in some cases.\n\nReserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local.\n\nWith fix, IsLocal now correctly reports these names as non-local.",
      "cve": "CVE-2023-45284",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.20.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45284",
          "value": "CVE-2023-45284",
          "url": "https://scout.docker.com/v/CVE-2023-45284?s=golang&n=stdlib&t=golang&vr=%3C1.20.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45284?s=golang&n=stdlib&t=golang&vr=%3C1.20.11"
        }
      ]
    },
    {
      "id": "ef68d64f006fd9be9986e363692345f465deccd102a8d2d1182f2f0e4f8f5067",
      "category": "container_scanning",
      "message": "CVE-2023-45284 on stdlib@1.20.3",
      "description": "On Windows, The IsLocal function does not correctly detect reserved device names in some cases.\n\nReserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local.\n\nWith fix, IsLocal now correctly reports these names as non-local.",
      "cve": "CVE-2023-45284",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.20.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45284",
          "value": "CVE-2023-45284",
          "url": "https://scout.docker.com/v/CVE-2023-45284?s=golang&n=stdlib&t=golang&vr=%3C1.20.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45284?s=golang&n=stdlib&t=golang&vr=%3C1.20.11"
        }
      ]
    },
    {
      "id": "cc0520dd0128cd324661d0f9ecae14402aa032f426c0f2a231ac0354b6743480",
      "category": "container_scanning",
      "message": "CVE-2023-45284 on stdlib@1.19.7",
      "description": "On Windows, The IsLocal function does not correctly detect reserved device names in some cases.\n\nReserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local.\n\nWith fix, IsLocal now correctly reports these names as non-local.",
      "cve": "CVE-2023-45284",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.20.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45284",
          "value": "CVE-2023-45284",
          "url": "https://scout.docker.com/v/CVE-2023-45284?s=golang&n=stdlib&t=golang&vr=%3C1.20.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45284?s=golang&n=stdlib&t=golang&vr=%3C1.20.11"
        }
      ]
    },
    {
      "id": "468d56a47034850d04bf15e03238f5386fd993ba89935d722428b8425d1d1bf3",
      "category": "container_scanning",
      "message": "CVE-2023-45288 on golang.org/x/net@0.7.0",
      "description": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
      "cve": "CVE-2023-45288",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/net@0.7.0 to 0.23.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/net@0.7.0"
          },
          "version": "0.7.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45288",
          "value": "CVE-2023-45288",
          "url": "https://scout.docker.com/v/CVE-2023-45288?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.23.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45288?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.23.0"
        }
      ]
    },
    {
      "id": "2a1a25cb8b7b86af6875ea868a8d73356ed0e1751a283523ca90cb86a40d5de8",
      "category": "container_scanning",
      "message": "CVE-2023-45288 on golang.org/x/net@0.4.0",
      "description": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
      "cve": "CVE-2023-45288",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/net@0.4.0 to 0.23.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/net@0.4.0"
          },
          "version": "0.4.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45288",
          "value": "CVE-2023-45288",
          "url": "https://scout.docker.com/v/CVE-2023-45288?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.23.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45288?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.23.0"
        }
      ]
    },
    {
      "id": "afa19d2e1c9d5038e99db5cda5da9d21b70f572701eafe5723c8cb698eab6bb0",
      "category": "container_scanning",
      "message": "CVE-2023-5678 on alpine/openssl@3.1.0-r4",
      "cve": "CVE-2023-5678",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@3.1.0-r4 to 3.1.4-r1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@3.1.0-r4?os_name=alpine&os_version=3.18"
          },
          "version": "3.1.0-r4"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-5678",
          "value": "CVE-2023-5678",
          "url": "https://scout.docker.com/v/CVE-2023-5678?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.4-r1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-5678?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.4-r1"
        }
      ]
    },
    {
      "id": "2aa0f42e1303591795aa6066122062a73927311b6de30ee59fbe29a62cefac4a",
      "category": "container_scanning",
      "message": "CVE-2024-23650 on github.com/moby/buildkit@0.11.2",
      "description": "### Impact\nA malicious BuildKit client or frontend could craft a request that could lead to BuildKit daemon crashing with a panic.\n\n### Patches\nThe issue has been fixed in v0.12.5\n\n### Workarounds\nAvoid using BuildKit frontends from untrusted sources. A frontend image is usually specified as the `#syntax` line on your Dockerfile, or with `--frontend` flag when using `buildctl build` command. \n\n### References\n\n",
      "cve": "CVE-2024-23650",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/moby/buildkit@0.11.2 to 0.12.5",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/moby/buildkit@0.11.2"
          },
          "version": "0.11.2"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-23650",
          "value": "CVE-2024-23650",
          "url": "https://scout.docker.com/v/CVE-2024-23650?s=github&n=buildkit&ns=github.com%2Fmoby&t=golang&vr=%3C0.12.5"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-23650?s=github&n=buildkit&ns=github.com%2Fmoby&t=golang&vr=%3C0.12.5"
        }
      ]
    },
    {
      "id": "c53d1e0dee44f46350c206129c811c069d585c960edc967fcdfd4b61801b15d2",
      "category": "container_scanning",
      "message": "CVE-2024-23650 on github.com/moby/buildkit@0.11.5",
      "description": "### Impact\nA malicious BuildKit client or frontend could craft a request that could lead to BuildKit daemon crashing with a panic.\n\n### Patches\nThe issue has been fixed in v0.12.5\n\n### Workarounds\nAvoid using BuildKit frontends from untrusted sources. A frontend image is usually specified as the `#syntax` line on your Dockerfile, or with `--frontend` flag when using `buildctl build` command. \n\n### References\n\n",
      "cve": "CVE-2024-23650",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/moby/buildkit@0.11.5 to 0.12.5",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/moby/buildkit@0.11.5"
          },
          "version": "0.11.5"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-23650",
          "value": "CVE-2024-23650",
          "url": "https://scout.docker.com/v/CVE-2024-23650?s=github&n=buildkit&ns=github.com%2Fmoby&t=golang&vr=%3C0.12.5"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-23650?s=github&n=buildkit&ns=github.com%2Fmoby&t=golang&vr=%3C0.12.5"
        }
      ]
    },
    {
      "id": "503d713645275cba1ab9ee0127dd501397d75b1f3fed9b0c335c9695794477fa",
      "category": "container_scanning",
      "message": "CVE-2024-45338 on golang.org/x/net@0.7.0",
      "description": "An attacker can craft an input to the Parse functions that would be processed non-linearly with respect to its length, resulting in extremely slow parsing. This could cause a denial of service.",
      "cve": "CVE-2024-45338",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/net@0.7.0 to 0.33.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/net@0.7.0"
          },
          "version": "0.7.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-45338",
          "value": "CVE-2024-45338",
          "url": "https://scout.docker.com/v/CVE-2024-45338?s=golang&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.33.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-45338?s=golang&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.33.0"
        }
      ]
    },
    {
      "id": "e2510c24b82ddcaf2e41a80497dea0cca0890fa0deb9f175896bd8b60da011a0",
      "category": "container_scanning",
      "message": "CVE-2024-45338 on golang.org/x/net@0.4.0",
      "description": "An attacker can craft an input to the Parse functions that would be processed non-linearly with respect to its length, resulting in extremely slow parsing. This could cause a denial of service.",
      "cve": "CVE-2024-45338",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/net@0.4.0 to 0.33.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/net@0.4.0"
          },
          "version": "0.4.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-45338",
          "value": "CVE-2024-45338",
          "url": "https://scout.docker.com/v/CVE-2024-45338?s=golang&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.33.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-45338?s=golang&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.33.0"
        }
      ]
    },
    {
      "id": "5d293ec0a453be162543357056e949d57592a52dd3161de5eb630686edacf86a",
      "category": "container_scanning",
      "message": "CVE-2024-4603 on alpine/openssl@3.1.0-r4",
      "cve": "CVE-2024-4603",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@3.1.0-r4 to 3.1.5-r0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@3.1.0-r4?os_name=alpine&os_version=3.18"
          },
          "version": "3.1.0-r4"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-4603",
          "value": "CVE-2024-4603",
          "url": "https://scout.docker.com/v/CVE-2024-4603?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.5-r0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-4603?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.5-r0"
        }
      ]
    },
    {
      "id": "8029eb776ad607d99c111470a2094e63b28e3ca17efaf2407ddb8920e726e413",
      "category": "container_scanning",
      "message": "CVE-2025-22872 on golang.org/x/net@0.4.0",
      "description": "The tokenizer incorrectly interprets tags with unquoted attribute values that end with a solidus character (/) as self-closing. When directly using Tokenizer, this can result in such tags incorrectly being marked as self-closing, and when using the Parse functions, this can result in content following such tags as being placed in the wrong scope during DOM construction, but only when tags are in foreign content (e.g. <math>, <svg>, etc contexts).",
      "cve": "CVE-2025-22872",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/net@0.4.0 to 0.38.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/net@0.4.0"
          },
          "version": "0.4.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-22872",
          "value": "CVE-2025-22872",
          "url": "https://scout.docker.com/v/CVE-2025-22872?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.38.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-22872?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.38.0"
        }
      ]
    },
    {
      "id": "87f595d224036eed7529f26ad146d17a6ace5071abf4fde106a0914f4f129e29",
      "category": "container_scanning",
      "message": "CVE-2025-22872 on golang.org/x/net@0.7.0",
      "description": "The tokenizer incorrectly interprets tags with unquoted attribute values that end with a solidus character (/) as self-closing. When directly using Tokenizer, this can result in such tags incorrectly being marked as self-closing, and when using the Parse functions, this can result in content following such tags as being placed in the wrong scope during DOM construction, but only when tags are in foreign content (e.g. <math>, <svg>, etc contexts).",
      "cve": "CVE-2025-22872",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/net@0.7.0 to 0.38.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/net@0.7.0"
          },
          "version": "0.7.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-22872",
          "value": "CVE-2025-22872",
          "url": "https://scout.docker.com/v/CVE-2025-22872?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.38.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-22872?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.38.0"
        }
      ]
    },
    {
      "id": "8722412a2b09ecfcb2f4c9345c1c2d5f4d53417e4cd1e5b95ae7c7b7397e6f34",
      "category": "container_scanning",
      "message": "CVE-2025-47912 on stdlib@1.20.3",
      "description": "The Parse function permits values other than IPv6 addresses to be included in square brackets within the host component of a URL. RFC 3986 permits IPv6 addresses to be included within the host component, enclosed within square brackets. For example: \"http://[::1]/\". IPv4 addresses and hostnames must not appear within square brackets. Parse did not enforce this requirement.",
      "cve": "CVE-2025-47912",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.24.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-47912",
          "value": "CVE-2025-47912",
          "url": "https://scout.docker.com/v/CVE-2025-47912?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-47912?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ]
    },
    {
      "id": "18c7582302d29af3ed89d0e59645ddcc6cc6c818eb04e854c5ccb88dbdea0d64",
      "category": "container_scanning",
      "message": "CVE-2025-47912 on stdlib@1.19.6",
      "description": "The Parse function permits values other than IPv6 addresses to be included in square brackets within the host component of a URL. RFC 3986 permits IPv6 addresses to be included within the host component, enclosed within square brackets. For example: \"http://[::1]/\". IPv4 addresses and hostnames must not appear within square brackets. Parse did not enforce this requirement.",
      "cve": "CVE-2025-47912",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.24.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-47912",
          "value": "CVE-2025-47912",
          "url": "https://scout.docker.com/v/CVE-2025-47912?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-47912?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ]
    },
    {
      "id": "7424cea5e8f9f7c1dc75302062aa66637acdf7ef74bc5e14b009ad458000c8df",
      "category": "container_scanning",
      "message": "CVE-2025-47912 on stdlib@1.19.7",
      "description": "The Parse function permits values other than IPv6 addresses to be included in square brackets within the host component of a URL. RFC 3986 permits IPv6 addresses to be included within the host component, enclosed within square brackets. For example: \"http://[::1]/\". IPv4 addresses and hostnames must not appear within square brackets. Parse did not enforce this requirement.",
      "cve": "CVE-2025-47912",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.24.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-47912",
          "value": "CVE-2025-47912",
          "url": "https://scout.docker.com/v/CVE-2025-47912?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-47912?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ]
    },
    {
      "id": "0e0c58d57ad82addb5447d02782d02db89813a803c9c96d8cb31feac80daf1a8",
      "category": "container_scanning",
      "message": "CVE-2025-58185 on stdlib@1.19.7",
      "description": "Parsing a maliciously crafted DER payload could allocate large amounts of memory, causing memory exhaustion.",
      "cve": "CVE-2025-58185",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.24.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-58185",
          "value": "CVE-2025-58185",
          "url": "https://scout.docker.com/v/CVE-2025-58185?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-58185?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ]
    },
    {
      "id": "759e419667db6f46c9726ef2d3ff5607ae5898954f4301ff89bb13e446e8fa13",
      "category": "container_scanning",
      "message": "CVE-2025-58185 on stdlib@1.20.3",
      "description": "Parsing a maliciously crafted DER payload could allocate large amounts of memory, causing memory exhaustion.",
      "cve": "CVE-2025-58185",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.24.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-58185",
          "value": "CVE-2025-58185",
          "url": "https://scout.docker.com/v/CVE-2025-58185?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-58185?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ]
    },
    {
      "id": "3d83ad4e4878b73b606d236106664ab2e5e8f95dc5d86adbd5c1ef6d1c806dbf",
      "category": "container_scanning",
      "message": "CVE-2025-58185 on stdlib@1.19.6",
      "description": "Parsing a maliciously crafted DER payload could allocate large amounts of memory, causing memory exhaustion.",
      "cve": "CVE-2025-58185",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.24.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-58185",
          "value": "CVE-2025-58185",
          "url": "https://scout.docker.com/v/CVE-2025-58185?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-58185?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ]
    },
    {
      "id": "9957728ac38e64063282ee75f02460f637308002906fcd78fd25965e4b4665c3",
      "category": "container_scanning",
      "message": "CVE-2025-58186 on stdlib@1.20.3",
      "description": "Despite HTTP headers having a default limit of 1MB, the number of cookies that can be parsed does not have a limit. By sending a lot of very small cookies such as \"a=;\", an attacker can make an HTTP server allocate a large amount of structs, causing large memory consumption.",
      "cve": "CVE-2025-58186",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.24.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-58186",
          "value": "CVE-2025-58186",
          "url": "https://scout.docker.com/v/CVE-2025-58186?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-58186?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ]
    },
    {
      "id": "cd98c6f1a32897560acba817b77c0cf2100083fb6ea2372ac119320130a5c914",
      "category": "container_scanning",
      "message": "CVE-2025-58186 on stdlib@1.19.7",
      "description": "Despite HTTP headers having a default limit of 1MB, the number of cookies that can be parsed does not have a limit. By sending a lot of very small cookies such as \"a=;\", an attacker can make an HTTP server allocate a large amount of structs, causing large memory consumption.",
      "cve": "CVE-2025-58186",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.24.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-58186",
          "value": "CVE-2025-58186",
          "url": "https://scout.docker.com/v/CVE-2025-58186?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-58186?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ]
    },
    {
      "id": "0aa69396b7ab5050d844f4c0f2734c642831434d419bb030025af8f751e8c0b2",
      "category": "container_scanning",
      "message": "CVE-2025-58186 on stdlib@1.19.6",
      "description": "Despite HTTP headers having a default limit of 1MB, the number of cookies that can be parsed does not have a limit. By sending a lot of very small cookies such as \"a=;\", an attacker can make an HTTP server allocate a large amount of structs, causing large memory consumption.",
      "cve": "CVE-2025-58186",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.24.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-58186",
          "value": "CVE-2025-58186",
          "url": "https://scout.docker.com/v/CVE-2025-58186?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-58186?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ]
    },
    {
      "id": "ca270ebbb66ddcf5bc1d1fe8ee2bbf8e89d6683a63c7279a32715538c1d410dc",
      "category": "container_scanning",
      "message": "CVE-2025-58189 on stdlib@1.19.6",
      "description": "When Conn.Handshake fails during ALPN negotiation the error contains attacker controlled information (the ALPN protocols sent by the client) which is not escaped.",
      "cve": "CVE-2025-58189",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.24.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-58189",
          "value": "CVE-2025-58189",
          "url": "https://scout.docker.com/v/CVE-2025-58189?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-58189?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ]
    },
    {
      "id": "91c4146ad7b49a622a8cb3920e80690dec7dceeba2f90eeb539913cfa3cf78af",
      "category": "container_scanning",
      "message": "CVE-2025-58189 on stdlib@1.20.3",
      "description": "When Conn.Handshake fails during ALPN negotiation the error contains attacker controlled information (the ALPN protocols sent by the client) which is not escaped.",
      "cve": "CVE-2025-58189",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.24.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-58189",
          "value": "CVE-2025-58189",
          "url": "https://scout.docker.com/v/CVE-2025-58189?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-58189?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ]
    },
    {
      "id": "75e01dba551268980708e65f5d7cb0019228959e9e17d0828210623464929e7b",
      "category": "container_scanning",
      "message": "CVE-2025-58189 on stdlib@1.19.7",
      "description": "When Conn.Handshake fails during ALPN negotiation the error contains attacker controlled information (the ALPN protocols sent by the client) which is not escaped.",
      "cve": "CVE-2025-58189",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.24.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-58189",
          "value": "CVE-2025-58189",
          "url": "https://scout.docker.com/v/CVE-2025-58189?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-58189?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ]
    },
    {
      "id": "b6f46bb58cab325e17b2a15d4212aa1f0685fa5089b07239404a3c8f392c8c97",
      "category": "container_scanning",
      "message": "CVE-2025-61724 on stdlib@1.19.7",
      "description": "The Reader.ReadResponse function constructs a response string through repeated string concatenation of lines. When the number of lines in a response is large, this can cause excessive CPU consumption.",
      "cve": "CVE-2025-61724",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.24.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-61724",
          "value": "CVE-2025-61724",
          "url": "https://scout.docker.com/v/CVE-2025-61724?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-61724?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ]
    },
    {
      "id": "9b429e747c6a2f3eb749fc39e48829da03e4d67b3d80739dc033546c0409debc",
      "category": "container_scanning",
      "message": "CVE-2025-61724 on stdlib@1.19.6",
      "description": "The Reader.ReadResponse function constructs a response string through repeated string concatenation of lines. When the number of lines in a response is large, this can cause excessive CPU consumption.",
      "cve": "CVE-2025-61724",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.24.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-61724",
          "value": "CVE-2025-61724",
          "url": "https://scout.docker.com/v/CVE-2025-61724?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-61724?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ]
    },
    {
      "id": "8c86a2a0dca5bc84c1605964dec50cccce0697115338fe4957aa534798ca8625",
      "category": "container_scanning",
      "message": "CVE-2025-61724 on stdlib@1.20.3",
      "description": "The Reader.ReadResponse function constructs a response string through repeated string concatenation of lines. When the number of lines in a response is large, this can cause excessive CPU consumption.",
      "cve": "CVE-2025-61724",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.24.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-61724",
          "value": "CVE-2025-61724",
          "url": "https://scout.docker.com/v/CVE-2025-61724?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-61724?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ]
    },
    {
      "id": "96756546a6d5e6b36be3fe9be4b952e41d86ba6730df8e3ba3b36b363f3cbfcb",
      "category": "container_scanning",
      "message": "CVE-2024-24785 on stdlib@1.19.6",
      "description": "If errors returned from MarshalJSON methods contain user controlled data, they may be used to break the contextual auto-escaping behavior of the html/template package, allowing for subsequent actions to inject unexpected content into templates.",
      "cve": "CVE-2024-24785",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.21.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24785",
          "value": "CVE-2024-24785",
          "url": "https://scout.docker.com/v/CVE-2024-24785?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24785?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ]
    },
    {
      "id": "9225cdff0c5d5d6bd14c11143bda202a3ec42ff8fd9e68f445a17d859e0c7cb6",
      "category": "container_scanning",
      "message": "CVE-2024-24785 on stdlib@1.19.7",
      "description": "If errors returned from MarshalJSON methods contain user controlled data, they may be used to break the contextual auto-escaping behavior of the html/template package, allowing for subsequent actions to inject unexpected content into templates.",
      "cve": "CVE-2024-24785",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.21.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24785",
          "value": "CVE-2024-24785",
          "url": "https://scout.docker.com/v/CVE-2024-24785?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24785?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ]
    },
    {
      "id": "b3725b3c85e762458eda23644bc036bb5fbaa6d702313f032d2cf8fbb29ab0bf",
      "category": "container_scanning",
      "message": "CVE-2024-24785 on stdlib@1.20.3",
      "description": "If errors returned from MarshalJSON methods contain user controlled data, they may be used to break the contextual auto-escaping behavior of the html/template package, allowing for subsequent actions to inject unexpected content into templates.",
      "cve": "CVE-2024-24785",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.21.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24785",
          "value": "CVE-2024-24785",
          "url": "https://scout.docker.com/v/CVE-2024-24785?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24785?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ]
    },
    {
      "id": "49adb6c5ac66e87ebead22a01b86eb6b8c20af9043307787e00fbba150056661",
      "category": "container_scanning",
      "message": "CVE-2023-42363 on alpine/busybox@1.36.0-r9",
      "cve": "CVE-2023-42363",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/busybox@1.36.0-r9 to 1.36.1-r7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/busybox@1.36.0-r9?os_name=alpine&os_version=3.18"
          },
          "version": "1.36.0-r9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-42363",
          "value": "CVE-2023-42363",
          "url": "https://scout.docker.com/v/CVE-2023-42363?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C1.36.1-r7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-42363?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C1.36.1-r7"
        }
      ]
    },
    {
      "id": "6a2294a4a2e3521bb9e5b2c4d44007b1e8898531b70fce97e41e0cc2693df91e",
      "category": "container_scanning",
      "message": "CVE-2023-42364 on alpine/busybox@1.36.0-r9",
      "cve": "CVE-2023-42364",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/busybox@1.36.0-r9 to 1.36.1-r7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/busybox@1.36.0-r9?os_name=alpine&os_version=3.18"
          },
          "version": "1.36.0-r9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-42364",
          "value": "CVE-2023-42364",
          "url": "https://scout.docker.com/v/CVE-2023-42364?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C1.36.1-r7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-42364?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C1.36.1-r7"
        }
      ]
    },
    {
      "id": "ac045b691c922e71075e24a9a1db0e5602ad81892381c3e8a2244af67fd8f1d1",
      "category": "container_scanning",
      "message": "CVE-2023-42365 on alpine/busybox@1.36.0-r9",
      "cve": "CVE-2023-42365",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/busybox@1.36.0-r9 to 1.36.1-r7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/busybox@1.36.0-r9?os_name=alpine&os_version=3.18"
          },
          "version": "1.36.0-r9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-42365",
          "value": "CVE-2023-42365",
          "url": "https://scout.docker.com/v/CVE-2023-42365?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C1.36.1-r7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-42365?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C1.36.1-r7"
        }
      ]
    },
    {
      "id": "82e186666a032d15decf81737565d6e96d048b6715f71c4c79fa00b966400a39",
      "category": "container_scanning",
      "message": "CVE-2023-42366 on alpine/busybox@1.36.0-r9",
      "cve": "CVE-2023-42366",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/busybox@1.36.0-r9 to 1.36.1-r6",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/busybox@1.36.0-r9?os_name=alpine&os_version=3.18"
          },
          "version": "1.36.0-r9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-42366",
          "value": "CVE-2023-42366",
          "url": "https://scout.docker.com/v/CVE-2023-42366?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C1.36.1-r6"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-42366?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C1.36.1-r6"
        }
      ]
    },
    {
      "id": "ccb0b1c7bb5b9f12e6d28cce47a99615c639b293af3c38b66b5529d7f8051282",
      "category": "container_scanning",
      "message": "CVE-2023-51384 on alpine/openssh@9.3_p1-r3",
      "cve": "CVE-2023-51384",
      "severity": "Medium",
      "confidence": "Unknown",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssh@9.3_p1-r3?os_name=alpine&os_version=3.18"
          },
          "version": "9.3_p1-r3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-51384",
          "value": "CVE-2023-51384",
          "url": "https://scout.docker.com/v/CVE-2023-51384?s=alpine&n=openssh&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C%3D9.3_p2-r2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-51384?s=alpine&n=openssh&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C%3D9.3_p2-r2"
        }
      ]
    },
    {
      "id": "3c4d6363ffc6721b78de6d79b0f1dc8ce94a5196980ea03b0d6682790314cc14",
      "category": "container_scanning",
      "message": "CVE-2024-0727 on alpine/openssl@3.1.0-r4",
      "cve": "CVE-2024-0727",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@3.1.0-r4 to 3.1.4-r5",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@3.1.0-r4?os_name=alpine&os_version=3.18"
          },
          "version": "3.1.0-r4"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-0727",
          "value": "CVE-2024-0727",
          "url": "https://scout.docker.com/v/CVE-2024-0727?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.4-r5"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-0727?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.4-r5"
        }
      ]
    },
    {
      "id": "3b3d0cc391660f0728b283ee3f680c9f66474c282cfc7d0d344b32e232dd125f",
      "category": "container_scanning",
      "message": "CVE-2024-22365 on alpine/linux-pam@1.5.2-r10",
      "cve": "CVE-2024-22365",
      "severity": "Medium",
      "confidence": "Unknown",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/linux-pam@1.5.2-r10?os_name=alpine&os_version=3.18"
          },
          "version": "1.5.2-r10"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-22365",
          "value": "CVE-2024-22365",
          "url": "https://scout.docker.com/v/CVE-2024-22365?s=alpine&n=linux-pam&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C%3D1.5.2-r10"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-22365?s=alpine&n=linux-pam&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C%3D1.5.2-r10"
        }
      ]
    },
    {
      "id": "30482e8580ba977e7fa51de8f10e5de7ab9b61a710afaa5e6a4c019634c68565",
      "category": "container_scanning",
      "message": "CVE-2024-24789 on stdlib@1.19.7",
      "description": "The archive/zip package's handling of certain types of invalid zip files differs from the behavior of most zip implementations. This misalignment could be exploited to create an zip file with contents that vary depending on the implementation reading the file. The archive/zip package now rejects files containing these errors.",
      "cve": "CVE-2024-24789",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.21.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24789",
          "value": "CVE-2024-24789",
          "url": "https://scout.docker.com/v/CVE-2024-24789?s=golang&n=stdlib&t=golang&vr=%3C1.21.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24789?s=golang&n=stdlib&t=golang&vr=%3C1.21.11"
        }
      ]
    },
    {
      "id": "920f397167b7d0caea70018e09ad738b8ebe38573f6c6bb601518d1a7ccc819f",
      "category": "container_scanning",
      "message": "CVE-2024-24789 on stdlib@1.19.6",
      "description": "The archive/zip package's handling of certain types of invalid zip files differs from the behavior of most zip implementations. This misalignment could be exploited to create an zip file with contents that vary depending on the implementation reading the file. The archive/zip package now rejects files containing these errors.",
      "cve": "CVE-2024-24789",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.21.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24789",
          "value": "CVE-2024-24789",
          "url": "https://scout.docker.com/v/CVE-2024-24789?s=golang&n=stdlib&t=golang&vr=%3C1.21.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24789?s=golang&n=stdlib&t=golang&vr=%3C1.21.11"
        }
      ]
    },
    {
      "id": "459630b09989c195415881f22ffc168dc0018b9a38d43cc9d781595c03595343",
      "category": "container_scanning",
      "message": "CVE-2024-24789 on stdlib@1.20.3",
      "description": "The archive/zip package's handling of certain types of invalid zip files differs from the behavior of most zip implementations. This misalignment could be exploited to create an zip file with contents that vary depending on the implementation reading the file. The archive/zip package now rejects files containing these errors.",
      "cve": "CVE-2024-24789",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.21.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24789",
          "value": "CVE-2024-24789",
          "url": "https://scout.docker.com/v/CVE-2024-24789?s=golang&n=stdlib&t=golang&vr=%3C1.21.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24789?s=golang&n=stdlib&t=golang&vr=%3C1.21.11"
        }
      ]
    },
    {
      "id": "71384431ea78db56c6fe8ac3475165858e357ac8996567032664748994f478a5",
      "category": "container_scanning",
      "message": "CVE-2025-0913 on stdlib@1.19.7",
      "description": "os.OpenFile(path, os.O_CREATE|O_EXCL) behaved differently on Unix and Windows systems when the target path was a dangling symlink. On Unix systems, OpenFile with O_CREATE and O_EXCL flags never follows symlinks. On Windows, when the target path was a symlink to a nonexistent location, OpenFile would create a file in that location. OpenFile now always returns an error when the O_CREATE and O_EXCL flags are both set and the target path is a symlink.",
      "cve": "CVE-2025-0913",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.23.10",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-0913",
          "value": "CVE-2025-0913",
          "url": "https://scout.docker.com/v/CVE-2025-0913?s=golang&n=stdlib&t=golang&vr=%3C1.23.10"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-0913?s=golang&n=stdlib&t=golang&vr=%3C1.23.10"
        }
      ]
    },
    {
      "id": "6f54a3b5529d7df69e35c58b8f01e11de8cd7fc1bafe34992289b78b343105db",
      "category": "container_scanning",
      "message": "CVE-2025-0913 on stdlib@1.19.6",
      "description": "os.OpenFile(path, os.O_CREATE|O_EXCL) behaved differently on Unix and Windows systems when the target path was a dangling symlink. On Unix systems, OpenFile with O_CREATE and O_EXCL flags never follows symlinks. On Windows, when the target path was a symlink to a nonexistent location, OpenFile would create a file in that location. OpenFile now always returns an error when the O_CREATE and O_EXCL flags are both set and the target path is a symlink.",
      "cve": "CVE-2025-0913",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.23.10",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-0913",
          "value": "CVE-2025-0913",
          "url": "https://scout.docker.com/v/CVE-2025-0913?s=golang&n=stdlib&t=golang&vr=%3C1.23.10"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-0913?s=golang&n=stdlib&t=golang&vr=%3C1.23.10"
        }
      ]
    },
    {
      "id": "6dcb7da4dac72345d2ed8c70c3fd11315a14363452d0027df78c4c06562890f3",
      "category": "container_scanning",
      "message": "CVE-2025-0913 on stdlib@1.20.3",
      "description": "os.OpenFile(path, os.O_CREATE|O_EXCL) behaved differently on Unix and Windows systems when the target path was a dangling symlink. On Unix systems, OpenFile with O_CREATE and O_EXCL flags never follows symlinks. On Windows, when the target path was a symlink to a nonexistent location, OpenFile would create a file in that location. OpenFile now always returns an error when the O_CREATE and O_EXCL flags are both set and the target path is a symlink.",
      "cve": "CVE-2025-0913",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.23.10",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-0913",
          "value": "CVE-2025-0913",
          "url": "https://scout.docker.com/v/CVE-2025-0913?s=golang&n=stdlib&t=golang&vr=%3C1.23.10"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-0913?s=golang&n=stdlib&t=golang&vr=%3C1.23.10"
        }
      ]
    },
    {
      "id": "8c7954a355ac09fb654967abec25c8ad1b6bf0286217df8b9c3cb6f2d966f4a1",
      "category": "container_scanning",
      "message": "CVE-2023-48795 on alpine/openssh@9.3_p1-r3",
      "cve": "CVE-2023-48795",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssh@9.3_p1-r3 to 9.3_p2-r1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssh@9.3_p1-r3?os_name=alpine&os_version=3.18"
          },
          "version": "9.3_p1-r3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-48795",
          "value": "CVE-2023-48795",
          "url": "https://scout.docker.com/v/CVE-2023-48795?s=alpine&n=openssh&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C9.3_p2-r1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-48795?s=alpine&n=openssh&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C9.3_p2-r1"
        }
      ]
    },
    {
      "id": "09abde598c45a551eeca5776a63acb6307dde6cf9e88cfd216f6ba2ef0aed142",
      "category": "container_scanning",
      "message": "CVE-2023-48795 on golang.org/x/crypto@0.2.0",
      "description": "### Summary\n\nTerrapin is a prefix truncation attack targeting the SSH protocol. More precisely, Terrapin breaks the integrity of SSH's secure channel. By carefully adjusting the sequence numbers during the handshake, an attacker can remove an arbitrary amount of messages sent by the client or server at the beginning of the secure channel without the client or server noticing it.\n\n### Mitigations\n\nTo mitigate this protocol vulnerability, OpenSSH suggested a so-called \"strict kex\" which alters the SSH handshake to ensure a Man-in-the-Middle attacker cannot introduce unauthenticated messages as well as convey sequence number manipulation across handshakes.\n\n**Warning: To take effect, both the client and server must support this countermeasure.** \n\nAs a stop-gap measure, peers may also (temporarily) disable the affected algorithms and use unaffected alternatives like AES-GCM instead until patches are available.\n\n### Details\n\nThe SSH specifications of ChaCha20-Poly1305 (chacha20-poly1305@openssh.com) and Encrypt-then-MAC (*-etm@openssh.com MACs) are vulnerable against an arbitrary prefix truncation attack (a.k.a. Terrapin attack). This allows for an extension negotiation downgrade by stripping the SSH_MSG_EXT_INFO sent after the first message after SSH_MSG_NEWKEYS, downgrading security, and disabling attack countermeasures in some versions of OpenSSH. When targeting Encrypt-then-MAC, this attack requires the use of a CBC cipher to be practically exploitable due to the internal workings of the cipher mode. Additionally, this novel attack technique can be used to exploit previously unexploitable implementation flaws in a Man-in-the-Middle scenario.\n\nThe attack works by an attacker injecting an arbitrary number of SSH_MSG_IGNORE messages during the initial key exchange and consequently removing the same number of messages just after the initial key exchange has concluded. This is possible due to missing authentication of the excess SSH_MSG_IGNORE messages and the fact that the implicit sequence numbers used within the SSH protocol are only checked after the initial key exchange.\n\nIn the case of ChaCha20-Poly1305, the attack is guaranteed to work on every connection as this cipher does not maintain an internal state other than the message's sequence number. In the case of Encrypt-Then-MAC, practical exploitation requires the use of a CBC cipher; while theoretical integrity is broken for all ciphers when using this mode, message processing will fail at the application layer for CTR and stream ciphers.\n\nFor more details see [https://terrapin-attack.com](https://terrapin-attack.com). \n\n### Impact\n\nThis attack targets the specification of ChaCha20-Poly1305 (chacha20-poly1305@openssh.com) and Encrypt-then-MAC (*-etm@openssh.com), which are widely adopted by well-known SSH implementations and can be considered de-facto standard. These algorithms can be practically exploited; however, in the case of Encrypt-Then-MAC, we additionally require the use of a CBC cipher. As a consequence, this attack works against all well-behaving SSH implementations supporting either of those algorithms and can be used to downgrade (but not fully strip) connection security in case SSH extension negotiation (RFC8308) is supported. The attack may also enable attackers to exploit certain implementation flaws in a man-in-the-middle (MitM) scenario.",
      "cve": "CVE-2023-48795",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/crypto@0.2.0 to 0.17.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/crypto@0.2.0"
          },
          "version": "0.2.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-48795",
          "value": "CVE-2023-48795",
          "url": "https://scout.docker.com/v/CVE-2023-48795?s=github&n=crypto&ns=golang.org%2Fx&t=golang&vr=%3E%3D0.1.0%2C%3C0.17.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-48795?s=github&n=crypto&ns=golang.org%2Fx&t=golang&vr=%3E%3D0.1.0%2C%3C0.17.0"
        }
      ]
    },
    {
      "id": "5d1ac6eeb3b7415ff86a29e2b1451bb223f4a724f36f6ec9dc88f338ce2ae576",
      "category": "container_scanning",
      "message": "CVE-2023-6237 on alpine/openssl@3.1.0-r4",
      "cve": "CVE-2023-6237",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@3.1.0-r4 to 3.1.4-r4",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@3.1.0-r4?os_name=alpine&os_version=3.18"
          },
          "version": "3.1.0-r4"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-6237",
          "value": "CVE-2023-6237",
          "url": "https://scout.docker.com/v/CVE-2023-6237?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.4-r4"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-6237?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.4-r4"
        }
      ]
    },
    {
      "id": "755b106e74e147bb7bd7b7b12a11e316583d6518eaa3c8e3af010e0ac147d98c",
      "category": "container_scanning",
      "message": "CVE-2024-24783 on stdlib@1.20.3",
      "description": "Verifying a certificate chain which contains a certificate with an unknown public key algorithm will cause Certificate.Verify to panic.\n\nThis affects all crypto/tls clients, and servers that set Config.ClientAuth to VerifyClientCertIfGiven or RequireAndVerifyClientCert. The default behavior is for TLS servers to not verify client certificates.",
      "cve": "CVE-2024-24783",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.21.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24783",
          "value": "CVE-2024-24783",
          "url": "https://scout.docker.com/v/CVE-2024-24783?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24783?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ]
    },
    {
      "id": "9eb10050dd75a9301e1babeb5ce1cde16d43645c4f38f576e7e7d495456ca2c2",
      "category": "container_scanning",
      "message": "CVE-2024-24783 on stdlib@1.19.7",
      "description": "Verifying a certificate chain which contains a certificate with an unknown public key algorithm will cause Certificate.Verify to panic.\n\nThis affects all crypto/tls clients, and servers that set Config.ClientAuth to VerifyClientCertIfGiven or RequireAndVerifyClientCert. The default behavior is for TLS servers to not verify client certificates.",
      "cve": "CVE-2024-24783",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.21.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24783",
          "value": "CVE-2024-24783",
          "url": "https://scout.docker.com/v/CVE-2024-24783?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24783?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ]
    },
    {
      "id": "9e63254541c6da57aae64b7661c80233aedc15606c3d9b05b8de9f037f26b1e1",
      "category": "container_scanning",
      "message": "CVE-2024-24783 on stdlib@1.19.6",
      "description": "Verifying a certificate chain which contains a certificate with an unknown public key algorithm will cause Certificate.Verify to panic.\n\nThis affects all crypto/tls clients, and servers that set Config.ClientAuth to VerifyClientCertIfGiven or RequireAndVerifyClientCert. The default behavior is for TLS servers to not verify client certificates.",
      "cve": "CVE-2024-24783",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.21.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24783",
          "value": "CVE-2024-24783",
          "url": "https://scout.docker.com/v/CVE-2024-24783?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24783?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ]
    },
    {
      "id": "93271fea6aeca8edf70abfac2315f9e3196dec5ac8a7bba6e3ba7a1b244dfaf4",
      "category": "container_scanning",
      "message": "CVE-2024-2511 on alpine/openssl@3.1.0-r4",
      "cve": "CVE-2024-2511",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@3.1.0-r4 to 3.1.4-r6",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@3.1.0-r4?os_name=alpine&os_version=3.18"
          },
          "version": "3.1.0-r4"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-2511",
          "value": "CVE-2024-2511",
          "url": "https://scout.docker.com/v/CVE-2024-2511?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.4-r6"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-2511?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.4-r6"
        }
      ]
    },
    {
      "id": "815490e988b5a2d9821c017f28964c064bb82fe3ea137f74935eb95f300fdd8f",
      "category": "container_scanning",
      "message": "CVE-2024-29018 on github.com/docker/docker@23.0.4+incompatible",
      "description": "Moby is an open source container framework originally developed by Docker Inc. as Docker. It is a key component of Docker Engine, Docker Desktop, and other distributions of container tooling or runtimes. As a batteries-included container runtime, Moby comes with a built-in networking implementation that enables communication between containers, and between containers and external resources.\n\nMoby's networking implementation allows for creating and using many networks, each with their own subnet and gateway. This feature is frequently referred to as custom networks, as each network can have a different driver, set of parameters, and thus behaviors. When creating a network, the `--internal` flag is used to designate a network as _internal_. The `internal` attribute in a docker-compose.yml file may also be used to mark a network _internal_, and other API clients may specify the `internal` parameter as well.\n\nWhen containers with networking are created, they are assigned unique network interfaces and IP addresses (typically from a non-routable [RFC 1918](https://datatracker.ietf.org/doc/html/rfc1918) subnet). The root network namespace (hereafter referred to as the 'host') serves as a router for non-internal networks, with a gateway IP that provides SNAT/DNAT to/from container IPs.\n\nContainers on an _internal_ network may communicate between each other, but are precluded from communicating with any networks the host has access to (LAN or WAN) as no default route is configured, and firewall rules are set up to drop all outgoing traffic. Communication with the gateway IP address (and thus appropriately configured host services) is possible, and the host may communicate with any container IP directly.\n\nIn addition to configuring the Linux kernel's various networking features to enable container networking, `dockerd` directly provides some services to container networks. Principal among these is serving as a resolver, enabling service discovery (looking up other containers on the network by name), and resolution of names from an upstream resolver.\n\nWhen a DNS request for a name that does not correspond to a container is received, the request is forwarded to the configured upstream resolver (by default, the host's configured resolver). This request is made from the container network namespace: the level of access and routing of traffic is the same as if the request was made by the container itself.\n\nAs a consequence of this design, containers solely attached to _internal_ network(s) will be unable to resolve names using the upstream resolver, as the container itself is unable to communicate with that nameserver. Only the names of containers also attached to the internal network are able to be resolved.\n\nMany systems will run a local forwarding DNS resolver, typically present on a loopback address (`127.0.0.0/8`), such as systemd-resolved or dnsmasq. Common loopback address examples include `127.0.0.1` or `127.0.0.53`. As the host and any containers have separate loopback devices, a consequence of the design described above is that containers are unable to resolve names from the host's configured resolver, as they cannot reach these addresses on the host loopback device.\n\nTo bridge this gap, and to allow containers to properly resolve names even when a local forwarding resolver is used on a loopback address, `dockerd` will detect this scenario and instead forward DNS requests from the host/root network namespace. The loopback resolver will then forward the requests to its configured upstream resolvers, as expected.\n\n## Impact\n\nBecause `dockerd` will forward DNS requests to the host loopback device, bypassing the container network namespace's normal routing semantics entirely, _internal_ networks can unexpectedly forward DNS requests to an external nameserver.\n\nBy registering a domain for which they control the authoritative nameservers, an attacker could arrange for a compromised container to exfiltrate data by encoding it in DNS queries that will eventually be answered by their nameservers. For example, if the domain `evil.example` was registered, the authoritative nameserver(s) for that domain could (eventually and indirectly) receive a request for `this-is-a-secret.evil.example`.\n\nDocker Desktop is not affected, as Docker Desktop always runs an internal resolver on a RFC 1918 address.\n\n## Patches\n\nMoby releases 26.0.0-rc3, 25.0.5 (released) and 23.0.11 (to be released) are patched to prevent forwarding DNS requests from internal networks.\n\n## Workarounds\n\n-   Run containers intended to be solely attached to _internal_ networks with a custom upstream address (`--dns` argument to `docker run`, or API equivalent), which will force all upstream DNS queries to be resolved from the container network namespace.\n\n## Background\n\n- yair zak originally reported this issue to the Docker security team.\n-  PR <https://github.com/moby/moby/pull/46609> was opened in public to fix this issue, as it was not originally considered to have a security implication.\n- [The official documentation](https://docs.docker.com/network/drivers/ipvlan/#:~:text=If%20the%20parent,the%20network%20completely) claims that \"the `--internal` flag that will completely isolate containers on a network from any communications external to that network,\" which necessitated this advisory and CVE.",
      "cve": "CVE-2024-29018",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/docker/docker@23.0.4+incompatible to 23.0.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/docker/docker@23.0.4%2Bincompatible"
          },
          "version": "23.0.4+incompatible"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-29018",
          "value": "CVE-2024-29018",
          "url": "https://scout.docker.com/v/CVE-2024-29018?s=github&n=docker&ns=github.com%2Fdocker&t=golang&vr=%3C23.0.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-29018?s=github&n=docker&ns=github.com%2Fdocker&t=golang&vr=%3C23.0.11"
        }
      ]
    },
    {
      "id": "bd7aa98d64659f39d964316611a99b8efcdfde0c50d22e774f00cf6351a6fb78",
      "category": "container_scanning",
      "message": "CVE-2024-29018 on github.com/docker/docker@23.0.0-rc.1+incompatible",
      "description": "Moby is an open source container framework originally developed by Docker Inc. as Docker. It is a key component of Docker Engine, Docker Desktop, and other distributions of container tooling or runtimes. As a batteries-included container runtime, Moby comes with a built-in networking implementation that enables communication between containers, and between containers and external resources.\n\nMoby's networking implementation allows for creating and using many networks, each with their own subnet and gateway. This feature is frequently referred to as custom networks, as each network can have a different driver, set of parameters, and thus behaviors. When creating a network, the `--internal` flag is used to designate a network as _internal_. The `internal` attribute in a docker-compose.yml file may also be used to mark a network _internal_, and other API clients may specify the `internal` parameter as well.\n\nWhen containers with networking are created, they are assigned unique network interfaces and IP addresses (typically from a non-routable [RFC 1918](https://datatracker.ietf.org/doc/html/rfc1918) subnet). The root network namespace (hereafter referred to as the 'host') serves as a router for non-internal networks, with a gateway IP that provides SNAT/DNAT to/from container IPs.\n\nContainers on an _internal_ network may communicate between each other, but are precluded from communicating with any networks the host has access to (LAN or WAN) as no default route is configured, and firewall rules are set up to drop all outgoing traffic. Communication with the gateway IP address (and thus appropriately configured host services) is possible, and the host may communicate with any container IP directly.\n\nIn addition to configuring the Linux kernel's various networking features to enable container networking, `dockerd` directly provides some services to container networks. Principal among these is serving as a resolver, enabling service discovery (looking up other containers on the network by name), and resolution of names from an upstream resolver.\n\nWhen a DNS request for a name that does not correspond to a container is received, the request is forwarded to the configured upstream resolver (by default, the host's configured resolver). This request is made from the container network namespace: the level of access and routing of traffic is the same as if the request was made by the container itself.\n\nAs a consequence of this design, containers solely attached to _internal_ network(s) will be unable to resolve names using the upstream resolver, as the container itself is unable to communicate with that nameserver. Only the names of containers also attached to the internal network are able to be resolved.\n\nMany systems will run a local forwarding DNS resolver, typically present on a loopback address (`127.0.0.0/8`), such as systemd-resolved or dnsmasq. Common loopback address examples include `127.0.0.1` or `127.0.0.53`. As the host and any containers have separate loopback devices, a consequence of the design described above is that containers are unable to resolve names from the host's configured resolver, as they cannot reach these addresses on the host loopback device.\n\nTo bridge this gap, and to allow containers to properly resolve names even when a local forwarding resolver is used on a loopback address, `dockerd` will detect this scenario and instead forward DNS requests from the host/root network namespace. The loopback resolver will then forward the requests to its configured upstream resolvers, as expected.\n\n## Impact\n\nBecause `dockerd` will forward DNS requests to the host loopback device, bypassing the container network namespace's normal routing semantics entirely, _internal_ networks can unexpectedly forward DNS requests to an external nameserver.\n\nBy registering a domain for which they control the authoritative nameservers, an attacker could arrange for a compromised container to exfiltrate data by encoding it in DNS queries that will eventually be answered by their nameservers. For example, if the domain `evil.example` was registered, the authoritative nameserver(s) for that domain could (eventually and indirectly) receive a request for `this-is-a-secret.evil.example`.\n\nDocker Desktop is not affected, as Docker Desktop always runs an internal resolver on a RFC 1918 address.\n\n## Patches\n\nMoby releases 26.0.0-rc3, 25.0.5 (released) and 23.0.11 (to be released) are patched to prevent forwarding DNS requests from internal networks.\n\n## Workarounds\n\n-   Run containers intended to be solely attached to _internal_ networks with a custom upstream address (`--dns` argument to `docker run`, or API equivalent), which will force all upstream DNS queries to be resolved from the container network namespace.\n\n## Background\n\n- yair zak originally reported this issue to the Docker security team.\n-  PR <https://github.com/moby/moby/pull/46609> was opened in public to fix this issue, as it was not originally considered to have a security implication.\n- [The official documentation](https://docs.docker.com/network/drivers/ipvlan/#:~:text=If%20the%20parent,the%20network%20completely) claims that \"the `--internal` flag that will completely isolate containers on a network from any communications external to that network,\" which necessitated this advisory and CVE.",
      "cve": "CVE-2024-29018",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/docker/docker@23.0.0-rc.1+incompatible to 23.0.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/docker/docker@23.0.0-rc.1%2Bincompatible"
          },
          "version": "23.0.0-rc.1+incompatible"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-29018",
          "value": "CVE-2024-29018",
          "url": "https://scout.docker.com/v/CVE-2024-29018?s=github&n=docker&ns=github.com%2Fdocker&t=golang&vr=%3C23.0.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-29018?s=github&n=docker&ns=github.com%2Fdocker&t=golang&vr=%3C23.0.11"
        }
      ]
    },
    {
      "id": "b523b6f5e70c480d264a7613631b16d83301b6e127a9b998ad9fe0c9a613dbbb",
      "category": "container_scanning",
      "message": "CVE-2023-28642 on github.com/opencontainers/runc@1.1.3",
      "description": "### Impact\nIt was found that AppArmor, and potentially SELinux, can be bypassed when `/proc` inside the container is symlinked with a specific mount configuration.\n\n### Patches\nFixed in runc v1.1.5, by prohibiting symlinked `/proc`: https://github.com/opencontainers/runc/pull/3785\n\nThis PR fixes CVE-2023-27561 as well.\n\n### Workarounds\nAvoid using an untrusted container image.\n\n",
      "cve": "CVE-2023-28642",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/opencontainers/runc@1.1.3 to 1.1.5",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/opencontainers/runc@1.1.3"
          },
          "version": "1.1.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-28642",
          "value": "CVE-2023-28642",
          "url": "https://scout.docker.com/v/CVE-2023-28642?s=github&n=runc&ns=github.com%2Fopencontainers&t=golang&vr=%3C1.1.5"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-28642?s=github&n=runc&ns=github.com%2Fopencontainers&t=golang&vr=%3C1.1.5"
        }
      ]
    },
    {
      "id": "738dd9a00de026b03f2c5493900a198db22b9c069fc22fad7537fab29adcf879",
      "category": "container_scanning",
      "message": "CVE-2023-39318 on stdlib@1.19.7",
      "description": "The html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in <script> contexts. This may cause the template parser to improperly interpret the contents of <script> contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack.",
      "cve": "CVE-2023-39318",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.20.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-39318",
          "value": "CVE-2023-39318",
          "url": "https://scout.docker.com/v/CVE-2023-39318?s=golang&n=stdlib&t=golang&vr=%3C1.20.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-39318?s=golang&n=stdlib&t=golang&vr=%3C1.20.8"
        }
      ]
    },
    {
      "id": "d3020fbe9b894d5022d7b0a69cd95b65b612a3184ac0d618e9a2d38734250e46",
      "category": "container_scanning",
      "message": "CVE-2023-39318 on stdlib@1.20.3",
      "description": "The html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in <script> contexts. This may cause the template parser to improperly interpret the contents of <script> contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack.",
      "cve": "CVE-2023-39318",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.20.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-39318",
          "value": "CVE-2023-39318",
          "url": "https://scout.docker.com/v/CVE-2023-39318?s=golang&n=stdlib&t=golang&vr=%3C1.20.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-39318?s=golang&n=stdlib&t=golang&vr=%3C1.20.8"
        }
      ]
    },
    {
      "id": "573a2b669d0418af47bff0ec86ab14a90a51f88f32260eb375f8e92e151b75ed",
      "category": "container_scanning",
      "message": "CVE-2023-39318 on stdlib@1.19.6",
      "description": "The html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in <script> contexts. This may cause the template parser to improperly interpret the contents of <script> contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack.",
      "cve": "CVE-2023-39318",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.20.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-39318",
          "value": "CVE-2023-39318",
          "url": "https://scout.docker.com/v/CVE-2023-39318?s=golang&n=stdlib&t=golang&vr=%3C1.20.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-39318?s=golang&n=stdlib&t=golang&vr=%3C1.20.8"
        }
      ]
    },
    {
      "id": "b9197f430fdda8fb62ec9b90b3b8f5d19f15e62422f3ff2e48fc04024518c580",
      "category": "container_scanning",
      "message": "CVE-2023-39319 on stdlib@1.19.7",
      "description": "The html/template package does not apply the proper rules for handling occurrences of \"<script\", \"<!--\", and \"</script\" within JS literals in <script> contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack.",
      "cve": "CVE-2023-39319",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.20.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-39319",
          "value": "CVE-2023-39319",
          "url": "https://scout.docker.com/v/CVE-2023-39319?s=golang&n=stdlib&t=golang&vr=%3C1.20.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-39319?s=golang&n=stdlib&t=golang&vr=%3C1.20.8"
        }
      ]
    },
    {
      "id": "c0b97f7874d1c2dcfc34a8754a4b2dec6bcb4683fde34e735df672fa834d6232",
      "category": "container_scanning",
      "message": "CVE-2023-39319 on stdlib@1.19.6",
      "description": "The html/template package does not apply the proper rules for handling occurrences of \"<script\", \"<!--\", and \"</script\" within JS literals in <script> contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack.",
      "cve": "CVE-2023-39319",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.20.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-39319",
          "value": "CVE-2023-39319",
          "url": "https://scout.docker.com/v/CVE-2023-39319?s=golang&n=stdlib&t=golang&vr=%3C1.20.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-39319?s=golang&n=stdlib&t=golang&vr=%3C1.20.8"
        }
      ]
    },
    {
      "id": "a7c9c1e407359fd2a73c27000884d419e229913cff47fb21ac9ca242d5dec99f",
      "category": "container_scanning",
      "message": "CVE-2023-39319 on stdlib@1.20.3",
      "description": "The html/template package does not apply the proper rules for handling occurrences of \"<script\", \"<!--\", and \"</script\" within JS literals in <script> contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack.",
      "cve": "CVE-2023-39319",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.20.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-39319",
          "value": "CVE-2023-39319",
          "url": "https://scout.docker.com/v/CVE-2023-39319?s=golang&n=stdlib&t=golang&vr=%3C1.20.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-39319?s=golang&n=stdlib&t=golang&vr=%3C1.20.8"
        }
      ]
    },
    {
      "id": "b41dc00f0214d505cd2df8c30527adc8259f5da8c70b1fbe689e62d76f360a98",
      "category": "container_scanning",
      "message": "CVE-2023-3978 on golang.org/x/net@0.7.0",
      "description": "Text nodes not in the HTML namespace are incorrectly literally rendered, causing text which should be escaped to not be. This could lead to an XSS attack. ",
      "cve": "CVE-2023-3978",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/net@0.7.0 to 0.13.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/net@0.7.0"
          },
          "version": "0.7.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-3978",
          "value": "CVE-2023-3978",
          "url": "https://scout.docker.com/v/CVE-2023-3978?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.13.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-3978?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.13.0"
        }
      ]
    },
    {
      "id": "1c6c6b7ec999166d423cee0215a2d5f99a1bf883d0ad8939c51eb608f3a4bab5",
      "category": "container_scanning",
      "message": "CVE-2023-3978 on golang.org/x/net@0.4.0",
      "description": "Text nodes not in the HTML namespace are incorrectly literally rendered, causing text which should be escaped to not be. This could lead to an XSS attack. ",
      "cve": "CVE-2023-3978",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/net@0.4.0 to 0.13.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/net@0.4.0"
          },
          "version": "0.4.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-3978",
          "value": "CVE-2023-3978",
          "url": "https://scout.docker.com/v/CVE-2023-3978?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.13.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-3978?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.13.0"
        }
      ]
    },
    {
      "id": "858bed7d344d440100a0520212087a3d9a1db3af270c263421528333d5c36044",
      "category": "container_scanning",
      "message": "CVE-2024-45336 on stdlib@1.19.6",
      "description": "The HTTP client drops sensitive headers after following a cross-domain redirect. For example, a request to a.com/ containing an Authorization header which is redirected to b.com/ will not send that header to b.com.\n\nIn the event that the client received a subsequent same-domain redirect, however, the sensitive headers would be restored. For example, a chain of redirects from a.com/, to b.com/1, and finally to b.com/2 would incorrectly send the Authorization header to b.com/2.",
      "cve": "CVE-2024-45336",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.22.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-45336",
          "value": "CVE-2024-45336",
          "url": "https://scout.docker.com/v/CVE-2024-45336?s=golang&n=stdlib&t=golang&vr=%3C1.22.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-45336?s=golang&n=stdlib&t=golang&vr=%3C1.22.11"
        }
      ]
    },
    {
      "id": "065e7afe024888ec29082e59b876d531563f009184f1b56850c5456d4c2f32b8",
      "category": "container_scanning",
      "message": "CVE-2024-45336 on stdlib@1.19.7",
      "description": "The HTTP client drops sensitive headers after following a cross-domain redirect. For example, a request to a.com/ containing an Authorization header which is redirected to b.com/ will not send that header to b.com.\n\nIn the event that the client received a subsequent same-domain redirect, however, the sensitive headers would be restored. For example, a chain of redirects from a.com/, to b.com/1, and finally to b.com/2 would incorrectly send the Authorization header to b.com/2.",
      "cve": "CVE-2024-45336",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.22.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-45336",
          "value": "CVE-2024-45336",
          "url": "https://scout.docker.com/v/CVE-2024-45336?s=golang&n=stdlib&t=golang&vr=%3C1.22.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-45336?s=golang&n=stdlib&t=golang&vr=%3C1.22.11"
        }
      ]
    },
    {
      "id": "40777c893aac13e55e8b4d32fe196b6c932e95f4693b1cb8cbcd33dbb5a893d7",
      "category": "container_scanning",
      "message": "CVE-2024-45336 on stdlib@1.20.3",
      "description": "The HTTP client drops sensitive headers after following a cross-domain redirect. For example, a request to a.com/ containing an Authorization header which is redirected to b.com/ will not send that header to b.com.\n\nIn the event that the client received a subsequent same-domain redirect, however, the sensitive headers would be restored. For example, a chain of redirects from a.com/, to b.com/1, and finally to b.com/2 would incorrectly send the Authorization header to b.com/2.",
      "cve": "CVE-2024-45336",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.22.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-45336",
          "value": "CVE-2024-45336",
          "url": "https://scout.docker.com/v/CVE-2024-45336?s=golang&n=stdlib&t=golang&vr=%3C1.22.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-45336?s=golang&n=stdlib&t=golang&vr=%3C1.22.11"
        }
      ]
    },
    {
      "id": "90d178def66501ec620db24231af4811161972b121428a1571038278cd70f9dd",
      "category": "container_scanning",
      "message": "CVE-2024-45341 on stdlib@1.19.6",
      "description": "A certificate with a URI which has a IPv6 address with a zone ID may incorrectly satisfy a URI name constraint that applies to the certificate chain.\n\nCertificates containing URIs are not permitted in the web PKI, so this only affects users of private PKIs which make use of URIs.",
      "cve": "CVE-2024-45341",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.22.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-45341",
          "value": "CVE-2024-45341",
          "url": "https://scout.docker.com/v/CVE-2024-45341?s=golang&n=stdlib&t=golang&vr=%3C1.22.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-45341?s=golang&n=stdlib&t=golang&vr=%3C1.22.11"
        }
      ]
    },
    {
      "id": "da26c04add4ed34aa51ce253b1cef4853e0edca735c5295d9f41d0f415caf6c6",
      "category": "container_scanning",
      "message": "CVE-2024-45341 on stdlib@1.20.3",
      "description": "A certificate with a URI which has a IPv6 address with a zone ID may incorrectly satisfy a URI name constraint that applies to the certificate chain.\n\nCertificates containing URIs are not permitted in the web PKI, so this only affects users of private PKIs which make use of URIs.",
      "cve": "CVE-2024-45341",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.22.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-45341",
          "value": "CVE-2024-45341",
          "url": "https://scout.docker.com/v/CVE-2024-45341?s=golang&n=stdlib&t=golang&vr=%3C1.22.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-45341?s=golang&n=stdlib&t=golang&vr=%3C1.22.11"
        }
      ]
    },
    {
      "id": "8676fe759cd1abc49aecd2a973f938017324c8998deb7c79df1358fafdbc2b39",
      "category": "container_scanning",
      "message": "CVE-2024-45341 on stdlib@1.19.7",
      "description": "A certificate with a URI which has a IPv6 address with a zone ID may incorrectly satisfy a URI name constraint that applies to the certificate chain.\n\nCertificates containing URIs are not permitted in the web PKI, so this only affects users of private PKIs which make use of URIs.",
      "cve": "CVE-2024-45341",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.22.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-45341",
          "value": "CVE-2024-45341",
          "url": "https://scout.docker.com/v/CVE-2024-45341?s=golang&n=stdlib&t=golang&vr=%3C1.22.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-45341?s=golang&n=stdlib&t=golang&vr=%3C1.22.11"
        }
      ]
    },
    {
      "id": "2cae49f1426468914fef446c14b2602ec28cbd2ae13165c024ef72e3941254fc",
      "category": "container_scanning",
      "message": "CVE-2024-47611 on alpine/xz@5.4.3-r0",
      "cve": "CVE-2024-47611",
      "severity": "Medium",
      "confidence": "Unknown",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/xz@5.4.3-r0?os_name=alpine&os_version=3.18"
          },
          "version": "5.4.3-r0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-47611",
          "value": "CVE-2024-47611",
          "url": "https://scout.docker.com/v/CVE-2024-47611?s=alpine&n=xz&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C%3D5.4.3-r0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-47611?s=alpine&n=xz&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C%3D5.4.3-r0"
        }
      ]
    },
    {
      "id": "0a34756e4796ee622c6ce31f89eb411002ca7e89ffb6407689f9a718c3c5aa80",
      "category": "container_scanning",
      "message": "CVE-2023-26054 on github.com/moby/buildkit@0.11.2",
      "description": "When the user sends a build request that contains a Git URL that contains credentials and the build creates a provenance attestation describing that build, these credentials could be visible from the provenance attestation.\n\nGit URL can be passed in two ways:\n\n1) Invoking build directly from a URL with credentials.\n\n```\nbuildctl build --frontend dockerfile.v0 --context https://<credentials>@url/repo.git\n```\n\nEquivalent in `docker buildx` would be\n\n```\ndocker buildx build https://<credentials>@url/repo.git\n```\n\n2) If the client sends additional VCS info hint parameters on builds from a local source. Usually, that would mean reading the origin URL from `.git/config` file. \n\nThanks to Oscar Alberto Tovar for discovering the issue.\n\n### Impact\nWhen a build is performed under specific conditions where credentials were passed to BuildKit they may be visible to everyone who has access to provenance attestation.\n\nProvenance attestations and VCS info hints were added in version v0.11.0. Previous versions are not vulnerable.\n\nIn v0.10, when building directly from Git URL, the same URL could be visible in `BuildInfo` structure that is a predecessor of Provenance attestations. Previous versions are not vulnerable.\n\nNote: [Docker Build-push Github action](https://github.com/docker/build-push-action) builds from Git URLs by default but **is not** affected by this issue even when working with private repositories because the credentials are passed [with build secrets](https://github.com/docker/build-push-action/blob/v4.0.0/src/context.ts#L203) and not with URLs.\n\n### Patches\nBug is fixed in v0.11.4 . \n\n### Workarounds\nIt is recommended to pass credentials with build secrets when building directly from Git URL as a more secure alternative than modifying the URL.\n\nIn Docker Buildx, VCS info hint can be disabled by setting `BUILDX_GIT_INFO=0`. `buildctl` does not set VCS hints based on `.git` directory, and values would need to be passed manually with `--opt`.\n\n\n### References\n- Inline credentials in URLs deprecated in RFC3986 https://www.rfc-editor.org/rfc/rfc3986#section-3.2.1\n\n",
      "cve": "CVE-2023-26054",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/moby/buildkit@0.11.2 to 0.11.4",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/moby/buildkit@0.11.2"
          },
          "version": "0.11.2"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-26054",
          "value": "CVE-2023-26054",
          "url": "https://scout.docker.com/v/CVE-2023-26054?s=github&n=buildkit&ns=github.com%2Fmoby&t=golang&vr=%3E%3D0.10.0%2C%3C0.11.4"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-26054?s=github&n=buildkit&ns=github.com%2Fmoby&t=golang&vr=%3E%3D0.10.0%2C%3C0.11.4"
        }
      ]
    },
    {
      "id": "79475a5fd625a9cbbf076f2d7dc554f4e4ffb48b2e7abbcaac5c51d390bb66c3",
      "category": "container_scanning",
      "message": "CVE-2023-2650 on alpine/openssl@3.1.0-r4",
      "cve": "CVE-2023-2650",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@3.1.0-r4 to 3.1.1-r0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@3.1.0-r4?os_name=alpine&os_version=3.18"
          },
          "version": "3.1.0-r4"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-2650",
          "value": "CVE-2023-2650",
          "url": "https://scout.docker.com/v/CVE-2023-2650?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.1-r0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-2650?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.1-r0"
        }
      ]
    },
    {
      "id": "1d1c976993c0f5ce3531ddc88ce10ad45ac382e3ca51aa76982f3d16f67ea9c6",
      "category": "container_scanning",
      "message": "CVE-2023-29406 on stdlib@1.19.7",
      "description": "The HTTP/1 client does not fully validate the contents of the Host header. A maliciously crafted Host header can inject additional headers or entire requests.\n\nWith fix, the HTTP/1 client now refuses to send requests containing an invalid Request.Host or Request.URL.Host value.",
      "cve": "CVE-2023-29406",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.19.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-29406",
          "value": "CVE-2023-29406",
          "url": "https://scout.docker.com/v/CVE-2023-29406?s=golang&n=stdlib&t=golang&vr=%3C1.19.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-29406?s=golang&n=stdlib&t=golang&vr=%3C1.19.11"
        }
      ]
    },
    {
      "id": "3448d3605e01bdb85b438a12c4ccae3738b4c5b181b76a801b1ef3c44ffa9027",
      "category": "container_scanning",
      "message": "CVE-2023-29406 on stdlib@1.20.3",
      "description": "The HTTP/1 client does not fully validate the contents of the Host header. A maliciously crafted Host header can inject additional headers or entire requests.\n\nWith fix, the HTTP/1 client now refuses to send requests containing an invalid Request.Host or Request.URL.Host value.",
      "cve": "CVE-2023-29406",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.20.6",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-29406",
          "value": "CVE-2023-29406",
          "url": "https://scout.docker.com/v/CVE-2023-29406?s=golang&n=stdlib&t=golang&vr=%3E%3D1.20.0-0%2C%3C1.20.6"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-29406?s=golang&n=stdlib&t=golang&vr=%3E%3D1.20.0-0%2C%3C1.20.6"
        }
      ]
    },
    {
      "id": "69180f7c2d6108e7a7dc1caadd86b50c78f1adc8f3fe214c96a7dddddfa5c120",
      "category": "container_scanning",
      "message": "CVE-2023-29406 on stdlib@1.19.6",
      "description": "The HTTP/1 client does not fully validate the contents of the Host header. A maliciously crafted Host header can inject additional headers or entire requests.\n\nWith fix, the HTTP/1 client now refuses to send requests containing an invalid Request.Host or Request.URL.Host value.",
      "cve": "CVE-2023-29406",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.19.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-29406",
          "value": "CVE-2023-29406",
          "url": "https://scout.docker.com/v/CVE-2023-29406?s=golang&n=stdlib&t=golang&vr=%3C1.19.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-29406?s=golang&n=stdlib&t=golang&vr=%3C1.19.11"
        }
      ]
    },
    {
      "id": "d74773a9b5e11f3f3bf9451f25b6e94da4212a7bc806dd6f46ee360b30453e84",
      "category": "container_scanning",
      "message": "CVE-2023-36054 on alpine/krb5@1.20.1-r1",
      "cve": "CVE-2023-36054",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/krb5@1.20.1-r1 to 1.20.2-r0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/krb5@1.20.1-r1?os_name=alpine&os_version=3.18"
          },
          "version": "1.20.1-r1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-36054",
          "value": "CVE-2023-36054",
          "url": "https://scout.docker.com/v/CVE-2023-36054?s=alpine&n=krb5&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C1.20.2-r0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-36054?s=alpine&n=krb5&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C1.20.2-r0"
        }
      ]
    },
    {
      "id": "11d6c4084a7da6369e211da612db9afb16f4ee3bfba80d88b34b38580c2a626c",
      "category": "container_scanning",
      "message": "CVE-2023-45290 on stdlib@1.20.3",
      "description": "When parsing a multipart form (either explicitly with Request.ParseMultipartForm or implicitly with Request.FormValue, Request.PostFormValue, or Request.FormFile), limits on the total size of the parsed form were not applied to the memory consumed while reading a single form line. This permits a maliciously crafted input containing very long lines to cause allocation of arbitrarily large amounts of memory, potentially leading to memory exhaustion.\n\nWith fix, the ParseMultipartForm function now correctly limits the maximum size of form lines.",
      "cve": "CVE-2023-45290",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.21.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45290",
          "value": "CVE-2023-45290",
          "url": "https://scout.docker.com/v/CVE-2023-45290?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45290?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ]
    },
    {
      "id": "44eca8199c28e195f842154486993b0829fccf6fac9febba6a0ae238ea57ce70",
      "category": "container_scanning",
      "message": "CVE-2023-45290 on stdlib@1.19.6",
      "description": "When parsing a multipart form (either explicitly with Request.ParseMultipartForm or implicitly with Request.FormValue, Request.PostFormValue, or Request.FormFile), limits on the total size of the parsed form were not applied to the memory consumed while reading a single form line. This permits a maliciously crafted input containing very long lines to cause allocation of arbitrarily large amounts of memory, potentially leading to memory exhaustion.\n\nWith fix, the ParseMultipartForm function now correctly limits the maximum size of form lines.",
      "cve": "CVE-2023-45290",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.21.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45290",
          "value": "CVE-2023-45290",
          "url": "https://scout.docker.com/v/CVE-2023-45290?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45290?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ]
    },
    {
      "id": "7fe918e7ee94b634084e87d932aa7331b9122bc985f8e752e32e1ad327501faa",
      "category": "container_scanning",
      "message": "CVE-2023-45290 on stdlib@1.19.7",
      "description": "When parsing a multipart form (either explicitly with Request.ParseMultipartForm or implicitly with Request.FormValue, Request.PostFormValue, or Request.FormFile), limits on the total size of the parsed form were not applied to the memory consumed while reading a single form line. This permits a maliciously crafted input containing very long lines to cause allocation of arbitrarily large amounts of memory, potentially leading to memory exhaustion.\n\nWith fix, the ParseMultipartForm function now correctly limits the maximum size of form lines.",
      "cve": "CVE-2023-45290",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.21.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45290",
          "value": "CVE-2023-45290",
          "url": "https://scout.docker.com/v/CVE-2023-45290?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45290?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ]
    },
    {
      "id": "7a2c4ca7aed19a278c8f146be9cf56a38faf863cc332095b01ee5936d74e0c46",
      "category": "container_scanning",
      "message": "CVE-2023-51385 on alpine/openssh@9.3_p1-r3",
      "cve": "CVE-2023-51385",
      "severity": "Medium",
      "confidence": "Unknown",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssh@9.3_p1-r3?os_name=alpine&os_version=3.18"
          },
          "version": "9.3_p1-r3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-51385",
          "value": "CVE-2023-51385",
          "url": "https://scout.docker.com/v/CVE-2023-51385?s=alpine&n=openssh&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C%3D9.3_p2-r2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-51385?s=alpine&n=openssh&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C%3D9.3_p2-r2"
        }
      ]
    },
    {
      "id": "17d76c8b5295923efbaf68bac7f7c5cdb45c8fcad76099c3b56858b66c5175af",
      "category": "container_scanning",
      "message": "CVE-2023-6129 on alpine/openssl@3.1.0-r4",
      "cve": "CVE-2023-6129",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@3.1.0-r4 to 3.1.4-r3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@3.1.0-r4?os_name=alpine&os_version=3.18"
          },
          "version": "3.1.0-r4"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-6129",
          "value": "CVE-2023-6129",
          "url": "https://scout.docker.com/v/CVE-2023-6129?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.4-r3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-6129?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.4-r3"
        }
      ]
    },
    {
      "id": "95c18d0dbf21fd4bde0e20c6d21febeb0a912ef846e33577c4f31c9248784881",
      "category": "container_scanning",
      "message": "CVE-2025-47906 on stdlib@1.20.3",
      "description": "If the PATH environment variable contains paths which are executables (rather than just directories), passing certain strings to LookPath (\"\", \".\", and \"..\"), can result in the binaries listed in the PATH being unexpectedly returned.",
      "cve": "CVE-2025-47906",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.23.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-47906",
          "value": "CVE-2025-47906",
          "url": "https://scout.docker.com/v/CVE-2025-47906?s=golang&n=stdlib&t=golang&vr=%3C1.23.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-47906?s=golang&n=stdlib&t=golang&vr=%3C1.23.12"
        }
      ]
    },
    {
      "id": "68e2d21f1017931509f1d94a89fe42a74092c81cbf88a583f59f07eb1f6228fe",
      "category": "container_scanning",
      "message": "CVE-2025-47906 on stdlib@1.19.6",
      "description": "If the PATH environment variable contains paths which are executables (rather than just directories), passing certain strings to LookPath (\"\", \".\", and \"..\"), can result in the binaries listed in the PATH being unexpectedly returned.",
      "cve": "CVE-2025-47906",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.23.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-47906",
          "value": "CVE-2025-47906",
          "url": "https://scout.docker.com/v/CVE-2025-47906?s=golang&n=stdlib&t=golang&vr=%3C1.23.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-47906?s=golang&n=stdlib&t=golang&vr=%3C1.23.12"
        }
      ]
    },
    {
      "id": "5a5ac0bd61c4ab2873754679b144c908c6e86b9e328607fcebb89d0fa426705c",
      "category": "container_scanning",
      "message": "CVE-2025-47906 on stdlib@1.19.7",
      "description": "If the PATH environment variable contains paths which are executables (rather than just directories), passing certain strings to LookPath (\"\", \".\", and \"..\"), can result in the binaries listed in the PATH being unexpectedly returned.",
      "cve": "CVE-2025-47906",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.23.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-47906",
          "value": "CVE-2025-47906",
          "url": "https://scout.docker.com/v/CVE-2025-47906?s=golang&n=stdlib&t=golang&vr=%3C1.23.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-47906?s=golang&n=stdlib&t=golang&vr=%3C1.23.12"
        }
      ]
    },
    {
      "id": "55276b546c1be5b80f5af6a9af1f1ea0389bd089f146851c2003937aa39fae16",
      "category": "container_scanning",
      "message": "CVE-2025-58187 on stdlib@1.19.7",
      "description": "Due to the design of the name constraint checking algorithm, the processing time of some inputs scals non-linearly with respect to the size of the certificate.\n\nThis affects programs which validate arbitrary certificate chains.",
      "cve": "CVE-2025-58187",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.24.9",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-58187",
          "value": "CVE-2025-58187",
          "url": "https://scout.docker.com/v/CVE-2025-58187?s=golang&n=stdlib&t=golang&vr=%3C1.24.9"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-58187?s=golang&n=stdlib&t=golang&vr=%3C1.24.9"
        }
      ]
    },
    {
      "id": "eafd4e0f28652c93db1ee75d37b045452de188273be8c57d25bc457b79ae089c",
      "category": "container_scanning",
      "message": "CVE-2025-58187 on stdlib@1.20.3",
      "description": "Due to the design of the name constraint checking algorithm, the processing time of some inputs scals non-linearly with respect to the size of the certificate.\n\nThis affects programs which validate arbitrary certificate chains.",
      "cve": "CVE-2025-58187",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.24.9",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-58187",
          "value": "CVE-2025-58187",
          "url": "https://scout.docker.com/v/CVE-2025-58187?s=golang&n=stdlib&t=golang&vr=%3C1.24.9"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-58187?s=golang&n=stdlib&t=golang&vr=%3C1.24.9"
        }
      ]
    },
    {
      "id": "2cc99faa156014c24cceb8f3880c30b697fadaf1d51cc0d7c0a3ddbbdf33bf80",
      "category": "container_scanning",
      "message": "CVE-2025-58187 on stdlib@1.19.6",
      "description": "Due to the design of the name constraint checking algorithm, the processing time of some inputs scals non-linearly with respect to the size of the certificate.\n\nThis affects programs which validate arbitrary certificate chains.",
      "cve": "CVE-2025-58187",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.24.9",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-58187",
          "value": "CVE-2025-58187",
          "url": "https://scout.docker.com/v/CVE-2025-58187?s=golang&n=stdlib&t=golang&vr=%3C1.24.9"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-58187?s=golang&n=stdlib&t=golang&vr=%3C1.24.9"
        }
      ]
    },
    {
      "id": "cfc4d939aebef991d560c0cbc38956673afd30fe366b441a4407eb67e63e89a3",
      "category": "container_scanning",
      "message": "CVE-2025-61723 on stdlib@1.19.6",
      "description": "The processing time for parsing some invalid inputs scales non-linearly with respect to the size of the input.\n\nThis affects programs which parse untrusted PEM inputs.",
      "cve": "CVE-2025-61723",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.24.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-61723",
          "value": "CVE-2025-61723",
          "url": "https://scout.docker.com/v/CVE-2025-61723?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-61723?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ]
    },
    {
      "id": "4c1ad4aec77bbbaa9e8a064ee6dcaaf1b79b257d15cd1e9947fdb877a07958f0",
      "category": "container_scanning",
      "message": "CVE-2025-61723 on stdlib@1.20.3",
      "description": "The processing time for parsing some invalid inputs scales non-linearly with respect to the size of the input.\n\nThis affects programs which parse untrusted PEM inputs.",
      "cve": "CVE-2025-61723",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.24.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-61723",
          "value": "CVE-2025-61723",
          "url": "https://scout.docker.com/v/CVE-2025-61723?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-61723?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ]
    },
    {
      "id": "ecda95bbb5f35de9d2e4177b2d09ee6e2e1ab5f8afeb514186721e638a7c6622",
      "category": "container_scanning",
      "message": "CVE-2025-61723 on stdlib@1.19.7",
      "description": "The processing time for parsing some invalid inputs scales non-linearly with respect to the size of the input.\n\nThis affects programs which parse untrusted PEM inputs.",
      "cve": "CVE-2025-61723",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.24.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-61723",
          "value": "CVE-2025-61723",
          "url": "https://scout.docker.com/v/CVE-2025-61723?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-61723?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ]
    },
    {
      "id": "dcc1ddf035121bf59e13730508396f1958dab6b7c4a5e2708f0cf23fa37d8cc4",
      "category": "container_scanning",
      "message": "CVE-2024-24786 on google.golang.org/protobuf@1.28.1",
      "description": "The protojson.Unmarshal function can enter an infinite loop when unmarshaling certain forms of invalid JSON. This condition can occur when unmarshaling into a message which contains a google.protobuf.Any value, or when the UnmarshalOptions.DiscardUnknown option is set.",
      "cve": "CVE-2024-24786",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade google.golang.org/protobuf@1.28.1 to 1.33.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/google.golang.org/protobuf@1.28.1"
          },
          "version": "1.28.1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24786",
          "value": "CVE-2024-24786",
          "url": "https://scout.docker.com/v/CVE-2024-24786?s=github&n=protobuf&ns=google.golang.org&t=golang&vr=%3C1.33.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24786?s=github&n=protobuf&ns=google.golang.org&t=golang&vr=%3C1.33.0"
        }
      ]
    },
    {
      "id": "4fcdda73085bcf9be30e261452249812aa8585cd53e228b3063b7c38a7dcaeac",
      "category": "container_scanning",
      "message": "CVE-2025-26465 on alpine/openssh@9.3_p1-r3",
      "cve": "CVE-2025-26465",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssh@9.3_p1-r3 to 9.3_p2-r3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssh@9.3_p1-r3?os_name=alpine&os_version=3.18"
          },
          "version": "9.3_p1-r3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-26465",
          "value": "CVE-2025-26465",
          "url": "https://scout.docker.com/v/CVE-2025-26465?s=alpine&n=openssh&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C9.3_p2-r3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-26465?s=alpine&n=openssh&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C9.3_p2-r3"
        }
      ]
    },
    {
      "id": "5083d2e9232d9e91c932742b234084a97f53e7c61725393ddd6b13da59db8645",
      "category": "container_scanning",
      "message": "CVE-2025-4673 on stdlib@1.19.7",
      "description": "Proxy-Authorization and Proxy-Authenticate headers persisted on cross-origin redirects potentially leaking sensitive information.",
      "cve": "CVE-2025-4673",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.23.10",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-4673",
          "value": "CVE-2025-4673",
          "url": "https://scout.docker.com/v/CVE-2025-4673?s=golang&n=stdlib&t=golang&vr=%3C1.23.10"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-4673?s=golang&n=stdlib&t=golang&vr=%3C1.23.10"
        }
      ]
    },
    {
      "id": "dd1eb15ea96bf96b2cbdb6fb1056110346fb964cbc2d06019c81ce3a14595f91",
      "category": "container_scanning",
      "message": "CVE-2025-4673 on stdlib@1.19.6",
      "description": "Proxy-Authorization and Proxy-Authenticate headers persisted on cross-origin redirects potentially leaking sensitive information.",
      "cve": "CVE-2025-4673",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.23.10",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-4673",
          "value": "CVE-2025-4673",
          "url": "https://scout.docker.com/v/CVE-2025-4673?s=golang&n=stdlib&t=golang&vr=%3C1.23.10"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-4673?s=golang&n=stdlib&t=golang&vr=%3C1.23.10"
        }
      ]
    },
    {
      "id": "8b36c225b9dd4d047588d6fd963c44351f76454b45031ddcb083fc9bfcc3b889",
      "category": "container_scanning",
      "message": "CVE-2025-4673 on stdlib@1.20.3",
      "description": "Proxy-Authorization and Proxy-Authenticate headers persisted on cross-origin redirects potentially leaking sensitive information.",
      "cve": "CVE-2025-4673",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.23.10",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-4673",
          "value": "CVE-2025-4673",
          "url": "https://scout.docker.com/v/CVE-2025-4673?s=golang&n=stdlib&t=golang&vr=%3C1.23.10"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-4673?s=golang&n=stdlib&t=golang&vr=%3C1.23.10"
        }
      ]
    },
    {
      "id": "e1f8f6519f65641423a6e58d53d9bc64eaeb88f5323f24d0e85ffe2640cff2fe",
      "category": "container_scanning",
      "message": "CVE-2023-44487 on golang.org/x/net@0.4.0",
      "description": "## HTTP/2 Rapid reset attack\nThe HTTP/2 protocol allows clients to indicate to the server that a previous stream should be canceled by sending a RST_STREAM frame. The protocol does not require the client and server to coordinate the cancellation in any way, the client may do it unilaterally. The client may also assume that the cancellation will take effect immediately when the server receives the RST_STREAM frame, before any other data from that TCP connection is processed.\n\nAbuse of this feature is called a Rapid Reset attack because it relies on the ability for an endpoint to send a RST_STREAM frame immediately after sending a request frame, which makes the other endpoint start working and then rapidly resets the request. The request is canceled, but leaves the HTTP/2 connection open. \n\nThe HTTP/2 Rapid Reset attack built on this capability is simple: The client opens a large number of streams at once as in the standard HTTP/2 attack, but rather than waiting for a response to each request stream from the server or proxy, the client cancels each request immediately.\n\nThe ability to reset streams immediately allows each connection to have an indefinite number of requests in flight. By explicitly canceling the requests, the attacker never exceeds the limit on the number of concurrent open streams. The number of in-flight requests is no longer dependent on the round-trip time (RTT), but only on the available network bandwidth.\n\nIn a typical HTTP/2 server implementation, the server will still have to do significant amounts of work for canceled requests, such as allocating new stream data structures, parsing the query and doing header decompression, and mapping the URL to a resource. For reverse proxy implementations, the request may be proxied to the backend server before the RST_STREAM frame is processed. The client on the other hand paid almost no costs for sending the requests. This creates an exploitable cost asymmetry between the server and the client.\n\nMultiple software artifacts implementing HTTP/2 are affected. This advisory was originally ingested from the `swift-nio-http2` repo advisory and their original conent follows.\n\n## swift-nio-http2 specific advisory\nswift-nio-http2 is vulnerable to a denial-of-service vulnerability in which a malicious client can create and then reset a large number of HTTP/2 streams in a short period of time. This causes swift-nio-http2 to commit to a large amount of expensive work which it then throws away, including creating entirely new `Channel`s to serve the traffic. This can easily overwhelm an `EventLoop` and prevent it from making forward progress.\n\nswift-nio-http2 1.28 contains a remediation for this issue that applies reset counter using a sliding window. This constrains the number of stream resets that may occur in a given window of time. Clients violating this limit will have their connections torn down. This allows clients to continue to cancel streams for legitimate reasons, while constraining malicious actors.",
      "cve": "CVE-2023-44487",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/net@0.4.0 to 0.17.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/net@0.4.0"
          },
          "version": "0.4.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-44487",
          "value": "CVE-2023-44487",
          "url": "https://scout.docker.com/v/CVE-2023-44487?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.17.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-44487?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.17.0"
        }
      ]
    },
    {
      "id": "b3909592411b139f3073dedf5e171480748d1add229615b6d36a7e4c2b1d1fe2",
      "category": "container_scanning",
      "message": "CVE-2023-44487 on golang.org/x/net@0.7.0",
      "description": "## HTTP/2 Rapid reset attack\nThe HTTP/2 protocol allows clients to indicate to the server that a previous stream should be canceled by sending a RST_STREAM frame. The protocol does not require the client and server to coordinate the cancellation in any way, the client may do it unilaterally. The client may also assume that the cancellation will take effect immediately when the server receives the RST_STREAM frame, before any other data from that TCP connection is processed.\n\nAbuse of this feature is called a Rapid Reset attack because it relies on the ability for an endpoint to send a RST_STREAM frame immediately after sending a request frame, which makes the other endpoint start working and then rapidly resets the request. The request is canceled, but leaves the HTTP/2 connection open. \n\nThe HTTP/2 Rapid Reset attack built on this capability is simple: The client opens a large number of streams at once as in the standard HTTP/2 attack, but rather than waiting for a response to each request stream from the server or proxy, the client cancels each request immediately.\n\nThe ability to reset streams immediately allows each connection to have an indefinite number of requests in flight. By explicitly canceling the requests, the attacker never exceeds the limit on the number of concurrent open streams. The number of in-flight requests is no longer dependent on the round-trip time (RTT), but only on the available network bandwidth.\n\nIn a typical HTTP/2 server implementation, the server will still have to do significant amounts of work for canceled requests, such as allocating new stream data structures, parsing the query and doing header decompression, and mapping the URL to a resource. For reverse proxy implementations, the request may be proxied to the backend server before the RST_STREAM frame is processed. The client on the other hand paid almost no costs for sending the requests. This creates an exploitable cost asymmetry between the server and the client.\n\nMultiple software artifacts implementing HTTP/2 are affected. This advisory was originally ingested from the `swift-nio-http2` repo advisory and their original conent follows.\n\n## swift-nio-http2 specific advisory\nswift-nio-http2 is vulnerable to a denial-of-service vulnerability in which a malicious client can create and then reset a large number of HTTP/2 streams in a short period of time. This causes swift-nio-http2 to commit to a large amount of expensive work which it then throws away, including creating entirely new `Channel`s to serve the traffic. This can easily overwhelm an `EventLoop` and prevent it from making forward progress.\n\nswift-nio-http2 1.28 contains a remediation for this issue that applies reset counter using a sliding window. This constrains the number of stream resets that may occur in a given window of time. Clients violating this limit will have their connections torn down. This allows clients to continue to cancel streams for legitimate reasons, while constraining malicious actors.",
      "cve": "CVE-2023-44487",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/net@0.7.0 to 0.17.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/net@0.7.0"
          },
          "version": "0.7.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-44487",
          "value": "CVE-2023-44487",
          "url": "https://scout.docker.com/v/CVE-2023-44487?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.17.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-44487?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.17.0"
        }
      ]
    },
    {
      "id": "6e78f295c8d83b490a57e28f5272a8aa0cf10bd890e65073283295e5bb6eb5ad",
      "category": "container_scanning",
      "message": "CVE-2024-24557 on github.com/docker/docker@23.0.0-rc.1+incompatible",
      "description": "The classic builder cache system is prone to cache poisoning if the image is built `FROM scratch`.\nAlso, changes to some instructions (most important being `HEALTHCHECK` and `ONBUILD`) would not cause a cache miss.\n\n\nAn attacker with the knowledge of the Dockerfile someone is using could poison their cache by making them pull a specially crafted image that would be considered as a valid cache candidate for some build steps.\n\nFor example, an attacker could create an image that is considered as a valid cache candidate for:\n```\nFROM scratch\nMAINTAINER Pawel\n```\n\nwhen in fact the malicious image used as a cache would be an image built from a different Dockerfile.\n\nIn the second case, the attacker could for example substitute a different `HEALTCHECK` command.\n\n\n### Impact\n\n23.0+ users are only affected if they explicitly opted out of Buildkit (`DOCKER_BUILDKIT=0` environment variable) or are using the `/build` API endpoint (which uses the classic builder by default).\n\nAll users on versions older than 23.0 could be impacted. An example could be a CI with a shared cache, or just a regular Docker user pulling a malicious image due to misspelling/typosquatting.\n\nImage build API endpoint (`/build`) and `ImageBuild` function from `github.com/docker/docker/client` is also affected as it the uses classic builder by default. \n\n\n### Patches\n\nPatches are included in Moby releases:\n\n- v25.0.2\n- v24.0.9\n- v23.0.10\n\n### Workarounds\n\n- Use `--no-cache` or use Buildkit if possible (`DOCKER_BUILDKIT=1`, it's default on 23.0+ assuming that the buildx plugin is installed).\n- Use `Version = types.BuilderBuildKit` or `NoCache = true` in `ImageBuildOptions` for `ImageBuild` call.\n\n",
      "cve": "CVE-2024-24557",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/docker/docker@23.0.0-rc.1+incompatible to 24.0.9",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/docker/docker@23.0.0-rc.1%2Bincompatible"
          },
          "version": "23.0.0-rc.1+incompatible"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24557",
          "value": "CVE-2024-24557",
          "url": "https://scout.docker.com/v/CVE-2024-24557?s=github&n=docker&ns=github.com%2Fdocker&t=golang&vr=%3C24.0.9"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24557?s=github&n=docker&ns=github.com%2Fdocker&t=golang&vr=%3C24.0.9"
        }
      ]
    },
    {
      "id": "2c90142456c8e696215c0ff8de9169ffa60777813f3d5f6d06c5b288debc9156",
      "category": "container_scanning",
      "message": "CVE-2024-24557 on github.com/docker/docker@23.0.4+incompatible",
      "description": "The classic builder cache system is prone to cache poisoning if the image is built `FROM scratch`.\nAlso, changes to some instructions (most important being `HEALTHCHECK` and `ONBUILD`) would not cause a cache miss.\n\n\nAn attacker with the knowledge of the Dockerfile someone is using could poison their cache by making them pull a specially crafted image that would be considered as a valid cache candidate for some build steps.\n\nFor example, an attacker could create an image that is considered as a valid cache candidate for:\n```\nFROM scratch\nMAINTAINER Pawel\n```\n\nwhen in fact the malicious image used as a cache would be an image built from a different Dockerfile.\n\nIn the second case, the attacker could for example substitute a different `HEALTCHECK` command.\n\n\n### Impact\n\n23.0+ users are only affected if they explicitly opted out of Buildkit (`DOCKER_BUILDKIT=0` environment variable) or are using the `/build` API endpoint (which uses the classic builder by default).\n\nAll users on versions older than 23.0 could be impacted. An example could be a CI with a shared cache, or just a regular Docker user pulling a malicious image due to misspelling/typosquatting.\n\nImage build API endpoint (`/build`) and `ImageBuild` function from `github.com/docker/docker/client` is also affected as it the uses classic builder by default. \n\n\n### Patches\n\nPatches are included in Moby releases:\n\n- v25.0.2\n- v24.0.9\n- v23.0.10\n\n### Workarounds\n\n- Use `--no-cache` or use Buildkit if possible (`DOCKER_BUILDKIT=1`, it's default on 23.0+ assuming that the buildx plugin is installed).\n- Use `Version = types.BuilderBuildKit` or `NoCache = true` in `ImageBuildOptions` for `ImageBuild` call.\n\n",
      "cve": "CVE-2024-24557",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/docker/docker@23.0.4+incompatible to 24.0.9",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/docker/docker@23.0.4%2Bincompatible"
          },
          "version": "23.0.4+incompatible"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24557",
          "value": "CVE-2024-24557",
          "url": "https://scout.docker.com/v/CVE-2024-24557?s=github&n=docker&ns=github.com%2Fdocker&t=golang&vr=%3C24.0.9"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24557?s=github&n=docker&ns=github.com%2Fdocker&t=golang&vr=%3C24.0.9"
        }
      ]
    },
    {
      "id": "aecaa27981f271b5914525c85ef5f04ddf4a7692e3b80697aa9a0b6f3361b7e2",
      "category": "container_scanning",
      "message": "CVE-2023-27561 on github.com/opencontainers/runc@1.1.3",
      "description": "runc 1.0.0-rc95 through 1.1.4 has Incorrect Access Control leading to Escalation of Privileges, related to `libcontainer/rootfs_linux.go`. To exploit this, an attacker must be able to spawn two containers with custom volume-mount configurations, and be able to run custom images. NOTE: this issue exists because of a CVE-2019-19921 regression.",
      "cve": "CVE-2023-27561",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/opencontainers/runc@1.1.3 to 1.1.5",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/opencontainers/runc@1.1.3"
          },
          "version": "1.1.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-27561",
          "value": "CVE-2023-27561",
          "url": "https://scout.docker.com/v/CVE-2023-27561?s=github&n=runc&ns=github.com%2Fopencontainers&t=golang&vr=%3E%3D1.0.0-rc95%2C%3C1.1.5"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-27561?s=github&n=runc&ns=github.com%2Fopencontainers&t=golang&vr=%3E%3D1.0.0-rc95%2C%3C1.1.5"
        }
      ]
    },
    {
      "id": "19c3b6c8ad898ed311333c46b89b99a152a9fcda1b502da401269e7d01665cbf",
      "category": "container_scanning",
      "message": "CVE-2023-51767 on alpine/openssh@9.3_p1-r3",
      "cve": "CVE-2023-51767",
      "severity": "High",
      "confidence": "Unknown",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssh@9.3_p1-r3?os_name=alpine&os_version=3.18"
          },
          "version": "9.3_p1-r3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-51767",
          "value": "CVE-2023-51767",
          "url": "https://scout.docker.com/v/CVE-2023-51767?s=alpine&n=openssh&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C%3D9.3_p2-r2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-51767?s=alpine&n=openssh&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C%3D9.3_p2-r2"
        }
      ]
    },
    {
      "id": "931b296c67f9f1fc749a569fa94303a5e08e8ee3ba4f513457403691290a4227",
      "category": "container_scanning",
      "message": "CVE-2023-24539 on stdlib@1.20.3",
      "description": "Angle brackets (<>) are not considered dangerous characters when inserted into CSS contexts. Templates containing multiple actions separated by a '/' character can result in unexpectedly closing the CSS context and allowing for injection of unexpected HTML, if executed with untrusted input.",
      "cve": "CVE-2023-24539",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.20.4",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-24539",
          "value": "CVE-2023-24539",
          "url": "https://scout.docker.com/v/CVE-2023-24539?s=golang&n=stdlib&t=golang&vr=%3E%3D1.20.0-0%2C%3C1.20.4"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-24539?s=golang&n=stdlib&t=golang&vr=%3E%3D1.20.0-0%2C%3C1.20.4"
        }
      ]
    },
    {
      "id": "bbe03ef63429e35f8e21418b0700cb02c9ca42bd1644b2275cb870e3aa4d0016",
      "category": "container_scanning",
      "message": "CVE-2023-24539 on stdlib@1.19.7",
      "description": "Angle brackets (<>) are not considered dangerous characters when inserted into CSS contexts. Templates containing multiple actions separated by a '/' character can result in unexpectedly closing the CSS context and allowing for injection of unexpected HTML, if executed with untrusted input.",
      "cve": "CVE-2023-24539",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.19.9",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-24539",
          "value": "CVE-2023-24539",
          "url": "https://scout.docker.com/v/CVE-2023-24539?s=golang&n=stdlib&t=golang&vr=%3C1.19.9"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-24539?s=golang&n=stdlib&t=golang&vr=%3C1.19.9"
        }
      ]
    },
    {
      "id": "504a65cbf241b7613adc9637cb4ad6db24293f4e7085c0285ccc05bc711221bd",
      "category": "container_scanning",
      "message": "CVE-2023-24539 on stdlib@1.19.6",
      "description": "Angle brackets (<>) are not considered dangerous characters when inserted into CSS contexts. Templates containing multiple actions separated by a '/' character can result in unexpectedly closing the CSS context and allowing for injection of unexpected HTML, if executed with untrusted input.",
      "cve": "CVE-2023-24539",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.19.9",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-24539",
          "value": "CVE-2023-24539",
          "url": "https://scout.docker.com/v/CVE-2023-24539?s=golang&n=stdlib&t=golang&vr=%3C1.19.9"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-24539?s=golang&n=stdlib&t=golang&vr=%3C1.19.9"
        }
      ]
    },
    {
      "id": "a77f12d380bc83496eded8e668bfdf3f7de6c7c4a67d485a3bcdd9b3bf21001a",
      "category": "container_scanning",
      "message": "CVE-2023-29400 on stdlib@1.19.6",
      "description": "Templates containing actions in unquoted HTML attributes (e.g. \"attr={{.}}\") executed with empty input can result in output with unexpected results when parsed due to HTML normalization rules. This may allow injection of arbitrary attributes into tags.",
      "cve": "CVE-2023-29400",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.19.9",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-29400",
          "value": "CVE-2023-29400",
          "url": "https://scout.docker.com/v/CVE-2023-29400?s=golang&n=stdlib&t=golang&vr=%3C1.19.9"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-29400?s=golang&n=stdlib&t=golang&vr=%3C1.19.9"
        }
      ]
    },
    {
      "id": "8f218ab311add8b8022f79c674e168bd2660208242bbdb1d48041732bd305b70",
      "category": "container_scanning",
      "message": "CVE-2023-29400 on stdlib@1.19.7",
      "description": "Templates containing actions in unquoted HTML attributes (e.g. \"attr={{.}}\") executed with empty input can result in output with unexpected results when parsed due to HTML normalization rules. This may allow injection of arbitrary attributes into tags.",
      "cve": "CVE-2023-29400",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.19.9",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-29400",
          "value": "CVE-2023-29400",
          "url": "https://scout.docker.com/v/CVE-2023-29400?s=golang&n=stdlib&t=golang&vr=%3C1.19.9"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-29400?s=golang&n=stdlib&t=golang&vr=%3C1.19.9"
        }
      ]
    },
    {
      "id": "7780d5015f74f4f4c968c8eeabbdaab6597d796a4b900f016b1828f26a7af672",
      "category": "container_scanning",
      "message": "CVE-2023-29400 on stdlib@1.20.3",
      "description": "Templates containing actions in unquoted HTML attributes (e.g. \"attr={{.}}\") executed with empty input can result in output with unexpected results when parsed due to HTML normalization rules. This may allow injection of arbitrary attributes into tags.",
      "cve": "CVE-2023-29400",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.20.4",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-29400",
          "value": "CVE-2023-29400",
          "url": "https://scout.docker.com/v/CVE-2023-29400?s=golang&n=stdlib&t=golang&vr=%3E%3D1.20.0-0%2C%3C1.20.4"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-29400?s=golang&n=stdlib&t=golang&vr=%3E%3D1.20.0-0%2C%3C1.20.4"
        }
      ]
    },
    {
      "id": "46563567f64a4d2334dae820fa2f405f6be2a40ac390e094670c6b5ef143a584",
      "category": "container_scanning",
      "message": "CVE-2022-21698 on go.opentelemetry.io/contrib/instrumentation@0.29.0",
      "description": "Memory exhaustion in go.opentelemetry.io/contrib/instrumentation",
      "cve": "CVE-2022-21698",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade go.opentelemetry.io/contrib/instrumentation@0.29.0 to 0.44.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/go.opentelemetry.io/contrib/instrumentation@0.29.0#net/http/httptrace/otelhttptrace"
          },
          "version": "0.29.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-21698",
          "value": "CVE-2022-21698",
          "url": "https://scout.docker.com/v/CVE-2022-21698?s=golang&n=net%2Fhttp%2Fhttptrace%2Fotelhttptrace&ns=go.opentelemetry.io%2Fcontrib%2Finstrumentation&t=golang&vr=%3C0.44.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-21698?s=golang&n=net%2Fhttp%2Fhttptrace%2Fotelhttptrace&ns=go.opentelemetry.io%2Fcontrib%2Finstrumentation&t=golang&vr=%3C0.44.0"
        }
      ]
    },
    {
      "id": "e745d1970a3cc8336a0039c54b1760f03d8cc73485e04bbff1cbe82d660a8d55",
      "category": "container_scanning",
      "message": "CVE-2022-21698 on go.opentelemetry.io/contrib/instrumentation@0.29.0",
      "description": "Memory exhaustion in go.opentelemetry.io/contrib/instrumentation",
      "cve": "CVE-2022-21698",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade go.opentelemetry.io/contrib/instrumentation@0.29.0 to 0.44.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/go.opentelemetry.io/contrib/instrumentation@0.29.0#net/http/otelhttp"
          },
          "version": "0.29.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-21698",
          "value": "CVE-2022-21698",
          "url": "https://scout.docker.com/v/CVE-2022-21698?s=golang&n=net%2Fhttp%2Fotelhttp&ns=go.opentelemetry.io%2Fcontrib%2Finstrumentation&t=golang&vr=%3C0.44.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-21698?s=golang&n=net%2Fhttp%2Fotelhttp&ns=go.opentelemetry.io%2Fcontrib%2Finstrumentation&t=golang&vr=%3C0.44.0"
        }
      ]
    },
    {
      "id": "d8b5f9afa68304d426192ad89a6f8b2ddcecd198f23f9703c4dbc641cd84efd9",
      "category": "container_scanning",
      "message": "CVE-2022-30635 on stdlib@1.19.6",
      "description": "Calling Decoder.Decode on a message which contains deeply nested structures can cause a panic due to stack exhaustion. This is a follow-up to CVE-2022-30635.",
      "cve": "CVE-2022-30635",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.22.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-30635",
          "value": "CVE-2022-30635",
          "url": "https://scout.docker.com/v/CVE-2022-30635?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-30635?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ]
    },
    {
      "id": "8682b0e1f74b36a62c23e8fe287bd99dc0a0a01a8bda1a0f6be98b41fc8970ad",
      "category": "container_scanning",
      "message": "CVE-2022-30635 on stdlib@1.20.3",
      "description": "Calling Decoder.Decode on a message which contains deeply nested structures can cause a panic due to stack exhaustion. This is a follow-up to CVE-2022-30635.",
      "cve": "CVE-2022-30635",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.22.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-30635",
          "value": "CVE-2022-30635",
          "url": "https://scout.docker.com/v/CVE-2022-30635?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-30635?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ]
    },
    {
      "id": "f0e18ba21bc5e80ddd599136cdd9ff16dd09eea4f7fb73db2398bd17a7c4aa77",
      "category": "container_scanning",
      "message": "CVE-2022-30635 on stdlib@1.19.7",
      "description": "Calling Decoder.Decode on a message which contains deeply nested structures can cause a panic due to stack exhaustion. This is a follow-up to CVE-2022-30635.",
      "cve": "CVE-2022-30635",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.22.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-30635",
          "value": "CVE-2022-30635",
          "url": "https://scout.docker.com/v/CVE-2022-30635?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-30635?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ]
    },
    {
      "id": "ae1c429941ee75988ded0c6ea7b731a02123fb6b79474ebcc18e24196656b9e9",
      "category": "container_scanning",
      "message": "CVE-2022-41723 on golang.org/x/net@0.4.0",
      "description": "A maliciously crafted HTTP/2 stream could cause excessive CPU consumption in the HPACK decoder, sufficient to cause a denial of service from a small number of small requests.",
      "cve": "CVE-2022-41723",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/net@0.4.0 to 0.7.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/net@0.4.0"
          },
          "version": "0.4.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-41723",
          "value": "CVE-2022-41723",
          "url": "https://scout.docker.com/v/CVE-2022-41723?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.7.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-41723?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.7.0"
        }
      ]
    },
    {
      "id": "92fec2915bd05c31be8d204db494384655b1253cdcecafdfca1978ff01c8660a",
      "category": "container_scanning",
      "message": "CVE-2023-2253 on github.com/docker/distribution@2.8.1+incompatible",
      "description": "### Impact\n\nSystems that run `distribution` built after a specific commit running on memory-restricted environments can suffer from denial of service by a crafted malicious `/v2/_catalog` API endpoint request. \n\n### Patches\n\nUpgrade to at least 2.8.2-beta.1 if you are running `v2.8.x` release. If you use the code from the main branch, update at least to the commit after [f55a6552b006a381d9167e328808565dd2bf77dc](https://github.com/distribution/distribution/commit/f55a6552b006a381d9167e328808565dd2bf77dc).\n\n### Workarounds\n\nThere is no way to work around this issue without patching. Restrict access to the affected API endpoint: see the recommendations section.\n\n### References\n\n`/v2/_catalog` endpoint accepts a parameter to control the maximum amount of records returned (query string: `n`).\n\nWhen not given the default `n=100` is used.  The server trusts that `n` has an acceptable value, however when using a \nmaliciously large value, it allocates an array/slice of `n` of strings before filling the slice with data.\n\nThis behaviour was introduced ~7yrs ago [1].\n\n### Recommendation\n\nThe `/v2/_catalog` endpoint was designed specifically to do registry syncs with search or other API systems. Such an endpoint would create a lot of load on the backend system, due to overfetch required to serve a request in certain implementations.\n\nBecause of this, we strongly recommend keeping this API endpoint behind heightened privilege and avoiding leaving it exposed to the internet.\n\n###  For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [distribution repository](https://github.com/distribution/distribution)\n* Email us at [cncf-distribution-security@lists.cncf.io](mailto:cncf-distribution-security@lists.cncf.io)\n\n[1] [faulty commit](https://github.com/distribution/distribution/blob/b7e26bac741c76cb792f8e14c41a2163b5dae8df/registry/handlers/catalog.go#L45)",
      "cve": "CVE-2023-2253",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/docker/distribution@2.8.1+incompatible to 2.8.2-beta.1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/docker/distribution@2.8.1%2Bincompatible"
          },
          "version": "2.8.1+incompatible"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-2253",
          "value": "CVE-2023-2253",
          "url": "https://scout.docker.com/v/CVE-2023-2253?s=github&n=distribution&ns=github.com%2Fdocker&t=golang&vr=%3C2.8.2-beta.1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-2253?s=github&n=distribution&ns=github.com%2Fdocker&t=golang&vr=%3C2.8.2-beta.1"
        }
      ]
    },
    {
      "id": "d79167b7ebba20ce085616eb85fbe6530cb0b54a801763e0b23a6c647731574a",
      "category": "container_scanning",
      "message": "CVE-2023-24534 on stdlib@1.19.7",
      "description": "HTTP and MIME header parsing can allocate large amounts of memory, even when parsing small inputs, potentially leading to a denial of service.\n\nCertain unusual patterns of input data can cause the common function used to parse HTTP and MIME headers to allocate substantially more memory than required to hold the parsed headers. An attacker can exploit this behavior to cause an HTTP server to allocate large amounts of memory from a small request, potentially leading to memory exhaustion and a denial of service.\n\nWith fix, header parsing now correctly allocates only the memory required to hold parsed headers.",
      "cve": "CVE-2023-24534",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.19.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-24534",
          "value": "CVE-2023-24534",
          "url": "https://scout.docker.com/v/CVE-2023-24534?s=golang&n=stdlib&t=golang&vr=%3C1.19.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-24534?s=golang&n=stdlib&t=golang&vr=%3C1.19.8"
        }
      ]
    },
    {
      "id": "527f8f2e4b014af8dec8152df5ad337b7e31b4aaf5d9f3188b1019aaba780005",
      "category": "container_scanning",
      "message": "CVE-2023-24534 on stdlib@1.19.6",
      "description": "HTTP and MIME header parsing can allocate large amounts of memory, even when parsing small inputs, potentially leading to a denial of service.\n\nCertain unusual patterns of input data can cause the common function used to parse HTTP and MIME headers to allocate substantially more memory than required to hold the parsed headers. An attacker can exploit this behavior to cause an HTTP server to allocate large amounts of memory from a small request, potentially leading to memory exhaustion and a denial of service.\n\nWith fix, header parsing now correctly allocates only the memory required to hold parsed headers.",
      "cve": "CVE-2023-24534",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.19.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-24534",
          "value": "CVE-2023-24534",
          "url": "https://scout.docker.com/v/CVE-2023-24534?s=golang&n=stdlib&t=golang&vr=%3C1.19.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-24534?s=golang&n=stdlib&t=golang&vr=%3C1.19.8"
        }
      ]
    },
    {
      "id": "ae53ae2df005792957a34264643bfd77acbd671bd35bf327582dc570802d2c51",
      "category": "container_scanning",
      "message": "CVE-2023-24536 on stdlib@1.19.6",
      "description": "Multipart form parsing can consume large amounts of CPU and memory when processing form inputs containing very large numbers of parts.\n\nThis stems from several causes:\n\n1. mime/multipart.Reader.ReadForm limits the total memory a parsed multipart form can consume. ReadForm can undercount the amount of memory consumed, leading it to accept larger inputs than intended.\n2. Limiting total memory does not account for increased pressure on the garbage collector from large numbers of small allocations in forms with many parts.\n3. ReadForm can allocate a large number of short-lived buffers, further increasing pressure on the garbage collector.\n\nThe combination of these factors can permit an attacker to cause an program that parses multipart forms to consume large amounts of CPU and memory, potentially resulting in a denial of service. This affects programs that use mime/multipart.Reader.ReadForm, as well as form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue.\n\nWith fix, ReadForm now does a better job of estimating the memory consumption of parsed forms, and performs many fewer short-lived allocations.\n\nIn addition, the fixed mime/multipart.Reader imposes the following limits on the size of parsed forms:\n\n1. Forms parsed with ReadForm may contain no more than 1000 parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxparts=.\n2. Form parts parsed with NextPart and NextRawPart may contain no more than 10,000 header fields. In addition, forms parsed with ReadForm may contain no more than 10,000 header fields across all parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxheaders=.",
      "cve": "CVE-2023-24536",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.19.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-24536",
          "value": "CVE-2023-24536",
          "url": "https://scout.docker.com/v/CVE-2023-24536?s=golang&n=stdlib&t=golang&vr=%3C1.19.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-24536?s=golang&n=stdlib&t=golang&vr=%3C1.19.8"
        }
      ]
    },
    {
      "id": "e611fa964bacb126be1eae1d39aaafd3281a1cfa44f5d8a0ffb439b533cb8a01",
      "category": "container_scanning",
      "message": "CVE-2023-24536 on stdlib@1.19.7",
      "description": "Multipart form parsing can consume large amounts of CPU and memory when processing form inputs containing very large numbers of parts.\n\nThis stems from several causes:\n\n1. mime/multipart.Reader.ReadForm limits the total memory a parsed multipart form can consume. ReadForm can undercount the amount of memory consumed, leading it to accept larger inputs than intended.\n2. Limiting total memory does not account for increased pressure on the garbage collector from large numbers of small allocations in forms with many parts.\n3. ReadForm can allocate a large number of short-lived buffers, further increasing pressure on the garbage collector.\n\nThe combination of these factors can permit an attacker to cause an program that parses multipart forms to consume large amounts of CPU and memory, potentially resulting in a denial of service. This affects programs that use mime/multipart.Reader.ReadForm, as well as form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue.\n\nWith fix, ReadForm now does a better job of estimating the memory consumption of parsed forms, and performs many fewer short-lived allocations.\n\nIn addition, the fixed mime/multipart.Reader imposes the following limits on the size of parsed forms:\n\n1. Forms parsed with ReadForm may contain no more than 1000 parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxparts=.\n2. Form parts parsed with NextPart and NextRawPart may contain no more than 10,000 header fields. In addition, forms parsed with ReadForm may contain no more than 10,000 header fields across all parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxheaders=.",
      "cve": "CVE-2023-24536",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.19.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-24536",
          "value": "CVE-2023-24536",
          "url": "https://scout.docker.com/v/CVE-2023-24536?s=golang&n=stdlib&t=golang&vr=%3C1.19.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-24536?s=golang&n=stdlib&t=golang&vr=%3C1.19.8"
        }
      ]
    },
    {
      "id": "4d23c5c112e31c397d9328722b1cfbb8647e2dbfe5b39d91ac19a4a49f818aa3",
      "category": "container_scanning",
      "message": "CVE-2023-24537 on stdlib@1.19.7",
      "description": "Calling any of the Parse functions on Go source code which contains //line directives with very large line numbers can cause an infinite loop due to integer overflow.",
      "cve": "CVE-2023-24537",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.19.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-24537",
          "value": "CVE-2023-24537",
          "url": "https://scout.docker.com/v/CVE-2023-24537?s=golang&n=stdlib&t=golang&vr=%3C1.19.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-24537?s=golang&n=stdlib&t=golang&vr=%3C1.19.8"
        }
      ]
    },
    {
      "id": "71b793c7838e505e496ae9e4df175d58be70b8fb063476487d1ca0f53b406ea5",
      "category": "container_scanning",
      "message": "CVE-2023-24537 on stdlib@1.19.6",
      "description": "Calling any of the Parse functions on Go source code which contains //line directives with very large line numbers can cause an infinite loop due to integer overflow.",
      "cve": "CVE-2023-24537",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.19.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-24537",
          "value": "CVE-2023-24537",
          "url": "https://scout.docker.com/v/CVE-2023-24537?s=golang&n=stdlib&t=golang&vr=%3C1.19.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-24537?s=golang&n=stdlib&t=golang&vr=%3C1.19.8"
        }
      ]
    },
    {
      "id": "a19014e8c6da1028c380db258bcbb0eda109dfbb990dce8f6dc93077d4b6d491",
      "category": "container_scanning",
      "message": "CVE-2023-25151 on go.opentelemetry.io/contrib/instrumentation@0.29.0",
      "description": "Memory exhaustion in go.opentelemetry.io/contrib/instrumentation",
      "cve": "CVE-2023-25151",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade go.opentelemetry.io/contrib/instrumentation@0.29.0 to 0.44.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/go.opentelemetry.io/contrib/instrumentation@0.29.0#net/http/otelhttp"
          },
          "version": "0.29.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-25151",
          "value": "CVE-2023-25151",
          "url": "https://scout.docker.com/v/CVE-2023-25151?s=golang&n=net%2Fhttp%2Fotelhttp&ns=go.opentelemetry.io%2Fcontrib%2Finstrumentation&t=golang&vr=%3C0.44.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-25151?s=golang&n=net%2Fhttp%2Fotelhttp&ns=go.opentelemetry.io%2Fcontrib%2Finstrumentation&t=golang&vr=%3C0.44.0"
        }
      ]
    },
    {
      "id": "83081153d98cc815646c04654c4ed97f26a48bb613b4d04db4244b9bb4df1056",
      "category": "container_scanning",
      "message": "CVE-2023-25151 on go.opentelemetry.io/contrib/instrumentation@0.29.0",
      "description": "Memory exhaustion in go.opentelemetry.io/contrib/instrumentation",
      "cve": "CVE-2023-25151",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade go.opentelemetry.io/contrib/instrumentation@0.29.0 to 0.44.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/go.opentelemetry.io/contrib/instrumentation@0.29.0#net/http/httptrace/otelhttptrace"
          },
          "version": "0.29.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-25151",
          "value": "CVE-2023-25151",
          "url": "https://scout.docker.com/v/CVE-2023-25151?s=golang&n=net%2Fhttp%2Fhttptrace%2Fotelhttptrace&ns=go.opentelemetry.io%2Fcontrib%2Finstrumentation&t=golang&vr=%3C0.44.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-25151?s=golang&n=net%2Fhttp%2Fhttptrace%2Fotelhttptrace&ns=go.opentelemetry.io%2Fcontrib%2Finstrumentation&t=golang&vr=%3C0.44.0"
        }
      ]
    },
    {
      "id": "74638a3de1c6e4cfea21277ede3954c9e4fb8df2d3672e938716de1b24b87553",
      "category": "container_scanning",
      "message": "CVE-2023-39325 on golang.org/x/net@0.4.0",
      "description": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing. \n\nWith the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection. \n\nThis issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2.\n\nThe default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
      "cve": "CVE-2023-39325",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/net@0.4.0 to 0.17.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/net@0.4.0"
          },
          "version": "0.4.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-39325",
          "value": "CVE-2023-39325",
          "url": "https://scout.docker.com/v/CVE-2023-39325?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.17.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-39325?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.17.0"
        }
      ]
    },
    {
      "id": "84207b12fa8a8c7002fa1475816b62a521002829e11f203efc72eaced7f916ea",
      "category": "container_scanning",
      "message": "CVE-2023-39325 on stdlib@1.19.6",
      "description": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing.\n\nWith the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection.\n\nThis issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2.\n\nThe default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
      "cve": "CVE-2023-39325",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.20.10",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-39325",
          "value": "CVE-2023-39325",
          "url": "https://scout.docker.com/v/CVE-2023-39325?s=golang&n=stdlib&t=golang&vr=%3C1.20.10"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-39325?s=golang&n=stdlib&t=golang&vr=%3C1.20.10"
        }
      ]
    },
    {
      "id": "66bf97678c3a227cc89e30f9ad5f8c8275b077d88dc4cb42026787083498adf5",
      "category": "container_scanning",
      "message": "CVE-2023-39325 on stdlib@1.19.7",
      "description": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing.\n\nWith the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection.\n\nThis issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2.\n\nThe default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
      "cve": "CVE-2023-39325",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.20.10",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-39325",
          "value": "CVE-2023-39325",
          "url": "https://scout.docker.com/v/CVE-2023-39325?s=golang&n=stdlib&t=golang&vr=%3C1.20.10"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-39325?s=golang&n=stdlib&t=golang&vr=%3C1.20.10"
        }
      ]
    },
    {
      "id": "5f79b247243b28846b41b662373784691c6f40046d851e24de2b75604dc10030",
      "category": "container_scanning",
      "message": "CVE-2023-39325 on golang.org/x/net@0.7.0",
      "description": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing. \n\nWith the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection. \n\nThis issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2.\n\nThe default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
      "cve": "CVE-2023-39325",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/net@0.7.0 to 0.17.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/net@0.7.0"
          },
          "version": "0.7.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-39325",
          "value": "CVE-2023-39325",
          "url": "https://scout.docker.com/v/CVE-2023-39325?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.17.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-39325?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.17.0"
        }
      ]
    },
    {
      "id": "bdec07b999273a6446624bff22eb5e5fe983a328268a93a30b01143713fcba63",
      "category": "container_scanning",
      "message": "CVE-2023-39325 on stdlib@1.20.3",
      "description": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing.\n\nWith the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection.\n\nThis issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2.\n\nThe default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
      "cve": "CVE-2023-39325",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.20.10",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-39325",
          "value": "CVE-2023-39325",
          "url": "https://scout.docker.com/v/CVE-2023-39325?s=golang&n=stdlib&t=golang&vr=%3C1.20.10"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-39325?s=golang&n=stdlib&t=golang&vr=%3C1.20.10"
        }
      ]
    },
    {
      "id": "40f870f76a618e4e39fa01dd05d958eecccac1c636b923272018e1b2216ba3d0",
      "category": "container_scanning",
      "message": "CVE-2023-44487 on stdlib@1.20.3",
      "description": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing.\n\nWith the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection.\n\nThis issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2.\n\nThe default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
      "cve": "CVE-2023-44487",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.20.10",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-44487",
          "value": "CVE-2023-44487",
          "url": "https://scout.docker.com/v/CVE-2023-44487?s=golang&n=stdlib&t=golang&vr=%3C1.20.10"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-44487?s=golang&n=stdlib&t=golang&vr=%3C1.20.10"
        }
      ]
    },
    {
      "id": "47ed2e5df5bdcc563e965800378f2b767bec5ff27df092f57e903357ac19c596",
      "category": "container_scanning",
      "message": "CVE-2023-44487 on google.golang.org/grpc@1.50.1",
      "description": "An attacker can send HTTP/2 requests, cancel them, and send subsequent requests. This is valid by the HTTP/2 protocol, but would cause the gRPC-Go server to launch more concurrent method handlers than the configured maximum stream limit, grpc.MaxConcurrentStreams. This results in a denial of service due to resource consumption.",
      "cve": "CVE-2023-44487",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade google.golang.org/grpc@1.50.1 to 1.56.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/google.golang.org/grpc@1.50.1"
          },
          "version": "1.50.1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-44487",
          "value": "CVE-2023-44487",
          "url": "https://scout.docker.com/v/CVE-2023-44487?s=golang&n=grpc&ns=google.golang.org&t=golang&vr=%3C1.56.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-44487?s=golang&n=grpc&ns=google.golang.org&t=golang&vr=%3C1.56.3"
        }
      ]
    },
    {
      "id": "ba63685d511fc9d6d39784996c5c21ac2798a3f2130292a1f8339a708925d337",
      "category": "container_scanning",
      "message": "CVE-2023-44487 on stdlib@1.19.7",
      "description": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing.\n\nWith the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection.\n\nThis issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2.\n\nThe default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
      "cve": "CVE-2023-44487",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.20.10",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-44487",
          "value": "CVE-2023-44487",
          "url": "https://scout.docker.com/v/CVE-2023-44487?s=golang&n=stdlib&t=golang&vr=%3C1.20.10"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-44487?s=golang&n=stdlib&t=golang&vr=%3C1.20.10"
        }
      ]
    },
    {
      "id": "2ca1ae15f24fe2d20eb73e53c9c32b76b7abfb5e501164e20c7ad70498751df3",
      "category": "container_scanning",
      "message": "CVE-2023-44487 on stdlib@1.19.6",
      "description": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing.\n\nWith the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection.\n\nThis issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2.\n\nThe default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
      "cve": "CVE-2023-44487",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.20.10",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-44487",
          "value": "CVE-2023-44487",
          "url": "https://scout.docker.com/v/CVE-2023-44487?s=golang&n=stdlib&t=golang&vr=%3C1.20.10"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-44487?s=golang&n=stdlib&t=golang&vr=%3C1.20.10"
        }
      ]
    },
    {
      "id": "36332785ebcc54f73ff0de291a305e73f5b75ba8bb980eaa248e1d0065aea32b",
      "category": "container_scanning",
      "message": "CVE-2023-45142 on go.opentelemetry.io/contrib/instrumentation@0.29.0",
      "description": "### Summary\n\nThis handler wrapper https://github.com/open-telemetry/opentelemetry-go-contrib/blob/5f7e6ad5a49b45df45f61a1deb29d7f1158032df/instrumentation/net/http/otelhttp/handler.go#L63-L65\nout of the box adds labels\n\n- `http.user_agent`\n- `http.method`\n\nthat have unbound cardinality. It leads to the server's potential memory exhaustion when many malicious requests are sent to it.\n\n### Details\n\nHTTP header User-Agent or HTTP method for requests can be easily set by an attacker to be random and long. The library internally uses [httpconv.ServerRequest](https://github.com/open-telemetry/opentelemetry-go/blob/v1.12.0/semconv/internal/v2/http.go#L159) that records every value for HTTP [method](https://github.com/open-telemetry/opentelemetry-go/blob/38e1b499c3da3107694ad2660b3888eee9c8b896/semconv/internal/v2/http.go#L204) and [User-Agent](https://github.com/open-telemetry/opentelemetry-go/blob/38e1b499c3da3107694ad2660b3888eee9c8b896/semconv/internal/v2/http.go#L223).\n\n### PoC\n\nSend many requests with long randomly generated HTTP methods or/and User agents (e.g. a million) and observe how memory consumption increases during it.\n\n### Impact\n\nIn order to be affected, the program has to configure a metrics pipeline, use [otelhttp.NewHandler](https://github.com/open-telemetry/opentelemetry-go-contrib/blob/5f7e6ad5a49b45df45f61a1deb29d7f1158032df/instrumentation/net/http/otelhttp/handler.go#L63-L65) wrapper, and does not filter any unknown HTTP methods or User agents on the level of CDN, LB, previous middleware, etc.\n\n### Others\n\nIt is similar to already reported vulnerabilities\n- https://github.com/open-telemetry/opentelemetry-go-contrib/security/advisories/GHSA-5r5m-65gx-7vrh ([open-telemetry/opentelemetry-go-contrib](https://github.com/open-telemetry/opentelemetry-go-contrib))\n- https://github.com/advisories/GHSA-cg3q-j54f-5p7p ([prometheus/client_golang](https://github.com/prometheus/client_golang))\n\n### Workaround for affected versions\n\nAs a workaround to stop being affected [otelhttp.WithFilter()](https://pkg.go.dev/go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp/filters) can be used, but it requires manual careful configuration to not log certain requests entirely.\n\nFor convenience and safe usage of this library, it should by default mark with the label `unknown` non-standard HTTP methods and User agents to show that such requests were made but do not increase cardinality. In case someone wants to stay with the current behavior, library API should allow to enable it.\n\nThe other possibility is to disable HTTP metrics instrumentation by passing [`otelhttp.WithMeterProvider`](https://pkg.go.dev/go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp#WithMeterProvider) option with [`noop.NewMeterProvider`](https://pkg.go.dev/go.opentelemetry.io/otel/metric/noop#NewMeterProvider).\n\n### Solution provided by upgrading\n\nIn PR https://github.com/open-telemetry/opentelemetry-go-contrib/pull/4277, released with package version 0.44.0, the values collected for attribute `http.request.method` were changed to be restricted to a set of well-known values and other high cardinality attributes were removed.\n\n### References\n\n- https://github.com/open-telemetry/opentelemetry-go-contrib/pull/4277\n- https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.19.0\n",
      "cve": "CVE-2023-45142",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade go.opentelemetry.io/contrib/instrumentation@0.29.0 to 0.44.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/go.opentelemetry.io/contrib/instrumentation@0.29.0#net/http/httptrace/otelhttptrace"
          },
          "version": "0.29.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45142",
          "value": "CVE-2023-45142",
          "url": "https://scout.docker.com/v/CVE-2023-45142?s=github&n=net%2Fhttp%2Fhttptrace%2Fotelhttptrace&ns=go.opentelemetry.io%2Fcontrib%2Finstrumentation&t=golang&vr=%3C0.44.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45142?s=github&n=net%2Fhttp%2Fhttptrace%2Fotelhttptrace&ns=go.opentelemetry.io%2Fcontrib%2Finstrumentation&t=golang&vr=%3C0.44.0"
        }
      ]
    },
    {
      "id": "8871008e320f99da0a3d8267c4d2e733cf93b283fd937daa16158688dc4ef189",
      "category": "container_scanning",
      "message": "CVE-2023-45142 on go.opentelemetry.io/contrib/instrumentation@0.29.0",
      "description": "### Summary\n\nThis handler wrapper https://github.com/open-telemetry/opentelemetry-go-contrib/blob/5f7e6ad5a49b45df45f61a1deb29d7f1158032df/instrumentation/net/http/otelhttp/handler.go#L63-L65\nout of the box adds labels\n\n- `http.user_agent`\n- `http.method`\n\nthat have unbound cardinality. It leads to the server's potential memory exhaustion when many malicious requests are sent to it.\n\n### Details\n\nHTTP header User-Agent or HTTP method for requests can be easily set by an attacker to be random and long. The library internally uses [httpconv.ServerRequest](https://github.com/open-telemetry/opentelemetry-go/blob/v1.12.0/semconv/internal/v2/http.go#L159) that records every value for HTTP [method](https://github.com/open-telemetry/opentelemetry-go/blob/38e1b499c3da3107694ad2660b3888eee9c8b896/semconv/internal/v2/http.go#L204) and [User-Agent](https://github.com/open-telemetry/opentelemetry-go/blob/38e1b499c3da3107694ad2660b3888eee9c8b896/semconv/internal/v2/http.go#L223).\n\n### PoC\n\nSend many requests with long randomly generated HTTP methods or/and User agents (e.g. a million) and observe how memory consumption increases during it.\n\n### Impact\n\nIn order to be affected, the program has to configure a metrics pipeline, use [otelhttp.NewHandler](https://github.com/open-telemetry/opentelemetry-go-contrib/blob/5f7e6ad5a49b45df45f61a1deb29d7f1158032df/instrumentation/net/http/otelhttp/handler.go#L63-L65) wrapper, and does not filter any unknown HTTP methods or User agents on the level of CDN, LB, previous middleware, etc.\n\n### Others\n\nIt is similar to already reported vulnerabilities\n- https://github.com/open-telemetry/opentelemetry-go-contrib/security/advisories/GHSA-5r5m-65gx-7vrh ([open-telemetry/opentelemetry-go-contrib](https://github.com/open-telemetry/opentelemetry-go-contrib))\n- https://github.com/advisories/GHSA-cg3q-j54f-5p7p ([prometheus/client_golang](https://github.com/prometheus/client_golang))\n\n### Workaround for affected versions\n\nAs a workaround to stop being affected [otelhttp.WithFilter()](https://pkg.go.dev/go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp/filters) can be used, but it requires manual careful configuration to not log certain requests entirely.\n\nFor convenience and safe usage of this library, it should by default mark with the label `unknown` non-standard HTTP methods and User agents to show that such requests were made but do not increase cardinality. In case someone wants to stay with the current behavior, library API should allow to enable it.\n\nThe other possibility is to disable HTTP metrics instrumentation by passing [`otelhttp.WithMeterProvider`](https://pkg.go.dev/go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp#WithMeterProvider) option with [`noop.NewMeterProvider`](https://pkg.go.dev/go.opentelemetry.io/otel/metric/noop#NewMeterProvider).\n\n### Solution provided by upgrading\n\nIn PR https://github.com/open-telemetry/opentelemetry-go-contrib/pull/4277, released with package version 0.44.0, the values collected for attribute `http.request.method` were changed to be restricted to a set of well-known values and other high cardinality attributes were removed.\n\n### References\n\n- https://github.com/open-telemetry/opentelemetry-go-contrib/pull/4277\n- https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.19.0\n",
      "cve": "CVE-2023-45142",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade go.opentelemetry.io/contrib/instrumentation@0.29.0 to 0.44.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/go.opentelemetry.io/contrib/instrumentation@0.29.0#net/http/otelhttp"
          },
          "version": "0.29.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45142",
          "value": "CVE-2023-45142",
          "url": "https://scout.docker.com/v/CVE-2023-45142?s=github&n=net%2Fhttp%2Fotelhttp&ns=go.opentelemetry.io%2Fcontrib%2Finstrumentation&t=golang&vr=%3C0.44.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45142?s=github&n=net%2Fhttp%2Fotelhttp&ns=go.opentelemetry.io%2Fcontrib%2Finstrumentation&t=golang&vr=%3C0.44.0"
        }
      ]
    },
    {
      "id": "71a79ecfa1949af10ca852538b727d7ba626b7a625d0af7190c7f3ba3ac411ba",
      "category": "container_scanning",
      "message": "CVE-2023-45283 on stdlib@1.19.6",
      "description": "The filepath package does not recognize paths with a \\??\\ prefix as special.\n\nOn Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x.\n\nBefore fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b.\n\nSimilarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b.\n\nIn addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name.\n\nUPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.",
      "cve": "CVE-2023-45283",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.20.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45283",
          "value": "CVE-2023-45283",
          "url": "https://scout.docker.com/v/CVE-2023-45283?s=golang&n=stdlib&t=golang&vr=%3C1.20.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45283?s=golang&n=stdlib&t=golang&vr=%3C1.20.11"
        }
      ]
    },
    {
      "id": "31fc930d3462f38ffa1112b988ab162cb2e655b8748f5c0d3723fb43429b7df6",
      "category": "container_scanning",
      "message": "CVE-2023-45283 on stdlib@1.19.7",
      "description": "The filepath package does not recognize paths with a \\??\\ prefix as special.\n\nOn Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x.\n\nBefore fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b.\n\nSimilarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b.\n\nIn addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name.\n\nUPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.",
      "cve": "CVE-2023-45283",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.20.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45283",
          "value": "CVE-2023-45283",
          "url": "https://scout.docker.com/v/CVE-2023-45283?s=golang&n=stdlib&t=golang&vr=%3C1.20.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45283?s=golang&n=stdlib&t=golang&vr=%3C1.20.11"
        }
      ]
    },
    {
      "id": "2462b21aecadd34bbe80e0a892c93d93d59fb3387cd6069bbb7a14e2ad350dc5",
      "category": "container_scanning",
      "message": "CVE-2023-45283 on stdlib@1.20.3",
      "description": "The filepath package does not recognize paths with a \\??\\ prefix as special.\n\nOn Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x.\n\nBefore fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b.\n\nSimilarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b.\n\nIn addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name.\n\nUPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.",
      "cve": "CVE-2023-45283",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.20.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45283",
          "value": "CVE-2023-45283",
          "url": "https://scout.docker.com/v/CVE-2023-45283?s=golang&n=stdlib&t=golang&vr=%3C1.20.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45283?s=golang&n=stdlib&t=golang&vr=%3C1.20.11"
        }
      ]
    },
    {
      "id": "66e836f9a03f1141a467c16622f62b17e200ddb703ce1f0fd02c1e2850a445cf",
      "category": "container_scanning",
      "message": "CVE-2023-45287 on stdlib@1.19.7",
      "description": "Before Go 1.20, the RSA based TLS key exchanges used the math/big library, which is not constant time. RSA blinding was applied to prevent timing attacks, but analysis shows this may not have been fully effective. In particular it appears as if the removal of PKCS#1 padding may leak timing information, which in turn could be used to recover session key bits.\n\nIn Go 1.20, the crypto/tls library switched to a fully constant time RSA implementation, which we do not believe exhibits any timing side channels.",
      "cve": "CVE-2023-45287",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.20.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45287",
          "value": "CVE-2023-45287",
          "url": "https://scout.docker.com/v/CVE-2023-45287?s=golang&n=stdlib&t=golang&vr=%3C1.20.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45287?s=golang&n=stdlib&t=golang&vr=%3C1.20.0"
        }
      ]
    },
    {
      "id": "f15613093f45c81bda1fd52600ebd8e41d50454e397441bd2668daf01dd43e50",
      "category": "container_scanning",
      "message": "CVE-2023-45287 on stdlib@1.19.6",
      "description": "Before Go 1.20, the RSA based TLS key exchanges used the math/big library, which is not constant time. RSA blinding was applied to prevent timing attacks, but analysis shows this may not have been fully effective. In particular it appears as if the removal of PKCS#1 padding may leak timing information, which in turn could be used to recover session key bits.\n\nIn Go 1.20, the crypto/tls library switched to a fully constant time RSA implementation, which we do not believe exhibits any timing side channels.",
      "cve": "CVE-2023-45287",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.20.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45287",
          "value": "CVE-2023-45287",
          "url": "https://scout.docker.com/v/CVE-2023-45287?s=golang&n=stdlib&t=golang&vr=%3C1.20.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45287?s=golang&n=stdlib&t=golang&vr=%3C1.20.0"
        }
      ]
    },
    {
      "id": "a3c4fb92796d70d2c3945e75abadd4d9ceec30a68caf7acae7bbfcab472c98ba",
      "category": "container_scanning",
      "message": "CVE-2023-45288 on stdlib@1.19.6",
      "description": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames.\n\nMaintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed.\n\nThis permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send.\n\nThe fix sets a limit on the amount of excess header frames we will process before closing a connection.",
      "cve": "CVE-2023-45288",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.21.9",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45288",
          "value": "CVE-2023-45288",
          "url": "https://scout.docker.com/v/CVE-2023-45288?s=golang&n=stdlib&t=golang&vr=%3C1.21.9"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45288?s=golang&n=stdlib&t=golang&vr=%3C1.21.9"
        }
      ]
    },
    {
      "id": "02b9868620b6cad8ca1d92e74b52f7aaef51cb0f9286692fc8cf9ee11373dc00",
      "category": "container_scanning",
      "message": "CVE-2023-45288 on stdlib@1.19.7",
      "description": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames.\n\nMaintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed.\n\nThis permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send.\n\nThe fix sets a limit on the amount of excess header frames we will process before closing a connection.",
      "cve": "CVE-2023-45288",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.21.9",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45288",
          "value": "CVE-2023-45288",
          "url": "https://scout.docker.com/v/CVE-2023-45288?s=golang&n=stdlib&t=golang&vr=%3C1.21.9"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45288?s=golang&n=stdlib&t=golang&vr=%3C1.21.9"
        }
      ]
    },
    {
      "id": "7f50672a96b6b1d61d9f354b15902026bccaf2aea1d2aae5ba7fcfc037713ff7",
      "category": "container_scanning",
      "message": "CVE-2023-45288 on stdlib@1.20.3",
      "description": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames.\n\nMaintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed.\n\nThis permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send.\n\nThe fix sets a limit on the amount of excess header frames we will process before closing a connection.",
      "cve": "CVE-2023-45288",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.21.9",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45288",
          "value": "CVE-2023-45288",
          "url": "https://scout.docker.com/v/CVE-2023-45288?s=golang&n=stdlib&t=golang&vr=%3C1.21.9"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45288?s=golang&n=stdlib&t=golang&vr=%3C1.21.9"
        }
      ]
    },
    {
      "id": "d8af9ef3851428dd28fda78fe320f1b61661180a0ede7f475649b668300b0cd3",
      "category": "container_scanning",
      "message": "CVE-2023-47108 on go.opentelemetry.io/contrib/instrumentation@0.29.0",
      "description": "The grpc Unary Server Interceptor created by the otelgrpc package added the labels net.peer.sock.addr and net.peer.sock.port with unbounded cardinality. This can lead to the server's potential memory exhaustion when many malicious requests are sent. This leads to a denial-of-service.",
      "cve": "CVE-2023-47108",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade go.opentelemetry.io/contrib/instrumentation@0.29.0 to 0.46.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/go.opentelemetry.io/contrib/instrumentation@0.29.0#google.golang.org/grpc/otelgrpc"
          },
          "version": "0.29.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-47108",
          "value": "CVE-2023-47108",
          "url": "https://scout.docker.com/v/CVE-2023-47108?s=golang&n=google.golang.org%2Fgrpc%2Fotelgrpc&ns=go.opentelemetry.io%2Fcontrib%2Finstrumentation&t=golang&vr=%3C0.46.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-47108?s=golang&n=google.golang.org%2Fgrpc%2Fotelgrpc&ns=go.opentelemetry.io%2Fcontrib%2Finstrumentation&t=golang&vr=%3C0.46.0"
        }
      ]
    },
    {
      "id": "cedb6ae8e49041992bed8ffe23cf0930baae2a925612bcfb9d6ca5342aee99d6",
      "category": "container_scanning",
      "message": "CVE-2023-5363 on alpine/openssl@3.1.0-r4",
      "cve": "CVE-2023-5363",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@3.1.0-r4 to 3.1.4-r0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@3.1.0-r4?os_name=alpine&os_version=3.18"
          },
          "version": "3.1.0-r4"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-5363",
          "value": "CVE-2023-5363",
          "url": "https://scout.docker.com/v/CVE-2023-5363?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.4-r0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-5363?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.4-r0"
        }
      ]
    },
    {
      "id": "434e064d927c33863321580e662e3085bb62abac404dcbdc99bf6016945d401a",
      "category": "container_scanning",
      "message": "CVE-2024-24784 on stdlib@1.20.3",
      "description": "The ParseAddressList function incorrectly handles comments (text within parentheses) within display names. Since this is a misalignment with conforming address parsers, it can result in different trust decisions being made by programs using different parsers.",
      "cve": "CVE-2024-24784",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.21.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24784",
          "value": "CVE-2024-24784",
          "url": "https://scout.docker.com/v/CVE-2024-24784?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24784?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ]
    },
    {
      "id": "cc90512516e7529b6a625504cd07768e527ecf3f4972798e49447f3381e30daa",
      "category": "container_scanning",
      "message": "CVE-2024-24784 on stdlib@1.19.6",
      "description": "The ParseAddressList function incorrectly handles comments (text within parentheses) within display names. Since this is a misalignment with conforming address parsers, it can result in different trust decisions being made by programs using different parsers.",
      "cve": "CVE-2024-24784",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.21.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24784",
          "value": "CVE-2024-24784",
          "url": "https://scout.docker.com/v/CVE-2024-24784?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24784?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ]
    },
    {
      "id": "3d4e98d3e07421d66bd947201e89cb3ca4b376716f6869361ec678be65544c2b",
      "category": "container_scanning",
      "message": "CVE-2024-24784 on stdlib@1.19.7",
      "description": "The ParseAddressList function incorrectly handles comments (text within parentheses) within display names. Since this is a misalignment with conforming address parsers, it can result in different trust decisions being made by programs using different parsers.",
      "cve": "CVE-2024-24784",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.21.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24784",
          "value": "CVE-2024-24784",
          "url": "https://scout.docker.com/v/CVE-2024-24784?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24784?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ]
    },
    {
      "id": "e720c43ae3dd4230fa046d79531a13eec623a0481d65f7c6840a55791d7bf2a4",
      "category": "container_scanning",
      "message": "CVE-2024-24791 on stdlib@1.20.3",
      "description": "The net/http HTTP/1.1 client mishandled the case where a server responds to a request with an \"Expect: 100-continue\" header with a non-informational (200 or higher) status. This mishandling could leave a client connection in an invalid state, where the next request sent on the connection will fail.\n\nAn attacker sending a request to a net/http/httputil.ReverseProxy proxy can exploit this mishandling to cause a denial of service by sending \"Expect: 100-continue\" requests which elicit a non-informational response from the backend. Each such request leaves the proxy with an invalid connection, and causes one subsequent request using that connection to fail.",
      "cve": "CVE-2024-24791",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.21.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24791",
          "value": "CVE-2024-24791",
          "url": "https://scout.docker.com/v/CVE-2024-24791?s=golang&n=stdlib&t=golang&vr=%3C1.21.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24791?s=golang&n=stdlib&t=golang&vr=%3C1.21.12"
        }
      ]
    },
    {
      "id": "f8d78d5bbce7db4b3658dd4bea063b1eede26fc97a4aa085f6752d930311a1b8",
      "category": "container_scanning",
      "message": "CVE-2024-24791 on stdlib@1.19.7",
      "description": "The net/http HTTP/1.1 client mishandled the case where a server responds to a request with an \"Expect: 100-continue\" header with a non-informational (200 or higher) status. This mishandling could leave a client connection in an invalid state, where the next request sent on the connection will fail.\n\nAn attacker sending a request to a net/http/httputil.ReverseProxy proxy can exploit this mishandling to cause a denial of service by sending \"Expect: 100-continue\" requests which elicit a non-informational response from the backend. Each such request leaves the proxy with an invalid connection, and causes one subsequent request using that connection to fail.",
      "cve": "CVE-2024-24791",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.21.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24791",
          "value": "CVE-2024-24791",
          "url": "https://scout.docker.com/v/CVE-2024-24791?s=golang&n=stdlib&t=golang&vr=%3C1.21.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24791?s=golang&n=stdlib&t=golang&vr=%3C1.21.12"
        }
      ]
    },
    {
      "id": "0ca6f9c35a84966aa12db0f28346255f46e480e1e27dab60547b2b87a09d9687",
      "category": "container_scanning",
      "message": "CVE-2024-24791 on stdlib@1.19.6",
      "description": "The net/http HTTP/1.1 client mishandled the case where a server responds to a request with an \"Expect: 100-continue\" header with a non-informational (200 or higher) status. This mishandling could leave a client connection in an invalid state, where the next request sent on the connection will fail.\n\nAn attacker sending a request to a net/http/httputil.ReverseProxy proxy can exploit this mishandling to cause a denial of service by sending \"Expect: 100-continue\" requests which elicit a non-informational response from the backend. Each such request leaves the proxy with an invalid connection, and causes one subsequent request using that connection to fail.",
      "cve": "CVE-2024-24791",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.21.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24791",
          "value": "CVE-2024-24791",
          "url": "https://scout.docker.com/v/CVE-2024-24791?s=golang&n=stdlib&t=golang&vr=%3C1.21.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24791?s=golang&n=stdlib&t=golang&vr=%3C1.21.12"
        }
      ]
    },
    {
      "id": "b02cc0f79ef39d671c5d016f794b69e6b2edd37c7dbf180cd43839b612e55058",
      "category": "container_scanning",
      "message": "CVE-2024-34156 on stdlib@1.19.7",
      "description": "Calling Decoder.Decode on a message which contains deeply nested structures can cause a panic due to stack exhaustion. This is a follow-up to CVE-2022-30635.",
      "cve": "CVE-2024-34156",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.22.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-34156",
          "value": "CVE-2024-34156",
          "url": "https://scout.docker.com/v/CVE-2024-34156?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-34156?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ]
    },
    {
      "id": "5fa905ebdd7e22b6854d04d4d2815c929e28d9e8b24897d0a9c5266f127f5feb",
      "category": "container_scanning",
      "message": "CVE-2024-34156 on stdlib@1.19.6",
      "description": "Calling Decoder.Decode on a message which contains deeply nested structures can cause a panic due to stack exhaustion. This is a follow-up to CVE-2022-30635.",
      "cve": "CVE-2024-34156",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.22.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-34156",
          "value": "CVE-2024-34156",
          "url": "https://scout.docker.com/v/CVE-2024-34156?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-34156?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ]
    },
    {
      "id": "115e3a66174212794223d2d26a4e0f758cfc45b4f4539c77480bb03b7aaee13d",
      "category": "container_scanning",
      "message": "CVE-2024-34156 on stdlib@1.20.3",
      "description": "Calling Decoder.Decode on a message which contains deeply nested structures can cause a panic due to stack exhaustion. This is a follow-up to CVE-2022-30635.",
      "cve": "CVE-2024-34156",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.22.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-34156",
          "value": "CVE-2024-34156",
          "url": "https://scout.docker.com/v/CVE-2024-34156?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-34156?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ]
    },
    {
      "id": "a680b993c9e4e53421b76767e0ac4df1d60c9df4d354ab45e39e54745628f23d",
      "category": "container_scanning",
      "message": "CVE-2024-34158 on stdlib@1.20.3",
      "description": "Calling Parse on a \"// +build\" build tag line with deeply nested expressions can cause a panic due to stack exhaustion.",
      "cve": "CVE-2024-34158",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.22.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-34158",
          "value": "CVE-2024-34158",
          "url": "https://scout.docker.com/v/CVE-2024-34158?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-34158?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ]
    },
    {
      "id": "0dbbdbc769e317d92235233928c9d44d654aa6dd9973b31c80f36f7b119215ca",
      "category": "container_scanning",
      "message": "CVE-2024-34158 on stdlib@1.19.7",
      "description": "Calling Parse on a \"// +build\" build tag line with deeply nested expressions can cause a panic due to stack exhaustion.",
      "cve": "CVE-2024-34158",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.22.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-34158",
          "value": "CVE-2024-34158",
          "url": "https://scout.docker.com/v/CVE-2024-34158?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-34158?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ]
    },
    {
      "id": "8b7016d3b2876f4c510d1f1c700aed91a1576d972352a48933c85a5e2b96ab4d",
      "category": "container_scanning",
      "message": "CVE-2024-34158 on stdlib@1.19.6",
      "description": "Calling Parse on a \"// +build\" build tag line with deeply nested expressions can cause a panic due to stack exhaustion.",
      "cve": "CVE-2024-34158",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.22.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-34158",
          "value": "CVE-2024-34158",
          "url": "https://scout.docker.com/v/CVE-2024-34158?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-34158?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ]
    },
    {
      "id": "8310a7e182d62e1035158a01206ac837af648e72a0d684652df4aad98a50fa21",
      "category": "container_scanning",
      "message": "CVE-2024-37370 on alpine/krb5@1.20.1-r1",
      "cve": "CVE-2024-37370",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/krb5@1.20.1-r1 to 1.20.2-r1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/krb5@1.20.1-r1?os_name=alpine&os_version=3.18"
          },
          "version": "1.20.1-r1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-37370",
          "value": "CVE-2024-37370",
          "url": "https://scout.docker.com/v/CVE-2024-37370?s=alpine&n=krb5&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C1.20.2-r1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-37370?s=alpine&n=krb5&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C1.20.2-r1"
        }
      ]
    },
    {
      "id": "20ef0451a9ea13909fb7ead2edd8d202ad24d86226808bb2213a87ca2b0caa83",
      "category": "container_scanning",
      "message": "CVE-2024-4741 on alpine/openssl@3.1.0-r4",
      "cve": "CVE-2024-4741",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@3.1.0-r4 to 3.1.6-r0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@3.1.0-r4?os_name=alpine&os_version=3.18"
          },
          "version": "3.1.0-r4"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-4741",
          "value": "CVE-2024-4741",
          "url": "https://scout.docker.com/v/CVE-2024-4741?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.6-r0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-4741?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.6-r0"
        }
      ]
    },
    {
      "id": "3ab78a9e106cce05f530422755630f8a0983fca6301d3aa1afc35af9597ccba1",
      "category": "container_scanning",
      "message": "CVE-2024-6119 on alpine/openssl@3.1.0-r4",
      "cve": "CVE-2024-6119",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@3.1.0-r4 to 3.1.7-r0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@3.1.0-r4?os_name=alpine&os_version=3.18"
          },
          "version": "3.1.0-r4"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-6119",
          "value": "CVE-2024-6119",
          "url": "https://scout.docker.com/v/CVE-2024-6119?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.7-r0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-6119?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.7-r0"
        }
      ]
    },
    {
      "id": "8a58f6f725a3ec90a34f1668cf39cb70897e385944d5308bbe40bc833a778725",
      "category": "container_scanning",
      "message": "CVE-2025-22869 on golang.org/x/crypto@0.2.0",
      "description": "SSH servers which implement file transfer protocols are vulnerable to a denial of service attack from clients which complete the key exchange slowly, or not at all, causing pending content to be read into memory, but never transmitted.",
      "cve": "CVE-2025-22869",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/crypto@0.2.0 to 0.35.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/crypto@0.2.0"
          },
          "version": "0.2.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-22869",
          "value": "CVE-2025-22869",
          "url": "https://scout.docker.com/v/CVE-2025-22869?s=golang&n=crypto&ns=golang.org%2Fx&t=golang&vr=%3C0.35.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-22869?s=golang&n=crypto&ns=golang.org%2Fx&t=golang&vr=%3C0.35.0"
        }
      ]
    },
    {
      "id": "7dbfd2e0386dec136f460649b78b8f53647fe9018a8d4b81c1e700bcea55796c",
      "category": "container_scanning",
      "message": "CVE-2025-58188 on stdlib@1.19.7",
      "description": "Validating certificate chains which contain DSA public keys can cause programs to panic, due to a interface cast that assumes they implement the Equal method.\n\nThis affects programs which validate arbitrary certificate chains.",
      "cve": "CVE-2025-58188",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.24.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-58188",
          "value": "CVE-2025-58188",
          "url": "https://scout.docker.com/v/CVE-2025-58188?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-58188?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ]
    },
    {
      "id": "6cbb7e798f1b7f239d0d7f48dbfa2717556112bc3395aa44631eac1906c3d22e",
      "category": "container_scanning",
      "message": "CVE-2025-58188 on stdlib@1.19.6",
      "description": "Validating certificate chains which contain DSA public keys can cause programs to panic, due to a interface cast that assumes they implement the Equal method.\n\nThis affects programs which validate arbitrary certificate chains.",
      "cve": "CVE-2025-58188",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.24.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-58188",
          "value": "CVE-2025-58188",
          "url": "https://scout.docker.com/v/CVE-2025-58188?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-58188?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ]
    },
    {
      "id": "f3b4ea4eeb9fe3883818e14839b1cb4ee42ac54bf536067ae0e17523d3cb99c9",
      "category": "container_scanning",
      "message": "CVE-2025-58188 on stdlib@1.20.3",
      "description": "Validating certificate chains which contain DSA public keys can cause programs to panic, due to a interface cast that assumes they implement the Equal method.\n\nThis affects programs which validate arbitrary certificate chains.",
      "cve": "CVE-2025-58188",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.24.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-58188",
          "value": "CVE-2025-58188",
          "url": "https://scout.docker.com/v/CVE-2025-58188?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-58188?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ]
    },
    {
      "id": "87e02c6d44635b9330e875aa4916126a49759cfdca5819353e86771440a1901f",
      "category": "container_scanning",
      "message": "CVE-2025-61725 on stdlib@1.20.3",
      "description": "The ParseAddress function constructeds domain-literal address components through repeated string concatenation. When parsing large domain-literal components, this can cause excessive CPU consumption.",
      "cve": "CVE-2025-61725",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.24.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-61725",
          "value": "CVE-2025-61725",
          "url": "https://scout.docker.com/v/CVE-2025-61725?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-61725?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ]
    },
    {
      "id": "91244a3b7412b349e746c411c602940d623f5059c0819e899da5612eba085364",
      "category": "container_scanning",
      "message": "CVE-2025-61725 on stdlib@1.19.6",
      "description": "The ParseAddress function constructeds domain-literal address components through repeated string concatenation. When parsing large domain-literal components, this can cause excessive CPU consumption.",
      "cve": "CVE-2025-61725",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.24.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-61725",
          "value": "CVE-2025-61725",
          "url": "https://scout.docker.com/v/CVE-2025-61725?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-61725?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ]
    },
    {
      "id": "8a29572df500147f8df3b93d2a980f56dac6be6255dfb656ca2c63cdf9765a0d",
      "category": "container_scanning",
      "message": "CVE-2025-61725 on stdlib@1.19.7",
      "description": "The ParseAddress function constructeds domain-literal address components through repeated string concatenation. When parsing large domain-literal components, this can cause excessive CPU consumption.",
      "cve": "CVE-2025-61725",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.24.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-61725",
          "value": "CVE-2025-61725",
          "url": "https://scout.docker.com/v/CVE-2025-61725?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-61725?s=golang&n=stdlib&t=golang&vr=%3C1.24.8"
        }
      ]
    },
    {
      "id": "912d9274d704f9ca5dc8c54c63940477bad0f5a659abc69ca0c5c404feaccbe7",
      "category": "container_scanning",
      "message": "GHSA-m425-mq94-257g on google.golang.org/grpc@1.50.1",
      "description": "### Impact\nIn affected releases of gRPC-Go, it is possible for an attacker to send HTTP/2 requests, cancel them, and send subsequent requests, which is valid by the HTTP/2 protocol, but would cause the gRPC-Go server to launch more concurrent method handlers than the configured maximum stream limit.\n\n### Patches\nThis vulnerability was addressed by #6703 and has been included in patch releases: 1.56.3, 1.57.1, 1.58.3.  It is also included in the latest release, 1.59.0.\n\nAlong with applying the patch, users should also ensure they are using the `grpc.MaxConcurrentStreams` server option to apply a limit to the server's resources used for any single connection.\n\n### Workarounds\nNone.\n\n### References\n#6703\n",
      "cve": "GHSA-m425-mq94-257g",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade google.golang.org/grpc@1.50.1 to 1.56.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/google.golang.org/grpc@1.50.1"
          },
          "version": "1.50.1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "GHSA-m425-mq94-257g",
          "value": "GHSA-m425-mq94-257g",
          "url": "https://scout.docker.com/v/GHSA-m425-mq94-257g?s=github&n=grpc&ns=google.golang.org&t=golang&vr=%3C1.56.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/GHSA-m425-mq94-257g?s=github&n=grpc&ns=google.golang.org&t=golang&vr=%3C1.56.3"
        }
      ]
    },
    {
      "id": "9ae05fbbcc2675e9f535d21b87ed5b9c88f1d3d5ccebf219dd4766b1391dad00",
      "category": "container_scanning",
      "message": "CVE-2023-29403 on stdlib@1.19.7",
      "description": "On Unix platforms, the Go runtime does not behave differently when a binary is run with the setuid/setgid bits. This can be dangerous in certain cases, such as when dumping memory state, or assuming the status of standard i/o file descriptors.\n\nIf a setuid/setgid binary is executed with standard I/O file descriptors closed, opening any files can result in unexpected content being read or written with elevated privileges. Similarly, if a setuid/setgid program is terminated, either via panic or signal, it may leak the contents of its registers.",
      "cve": "CVE-2023-29403",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.19.10",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-29403",
          "value": "CVE-2023-29403",
          "url": "https://scout.docker.com/v/CVE-2023-29403?s=golang&n=stdlib&t=golang&vr=%3C1.19.10"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-29403?s=golang&n=stdlib&t=golang&vr=%3C1.19.10"
        }
      ]
    },
    {
      "id": "4bfb71b953604003ffd375bc3d023913d3763fbcab3af19b3430023eeae7a6e2",
      "category": "container_scanning",
      "message": "CVE-2023-29403 on stdlib@1.20.3",
      "description": "On Unix platforms, the Go runtime does not behave differently when a binary is run with the setuid/setgid bits. This can be dangerous in certain cases, such as when dumping memory state, or assuming the status of standard i/o file descriptors.\n\nIf a setuid/setgid binary is executed with standard I/O file descriptors closed, opening any files can result in unexpected content being read or written with elevated privileges. Similarly, if a setuid/setgid program is terminated, either via panic or signal, it may leak the contents of its registers.",
      "cve": "CVE-2023-29403",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.20.5",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-29403",
          "value": "CVE-2023-29403",
          "url": "https://scout.docker.com/v/CVE-2023-29403?s=golang&n=stdlib&t=golang&vr=%3E%3D1.20.0-0%2C%3C1.20.5"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-29403?s=golang&n=stdlib&t=golang&vr=%3E%3D1.20.0-0%2C%3C1.20.5"
        }
      ]
    },
    {
      "id": "6d48071093b9e18b9ebd2b245c26186c5b3adf7ac8240cd8e82b429597a7f890",
      "category": "container_scanning",
      "message": "CVE-2023-29403 on stdlib@1.19.6",
      "description": "On Unix platforms, the Go runtime does not behave differently when a binary is run with the setuid/setgid bits. This can be dangerous in certain cases, such as when dumping memory state, or assuming the status of standard i/o file descriptors.\n\nIf a setuid/setgid binary is executed with standard I/O file descriptors closed, opening any files can result in unexpected content being read or written with elevated privileges. Similarly, if a setuid/setgid program is terminated, either via panic or signal, it may leak the contents of its registers.",
      "cve": "CVE-2023-29403",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.19.10",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-29403",
          "value": "CVE-2023-29403",
          "url": "https://scout.docker.com/v/CVE-2023-29403?s=golang&n=stdlib&t=golang&vr=%3C1.19.10"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-29403?s=golang&n=stdlib&t=golang&vr=%3C1.19.10"
        }
      ]
    },
    {
      "id": "683b6015fa0d1ce389ce0d35e25766fdea96ea1d9a0b48624088b70b85ad84e2",
      "category": "container_scanning",
      "message": "CVE-2024-6387 on alpine/openssh@9.3_p1-r3",
      "cve": "CVE-2024-6387",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssh@9.3_p1-r3 to 9.3_p2-r2",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssh@9.3_p1-r3?os_name=alpine&os_version=3.18"
          },
          "version": "9.3_p1-r3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-6387",
          "value": "CVE-2024-6387",
          "url": "https://scout.docker.com/v/CVE-2024-6387?s=alpine&n=openssh&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C9.3_p2-r2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-6387?s=alpine&n=openssh&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C9.3_p2-r2"
        }
      ]
    },
    {
      "id": "5894ee249f144d365b405ecb871cada49f3329386d82b33927e9811251396824",
      "category": "container_scanning",
      "message": "CVE-2025-26519 on alpine/musl@1.2.4-r0",
      "cve": "CVE-2025-26519",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/musl@1.2.4-r0 to 1.2.4-r3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/musl@1.2.4-r0?os_name=alpine&os_version=3.18"
          },
          "version": "1.2.4-r0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-26519",
          "value": "CVE-2025-26519",
          "url": "https://scout.docker.com/v/CVE-2025-26519?s=alpine&n=musl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C1.2.4-r3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-26519?s=alpine&n=musl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C1.2.4-r3"
        }
      ]
    },
    {
      "id": "78bf37f82f25ed91bd8cd3517b95f7a433a45f913f82ecdc656eb357fa3df26d",
      "category": "container_scanning",
      "message": "CVE-2024-21626 on github.com/opencontainers/runc@1.1.5",
      "description": "### Impact\n\nIn runc 1.1.11 and earlier, due to an internal file descriptor leak, an attacker could cause a newly-spawned container process (from `runc exec`) to have a working directory in the host filesystem namespace, allowing for a container escape by giving access to the host filesystem (\"attack 2\"). The same attack could be used by a malicious image to allow a container process to gain access to the host filesystem through `runc run` (\"attack 1\"). Variants of attacks 1 and 2 could be also be used to overwrite semi-arbitrary host binaries, allowing for complete container escapes (\"attack 3a\" and \"attack 3b\").\n\nStrictly speaking, while attack 3a is the most severe from a CVSS perspective, attacks 2 and 3b are arguably more dangerous in practice because they allow for a breakout from inside a container as opposed to requiring a user execute a malicious image. The reason attacks 1 and 3a are scored higher is because being able to socially engineer users is treated as a given for UI:R vectors, despite attacks 2 and 3b requiring far more minimal user interaction (just reasonable `runc exec` operations on a container the attacker has access to). In any case, all four attacks can lead to full control of the host system.\n\n#### Attack 1: `process.cwd` \"mis-configuration\"\n\nIn runc 1.1.11 and earlier, several file descriptors were inadvertently leaked internally within runc into `runc init`, including a handle to the host's `/sys/fs/cgroup` (this leak was added in v1.0.0-rc93). If the container was configured to have `process.cwd` set to `/proc/self/fd/7/` (the actual fd can change depending on file opening order in `runc`), the resulting pid1 process will have a working directory in the host mount namespace and thus the spawned process can access the entire host filesystem. This alone is not an exploit against runc, however a malicious image could make any innocuous-looking non-`/` path a symlink to `/proc/self/fd/7/` and thus trick a user into starting a container whose binary has access to the host filesystem.\n\nFurthermore, prior to runc 1.1.12, runc also did not verify that the final working directory was inside the container's mount namespace after calling `chdir(2)` (as we have already joined the container namespace, it was incorrectly assumed there would be no way to chdir outside the container after `pivot_root(2)`).\n\nThe CVSS score for this attack is CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:N (8.2, high severity).\n\nNote that this attack requires a privileged user to be tricked into running a malicious container image. It should be noted that when using higher-level runtimes (such as Docker or Kubernetes), this exploit can be considered critical as it can be done remotely by anyone with the rights to start a container image (and can be exploited from within Dockerfiles using `ONBUILD` in the case of Docker).\n\n#### Attack 2: `runc exec` container breakout\n\n(This is a modification of attack 1, constructed to allow for a process inside a container to break out.)\n\nThe same fd leak and lack of verification of the working directory in attack 1 also apply to `runc exec`. If a malicious process inside the container knows that some administrative process will call `runc exec` with the `--cwd` argument and a given path, in most cases they can replace that path with a symlink to `/proc/self/fd/7/`. Once the container process has executed the container binary, `PR_SET_DUMPABLE` protections no longer apply and the attacker can open `/proc/$exec_pid/cwd` to get access to the host filesystem.\n\n`runc exec` defaults to a cwd of `/` (which cannot be replaced with a symlink), so this attack depends on the attacker getting a user (or some administrative process) to use `--cwd` and figuring out what path the target working directory is. Note that if the target working directory is a parent of the program binary being executed, the attacker might be unable to replace the path with a symlink (the `execve` will fail in most cases, unless the host filesystem layout specifically matches the container layout in specific ways and the attacker knows which binary the `runc exec` is executing).\n\nThe CVSS score for this attack is CVSS:3.1/AV:L/AC:H/PR:L/UI:R/S:C/C:H/I:H/A:N (7.2, high severity).\n\n#### Attacks 3a and 3b: `process.args` host binary overwrite attack\n\n(These are modifications of attacks 1 and 2, constructed to overwrite a host binary by using `execve` to bring a magic-link reference into the container.)\n\nAttacks 1 and 2 can be adapted to overwrite a host binary by using a path like `/proc/self/fd/7/../../../bin/bash` as the `process.args` binary argument, causing a host binary to be executed by a container process. The `/proc/$pid/exe` handle can then be used to overwrite the host binary, as seen in CVE-2019-5736 (note that the same `#!` trick can be used to avoid detection as an attacker). As the overwritten binary could be something like `/bin/bash`, as soon as a privileged user executes the target binary on the host, the attacker can pivot to gain full access to the host.\n\nFor the purposes of CVSS scoring:\n\n* Attack 3a is attack 1 but adapted to overwrite a host binary, where a malicious image is set up to execute `/proc/self/fd/7/../../../bin/bash` and run a shell script that overwrites `/proc/self/exe`, overwriting the host copy of `/bin/bash`. The CVSS score for this attack is CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H (8.6, high severity).\n* Attack 3b is attack 2 but adapted to overwrite a host binary, where the malicious container process overwrites all of the possible `runc exec` target binaries inside the container (such as `/bin/bash`) such that a host target binary is executed and then the container process opens `/proc/$pid/exe` to get access to the host binary and overwrite it. The CVSS score for this attack is CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H (8.2, high severity).\n\nAs mentioned in attack 1, while 3b is scored lower it is more dangerous in practice as it doesn't require a user to run a malicious image.\n\n### Patches\nrunc 1.1.12 has been released, and includes patches for this issue. Note that there are four separate fixes applied:\n\n* Checking that the working directory is actually inside the container by checking whether `os.Getwd` returns `ENOENT` (Linux provides a way of detecting if cwd is outside the current namespace root). This explicitly blocks runc from executing a container process when inside a non-container path and thus eliminates attacks 1 and 2 even in the case of fd leaks.\n* Close all internal runc file descriptors in the final stage of `runc init`, right before `execve`. This ensures that internal file descriptors cannot be used as an argument to `execve` and thus eliminates attacks 3a and 3b, even in the case of fd leaks. This requires hooking into some Go runtime internals to make sure we don't close critical Go internal file descriptors.\n* Fixing the specific fd leaks that made these bug exploitable (mark `/sys/fs/cgroup` as `O_CLOEXEC` and backport a fix for some `*os.File` leaks).\n* In order to protect against future `runc init` file descriptor leaks, mark all non-stdio files as `O_CLOEXEC` before executing `runc init`.\n\n### Other Runtimes\n\nWe have discovered that several other container runtimes are either potentially vulnerable to similar attacks, or do not have sufficient protection against attacks of this nature. We recommend other container runtime authors look at [our patches](#Patches) and make sure they at least add a `getcwd() != ENOENT` check as well as consider whether `close_range(3, UINT_MAX, CLOSE_RANGE_CLOEXEC)` before executing their equivalent of `runc init` is appropriate.\n\n * crun 1.12 does not leak any useful file descriptors into the `runc init`-equivalent process (so this attack is _not exploitable_ as far as we can tell), but no care is taken to make sure all non-stdio files are `O_CLOEXEC` and there is no check after `chdir(2)` to ensure the working directory is inside the container. If a file descriptor happened to be leaked in the future, this could be exploitable. In addition, any file descriptors passed to `crun` are not closed until the container process is executed, meaning that easily-overlooked programming errors by users of `crun` can lead to these attacks becoming exploitable.\n * youki 0.3.1 does not leak any useful file descriptors into the `runc init`-equivalent process (so this attack is _not exploitable_ as far as we can tell) however this appears to be pure luck. `youki` does leak a directory file descriptor from the host mount namespace, but it just so happens that the directory is the rootfs of the container (which then gets `pivot_root`'d into and so ends up as a in-root path thanks to `chroot_fs_refs`). In addition, no care is taken to make sure all non-stdio files are `O_CLOEXEC` and there is no check after `chdir(2)` to ensure the working directory is inside the container. If a file descriptor happened to be leaked in the future, this could be exploitable. In addition, any file descriptors passed to `youki` are not closed until the container process is executed, meaning that easily-overlooked programming errors by users of `youki` can lead to these attacks becoming exploitable.\n * LXC 5.0.3 does not appear to leak any useful file descriptors, and they have comments noting the importance of not leaking file descriptors in `lxc-attach`. However, they don't seem to have any proactive protection against file descriptor leaks at the point of `chdir` such as using `close_range(...)` (they do have RAII-like `__do_fclose` closers but those don't necessarily stop all leaks in this context) nor do they have any check after `chdir(2)` to ensure the working directory is inside the container. Unfortunately it seems they cannot use `CLOSE_RANGE_CLOEXEC` because they don't need to re-exec themselves.\n\n### Workarounds\nFor attacks 1 and 2, only permit containers (and `runc exec`) to use a `process.cwd` of `/`. It is not possible for `/` to be replaced with a symlink (the path is resolved from within the container's mount namespace, and you cannot change the root of a mount namespace or an fs root to a symlink).\n\nFor attacks 1 and 3a, only permit users to run trusted images.\n\nFor attack 3b, there is no practical workaround other than never using `runc exec` because any binary you try to execute with `runc exec` could end up being a malicious binary target.\n\n### See Also\n* https://www.cve.org/CVERecord?id=CVE-2024-21626\n* https://github.com/opencontainers/runc/releases/tag/v1.1.12\n* The runc 1.1.12 merge commit https://github.com/opencontainers/runc/commit/a9833ff391a71b30069a6c3f816db113379a4346, which contains the following security patches:\n  * https://github.com/opencontainers/runc/commit/506552a88bd3455e80a9b3829568e94ec0160309\n  * https://github.com/opencontainers/runc/commit/0994249a5ec4e363bfcf9af58a87a722e9a3a31b\n  * https://github.com/opencontainers/runc/commit/fbe3eed1e568a376f371d2ced1b4ac16b7d7adde\n  * https://github.com/opencontainers/runc/commit/284ba3057e428f8d6c7afcc3b0ac752e525957df\n  * https://github.com/opencontainers/runc/commit/b6633f48a8c970433737b9be5bfe4f25d58a5aa7\n  * https://github.com/opencontainers/runc/commit/683ad2ff3b01fb142ece7a8b3829de17150cf688\n  * https://github.com/opencontainers/runc/commit/e9665f4d606b64bf9c4652ab2510da368bfbd951\n\n### Credits\n\nThanks to Rory McNamara from Snyk for discovering and disclosing the original vulnerability (attack 1) to Docker, @lifubang from acmcoder for discovering how to adapt the attack to overwrite host binaries (attack 3a), and Aleksa Sarai from SUSE for discovering how to adapt the attacks to work as container breakouts using `runc exec` (attacks 2 and 3b).",
      "cve": "CVE-2024-21626",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/opencontainers/runc@1.1.5 to 1.1.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/opencontainers/runc@1.1.5"
          },
          "version": "1.1.5"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-21626",
          "value": "CVE-2024-21626",
          "url": "https://scout.docker.com/v/CVE-2024-21626?s=github&n=runc&ns=github.com%2Fopencontainers&t=golang&vr=%3E%3D1.0.0-rc93%2C%3C%3D1.1.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-21626?s=github&n=runc&ns=github.com%2Fopencontainers&t=golang&vr=%3E%3D1.0.0-rc93%2C%3C%3D1.1.11"
        }
      ]
    },
    {
      "id": "adaddf04c0d0bfd09d17fcfc6053b86113b6f5b5c69606b2f53090c7a7f142df",
      "category": "container_scanning",
      "message": "CVE-2024-21626 on github.com/opencontainers/runc@1.1.3",
      "description": "### Impact\n\nIn runc 1.1.11 and earlier, due to an internal file descriptor leak, an attacker could cause a newly-spawned container process (from `runc exec`) to have a working directory in the host filesystem namespace, allowing for a container escape by giving access to the host filesystem (\"attack 2\"). The same attack could be used by a malicious image to allow a container process to gain access to the host filesystem through `runc run` (\"attack 1\"). Variants of attacks 1 and 2 could be also be used to overwrite semi-arbitrary host binaries, allowing for complete container escapes (\"attack 3a\" and \"attack 3b\").\n\nStrictly speaking, while attack 3a is the most severe from a CVSS perspective, attacks 2 and 3b are arguably more dangerous in practice because they allow for a breakout from inside a container as opposed to requiring a user execute a malicious image. The reason attacks 1 and 3a are scored higher is because being able to socially engineer users is treated as a given for UI:R vectors, despite attacks 2 and 3b requiring far more minimal user interaction (just reasonable `runc exec` operations on a container the attacker has access to). In any case, all four attacks can lead to full control of the host system.\n\n#### Attack 1: `process.cwd` \"mis-configuration\"\n\nIn runc 1.1.11 and earlier, several file descriptors were inadvertently leaked internally within runc into `runc init`, including a handle to the host's `/sys/fs/cgroup` (this leak was added in v1.0.0-rc93). If the container was configured to have `process.cwd` set to `/proc/self/fd/7/` (the actual fd can change depending on file opening order in `runc`), the resulting pid1 process will have a working directory in the host mount namespace and thus the spawned process can access the entire host filesystem. This alone is not an exploit against runc, however a malicious image could make any innocuous-looking non-`/` path a symlink to `/proc/self/fd/7/` and thus trick a user into starting a container whose binary has access to the host filesystem.\n\nFurthermore, prior to runc 1.1.12, runc also did not verify that the final working directory was inside the container's mount namespace after calling `chdir(2)` (as we have already joined the container namespace, it was incorrectly assumed there would be no way to chdir outside the container after `pivot_root(2)`).\n\nThe CVSS score for this attack is CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:N (8.2, high severity).\n\nNote that this attack requires a privileged user to be tricked into running a malicious container image. It should be noted that when using higher-level runtimes (such as Docker or Kubernetes), this exploit can be considered critical as it can be done remotely by anyone with the rights to start a container image (and can be exploited from within Dockerfiles using `ONBUILD` in the case of Docker).\n\n#### Attack 2: `runc exec` container breakout\n\n(This is a modification of attack 1, constructed to allow for a process inside a container to break out.)\n\nThe same fd leak and lack of verification of the working directory in attack 1 also apply to `runc exec`. If a malicious process inside the container knows that some administrative process will call `runc exec` with the `--cwd` argument and a given path, in most cases they can replace that path with a symlink to `/proc/self/fd/7/`. Once the container process has executed the container binary, `PR_SET_DUMPABLE` protections no longer apply and the attacker can open `/proc/$exec_pid/cwd` to get access to the host filesystem.\n\n`runc exec` defaults to a cwd of `/` (which cannot be replaced with a symlink), so this attack depends on the attacker getting a user (or some administrative process) to use `--cwd` and figuring out what path the target working directory is. Note that if the target working directory is a parent of the program binary being executed, the attacker might be unable to replace the path with a symlink (the `execve` will fail in most cases, unless the host filesystem layout specifically matches the container layout in specific ways and the attacker knows which binary the `runc exec` is executing).\n\nThe CVSS score for this attack is CVSS:3.1/AV:L/AC:H/PR:L/UI:R/S:C/C:H/I:H/A:N (7.2, high severity).\n\n#### Attacks 3a and 3b: `process.args` host binary overwrite attack\n\n(These are modifications of attacks 1 and 2, constructed to overwrite a host binary by using `execve` to bring a magic-link reference into the container.)\n\nAttacks 1 and 2 can be adapted to overwrite a host binary by using a path like `/proc/self/fd/7/../../../bin/bash` as the `process.args` binary argument, causing a host binary to be executed by a container process. The `/proc/$pid/exe` handle can then be used to overwrite the host binary, as seen in CVE-2019-5736 (note that the same `#!` trick can be used to avoid detection as an attacker). As the overwritten binary could be something like `/bin/bash`, as soon as a privileged user executes the target binary on the host, the attacker can pivot to gain full access to the host.\n\nFor the purposes of CVSS scoring:\n\n* Attack 3a is attack 1 but adapted to overwrite a host binary, where a malicious image is set up to execute `/proc/self/fd/7/../../../bin/bash` and run a shell script that overwrites `/proc/self/exe`, overwriting the host copy of `/bin/bash`. The CVSS score for this attack is CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H (8.6, high severity).\n* Attack 3b is attack 2 but adapted to overwrite a host binary, where the malicious container process overwrites all of the possible `runc exec` target binaries inside the container (such as `/bin/bash`) such that a host target binary is executed and then the container process opens `/proc/$pid/exe` to get access to the host binary and overwrite it. The CVSS score for this attack is CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H (8.2, high severity).\n\nAs mentioned in attack 1, while 3b is scored lower it is more dangerous in practice as it doesn't require a user to run a malicious image.\n\n### Patches\nrunc 1.1.12 has been released, and includes patches for this issue. Note that there are four separate fixes applied:\n\n* Checking that the working directory is actually inside the container by checking whether `os.Getwd` returns `ENOENT` (Linux provides a way of detecting if cwd is outside the current namespace root). This explicitly blocks runc from executing a container process when inside a non-container path and thus eliminates attacks 1 and 2 even in the case of fd leaks.\n* Close all internal runc file descriptors in the final stage of `runc init`, right before `execve`. This ensures that internal file descriptors cannot be used as an argument to `execve` and thus eliminates attacks 3a and 3b, even in the case of fd leaks. This requires hooking into some Go runtime internals to make sure we don't close critical Go internal file descriptors.\n* Fixing the specific fd leaks that made these bug exploitable (mark `/sys/fs/cgroup` as `O_CLOEXEC` and backport a fix for some `*os.File` leaks).\n* In order to protect against future `runc init` file descriptor leaks, mark all non-stdio files as `O_CLOEXEC` before executing `runc init`.\n\n### Other Runtimes\n\nWe have discovered that several other container runtimes are either potentially vulnerable to similar attacks, or do not have sufficient protection against attacks of this nature. We recommend other container runtime authors look at [our patches](#Patches) and make sure they at least add a `getcwd() != ENOENT` check as well as consider whether `close_range(3, UINT_MAX, CLOSE_RANGE_CLOEXEC)` before executing their equivalent of `runc init` is appropriate.\n\n * crun 1.12 does not leak any useful file descriptors into the `runc init`-equivalent process (so this attack is _not exploitable_ as far as we can tell), but no care is taken to make sure all non-stdio files are `O_CLOEXEC` and there is no check after `chdir(2)` to ensure the working directory is inside the container. If a file descriptor happened to be leaked in the future, this could be exploitable. In addition, any file descriptors passed to `crun` are not closed until the container process is executed, meaning that easily-overlooked programming errors by users of `crun` can lead to these attacks becoming exploitable.\n * youki 0.3.1 does not leak any useful file descriptors into the `runc init`-equivalent process (so this attack is _not exploitable_ as far as we can tell) however this appears to be pure luck. `youki` does leak a directory file descriptor from the host mount namespace, but it just so happens that the directory is the rootfs of the container (which then gets `pivot_root`'d into and so ends up as a in-root path thanks to `chroot_fs_refs`). In addition, no care is taken to make sure all non-stdio files are `O_CLOEXEC` and there is no check after `chdir(2)` to ensure the working directory is inside the container. If a file descriptor happened to be leaked in the future, this could be exploitable. In addition, any file descriptors passed to `youki` are not closed until the container process is executed, meaning that easily-overlooked programming errors by users of `youki` can lead to these attacks becoming exploitable.\n * LXC 5.0.3 does not appear to leak any useful file descriptors, and they have comments noting the importance of not leaking file descriptors in `lxc-attach`. However, they don't seem to have any proactive protection against file descriptor leaks at the point of `chdir` such as using `close_range(...)` (they do have RAII-like `__do_fclose` closers but those don't necessarily stop all leaks in this context) nor do they have any check after `chdir(2)` to ensure the working directory is inside the container. Unfortunately it seems they cannot use `CLOSE_RANGE_CLOEXEC` because they don't need to re-exec themselves.\n\n### Workarounds\nFor attacks 1 and 2, only permit containers (and `runc exec`) to use a `process.cwd` of `/`. It is not possible for `/` to be replaced with a symlink (the path is resolved from within the container's mount namespace, and you cannot change the root of a mount namespace or an fs root to a symlink).\n\nFor attacks 1 and 3a, only permit users to run trusted images.\n\nFor attack 3b, there is no practical workaround other than never using `runc exec` because any binary you try to execute with `runc exec` could end up being a malicious binary target.\n\n### See Also\n* https://www.cve.org/CVERecord?id=CVE-2024-21626\n* https://github.com/opencontainers/runc/releases/tag/v1.1.12\n* The runc 1.1.12 merge commit https://github.com/opencontainers/runc/commit/a9833ff391a71b30069a6c3f816db113379a4346, which contains the following security patches:\n  * https://github.com/opencontainers/runc/commit/506552a88bd3455e80a9b3829568e94ec0160309\n  * https://github.com/opencontainers/runc/commit/0994249a5ec4e363bfcf9af58a87a722e9a3a31b\n  * https://github.com/opencontainers/runc/commit/fbe3eed1e568a376f371d2ced1b4ac16b7d7adde\n  * https://github.com/opencontainers/runc/commit/284ba3057e428f8d6c7afcc3b0ac752e525957df\n  * https://github.com/opencontainers/runc/commit/b6633f48a8c970433737b9be5bfe4f25d58a5aa7\n  * https://github.com/opencontainers/runc/commit/683ad2ff3b01fb142ece7a8b3829de17150cf688\n  * https://github.com/opencontainers/runc/commit/e9665f4d606b64bf9c4652ab2510da368bfbd951\n\n### Credits\n\nThanks to Rory McNamara from Snyk for discovering and disclosing the original vulnerability (attack 1) to Docker, @lifubang from acmcoder for discovering how to adapt the attack to overwrite host binaries (attack 3a), and Aleksa Sarai from SUSE for discovering how to adapt the attacks to work as container breakouts using `runc exec` (attacks 2 and 3b).",
      "cve": "CVE-2024-21626",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/opencontainers/runc@1.1.3 to 1.1.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/opencontainers/runc@1.1.3"
          },
          "version": "1.1.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-21626",
          "value": "CVE-2024-21626",
          "url": "https://scout.docker.com/v/CVE-2024-21626?s=github&n=runc&ns=github.com%2Fopencontainers&t=golang&vr=%3E%3D1.0.0-rc93%2C%3C%3D1.1.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-21626?s=github&n=runc&ns=github.com%2Fopencontainers&t=golang&vr=%3E%3D1.0.0-rc93%2C%3C%3D1.1.11"
        }
      ]
    },
    {
      "id": "38d4fd1ad8b567d597b526c0884369f5e589fed639792985c90dee3091f0e692",
      "category": "container_scanning",
      "message": "CVE-2024-23651 on github.com/moby/buildkit@0.11.2",
      "description": "### Impact\nTwo malicious build steps running in parallel sharing the same cache mounts with subpaths could cause a race condition that can lead to files from the host system being accessible to the build container.\n\n### Patches\nThe issue has been fixed in v0.12.5\n\n### Workarounds\nAvoid using BuildKit frontend from an untrusted source or building an untrusted Dockerfile containing cache mounts with `--mount=type=cache,source=...` options.\n\n### References\nhttps://www.openwall.com/lists/oss-security/2019/05/28/1\n",
      "cve": "CVE-2024-23651",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/moby/buildkit@0.11.2 to 0.12.5",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/moby/buildkit@0.11.2"
          },
          "version": "0.11.2"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-23651",
          "value": "CVE-2024-23651",
          "url": "https://scout.docker.com/v/CVE-2024-23651?s=github&n=buildkit&ns=github.com%2Fmoby&t=golang&vr=%3C0.12.5"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-23651?s=github&n=buildkit&ns=github.com%2Fmoby&t=golang&vr=%3C0.12.5"
        }
      ]
    },
    {
      "id": "20ac7c6095cfd0ba1ce096206c784aa01148e576131745dbebfb49e51907c5dd",
      "category": "container_scanning",
      "message": "CVE-2024-23651 on github.com/moby/buildkit@0.11.5",
      "description": "### Impact\nTwo malicious build steps running in parallel sharing the same cache mounts with subpaths could cause a race condition that can lead to files from the host system being accessible to the build container.\n\n### Patches\nThe issue has been fixed in v0.12.5\n\n### Workarounds\nAvoid using BuildKit frontend from an untrusted source or building an untrusted Dockerfile containing cache mounts with `--mount=type=cache,source=...` options.\n\n### References\nhttps://www.openwall.com/lists/oss-security/2019/05/28/1\n",
      "cve": "CVE-2024-23651",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/moby/buildkit@0.11.5 to 0.12.5",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/moby/buildkit@0.11.5"
          },
          "version": "0.11.5"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-23651",
          "value": "CVE-2024-23651",
          "url": "https://scout.docker.com/v/CVE-2024-23651?s=github&n=buildkit&ns=github.com%2Fmoby&t=golang&vr=%3C0.12.5"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-23651?s=github&n=buildkit&ns=github.com%2Fmoby&t=golang&vr=%3C0.12.5"
        }
      ]
    },
    {
      "id": "0f0b51716ffebe43a8aee38c70dca96536063e0d10c15f72a9eafa27766b1085",
      "category": "container_scanning",
      "message": "CVE-2025-30204 on github.com/golang-jwt/jwt@4.4.2",
      "description": "### Summary\n\nFunction [`parse.ParseUnverified`](https://github.com/golang-jwt/jwt/blob/c035977d9e11c351f4c05dfeae193923cbab49ee/parser.go#L138-L139) currently splits (via a call to [strings.Split](https://pkg.go.dev/strings#Split)) its argument (which is untrusted data) on periods.\n\nAs a result, in the face of a malicious request whose _Authorization_ header consists of `Bearer ` followed by many period characters, a call to that function incurs allocations to the tune of O(n) bytes (where n stands for the length of the function's argument), with a constant factor of about 16. Relevant weakness: [CWE-405: Asymmetric Resource Consumption (Amplification)](https://cwe.mitre.org/data/definitions/405.html)\n\n### Details\n\nSee [`parse.ParseUnverified`](https://github.com/golang-jwt/jwt/blob/c035977d9e11c351f4c05dfeae193923cbab49ee/parser.go#L138-L139) \n\n### Impact\n\nExcessive memory allocation",
      "cve": "CVE-2025-30204",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/golang-jwt/jwt@4.4.2 to 4.5.2",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/golang-jwt/jwt@4.4.2#v4"
          },
          "version": "4.4.2"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-30204",
          "value": "CVE-2025-30204",
          "url": "https://scout.docker.com/v/CVE-2025-30204?s=github&n=v4&ns=github.com%2Fgolang-jwt%2Fjwt&t=golang&vr=%3C4.5.2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-30204?s=github&n=v4&ns=github.com%2Fgolang-jwt%2Fjwt&t=golang&vr=%3C4.5.2"
        }
      ]
    },
    {
      "id": "778bb905afac139a36dcb4e12ab5665c5a17f20b43af57bccde979bf21f999d7",
      "category": "container_scanning",
      "message": "CVE-2025-31115 on alpine/xz@5.4.3-r0",
      "cve": "CVE-2025-31115",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/xz@5.4.3-r0 to 5.4.3-r1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/xz@5.4.3-r0?os_name=alpine&os_version=3.18"
          },
          "version": "5.4.3-r0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-31115",
          "value": "CVE-2025-31115",
          "url": "https://scout.docker.com/v/CVE-2025-31115?s=alpine&n=xz&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C5.4.3-r1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-31115?s=alpine&n=xz&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C5.4.3-r1"
        }
      ]
    },
    {
      "id": "a8cc8b626b53d08ac575db406be91882aef28960fea74ab2b45092fb221eff3a",
      "category": "container_scanning",
      "message": "CVE-2024-37371 on alpine/krb5@1.20.1-r1",
      "cve": "CVE-2024-37371",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/krb5@1.20.1-r1 to 1.20.2-r1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/krb5@1.20.1-r1?os_name=alpine&os_version=3.18"
          },
          "version": "1.20.1-r1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-37371",
          "value": "CVE-2024-37371",
          "url": "https://scout.docker.com/v/CVE-2024-37371?s=alpine&n=krb5&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C1.20.2-r1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-37371?s=alpine&n=krb5&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C1.20.2-r1"
        }
      ]
    },
    {
      "id": "b238177505e9c8360aa5a2472536deb4e4e48ef006cb4c9626c8f53ad6e4801b",
      "category": "container_scanning",
      "message": "CVE-2024-45337 on golang.org/x/crypto@0.2.0",
      "description": "Applications and libraries which misuse the ServerConfig.PublicKeyCallback callback may be susceptible to an authorization bypass.\n\nThe documentation for ServerConfig.PublicKeyCallback says that \"A call to this function does not guarantee that the key offered is in fact used to authenticate.\" Specifically, the SSH protocol allows clients to inquire about whether a public key is acceptable before proving control of the corresponding private key. PublicKeyCallback may be called with multiple keys, and the order in which the keys were provided cannot be used to infer which key the client successfully authenticated with, if any. Some applications, which store the key(s) passed to PublicKeyCallback (or derived information) and make security relevant determinations based on it once the connection is established, may make incorrect assumptions.\n\nFor example, an attacker may send public keys A and B, and then authenticate with A. PublicKeyCallback would be called only twice, first with A and then with B. A vulnerable application may then make authorization decisions based on key B for which the attacker does not actually control the private key.\n\nSince this API is widely misused, as a partial mitigation golang.org/x/crypto@v0.31.0 enforces the property that, when successfully authenticating via public key, the last key passed to ServerConfig.PublicKeyCallback will be the key used to authenticate the connection. PublicKeyCallback will now be called multiple times with the same key, if necessary. Note that the client may still not control the last key passed to PublicKeyCallback if the connection is then authenticated with a different method, such as PasswordCallback, KeyboardInteractiveCallback, or NoClientAuth.\n\nUsers should be using the Extensions field of the Permissions return value from the various authentication callbacks to record data associated with the authentication attempt instead of referencing external state. Once the connection is established the state corresponding to the successful authentication attempt can be retrieved via the ServerConn.Permissions field. Note that some third-party libraries misuse the Permissions type by sharing it across authentication attempts; users of third-party libraries should refer to the relevant projects for guidance.",
      "cve": "CVE-2024-45337",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/crypto@0.2.0 to 0.31.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/crypto@0.2.0"
          },
          "version": "0.2.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-45337",
          "value": "CVE-2024-45337",
          "url": "https://scout.docker.com/v/CVE-2024-45337?s=github&n=crypto&ns=golang.org%2Fx&t=golang&vr=%3C0.31.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-45337?s=github&n=crypto&ns=golang.org%2Fx&t=golang&vr=%3C0.31.0"
        }
      ]
    },
    {
      "id": "6bd322a083cfe4e97003b169a818a67511f52a14e457196d9aedcd70430af28a",
      "category": "container_scanning",
      "message": "CVE-2024-5535 on alpine/openssl@3.1.0-r4",
      "cve": "CVE-2024-5535",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@3.1.0-r4 to 3.1.6-r0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@3.1.0-r4?os_name=alpine&os_version=3.18"
          },
          "version": "3.1.0-r4"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-5535",
          "value": "CVE-2024-5535",
          "url": "https://scout.docker.com/v/CVE-2024-5535?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.6-r0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-5535?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.6-r0"
        }
      ]
    },
    {
      "id": "12d116058c3c1043645ed8dc9c32050ee3d72438437b377f8fc2036a5a59379d",
      "category": "container_scanning",
      "message": "CVE-2025-22871 on stdlib@1.19.6",
      "description": "The net/http package improperly accepts a bare LF as a line terminator in chunked data chunk-size lines. This can permit request smuggling if a net/http server is used in conjunction with a server that incorrectly accepts a bare LF as part of a chunk-ext.",
      "cve": "CVE-2025-22871",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.23.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-22871",
          "value": "CVE-2025-22871",
          "url": "https://scout.docker.com/v/CVE-2025-22871?s=golang&n=stdlib&t=golang&vr=%3C1.23.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-22871?s=golang&n=stdlib&t=golang&vr=%3C1.23.8"
        }
      ]
    },
    {
      "id": "39daed630afb9a1f4eeee1cd1e5136cb1db5cb2833e5ebca86d96e94c5c5d122",
      "category": "container_scanning",
      "message": "CVE-2025-22871 on stdlib@1.20.3",
      "description": "The net/http package improperly accepts a bare LF as a line terminator in chunked data chunk-size lines. This can permit request smuggling if a net/http server is used in conjunction with a server that incorrectly accepts a bare LF as part of a chunk-ext.",
      "cve": "CVE-2025-22871",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.23.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-22871",
          "value": "CVE-2025-22871",
          "url": "https://scout.docker.com/v/CVE-2025-22871?s=golang&n=stdlib&t=golang&vr=%3C1.23.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-22871?s=golang&n=stdlib&t=golang&vr=%3C1.23.8"
        }
      ]
    },
    {
      "id": "9353e4969036ef39b96628695507dac4799de465f36dcf0264bd3e94ad17c4ed",
      "category": "container_scanning",
      "message": "CVE-2025-22871 on stdlib@1.19.7",
      "description": "The net/http package improperly accepts a bare LF as a line terminator in chunked data chunk-size lines. This can permit request smuggling if a net/http server is used in conjunction with a server that incorrectly accepts a bare LF as part of a chunk-ext.",
      "cve": "CVE-2025-22871",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.23.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-22871",
          "value": "CVE-2025-22871",
          "url": "https://scout.docker.com/v/CVE-2025-22871?s=golang&n=stdlib&t=golang&vr=%3C1.23.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-22871?s=golang&n=stdlib&t=golang&vr=%3C1.23.8"
        }
      ]
    },
    {
      "id": "8159f97bd3be338b225bb626d62a30185d23225b11c421eb516599332afa23b2",
      "category": "container_scanning",
      "message": "CVE-2024-41110 on github.com/docker/docker@23.0.4+incompatible",
      "description": "A security vulnerability has been detected in certain versions of Docker Engine, which could allow an attacker to bypass [authorization plugins (AuthZ)](https://docs.docker.com/engine/extend/plugins_authorization/) under specific circumstances. The base likelihood of this being exploited is low. This advisory outlines the issue, identifies the affected versions, and provides remediation steps for impacted users.\n\n### Impact\n\nUsing a specially-crafted API request, an Engine API client could make the daemon forward the request or response to an [authorization plugin](https://docs.docker.com/engine/extend/plugins_authorization/) without the body. In certain circumstances, the authorization plugin may allow a request which it would have otherwise denied if the body had been forwarded to it.\n\n\nA security issue was discovered In 2018,  where an attacker could bypass AuthZ plugins using a specially crafted API request. This could lead to unauthorized actions, including privilege escalation. Although this issue was fixed in Docker Engine [v18.09.1](https://docs.docker.com/engine/release-notes/18.09/#security-fixes-1) in January 2019, the fix was not carried forward to later major versions, resulting in a regression. Anyone who depends on authorization plugins that introspect the request and/or response body to make access control decisions is potentially impacted.\n\nDocker EE v19.03.x and all versions of Mirantis Container Runtime **are not vulnerable.**\n\n### Vulnerability details\n\n- **AuthZ bypass and privilege escalation:** An attacker could exploit a bypass using an API request with Content-Length set to 0, causing the Docker daemon to forward the request without the body to the AuthZ plugin, which might approve the request incorrectly.\n- **Initial fix:** The issue was fixed in Docker Engine [v18.09.1](https://docs.docker.com/engine/release-notes/18.09/#security-fixes-1) January 2019..\n- **Regression:** The fix was not included in Docker Engine v19.03 or newer versions. This was identified in April 2024 and patches were released for the affected versions on July 23, 2024. The issue was assigned [CVE-2024-41110](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-41110).\n\n### Patches\n\n- docker-ce v27.1.1 containes patches to fix the vulnerability.\n- Patches have also been merged into the master, 19.0, 20.0, 23.0, 24.0, 25.0, 26.0, and 26.1 release branches.\n\n### Remediation steps\n\n- If you are running an affected version, update to the most recent patched version.\n- Mitigation if unable to update immediately:\n    - Avoid using AuthZ plugins.\n    - Restrict access to the Docker API to trusted parties, following the principle of least privilege.\n\n\n### References\n\n- https://github.com/moby/moby/commit/fc274cd2ff4cf3b48c91697fb327dd1fb95588fb\n- https://github.com/moby/moby/commit/a79fabbfe84117696a19671f4aa88b82d0f64fc1\n- https://www.docker.com/blog/docker-security-advisory-docker-engine-authz-plugin/",
      "cve": "CVE-2024-41110",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/docker/docker@23.0.4+incompatible to 23.0.15",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/docker/docker@23.0.4%2Bincompatible"
          },
          "version": "23.0.4+incompatible"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-41110",
          "value": "CVE-2024-41110",
          "url": "https://scout.docker.com/v/CVE-2024-41110?s=github&n=docker&ns=github.com%2Fdocker&t=golang&vr=%3E%3D19.03.0%2C%3C23.0.15"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-41110?s=github&n=docker&ns=github.com%2Fdocker&t=golang&vr=%3E%3D19.03.0%2C%3C23.0.15"
        }
      ]
    },
    {
      "id": "b3adb7268990a3b8f3bff3c7351683b743150208a286f9c58718e9d033b86fac",
      "category": "container_scanning",
      "message": "CVE-2022-48174 on alpine/busybox@1.36.0-r9",
      "cve": "CVE-2022-48174",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/busybox@1.36.0-r9 to 1.36.1-r1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/busybox@1.36.0-r9?os_name=alpine&os_version=3.18"
          },
          "version": "1.36.0-r9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-48174",
          "value": "CVE-2022-48174",
          "url": "https://scout.docker.com/v/CVE-2022-48174?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C1.36.1-r1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-48174?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C1.36.1-r1"
        }
      ]
    },
    {
      "id": "3ec197dcc3867358c839bc68548e56ffec0d21c3e46295065dcf2325caf7b43b",
      "category": "container_scanning",
      "message": "CVE-2023-24538 on stdlib@1.19.6",
      "description": "Templates do not properly consider backticks (`) as Javascript string delimiters, and do not escape them as expected.\n\nBackticks are used, since ES6, for JS template literals. If a template contains a Go template action within a Javascript template literal, the contents of the action can be used to terminate the literal, injecting arbitrary Javascript code into the Go template.\n\nAs ES6 template literals are rather complex, and themselves can do string interpolation, the decision was made to simply disallow Go template actions from being used inside of them (e.g. \"var a = {{.}}\"), since there is no obviously safe way to allow this behavior. This takes the same approach as github.com/google/safehtml.\n\nWith fix, Template.Parse returns an Error when it encounters templates like this, with an ErrorCode of value 12. This ErrorCode is currently unexported, but will be exported in the release of Go 1.21.\n\nUsers who rely on the previous behavior can re-enable it using the GODEBUG flag jstmpllitinterp=1, with the caveat that backticks will now be escaped. This should be used with caution.",
      "cve": "CVE-2023-24538",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.19.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-24538",
          "value": "CVE-2023-24538",
          "url": "https://scout.docker.com/v/CVE-2023-24538?s=golang&n=stdlib&t=golang&vr=%3C1.19.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-24538?s=golang&n=stdlib&t=golang&vr=%3C1.19.8"
        }
      ]
    },
    {
      "id": "bf566f5604e661e0f93a14968c18d21647f8993bcb526c73071b9f1698472a3d",
      "category": "container_scanning",
      "message": "CVE-2023-24538 on stdlib@1.19.7",
      "description": "Templates do not properly consider backticks (`) as Javascript string delimiters, and do not escape them as expected.\n\nBackticks are used, since ES6, for JS template literals. If a template contains a Go template action within a Javascript template literal, the contents of the action can be used to terminate the literal, injecting arbitrary Javascript code into the Go template.\n\nAs ES6 template literals are rather complex, and themselves can do string interpolation, the decision was made to simply disallow Go template actions from being used inside of them (e.g. \"var a = {{.}}\"), since there is no obviously safe way to allow this behavior. This takes the same approach as github.com/google/safehtml.\n\nWith fix, Template.Parse returns an Error when it encounters templates like this, with an ErrorCode of value 12. This ErrorCode is currently unexported, but will be exported in the release of Go 1.21.\n\nUsers who rely on the previous behavior can re-enable it using the GODEBUG flag jstmpllitinterp=1, with the caveat that backticks will now be escaped. This should be used with caution.",
      "cve": "CVE-2023-24538",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.19.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-24538",
          "value": "CVE-2023-24538",
          "url": "https://scout.docker.com/v/CVE-2023-24538?s=golang&n=stdlib&t=golang&vr=%3C1.19.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-24538?s=golang&n=stdlib&t=golang&vr=%3C1.19.8"
        }
      ]
    },
    {
      "id": "5e1bb299d129d9f1c88d58ab812f25656c97f2ec42d6241313292e1d7a3e3c74",
      "category": "container_scanning",
      "message": "CVE-2023-24540 on stdlib@1.19.6",
      "description": "Not all valid JavaScript whitespace characters are considered to be whitespace. Templates containing whitespace characters outside of the character set \"\\t\\n\\f\\r\\u0020\\u2028\\u2029\" in JavaScript contexts that also contain actions may not be properly sanitized during execution.",
      "cve": "CVE-2023-24540",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.19.9",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-24540",
          "value": "CVE-2023-24540",
          "url": "https://scout.docker.com/v/CVE-2023-24540?s=golang&n=stdlib&t=golang&vr=%3C1.19.9"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-24540?s=golang&n=stdlib&t=golang&vr=%3C1.19.9"
        }
      ]
    },
    {
      "id": "ecd8e356299526f3b226f416f99e5f9fe2a9f6780a55fc8c71988878ffb9b50f",
      "category": "container_scanning",
      "message": "CVE-2023-24540 on stdlib@1.20.3",
      "description": "Not all valid JavaScript whitespace characters are considered to be whitespace. Templates containing whitespace characters outside of the character set \"\\t\\n\\f\\r\\u0020\\u2028\\u2029\" in JavaScript contexts that also contain actions may not be properly sanitized during execution.",
      "cve": "CVE-2023-24540",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.20.4",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-24540",
          "value": "CVE-2023-24540",
          "url": "https://scout.docker.com/v/CVE-2023-24540?s=golang&n=stdlib&t=golang&vr=%3E%3D1.20.0-0%2C%3C1.20.4"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-24540?s=golang&n=stdlib&t=golang&vr=%3E%3D1.20.0-0%2C%3C1.20.4"
        }
      ]
    },
    {
      "id": "62d8e9c7080fb711b0609e67ceb7909e48bdd373ea0878a89f80660757b73dc8",
      "category": "container_scanning",
      "message": "CVE-2023-24540 on stdlib@1.19.7",
      "description": "Not all valid JavaScript whitespace characters are considered to be whitespace. Templates containing whitespace characters outside of the character set \"\\t\\n\\f\\r\\u0020\\u2028\\u2029\" in JavaScript contexts that also contain actions may not be properly sanitized during execution.",
      "cve": "CVE-2023-24540",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.19.9",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-24540",
          "value": "CVE-2023-24540",
          "url": "https://scout.docker.com/v/CVE-2023-24540?s=golang&n=stdlib&t=golang&vr=%3C1.19.9"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-24540?s=golang&n=stdlib&t=golang&vr=%3C1.19.9"
        }
      ]
    },
    {
      "id": "97c19b0663b57e21497b0bbded15d9b6c4bda17268b3a77eb915391de3ecba25",
      "category": "container_scanning",
      "message": "CVE-2024-23653 on github.com/moby/buildkit@0.11.2",
      "description": "### Impact\nIn addition to running containers as build steps, BuildKit also provides APIs for running interactive containers based on built images. It was possible to use these APIs to ask BuildKit to run a container with elevated privileges. Normally, running such containers is only allowed if special `security.insecure` entitlement is enabled both by buildkitd configuration and allowed by the user initializing the build request.\n\n### Patches\nThe issue has been fixed in v0.12.5 .\n\n### Workarounds\nAvoid using BuildKit frontends from untrusted sources. A frontend image is usually specified as the `#syntax` line on your Dockerfile, or with `--frontend` flag when using `buildctl build` command.\n\n### References\n\n",
      "cve": "CVE-2024-23653",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/moby/buildkit@0.11.2 to 0.12.5",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/moby/buildkit@0.11.2"
          },
          "version": "0.11.2"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-23653",
          "value": "CVE-2024-23653",
          "url": "https://scout.docker.com/v/CVE-2024-23653?s=github&n=buildkit&ns=github.com%2Fmoby&t=golang&vr=%3C0.12.5"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-23653?s=github&n=buildkit&ns=github.com%2Fmoby&t=golang&vr=%3C0.12.5"
        }
      ]
    },
    {
      "id": "2143ee295e4ede820d006bf9e4ff77525621863ea77ce6047e62bc5951974480",
      "category": "container_scanning",
      "message": "CVE-2024-23653 on github.com/moby/buildkit@0.11.5",
      "description": "### Impact\nIn addition to running containers as build steps, BuildKit also provides APIs for running interactive containers based on built images. It was possible to use these APIs to ask BuildKit to run a container with elevated privileges. Normally, running such containers is only allowed if special `security.insecure` entitlement is enabled both by buildkitd configuration and allowed by the user initializing the build request.\n\n### Patches\nThe issue has been fixed in v0.12.5 .\n\n### Workarounds\nAvoid using BuildKit frontends from untrusted sources. A frontend image is usually specified as the `#syntax` line on your Dockerfile, or with `--frontend` flag when using `buildctl build` command.\n\n### References\n\n",
      "cve": "CVE-2024-23653",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/moby/buildkit@0.11.5 to 0.12.5",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/moby/buildkit@0.11.5"
          },
          "version": "0.11.5"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-23653",
          "value": "CVE-2024-23653",
          "url": "https://scout.docker.com/v/CVE-2024-23653?s=github&n=buildkit&ns=github.com%2Fmoby&t=golang&vr=%3C0.12.5"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-23653?s=github&n=buildkit&ns=github.com%2Fmoby&t=golang&vr=%3C0.12.5"
        }
      ]
    },
    {
      "id": "8b5dcf61ab30932e9b52c8e1e61136e21546b88f8b64fdcde110acef120baef6",
      "category": "container_scanning",
      "message": "CVE-2024-24790 on stdlib@1.19.7",
      "description": "The various Is methods (IsPrivate, IsLoopback, etc) did not work as expected for IPv4-mapped IPv6 addresses, returning false for addresses which would return true in their traditional IPv4 forms.",
      "cve": "CVE-2024-24790",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.7 to 1.21.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.7"
          },
          "version": "1.19.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24790",
          "value": "CVE-2024-24790",
          "url": "https://scout.docker.com/v/CVE-2024-24790?s=golang&n=stdlib&t=golang&vr=%3C1.21.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24790?s=golang&n=stdlib&t=golang&vr=%3C1.21.11"
        }
      ]
    },
    {
      "id": "78f51ff00c43b8812093f3487db099340d734a97e39591a71e1710cb36fbeff9",
      "category": "container_scanning",
      "message": "CVE-2024-24790 on stdlib@1.19.6",
      "description": "The various Is methods (IsPrivate, IsLoopback, etc) did not work as expected for IPv4-mapped IPv6 addresses, returning false for addresses which would return true in their traditional IPv4 forms.",
      "cve": "CVE-2024-24790",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.6 to 1.21.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.6"
          },
          "version": "1.19.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24790",
          "value": "CVE-2024-24790",
          "url": "https://scout.docker.com/v/CVE-2024-24790?s=golang&n=stdlib&t=golang&vr=%3C1.21.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24790?s=golang&n=stdlib&t=golang&vr=%3C1.21.11"
        }
      ]
    },
    {
      "id": "e0ab3888cced6a98453fa35402b6085458761cc5aa1aafea3cafb74802a90351",
      "category": "container_scanning",
      "message": "CVE-2024-24790 on stdlib@1.20.3",
      "description": "The various Is methods (IsPrivate, IsLoopback, etc) did not work as expected for IPv4-mapped IPv6 addresses, returning false for addresses which would return true in their traditional IPv4 forms.",
      "cve": "CVE-2024-24790",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.3 to 1.21.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.3"
          },
          "version": "1.20.3"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24790",
          "value": "CVE-2024-24790",
          "url": "https://scout.docker.com/v/CVE-2024-24790?s=golang&n=stdlib&t=golang&vr=%3C1.21.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24790?s=golang&n=stdlib&t=golang&vr=%3C1.21.11"
        }
      ]
    },
    {
      "id": "e6cee6664b72505c12e9ce82e85f47673046586287825e00ba713682f930c5be",
      "category": "container_scanning",
      "message": "CVE-2024-23652 on github.com/moby/buildkit@0.11.5",
      "description": "### Impact\nA malicious BuildKit frontend or Dockerfile using `RUN --mount` could trick the feature that removes empty files created for the mountpoints into removing a file outside the container, from the host system.\n\n### Patches\nThe issue has been fixed in v0.12.5\n\n### Workarounds\nAvoid using BuildKit frontend from an untrusted source or building an untrusted Dockerfile containing `RUN --mount` feature.\n\n### References\n\n",
      "cve": "CVE-2024-23652",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/moby/buildkit@0.11.5 to 0.12.5",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/moby/buildkit@0.11.5"
          },
          "version": "0.11.5"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-23652",
          "value": "CVE-2024-23652",
          "url": "https://scout.docker.com/v/CVE-2024-23652?s=github&n=buildkit&ns=github.com%2Fmoby&t=golang&vr=%3C0.12.5"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-23652?s=github&n=buildkit&ns=github.com%2Fmoby&t=golang&vr=%3C0.12.5"
        }
      ]
    },
    {
      "id": "2048a72c585298433eb2653cc0754b350f8f00cc33f51798639bf42fc66b0cb3",
      "category": "container_scanning",
      "message": "CVE-2024-23652 on github.com/moby/buildkit@0.11.2",
      "description": "### Impact\nA malicious BuildKit frontend or Dockerfile using `RUN --mount` could trick the feature that removes empty files created for the mountpoints into removing a file outside the container, from the host system.\n\n### Patches\nThe issue has been fixed in v0.12.5\n\n### Workarounds\nAvoid using BuildKit frontend from an untrusted source or building an untrusted Dockerfile containing `RUN --mount` feature.\n\n### References\n\n",
      "cve": "CVE-2024-23652",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/moby/buildkit@0.11.2 to 0.12.5",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/moby/buildkit@0.11.2"
          },
          "version": "0.11.2"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:20.10-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-23652",
          "value": "CVE-2024-23652",
          "url": "https://scout.docker.com/v/CVE-2024-23652?s=github&n=buildkit&ns=github.com%2Fmoby&t=golang&vr=%3C0.12.5"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-23652?s=github&n=buildkit&ns=github.com%2Fmoby&t=golang&vr=%3C0.12.5"
        }
      ]
    }
  ],
  "remediations": [],
  "scan": {
    "start_time": "2025-10-31T19:41:39",
    "end_time": "2025-10-31T19:41:39",
    "status": "success",
    "type": "container_scanning",
    "scanner": {
      "id": "docker-scout",
      "name": "Docker Scout",
      "version": "1.18.3",
      "vendor": {
        "name": "Docker"
      }
    },
    "analyzer": {
      "id": "docker-scout",
      "name": "Docker Scout",
      "version": "1.18.3",
      "vendor": {
        "name": "Docker"
      }
    }
  }
}
