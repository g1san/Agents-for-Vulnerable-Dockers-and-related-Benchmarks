import os
from flask import Flask, request, jsonify
import pymysql

app = Flask(__name__)

# DB connection using credentials from environment (simulating insecure handling)
DB_HOST = os.getenv('DB_HOST', 'db')
DB_USER = os.getenv('MYSQL_USER', 'appuser')
DB_PASSWORD = os.getenv('MYSQL_PASSWORD', 'apppassword')
DB_NAME = os.getenv('MYSQL_DATABASE', 'vulnapp')

def get_connection():
    return pymysql.connect(host=DB_HOST, user=DB_USER, password=DB_PASSWORD, db=DB_NAME, cursorclass=pymysql.cursors.DictCursor)

# Vulnerable endpoint that executes arbitrary SQL passed via query parameter (SQL injection)
@app.route('/search')
def search():
    term = request.args.get('q', '')
    conn = get_connection()
    try:
        with conn.cursor() as cursor:
            # Directly interpolating user input â€“ intentional vulnerability for CVE testing
            sql = f"SELECT * FROM users WHERE name LIKE '%{term}%';"
            cursor.execute(sql)
            results = cursor.fetchall()
        return jsonify(results)
    finally:
        conn.close()

# Simple health check
@app.route('/')
def index():
    return 'Vulnerable Flask app running.'

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)