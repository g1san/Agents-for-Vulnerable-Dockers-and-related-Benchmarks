import os
from flask import Flask, request, send_file, abort
import mysql.connector
import time

app = Flask(__name__)

# Simple DB connection for demonstration with retry logic

def get_db_connection(retries=5, delay=3):
    for attempt in range(retries):
        try:
            conn = mysql.connector.connect(
                host='vulnerable_db',
                user='testuser',
                password='testpass',
                database='testdb'
            )
            return conn
        except mysql.connector.Error as e:
            if attempt < retries - 1:
                time.sleep(delay)
            else:
                raise e

@app.route('/')
def index():
    return 'Vulnerable Application Ready'

# Endpoint that reads a file path from a query parameter – this mimics the path‑traversal flaw exploited in CVE‑2020‑17518
@app.route('/read')
def read_file():
    path = request.args.get('path')
    if not path:
        abort(400, 'Missing path parameter')
    # No validation – vulnerable to arbitrary file read
    try:
        return send_file(path)
    except Exception as e:
        return str(e), 500

# Endpoint that demonstrates Docker socket misuse – CVE‑2020‑17518 allowed a container with the socket mounted to escape the host
@app.route('/docker')
def docker_socket():
    try:
        with open('/var/run/docker.sock', 'rb') as f:
            data = f.read(100)
        return f'Docker socket accessed, first 100 bytes: {data}', 200
    except Exception as e:
        return str(e), 500

if __name__ == '__main__':
    # Ensure DB is reachable before starting the server
    try:
        conn = get_db_connection()
        conn.close()
    except Exception as e:
        print(f'Failed to connect to database on startup: {e}')
        exit(1)
    app.run(host='0.0.0.0', port=5000)