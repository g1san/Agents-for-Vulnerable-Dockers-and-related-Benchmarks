{
    "files": [
        {
            "location": "./../../dockers/CVE-2020-17518/custom_no_tool/docker-compose.yml",
            "content": "services:\n  flink:\n    build: ./flink\n    ports:\n      - \"8081:8081\"\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8081\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n  vulnerable_app:\n    build: ./app\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    ports:\n      - \"5000:5000\"\n    depends_on:\n      flink:\n        condition: service_healthy\n      vulnerable_db:\n        condition: service_healthy\n  vulnerable_db:\n    image: mysql:5.7\n    environment:\n      MYSQL_ROOT_PASSWORD: rootpass\n      MYSQL_DATABASE: testdb\n      MYSQL_USER: testuser\n      MYSQL_PASSWORD: testpass\n    volumes:\n      - db_data:/var/lib/mysql\n      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql\n    ports:\n      - \"3306:3306\"\n    healthcheck:\n      test: [\"CMD\", \"mysqladmin\", \"ping\", \"-hlocalhost\", \"-uroot\", \"-p${MYSQL_ROOT_PASSWORD}\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\nvolumes:\n  db_data:"
        },
        {
            "location": "./../../dockers/CVE-2020-17518/custom_no_tool/app/Dockerfile",
            "content": "FROM python:3.9-slim\nWORKDIR /usr/src/app\nRUN apt-get update && apt-get install -y gcc libmariadb-dev && rm -rf /var/lib/apt/lists/*\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\nCOPY . .\nEXPOSE 5000\nCMD [\"python\", \"app.py\"]"
        },
        {
            "location": "./../../dockers/CVE-2020-17518/custom_no_tool/app/app.py",
            "content": "import os\nfrom flask import Flask, request, send_file, abort\nimport mysql.connector\nimport time\n\napp = Flask(__name__)\n\n# Simple DB connection for demonstration with retry logic\n\ndef get_db_connection(retries=5, delay=3):\n    for attempt in range(retries):\n        try:\n            conn = mysql.connector.connect(\n                host='vulnerable_db',\n                user='testuser',\n                password='testpass',\n                database='testdb'\n            )\n            return conn\n        except mysql.connector.Error as e:\n            if attempt < retries - 1:\n                time.sleep(delay)\n            else:\n                raise e\n\n@app.route('/')\ndef index():\n    return 'Vulnerable Application Ready'\n\n# Endpoint that reads a file path from a query parameter \u2013 this mimics the path\u2011traversal flaw exploited in CVE\u20112020\u201117518\n@app.route('/read')\ndef read_file():\n    path = request.args.get('path')\n    if not path:\n        abort(400, 'Missing path parameter')\n    # No validation \u2013 vulnerable to arbitrary file read\n    try:\n        return send_file(path)\n    except Exception as e:\n        return str(e), 500\n\n# Endpoint that demonstrates Docker socket misuse \u2013 CVE\u20112020\u201117518 allowed a container with the socket mounted to escape the host\n@app.route('/docker')\ndef docker_socket():\n    try:\n        with open('/var/run/docker.sock', 'rb') as f:\n            data = f.read(100)\n        return f'Docker socket accessed, first 100 bytes: {data}', 200\n    except Exception as e:\n        return str(e), 500\n\nif __name__ == '__main__':\n    # Ensure DB is reachable before starting the server\n    try:\n        conn = get_db_connection()\n        conn.close()\n    except Exception as e:\n        print(f'Failed to connect to database on startup: {e}')\n        exit(1)\n    app.run(host='0.0.0.0', port=5000)"
        },
        {
            "location": "./../../dockers/CVE-2020-17518/custom_no_tool/app/requirements.txt",
            "content": "flask\nmysql-connector-python"
        },
        {
            "location": "./../../dockers/CVE-2020-17518/custom_no_tool/db/init.sql",
            "content": "CREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nINSERT INTO users (username, password) VALUES ('alice', 'alicepwd'), ('bob', 'bobpwd');"
        },
        {
            "location": "./../../dockers/CVE-2020-17518/custom_no_tool/db/init.sql",
            "content": "CREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nINSERT INTO users (username, password) VALUES ('alice', 'alicepwd'), ('bob', 'bobpwd');"
        },
        {
            "location": "./../../dockers/CVE-2020-17518/custom_no_tool/db/init.sql",
            "content": "CREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nINSERT INTO users (username, password) VALUES ('alice', 'alicepwd'), ('bob', 'bobpwd');"
        },
        {
            "location": "./../../dockers/CVE-2020-17518/custom_no_tool/db/init.sql",
            "content": "CREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nINSERT INTO users (username, password) VALUES ('alice', 'alicepwd'), ('bob', 'bobpwd');"
        },
        {
            "location": "./../../dockers/CVE-2020-17518/custom_no_tool/db/init.sql",
            "content": "CREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(50) NOT NULL\n);\n\nINSERT INTO users (username, password) VALUES ('alice', 'alicepwd'), ('bob', 'bobpwd');"
        },
        {
            "location": "./../../dockers/CVE-2020-17518/custom_no_tool/flink/Dockerfile",
            "content": "FROM flink:1.10.2\nUSER root\nRUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*\n"
        }
    ],
    "directory_tree": "CVE-2020-17518/custom_no_tool"
}