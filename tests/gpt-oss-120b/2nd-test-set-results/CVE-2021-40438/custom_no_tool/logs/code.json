{
    "files": [
        {
            "location": "./../../dockers/CVE-2021-40438/custom_no_tool/docker-compose.yml",
            "content": "services:\n  vulnerable-app:\n    build: ./app\n    ports:\n      - \"8080:8080\"\n    environment:\n      - FLASK_ENV=development\n  httpd:\n    build: ./httpd\n    ports:\n      - \"80:80\""
        },
        {
            "location": "./../../dockers/CVE-2021-40438/custom_no_tool/app/Dockerfile",
            "content": "FROM python:3.9-slim\nWORKDIR /app\nRUN mkdir -p /app/files\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\nCOPY . .\nEXPOSE 8080\nCMD [\"python\", \"app.py\"]"
        },
        {
            "location": "./../../dockers/CVE-2021-40438/custom_no_tool/app/requirements.txt",
            "content": "Flask==2.0.3\nWerkzeug==2.0.3"
        },
        {
            "location": "./../../dockers/CVE-2021-40438/custom_no_tool/app/app.py",
            "content": "from flask import Flask, request, send_file, abort\nimport os\n\napp = Flask(__name__)\n\n# Base directory for files (absolute path)\nBASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), 'files'))\n\n# Ensure the files directory exists at runtime (in case it was not created during build)\nos.makedirs(BASE_DIR, exist_ok=True)\n\n# Create a sample file if it does not exist (for demonstration/testing)\nsample_file_path = os.path.join(BASE_DIR, 'secret.txt')\nif not os.path.isfile(sample_file_path):\n    with open(sample_file_path, 'w') as f:\n        f.write('Sensitive data')\n\n# Vulnerable endpoint: reads arbitrary file based on 'file' parameter (CVE-2021-40438)\n@app.route('/download')\ndef download():\n    filename = request.args.get('file')\n    if not filename:\n        abort(400, 'file parameter required')\n    # No sanitization leads to path traversal\n    filepath = os.path.join(BASE_DIR, filename)\n    if not os.path.isfile(filepath):\n        abort(404)\n    return send_file(filepath, as_attachment=True)\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8080)"
        },
        {
            "location": "./../../dockers/CVE-2021-40438/custom_no_tool/httpd/Dockerfile",
            "content": "FROM httpd:2.4.48\n\n# Copy proxy configuration snippet\nCOPY proxy.conf /usr/local/apache2/conf/extra/proxy.conf\n\n# Ensure the main httpd.conf includes the proxy snippet\nRUN echo \"Include conf/extra/proxy.conf\" >> /usr/local/apache2/conf/httpd.conf\n\nEXPOSE 80"
        },
        {
            "location": "./../../dockers/CVE-2021-40438/custom_no_tool/httpd/proxy.conf",
            "content": "LoadModule proxy_module modules/mod_proxy.so\nLoadModule proxy_http_module modules/mod_proxy_http.so\nProxyRequests On\n<Proxy \"*\">\n    Require all granted\n</Proxy>"
        }
    ],
    "directory_tree": "CVE-2021-40438/custom_no_tool"
}