{
    "files": [
        {
            "location": "./../../dockers/CVE-2018-10054/custom_no_tool/docker-compose.yml",
            "content": "services:\n  web:\n    build: ./web\n    ports:\n      - \"80:80\"\n    depends_on:\n      h2:\n        condition: service_healthy\n    environment:\n      - FLASK_ENV=development\n    restart: unless-stopped\n    command: [\"/app/wait-for-db.sh\", \"python\", \"app.py\"]\n\n  h2:\n    build: ./h2\n    expose:\n      - \"9092\"\n    healthcheck:\n      test: [\"CMD\", \"pgrep\", \"java\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n    restart: unless-stopped"
        },
        {
            "location": "./../../dockers/CVE-2018-10054/custom_no_tool/web/Dockerfile",
            "content": "FROM python:3.7-slim\n\nWORKDIR /app\n\n# Copy only the requirements file first to leverage Docker cache\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy the application source code\nCOPY . /app\n\n# Ensure the wait\u2011for\u2011db script is executable\nRUN chmod +x /app/wait-for-db.sh"
        },
        {
            "location": "./../../dockers/CVE-2018-10054/custom_no_tool/web/requirements.txt",
            "content": "flask==2.0.3"
        },
        {
            "location": "./../../dockers/CVE-2018-10054/custom_no_tool/web/app.py",
            "content": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n_STATIC_USERS = [\n    {\"id\": 1, \"username\": \"alice\"},\n    {\"id\": 2, \"username\": \"bob\"},\n    {\"id\": 3, \"username\": \"charlie\"}\n]\n\n@app.route('/users', methods=['GET'])\ndef list_users():\n    return jsonify(_STATIC_USERS)\n\n@app.route('/echo', methods=['POST'])\ndef echo():\n    data = request.get_data(as_text=True)\n    return data, 200, {'Content-Type': 'text/plain'}\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=80)"
        },
        {
            "location": "./../../dockers/CVE-2018-10054/custom_no_tool/web/wait-for-db.sh",
            "content": "#!/bin/sh\nset -e\n\nhost=\"h2\"\nport=\"9092\"\n\nwhile ! echo > /dev/tcp/$host/$port 2>/dev/null; do\n  echo \"Waiting for H2 at $host:$port...\"\n  sleep 2\ndone\n\necho \"H2 is up - starting Flask\"\nexec \"$@\""
        },
        {
            "location": "./../../dockers/CVE-2018-10054/custom_no_tool/h2/Dockerfile",
            "content": "FROM h2database/h2:1.4.200\n\n# Create a directory for the database files\nRUN mkdir -p /data\n\n# Copy the initialization script into the image\nCOPY init.sql /init.sql\n\n# Run the init script using the exact H2 jar name (expanded via shell globbing)\nRUN set -eux; \\\n    jar=$(ls /opt/h2*.jar); \\\n    java -cp \"$jar\" org.h2.tools.RunScript \\\n        -url jdbc:h2:/data/test \\\n        -script /init.sql \\\n        -user sa \\\n        -password '' && \\\n    rm /init.sql\n\n# Expose the TCP port internally (no host mapping)\nEXPOSE 9092\n\n# Start the H2 TCP server bound to localhost only (web console disabled)\nCMD [\"sh\", \"-c\", \"java -cp /opt/h2*.jar org.h2.tools.Server -tcp -tcpPort 9092 -tcpAllowOthers false -baseDir /data\"]"
        },
        {
            "location": "./../../dockers/CVE-2018-10054/custom_no_tool/h2/init.sql",
            "content": "CREATE TABLE IF NOT EXISTS users (\n    id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n    username VARCHAR(50) NOT NULL\n);\nINSERT INTO users (username) VALUES ('alice'), ('bob'), ('charlie');"
        }
    ],
    "directory_tree": "./../../dockers/CVE-2018-10054/custom_no_tool"
}