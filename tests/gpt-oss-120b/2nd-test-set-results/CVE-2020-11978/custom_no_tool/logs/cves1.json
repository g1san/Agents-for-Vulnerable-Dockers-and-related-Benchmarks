{
  "version": "15.0.6",
  "vulnerabilities": [
    {
      "id": "76c74c2e06d65bfd99a27286160a31750bf3d47304baec218b91725dd72e55da",
      "category": "container_scanning",
      "message": "CVE-2024-25142 on apache-airflow@1.10.10",
      "description": "Use of Web Browser Cache Containing Sensitive Information vulnerability in Apache Airflow. \n\nAirflow did not return \"Cache-Control\" header for dynamic content, which in case of some browsers could result in potentially storing sensitive data in local cache of the browser.\n\nThis issue affects Apache Airflow: before 2.9.2.\n\nUsers are recommended to upgrade to version 2.9.2, which fixes the issue.\n\n",
      "cve": "CVE-2024-25142",
      "severity": "Low",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.9.2",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-25142",
          "value": "CVE-2024-25142",
          "url": "https://scout.docker.com/v/CVE-2024-25142?s=github&n=apache-airflow&t=pypi&vr=%3C2.9.2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-25142?s=github&n=apache-airflow&t=pypi&vr=%3C2.9.2"
        }
      ]
    },
    {
      "id": "e0a45bedb7a4992746bc947cec6744cc330c129c4fc93cb00b1d672f759eb99b",
      "category": "container_scanning",
      "message": "GHSA-5cpq-8wj7-hf2v on cryptography@2.8",
      "description": "pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 0.5-40.0.2 are vulnerable to a security issue. More details about the vulnerability itself can be found in https://www.openssl.org/news/secadv/20230530.txt.\n\nIf you are building cryptography source (\"sdist\") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions.",
      "cve": "GHSA-5cpq-8wj7-hf2v",
      "severity": "Low",
      "confidence": "Unknown",
      "solution": "Upgrade cryptography@2.8 to 41.0.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/cryptography@2.8"
          },
          "version": "2.8"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "GHSA-5cpq-8wj7-hf2v",
          "value": "GHSA-5cpq-8wj7-hf2v",
          "url": "https://scout.docker.com/v/GHSA-5cpq-8wj7-hf2v?s=github&n=cryptography&t=pypi&vr=%3E%3D0.5%2C%3C%3D40.0.2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/GHSA-5cpq-8wj7-hf2v?s=github&n=cryptography&t=pypi&vr=%3E%3D0.5%2C%3C%3D40.0.2"
        }
      ]
    },
    {
      "id": "4d7079f45a9db09fb3b108b2003abc07cc9e6c07d4403d2c730b08ea6c38cae3",
      "category": "container_scanning",
      "message": "GHSA-jm77-qphf-c4w8 on cryptography@2.8",
      "description": "pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 0.8-41.0.2 are vulnerable to several security issues. More details about the vulnerabilities themselves can be found in https://www.openssl.org/news/secadv/20230731.txt, https://www.openssl.org/news/secadv/20230719.txt, and https://www.openssl.org/news/secadv/20230714.txt.\n\nIf you are building cryptography source (\"sdist\") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions.",
      "cve": "GHSA-jm77-qphf-c4w8",
      "severity": "Low",
      "confidence": "Unknown",
      "solution": "Upgrade cryptography@2.8 to 41.0.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/cryptography@2.8"
          },
          "version": "2.8"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "GHSA-jm77-qphf-c4w8",
          "value": "GHSA-jm77-qphf-c4w8",
          "url": "https://scout.docker.com/v/GHSA-jm77-qphf-c4w8?s=github&n=cryptography&t=pypi&vr=%3E%3D0.8%2C%3C41.0.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/GHSA-jm77-qphf-c4w8?s=github&n=cryptography&t=pypi&vr=%3E%3D0.8%2C%3C41.0.3"
        }
      ]
    },
    {
      "id": "7601e749fc555aea3a45f677bda88b81ffabd8ee263255e1fc0e54dd5a159d5c",
      "category": "container_scanning",
      "message": "GHSA-v8gr-m533-ghj9 on cryptography@2.8",
      "description": "pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 2.5-41.0.3 are vulnerable to several security issues. More details about the vulnerabilities themselves can be found in https://www.openssl.org/news/secadv/20230908.txt.\n\nIf you are building cryptography source (\"sdist\") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions.",
      "cve": "GHSA-v8gr-m533-ghj9",
      "severity": "Low",
      "confidence": "Unknown",
      "solution": "Upgrade cryptography@2.8 to 41.0.4",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/cryptography@2.8"
          },
          "version": "2.8"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "GHSA-v8gr-m533-ghj9",
          "value": "GHSA-v8gr-m533-ghj9",
          "url": "https://scout.docker.com/v/GHSA-v8gr-m533-ghj9?s=github&n=cryptography&t=pypi&vr=%3E%3D2.5%2C%3C41.0.4"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/GHSA-v8gr-m533-ghj9?s=github&n=cryptography&t=pypi&vr=%3E%3D2.5%2C%3C41.0.4"
        }
      ]
    },
    {
      "id": "5d957d73a3ef0819a5a1cbebb66e79fdf4185244dd7412871f2d9a92aaa2e865",
      "category": "container_scanning",
      "message": "CVE-2024-50378 on apache-airflow@1.10.10",
      "description": "Airflow versions before 2.10.3 have a vulnerability that allows authenticated users with audit log access to see sensitive values in audit logs which they should not see. When sensitive variables were set via airflow CLI, values of those variables appeared in the audit log and were stored unencrypted in the Airflow database. While this risk is limited to users with audit log access, it is recommended to upgrade to Airflow 2.10.3 or a later version, which addresses this issue. Users who previously used the CLI to set secret variables should manually delete entries with those variables from the log table.",
      "cve": "CVE-2024-50378",
      "severity": "Low",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.10.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-50378",
          "value": "CVE-2024-50378",
          "url": "https://scout.docker.com/v/CVE-2024-50378?s=github&n=apache-airflow&t=pypi&vr=%3C2.10.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-50378?s=github&n=apache-airflow&t=pypi&vr=%3C2.10.3"
        }
      ]
    },
    {
      "id": "99096a7010a9423d90814e3151502100a718304eba19007377540dd3a6272a41",
      "category": "container_scanning",
      "message": "CVE-2020-17511 on apache-airflow@1.10.10",
      "description": "In Airflow versions prior to 1.10.13, when creating a user using airflow CLI, the password gets logged in plain text in the Log table in Airflow Metadatase. The same happenes when creating a Connection with a password field.",
      "cve": "CVE-2020-17511",
      "severity": "Low",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 1.10.13",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2020-17511",
          "value": "CVE-2020-17511",
          "url": "https://scout.docker.com/v/CVE-2020-17511?s=github&n=apache-airflow&t=pypi&vr=%3C1.10.13"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2020-17511?s=github&n=apache-airflow&t=pypi&vr=%3C1.10.13"
        }
      ]
    },
    {
      "id": "2c88a3dbf1f2dc338b1f715fa88cc8c459b49aa540d11eda2e38c1b2df6e6c01",
      "category": "container_scanning",
      "message": "CVE-2023-23934 on werkzeug@0.16.1",
      "description": "Browsers may allow \"nameless\" cookies that look like `=value` instead of `key=value`. A vulnerable browser may allow a compromised application on an adjacent subdomain to exploit this to set a cookie like `=__Host-test=bad` for another subdomain.\n\nWerkzeug <= 2.2.2 will parse the cookie `=__Host-test=bad` as `__Host-test=bad`. If a Werkzeug application is running next to a vulnerable or malicious subdomain which sets such a cookie using a vulnerable browser, the Werkzeug application will see the bad cookie value but the valid cookie key.",
      "cve": "CVE-2023-23934",
      "severity": "Low",
      "confidence": "Unknown",
      "solution": "Upgrade werkzeug@0.16.1 to 2.2.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/werkzeug@0.16.1"
          },
          "version": "0.16.1"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-23934",
          "value": "CVE-2023-23934",
          "url": "https://scout.docker.com/v/CVE-2023-23934?s=github&n=werkzeug&t=pypi&vr=%3C2.2.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-23934?s=github&n=werkzeug&t=pypi&vr=%3C2.2.3"
        }
      ]
    },
    {
      "id": "b7e42e5583a9e52e4bb23597db667f2367fcd21ef3f482d3205f4071f66ed36c",
      "category": "container_scanning",
      "message": "CVE-2022-31177 on flask-appbuilder@2.3.0",
      "description": "### Impact\nAn authenticated Admin user could craft HTTP requests to filter users by their salted and hashed passwords strings. These filters could be made by using partial hashed password strings. The response would not include the hashed passwords, but an attacker could infer partial password hashes and their respective users.\n\nOnly when using `AUTH_DB` database authentication option.\n\n### Patches\nFixed on 4.1.3\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [example link to repo](http://example.com)\n* Email us at [example email address](mailto:example@example.com)",
      "cve": "CVE-2022-31177",
      "severity": "Low",
      "confidence": "Unknown",
      "solution": "Upgrade flask-appbuilder@2.3.0 to 4.1.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/flask-appbuilder@2.3.0"
          },
          "version": "2.3.0"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-31177",
          "value": "CVE-2022-31177",
          "url": "https://scout.docker.com/v/CVE-2022-31177?s=github&n=flask-appbuilder&t=pypi&vr=%3C4.1.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-31177?s=github&n=flask-appbuilder&t=pypi&vr=%3C4.1.3"
        }
      ]
    },
    {
      "id": "8bc6f5941ce7d6f4022e1d18329a71723bc939d2c1a7d234222fd94564cf9363",
      "category": "container_scanning",
      "message": "CVE-2025-24023 on flask-appbuilder@2.3.0",
      "description": "### Impact\nUser enumeration in database authentication in Flask-AppBuilder <= 4.5.3 and werkzeug >= 3.0.0. Allows for a non authenticated user to enumerate existing usernames by timing the response time from the server when brute forcing requests to login.\n\n### Patches\n\nUpgrade to flask-appbuilder>=4.5.3\n\n### Workarounds\nDowngrade werkzeug to <3.0.0\n\n### References\n_Are there any links users can visit to find out more?_",
      "cve": "CVE-2025-24023",
      "severity": "Low",
      "confidence": "Unknown",
      "solution": "Upgrade flask-appbuilder@2.3.0 to 4.5.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/flask-appbuilder@2.3.0"
          },
          "version": "2.3.0"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-24023",
          "value": "CVE-2025-24023",
          "url": "https://scout.docker.com/v/CVE-2025-24023?s=github&n=flask-appbuilder&t=pypi&vr=%3C4.5.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-24023?s=github&n=flask-appbuilder&t=pypi&vr=%3C4.5.3"
        }
      ]
    },
    {
      "id": "d9fd93fe9225ebd0cf41c8caa22cb486f9542f4b620c4cbe7d1175a897875819",
      "category": "container_scanning",
      "message": "GHSA-qppv-j76h-2rpx on tornado@5.1.1",
      "description": "## Summary\nTornado interprets `-`, `+`, and `_` in chunk length and `Content-Length` values, which are not allowed by the HTTP RFCs. This can result in request smuggling when Tornado is deployed behind certain proxies that interpret those non-standard characters differently. This is known to apply to older versions of haproxy, although the current release is not affected.\n\n## Details\nTornado uses the `int` constructor to parse the values of `Content-Length` headers and chunk lengths in the following locations:\n### `tornado/http1connection.py:445`\n```python3\n            self._expected_content_remaining = int(headers[\"Content-Length\"])\n```\n### `tornado/http1connection.py:621`\n```python3\n                content_length = int(headers[\"Content-Length\"])  # type: Optional[int]\n```\n### `tornado/http1connection.py:671`\n```python3\n            chunk_len = int(chunk_len_str.strip(), 16)\n```\nBecause `int(\"0_0\") == int(\"+0\") == int(\"-0\") == int(\"0\")`, using the `int` constructor to parse and validate strings that should contain only ASCII digits is not a good strategy. \n\n",
      "cve": "GHSA-qppv-j76h-2rpx",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade tornado@5.1.1 to 6.3.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/tornado@5.1.1"
          },
          "version": "5.1.1"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "GHSA-qppv-j76h-2rpx",
          "value": "GHSA-qppv-j76h-2rpx",
          "url": "https://scout.docker.com/v/GHSA-qppv-j76h-2rpx?s=github&n=tornado&t=pypi&vr=%3C6.3.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/GHSA-qppv-j76h-2rpx?s=github&n=tornado&t=pypi&vr=%3C6.3.3"
        }
      ]
    },
    {
      "id": "539c4ec5a0e26913a9b73f3fc8dc7ca003b00ea2d15ca5bc580ad991f592a03b",
      "category": "container_scanning",
      "message": "CVE-2021-33026 on flask-caching@1.3.3",
      "description": "Flask-Cache adds easy cache support to Flask. The Flask-Caching extension through 1.10.1 for Flask relies on Pickle for serialization, which may lead to remote code execution or local privilege escalation. If an attacker gains access to cache storage (e.g., filesystem, Memcached, Redis, etc.), they can construct a crafted payload, poison the cache, and execute Python code.\n\nHowever, this is not a high-severity issue, as for an attack like this to work, an attacker must:\n\n1. Be able to write arbitrary values to the cache\n2. Be able to generate a cache key that will collide with a value being read by the application\n3. Cause the application to read a maliciously-injected value\n\nAny situation where all 3 of those is true is a situation where the application has larger problems; for example, if someone's able to inject malicious cached rendered pages into a Flask app's cache, then they can make the website say literally anything they want, regardless of whether it involves the execution of remote code. Basically, the Pickle vulnerability follows from a website already being extremely vulnerable (due to conditions 1 and 2 being met).",
      "cve": "CVE-2021-33026",
      "severity": "Medium",
      "confidence": "Unknown",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/flask-caching@1.3.3"
          },
          "version": "1.3.3"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-33026",
          "value": "CVE-2021-33026",
          "url": "https://scout.docker.com/v/CVE-2021-33026?s=github&n=flask-caching&t=pypi&vr=%3C%3D1.10.1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-33026?s=github&n=flask-caching&t=pypi&vr=%3C%3D1.10.1"
        }
      ]
    },
    {
      "id": "2038ac97a5c269c3649c4dcc6b0b679c569c8e0b1398d143d08a1c0575550d8f",
      "category": "container_scanning",
      "message": "CVE-2023-48291 on apache-airflow@1.10.10",
      "description": "Apache Airflow, in versions prior to 2.8.0, contains a security vulnerability that allows an authenticated user with limited access to some DAGs, to craft a request that could give the user write access to various DAG resources for DAGs that the user had no access to, thus, enabling the user to clear DAGs they shouldn't.\n\nThis is a missing fix for CVE-2023-42792 in Apache Airflow 2.7.2 \n\nUsers of Apache Airflow are strongly advised to upgrade to version 2.8.0 or newer to mitigate the risk associated with this vulnerability.",
      "cve": "CVE-2023-48291",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.8.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-48291",
          "value": "CVE-2023-48291",
          "url": "https://scout.docker.com/v/CVE-2023-48291?s=github&n=apache-airflow&t=pypi&vr=%3C2.8.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-48291?s=github&n=apache-airflow&t=pypi&vr=%3C2.8.0"
        }
      ]
    },
    {
      "id": "4570589eca3bf165c723228bc725ac98c1a16aa1dc234fdf74f1f89e171e1332",
      "category": "container_scanning",
      "message": "CVE-2025-32962 on flask-appbuilder@2.3.0",
      "description": "### Impact\nFlask-AppBuilder prior to 4.6.2 would allow for a malicious unauthenticated actor to perform an open redirect by manipulating the Host header in HTTP requests.\n \n### Patches\nFlask-AppBuilder 4.6.2 introduced the `FAB_SAFE_REDIRECT_HOSTS` configuration variable, which allows administrators to explicitly define which domains are considered safe for redirection.\n\nExamples:\n```\nFAB_SAFE_REDIRECT_HOSTS = [\"yourdomain.com\", \"sub.yourdomain.com\", \"*.yourcompany.com\"]\n```\n\n### Workarounds\nUse a Reverse Proxy to Enforce Trusted Host Headers\n\n### References\n_Are there any links users can visit to find out more?_",
      "cve": "CVE-2025-32962",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade flask-appbuilder@2.3.0 to 4.6.2",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/flask-appbuilder@2.3.0"
          },
          "version": "2.3.0"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-32962",
          "value": "CVE-2025-32962",
          "url": "https://scout.docker.com/v/CVE-2025-32962?s=github&n=flask-appbuilder&t=pypi&vr=%3C4.6.2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-32962?s=github&n=flask-appbuilder&t=pypi&vr=%3C4.6.2"
        }
      ]
    },
    {
      "id": "948f01a417862ea0bf21b19221dafc08c070527b509e86f218a20ba37e89b86d",
      "category": "container_scanning",
      "message": "CVE-2024-37891 on urllib3@1.25.8",
      "description": "When using urllib3's proxy support with `ProxyManager`, the `Proxy-Authorization` header is only sent to the configured proxy, as expected.\n\nHowever, when sending HTTP requests *without* using urllib3's proxy support, it's possible to accidentally configure the `Proxy-Authorization` header even though it won't have any effect as the request is not using a forwarding proxy or a tunneling proxy. In those cases, urllib3 doesn't treat the `Proxy-Authorization` HTTP header as one carrying authentication material and thus doesn't strip the header on cross-origin redirects.\n\nBecause this is a highly unlikely scenario, we believe the severity of this vulnerability is low for almost all users. Out of an abundance of caution urllib3 will automatically strip the `Proxy-Authorization` header during cross-origin redirects to avoid the small chance that users are doing this on accident.\n\nUsers should use urllib3's proxy support or disable automatic redirects to achieve safe processing of the `Proxy-Authorization` header, but we still decided to strip the header by default in order to further protect users who aren't using the correct approach.\n\n## Affected usages\n\nWe believe the number of usages affected by this advisory is low. It requires all of the following to be true to be exploited:\n\n* Setting the `Proxy-Authorization` header without using urllib3's built-in proxy support.\n* Not disabling HTTP redirects.\n* Either not using an HTTPS origin server or for the proxy or target origin to redirect to a malicious origin.\n\n## Remediation\n\n* Using the `Proxy-Authorization` header with urllib3's `ProxyManager`.\n* Disabling HTTP redirects using `redirects=False` when sending requests.\n* Not using the `Proxy-Authorization` header.",
      "cve": "CVE-2024-37891",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade urllib3@1.25.8 to 1.26.19",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/urllib3@1.25.8"
          },
          "version": "1.25.8"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-37891",
          "value": "CVE-2024-37891",
          "url": "https://scout.docker.com/v/CVE-2024-37891?s=github&n=urllib3&t=pypi&vr=%3C1.26.19"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-37891?s=github&n=urllib3&t=pypi&vr=%3C1.26.19"
        }
      ]
    },
    {
      "id": "c52bccace2cf7fa37969f9ea3ba438f6d9bac1ba230d5deac3c9da7e1b8a046c",
      "category": "container_scanning",
      "message": "CVE-2022-30187 on azure-storage-blob@2.1.0",
      "description": "### Summary\n\nThe Azure Storage Encryption library in Java and other languages is vulnerable to a CBC Padding Oracle attack, similar to CVE-2020-8911. The library is not vulnerable to the equivalent of CVE-2020-8912, but only because it currently only supports AES-CBC as encryption mode. \n\n### Severity\n\nModerate - The vulnerability poses insider risks/privilege escalation risks, circumventing controls for stored data.\n\n### Further Analysis\nThe Java Azure Blob Storage Encryption SDK is impacted by an issue that can result in loss of confidentiality and message forgery. The attack requires write access to the container in question, and that the attacker has access to an endpoint that reveals decryption failures (without revealing the plaintext) and that when encrypting the CBC option was chosen as content cipher.\n\nThis advisory describes the plaintext revealing vulnerabilities in the Java Azure Blob Storage Encryption SDK, with a similar issue in the other blob storage SDKs being present as well.\n\nIn the current version of the Azure Blob Storage crypto SDK, the only algorithm option that allows users to encrypt files is to AES-CBC, without computing a MAC on the data.\n\nThis exposes a padding oracle vulnerability: If the attacker has write access to the blob container bucket and can observe whether or not an endpoint with access to the key can decrypt a file (without observing the file contents that the endpoint learns in the process), they can reconstruct the plaintext with (on average) 128*length(plaintext) queries to the endpoint, by exploiting CBC's ability to manipulate the bytes of the next block and PKCS5 padding errors.\n\n### Timeline\n**Date reported**: March 29 2022\n**Date preview**: June 16 2022\n**Date GA**: July 11 2022\n**Date disclosed**: July 17 2022",
      "cve": "CVE-2022-30187",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade azure-storage-blob@2.1.0 to 12.13.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/azure-storage-blob@2.1.0"
          },
          "version": "2.1.0"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-30187",
          "value": "CVE-2022-30187",
          "url": "https://scout.docker.com/v/CVE-2022-30187?s=github&n=azure-storage-blob&t=pypi&vr=%3C12.13.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-30187?s=github&n=azure-storage-blob&t=pypi&vr=%3C12.13.0"
        }
      ]
    },
    {
      "id": "1fa28a5cf94547e5c5f2fe142fb92909271892b03e6644520298bf14f2629d07",
      "category": "container_scanning",
      "message": "CVE-2024-45314 on flask-appbuilder@2.3.0",
      "description": "### Impact\nAuth DB login form default cache directives allows browser to locally store sensitive data. This can be an issue on environments using shared computer resources.\n\n### Patches\nUpgrade flask-appbuilder to version 4.5.1\n\n### Workarounds\nIf upgrading is not possible configure your web server to send the following HTTP headers for /login:\n\"Cache-Control\": \"no-store, no-cache, must-revalidate, max-age=0\"\n\"Pragma\": \"no-cache\"\n\"Expires\": \"0\" \n",
      "cve": "CVE-2024-45314",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade flask-appbuilder@2.3.0 to 4.5.1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/flask-appbuilder@2.3.0"
          },
          "version": "2.3.0"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-45314",
          "value": "CVE-2024-45314",
          "url": "https://scout.docker.com/v/CVE-2024-45314?s=github&n=flask-appbuilder&t=pypi&vr=%3C4.5.1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-45314?s=github&n=flask-appbuilder&t=pypi&vr=%3C4.5.1"
        }
      ]
    },
    {
      "id": "c14a6a3380c4c8fd1c675df8668bc6e982281b8d23b6aed2ce825ddc2098f177",
      "category": "container_scanning",
      "message": "CVE-2020-11983 on apache-airflow@1.10.10",
      "description": "An issue was found in Apache Airflow versions 1.10.10 and below. It was discovered that many of the admin management screens in the new/RBAC UI handled escaping incorrectly, allowing authenticated users with appropriate permissions to create stored XSS attacks.",
      "cve": "CVE-2020-11983",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 1.10.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2020-11983",
          "value": "CVE-2020-11983",
          "url": "https://scout.docker.com/v/CVE-2020-11983?s=github&n=apache-airflow&t=pypi&vr=%3C1.10.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2020-11983?s=github&n=apache-airflow&t=pypi&vr=%3C1.10.11"
        }
      ]
    },
    {
      "id": "fa64c8e2b19534a89e22f3387cdda642632d24023582d3af66e0c89548f179cf",
      "category": "container_scanning",
      "message": "CVE-2023-29247 on apache-airflow@1.10.10",
      "description": "Task instance details page in the UI is vulnerable to stored cross-site scripting. This issue affects Apache Airflow before 2.6.0.\n\n\n",
      "cve": "CVE-2023-29247",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.6.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-29247",
          "value": "CVE-2023-29247",
          "url": "https://scout.docker.com/v/CVE-2023-29247?s=github&n=apache-airflow&t=pypi&vr=%3C2.6.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-29247?s=github&n=apache-airflow&t=pypi&vr=%3C2.6.0"
        }
      ]
    },
    {
      "id": "c91a75aa47cf5c6525eb4265f204cca760a2b3c01e5b781abf1be16d917f1116",
      "category": "container_scanning",
      "message": "CVE-2023-34110 on flask-appbuilder@2.3.0",
      "description": "### Impact\nAn authenticated malicious actor with Admin privileges, could by adding a special character on the add, edit User forms trigger a database error, this error is surfaced back to this actor on the UI. On certain database engines this error can include the entire user row including the pbkdf2:sha256 hashed password.\n \n### Patches\nFixed on 4.3.2\n",
      "cve": "CVE-2023-34110",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade flask-appbuilder@2.3.0 to 4.3.2",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/flask-appbuilder@2.3.0"
          },
          "version": "2.3.0"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-34110",
          "value": "CVE-2023-34110",
          "url": "https://scout.docker.com/v/CVE-2023-34110?s=github&n=flask-appbuilder&t=pypi&vr=%3C4.3.2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-34110?s=github&n=flask-appbuilder&t=pypi&vr=%3C4.3.2"
        }
      ]
    },
    {
      "id": "0532483002f3aa3b91107b709925015af659ffe1b4e0cf84d1f7b372804dab57",
      "category": "container_scanning",
      "message": "CVE-2024-26280 on apache-airflow@1.10.10",
      "description": "Apache Airflow, versions before 2.8.2, has a vulnerability that allows authenticated Ops and Viewers users to view all information on audit logs, including dag names and usernames they were not permitted to view. With 2.8.2 and newer, Ops and Viewer users do not have audit log permission by default, they need to be explicitly granted permissions to see the logs. Only admin users have audit log permission by default.\n\nUsers of Apache Airflow are recommended to upgrade to version 2.8.2 or newer to mitigate the risk associated with this vulnerability",
      "cve": "CVE-2024-26280",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.8.2",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-26280",
          "value": "CVE-2024-26280",
          "url": "https://scout.docker.com/v/CVE-2024-26280?s=github&n=apache-airflow&t=pypi&vr=%3C2.8.2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-26280?s=github&n=apache-airflow&t=pypi&vr=%3C2.8.2"
        }
      ]
    },
    {
      "id": "d3c66749892377b6d24d8d5ea34cf47706a4aa0e601c643a15b91aafd1e031e8",
      "category": "container_scanning",
      "message": "CVE-2024-27906 on apache-airflow@1.10.10",
      "description": "Apache Airflow, versions before 2.8.2, has a vulnerability that allows authenticated users to view DAG code and import errors of DAGs they do not have permission to view through the API and the UI.\n\nUsers of Apache Airflow are recommended to upgrade to version 2.8.2 or newer to mitigate the risk associated with this vulnerability",
      "cve": "CVE-2024-27906",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.8.2",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-27906",
          "value": "CVE-2024-27906",
          "url": "https://scout.docker.com/v/CVE-2024-27906?s=github&n=apache-airflow&t=pypi&vr=%3C%3D2.8.1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-27906?s=github&n=apache-airflow&t=pypi&vr=%3C%3D2.8.1"
        }
      ]
    },
    {
      "id": "ef69196651fdd5579cbfc26e84374a5fb06753a42163f79a9920f913556f53f5",
      "category": "container_scanning",
      "message": "CVE-2024-39863 on apache-airflow@1.10.10",
      "description": "Apache Airflow versions before 2.9.3 have a vulnerability that allows an authenticated attacker to inject a malicious link when installing a provider. Users are recommended to upgrade to version 2.9.3, which fixes this issue.\n",
      "cve": "CVE-2024-39863",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.9.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-39863",
          "value": "CVE-2024-39863",
          "url": "https://scout.docker.com/v/CVE-2024-39863?s=github&n=apache-airflow&t=pypi&vr=%3C2.9.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-39863?s=github&n=apache-airflow&t=pypi&vr=%3C2.9.3"
        }
      ]
    },
    {
      "id": "26158886b2bdfc7ae0bc038198034985548de09fd5cc012fe960e697487158be",
      "category": "container_scanning",
      "message": "CVE-2020-13944 on apache-airflow@1.10.10",
      "description": "In Apache Airflow < 1.10.12, the `origin` parameter passed to some of the endpoints like `/trigger` and was vulnerable to a XSS exploit.",
      "cve": "CVE-2020-13944",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 1.10.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2020-13944",
          "value": "CVE-2020-13944",
          "url": "https://scout.docker.com/v/CVE-2020-13944?s=github&n=apache-airflow&t=pypi&vr=%3C1.10.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2020-13944?s=github&n=apache-airflow&t=pypi&vr=%3C1.10.12"
        }
      ]
    },
    {
      "id": "a62bcc2a89a9555c8bbd893876b53845668187efe1c14f55973adfe005ce96c5",
      "category": "container_scanning",
      "message": "CVE-2020-9485 on apache-airflow@1.10.10",
      "description": "An issue was found in Apache Airflow versions 1.10.10 and below. A stored XSS vulnerability was discovered in the Chart pages of the the \"classic\" UI.",
      "cve": "CVE-2020-9485",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 1.10.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2020-9485",
          "value": "CVE-2020-9485",
          "url": "https://scout.docker.com/v/CVE-2020-9485?s=github&n=apache-airflow&t=pypi&vr=%3C1.10.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2020-9485?s=github&n=apache-airflow&t=pypi&vr=%3C1.10.11"
        }
      ]
    },
    {
      "id": "42f7871035644a98c0e532b534946d4e75ff95f10a97d15561d2d1a356258906",
      "category": "container_scanning",
      "message": "CVE-2021-26697 on apache-airflow@1.10.10",
      "description": "The lineage endpoint of the deprecated Experimental API was not protected by authentication in Airflow 2.0.0. This allowed unauthenticated users to hit that endpoint. This is low-severity issue as the attacker needs to be aware of certain parameters to pass to that endpoint and even after can just get some metadata about a DAG and a Task. This issue affects Apache Airflow 2.0.0.",
      "cve": "CVE-2021-26697",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.0.1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-26697",
          "value": "CVE-2021-26697",
          "url": "https://scout.docker.com/v/CVE-2021-26697?s=pypa&n=apache-airflow&t=pypi&vr=%3C2.0.1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-26697?s=pypa&n=apache-airflow&t=pypi&vr=%3C2.0.1"
        }
      ]
    },
    {
      "id": "fae942354abbd09dc826e955939155c34436d43be060406ead7c4b7d17fb1336",
      "category": "container_scanning",
      "message": "CVE-2021-28359 on apache-airflow@1.10.10",
      "description": "The \"origin\" parameter passed to some of the endpoints like '/trigger' was vulnerable to XSS exploit. This issue affects Apache Airflow versions <1.10.15 in 1.x series and affects 2.0.0 and 2.0.1 and 2.x series. This is the same as CVE-2020-13944 & CVE-2020-17515 but the implemented fix did not fix the issue completely. Update to Airflow 1.10.15 or 2.0.2. Please also update your Python version to the latest available PATCH releases of the installed MINOR versions, example update to Python 3.6.13 if you are on Python 3.6. (Those contain the fix for CVE-2021-23336 https://nvd.nist.gov/vuln/detail/CVE-2021-23336).",
      "cve": "CVE-2021-28359",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 1.10.15",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-28359",
          "value": "CVE-2021-28359",
          "url": "https://scout.docker.com/v/CVE-2021-28359?s=github&n=apache-airflow&t=pypi&vr=%3C1.10.15"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-28359?s=github&n=apache-airflow&t=pypi&vr=%3C1.10.15"
        }
      ]
    },
    {
      "id": "56ab2a130f394a3a370a8d42feae3539f199689f950712a9261784df81b89100",
      "category": "container_scanning",
      "message": "CVE-2021-34141 on numpy@1.18.2",
      "description": "Incomplete string comparison in the numpy.core component in NumPy1.9.x, which allows attackers to fail the APIs via constructing specific string objects.",
      "cve": "CVE-2021-34141",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade numpy@1.18.2 to 1.22",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/numpy@1.18.2"
          },
          "version": "1.18.2"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-34141",
          "value": "CVE-2021-34141",
          "url": "https://scout.docker.com/v/CVE-2021-34141?s=github&n=numpy&t=pypi&vr=%3C1.22"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-34141?s=github&n=numpy&t=pypi&vr=%3C1.22"
        }
      ]
    },
    {
      "id": "1936a488b4cc61114493d94e9d6d2c1e8e86c7fe12c75f6edbcdf6555b398def",
      "category": "container_scanning",
      "message": "CVE-2021-35936 on apache-airflow@1.10.10",
      "description": "If remote logging is not used, the worker (in the case of CeleryExecutor) or the scheduler (in the case of LocalExecutor) runs a Flask logging server and is listening on a specific port and also binds on 0.0.0.0 by default. This logging server had no authentication and allows reading log files of DAG jobs. This issue affects Apache Airflow < 2.1.2.",
      "cve": "CVE-2021-35936",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.1.2",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-35936",
          "value": "CVE-2021-35936",
          "url": "https://scout.docker.com/v/CVE-2021-35936?s=github&n=apache-airflow&t=pypi&vr=%3C2.1.2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-35936?s=github&n=apache-airflow&t=pypi&vr=%3C2.1.2"
        }
      ]
    },
    {
      "id": "099f38342ed76450ee98ec5f1ee0cfdf0892aaf62d73e9c51d2c0689cb92773d",
      "category": "container_scanning",
      "message": "CVE-2021-45229 on apache-airflow@1.10.10",
      "description": "It was discovered that the \"Trigger DAG with config\" screen was susceptible to XSS attacks via the `origin` query argument. This issue affects Apache Airflow versions 2.2.3 and below.",
      "cve": "CVE-2021-45229",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.2.4rc1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-45229",
          "value": "CVE-2021-45229",
          "url": "https://scout.docker.com/v/CVE-2021-45229?s=github&n=apache-airflow&t=pypi&vr=%3C2.2.4rc1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-45229?s=github&n=apache-airflow&t=pypi&vr=%3C2.2.4rc1"
        }
      ]
    },
    {
      "id": "2b8331a719b4e8ddc1791a379b488acfbeb3f3f6cee7fed05e07aa3939184552",
      "category": "container_scanning",
      "message": "CVE-2022-43982 on apache-airflow@1.10.10",
      "description": "In Apache Airflow versions prior to 2.4.2, the \"Trigger DAG with config\" screen was susceptible to XSS attacks via the `origin` query argument.",
      "cve": "CVE-2022-43982",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.4.2rc1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-43982",
          "value": "CVE-2022-43982",
          "url": "https://scout.docker.com/v/CVE-2022-43982?s=github&n=apache-airflow&t=pypi&vr=%3C2.4.2rc1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-43982?s=github&n=apache-airflow&t=pypi&vr=%3C2.4.2rc1"
        }
      ]
    },
    {
      "id": "c674604ccec8a54975bbaf621907faad4c3029303b83716f4e68d49989ec8d14",
      "category": "container_scanning",
      "message": "CVE-2022-43985 on apache-airflow@1.10.10",
      "description": "In Apache Airflow versions prior to 2.4.2, there was an open redirect in the webserver's `/confirm` endpoint.",
      "cve": "CVE-2022-43985",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.4.2rc1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-43985",
          "value": "CVE-2022-43985",
          "url": "https://scout.docker.com/v/CVE-2022-43985?s=github&n=apache-airflow&t=pypi&vr=%3C2.4.2rc1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-43985?s=github&n=apache-airflow&t=pypi&vr=%3C2.4.2rc1"
        }
      ]
    },
    {
      "id": "1d892ef9c9cfb0895865e7c46fbf6211848f2356f3c4380dc77965a4f0aa6cdf",
      "category": "container_scanning",
      "message": "CVE-2023-28370 on tornado@5.1.1",
      "description": "Open redirect vulnerability in Tornado versions 6.3.1 and earlier allows a remote unauthenticated attacker to redirect a user to an arbitrary web site and conduct a phishing attack by having user access a specially crafted URL.",
      "cve": "CVE-2023-28370",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade tornado@5.1.1 to 6.3.2",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/tornado@5.1.1"
          },
          "version": "5.1.1"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-28370",
          "value": "CVE-2023-28370",
          "url": "https://scout.docker.com/v/CVE-2023-28370?s=github&n=tornado&t=pypi&vr=%3C6.3.2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-28370?s=github&n=tornado&t=pypi&vr=%3C6.3.2"
        }
      ]
    },
    {
      "id": "6bc59bfd95051be6a4801ccd3bbfb3868f7052f33171bbc73b04cfa3fab28c4d",
      "category": "container_scanning",
      "message": "CVE-2023-32732 on grpcio@1.27.2",
      "description": "gRPC contains a vulnerability whereby a client can cause a termination of connection between a HTTP2 proxy and a gRPC server: a base64 encoding error for `-bin` suffixed headers will result in a disconnection by the gRPC server, but is typically allowed by HTTP2 proxies. We recommend upgrading beyond the commit in  https://github.com/grpc/grpc/pull/32309.",
      "cve": "CVE-2023-32732",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade grpcio@1.27.2 to 1.53.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/grpcio@1.27.2"
          },
          "version": "1.27.2"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-32732",
          "value": "CVE-2023-32732",
          "url": "https://scout.docker.com/v/CVE-2023-32732?s=gitlab&n=grpcio&t=pypi&vr=%3C1.53.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-32732?s=gitlab&n=grpcio&t=pypi&vr=%3C1.53.0"
        }
      ]
    },
    {
      "id": "b3d18f736d768f031db280fdfdd5509cbed71e9214cbdf8040fac35d6ecd6ae5",
      "category": "container_scanning",
      "message": "CVE-2023-40611 on apache-airflow@1.10.10",
      "description": "Apache Airflow, versions before 2.7.1, is affected by a vulnerability that allows authenticated and DAG-view authorized Users to modify some DAG run detail values when submitting notes. This could have them alter details such as configuration parameters, start date, etc.\n\nUsers should upgrade to version 2.7.1 or later which has removed the vulnerability.",
      "cve": "CVE-2023-40611",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.7.1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-40611",
          "value": "CVE-2023-40611",
          "url": "https://scout.docker.com/v/CVE-2023-40611?s=github&n=apache-airflow&t=pypi&vr=%3C2.7.1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-40611?s=github&n=apache-airflow&t=pypi&vr=%3C2.7.1"
        }
      ]
    },
    {
      "id": "b63d20af0795b3b1b9bd08c6281e566b1f2c6e3c8dfbec8c9350a193c9aeecf6",
      "category": "container_scanning",
      "message": "CVE-2023-47037 on apache-airflow@1.10.10",
      "description": "Apache Airflow, versions before 2.7.3, is affected by a vulnerability that allows authenticated and DAG-view authorized Users to modify some DAG run detail values when submitting notes. This could have them alter details such as configuration parameters, start date, etc.  Users should upgrade to version 2.7.3 or later which has removed the vulnerability.",
      "cve": "CVE-2023-47037",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.7.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-47037",
          "value": "CVE-2023-47037",
          "url": "https://scout.docker.com/v/CVE-2023-47037?s=github&n=apache-airflow&t=pypi&vr=%3C2.7.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-47037?s=github&n=apache-airflow&t=pypi&vr=%3C2.7.3"
        }
      ]
    },
    {
      "id": "0f2a48808c623883d331e563a77936387c64d8bff5d02cdfdc077d2d486806a2",
      "category": "container_scanning",
      "message": "CVE-2024-41937 on apache-airflow@1.10.10",
      "description": "Apache Airflow, versions before 2.10.0, have a vulnerability that allows the developer of a malicious provider to execute a cross-site scripting attack when clicking on a provider documentation link. This would require the provider to be installed on the web server and the user to click the provider link.\nUsers should upgrade to 2.10.0 or later, which fixes this vulnerability.",
      "cve": "CVE-2024-41937",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.10.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-41937",
          "value": "CVE-2024-41937",
          "url": "https://scout.docker.com/v/CVE-2024-41937?s=github&n=apache-airflow&t=pypi&vr=%3C2.10.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-41937?s=github&n=apache-airflow&t=pypi&vr=%3C2.10.0"
        }
      ]
    },
    {
      "id": "ab3fb093a66b3d0aa13d2b0300c469b0a8707ac79648fa06b3ca996d6388662c",
      "category": "container_scanning",
      "message": "CVE-2024-47081 on requests@2.23.0",
      "description": "### Impact\n\nDue to a URL parsing issue, Requests releases prior to 2.32.4 may leak .netrc credentials to third parties for specific maliciously-crafted URLs.\n\n### Workarounds\nFor older versions of Requests, use of the .netrc file can be disabled with `trust_env=False` on your Requests Session ([docs](https://requests.readthedocs.io/en/latest/api/#requests.Session.trust_env)).\n\n### References\nhttps://github.com/psf/requests/pull/6965\nhttps://seclists.org/fulldisclosure/2025/Jun/2",
      "cve": "CVE-2024-47081",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade requests@2.23.0 to 2.32.4",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/requests@2.23.0"
          },
          "version": "2.23.0"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-47081",
          "value": "CVE-2024-47081",
          "url": "https://scout.docker.com/v/CVE-2024-47081?s=github&n=requests&t=pypi&vr=%3C2.32.4"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-47081?s=github&n=requests&t=pypi&vr=%3C2.32.4"
        }
      ]
    },
    {
      "id": "efe844797b2f6354efeb7f43123742ae0d57d15a499a04ac9b5bd3abb8f1bd0b",
      "category": "container_scanning",
      "message": "CVE-2025-50181 on urllib3@1.25.8",
      "description": "urllib3 handles redirects and retries using the same mechanism, which is controlled by the `Retry` object. The most common way to disable redirects is at the request level, as follows:\n\n```python\nresp = urllib3.request(\"GET\", \"https://httpbin.org/redirect/1\", redirect=False)\nprint(resp.status)\n# 302\n```\n\nHowever, it is also possible to disable redirects, for all requests, by instantiating a `PoolManager` and specifying `retries` in a way that disable redirects:\n\n```python\nimport urllib3\n\nhttp = urllib3.PoolManager(retries=0)  # should raise MaxRetryError on redirect\nhttp = urllib3.PoolManager(retries=urllib3.Retry(redirect=0))  # equivalent to the above\nhttp = urllib3.PoolManager(retries=False)  # should return the first response\n\nresp = http.request(\"GET\", \"https://httpbin.org/redirect/1\")\n```\n\nHowever, the `retries` parameter is currently ignored, which means all the above examples don't disable redirects.\n\n## Affected usages\n\nPassing `retries` on `PoolManager` instantiation to disable redirects or restrict their number.\n\nBy default, requests and botocore users are not affected.\n\n## Impact\n\nRedirects are often used to exploit SSRF vulnerabilities. An application attempting to mitigate SSRF or open redirect vulnerabilities by disabling redirects at the PoolManager level will remain vulnerable.\n\n## Remediation\n\nYou can remediate this vulnerability with the following steps:\n\n * Upgrade to a patched version of urllib3. If your organization would benefit from the continued support of urllib3 1.x, please contact [sethmichaellarson@gmail.com](mailto:sethmichaellarson@gmail.com) to discuss sponsorship or contribution opportunities.\n * Disable redirects at the `request()` level instead of the `PoolManager()` level.",
      "cve": "CVE-2025-50181",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade urllib3@1.25.8 to 2.5.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/urllib3@1.25.8"
          },
          "version": "1.25.8"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-50181",
          "value": "CVE-2025-50181",
          "url": "https://scout.docker.com/v/CVE-2025-50181?s=github&n=urllib3&t=pypi&vr=%3C2.5.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-50181?s=github&n=urllib3&t=pypi&vr=%3C2.5.0"
        }
      ]
    },
    {
      "id": "90c2f49e8f7c26b6194c657736bd12225018a706d468b0add39fdb3370fb9d24",
      "category": "container_scanning",
      "message": "GHSA-753j-mpmx-qq6g on tornado@5.1.1",
      "description": "### Summary\nWhen Tornado receives a request with two `Transfer-Encoding: chunked` headers, it ignores them both. This enables request smuggling when Tornado is deployed behind a proxy server that emits such requests. [Pound](https://en.wikipedia.org/wiki/Pound_(networking)) does this.\n\n### PoC\n0. Install Tornado.\n1. Start a simple Tornado server that echoes each received request's body:\n```bash\ncat << EOF > server.py\nimport asyncio\nimport tornado\n\nclass MainHandler(tornado.web.RequestHandler):\n    def post(self):\n        self.write(self.request.body)\n\nasync def main():\n    tornado.web.Application([(r\"/\", MainHandler)]).listen(8000)\n    await asyncio.Event().wait()\n\nasyncio.run(main())\nEOF\npython3 server.py &\n```\n2. Send a valid chunked request:\n```bash\nprintf 'POST / HTTP/1.1\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n1\\r\\nZ\\r\\n0\\r\\n\\r\\n' | nc localhost 8000\n```\n3. Observe that the response is as expected:\n```\nHTTP/1.1 200 OK\nServer: TornadoServer/6.3.3\nContent-Type: text/html; charset=UTF-8\nDate: Sat, 07 Oct 2023 17:32:05 GMT\nContent-Length: 1\n\nZ\n```\n4. Send a request with two `Transfer-Encoding: chunked` headers:\n```\nprintf 'POST / HTTP/1.1\\r\\nTransfer-Encoding: chunked\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n1\\r\\nZ\\r\\n0\\r\\n\\r\\n' | nc localhost 8000\n```\n5. Observe the strange response:\n```\nHTTP/1.1 200 OK\nServer: TornadoServer/6.3.3\nContent-Type: text/html; charset=UTF-8\nDate: Sat, 07 Oct 2023 17:35:40 GMT\nContent-Length: 0\n\nHTTP/1.1 400 Bad Request\n\n```\nThis is because Tornado believes that the request has no message body, so it tries to interpret `1\\r\\nZ\\r\\n0\\r\\n\\r\\n` as its own request, which causes a 400 response. With a little cleverness involving `chunk-ext`s, you can get Tornado to instead respond 405, which has the potential to desynchronize the connection, as opposed to 400 which should always result in a connection closure.\n\n### Impact\nAnyone using Tornado behind a proxy that forwards requests containing multiple `Transfer-Encoding: chunked` headers is vulnerable to request smuggling, which may entail ACL bypass, cache poisoning, or connection desynchronization.\n",
      "cve": "GHSA-753j-mpmx-qq6g",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade tornado@5.1.1 to 6.4.1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/tornado@5.1.1"
          },
          "version": "5.1.1"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "GHSA-753j-mpmx-qq6g",
          "value": "GHSA-753j-mpmx-qq6g",
          "url": "https://scout.docker.com/v/GHSA-753j-mpmx-qq6g?s=github&n=tornado&t=pypi&vr=%3C%3D6.4.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/GHSA-753j-mpmx-qq6g?s=github&n=tornado&t=pypi&vr=%3C%3D6.4.0"
        }
      ]
    },
    {
      "id": "985e9e5a72e61330e78d506eece2887dcac9222d2e663bcccfb543f489c9fe8d",
      "category": "container_scanning",
      "message": "CVE-2024-22195 on jinja2@2.10.3",
      "description": "The `xmlattr` filter in affected versions of Jinja accepts keys containing spaces. XML/HTML attributes cannot contain spaces, as each would then be interpreted as a separate attribute. If an application accepts keys (as opposed to only values) as user input, and renders these in pages that other users see as well, an attacker could use this to inject other attributes and perform XSS. Note that accepting keys as user input is not common or a particularly intended use case of the `xmlattr` filter, and an application doing so should already be verifying what keys are provided regardless of this fix.",
      "cve": "CVE-2024-22195",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade jinja2@2.10.3 to 3.1.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/jinja2@2.10.3"
          },
          "version": "2.10.3"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-22195",
          "value": "CVE-2024-22195",
          "url": "https://scout.docker.com/v/CVE-2024-22195?s=github&n=jinja2&t=pypi&vr=%3C3.1.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-22195?s=github&n=jinja2&t=pypi&vr=%3C3.1.3"
        }
      ]
    },
    {
      "id": "0b8b4b596e3481a7ff2b822a3b16c5fb47c9156fe0b8b52e1d642ef4a86a0b3e",
      "category": "container_scanning",
      "message": "CVE-2024-34064 on jinja2@2.10.3",
      "description": "The `xmlattr` filter in affected versions of Jinja accepts keys containing non-attribute characters. XML/HTML attributes cannot contain spaces, `/`, `>`, or `=`, as each would then be interpreted as starting a separate attribute. If an application accepts keys (as opposed to only values) as user input, and renders these in pages that other users see as well, an attacker could use this to inject other attributes and perform XSS. The fix for the previous GHSA-h5c8-rqwp-cp95 CVE-2024-22195 only addressed spaces but not other characters.\n\nAccepting keys as user input is now explicitly considered an unintended use case of the `xmlattr` filter, and code that does so without otherwise validating the input should be flagged as insecure, regardless of Jinja version. Accepting _values_ as user input continues to be safe.",
      "cve": "CVE-2024-34064",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade jinja2@2.10.3 to 3.1.4",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/jinja2@2.10.3"
          },
          "version": "2.10.3"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-34064",
          "value": "CVE-2024-34064",
          "url": "https://scout.docker.com/v/CVE-2024-34064?s=github&n=jinja2&t=pypi&vr=%3C3.1.4"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-34064?s=github&n=jinja2&t=pypi&vr=%3C3.1.4"
        }
      ]
    },
    {
      "id": "5a70f6acdafa5058079f68b667a4b65aea2620f58ea045cc7e745a2e19b5cd76",
      "category": "container_scanning",
      "message": "CVE-2024-56326 on jinja2@2.10.3",
      "description": "An oversight in how the Jinja sandboxed environment detects calls to `str.format` allows an attacker that controls the content of a template to execute arbitrary Python code.\n\nTo exploit the vulnerability, an attacker needs to control the content of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates.\n\nJinja's sandbox does catch calls to `str.format` and ensures they don't escape the sandbox. However, it's possible to store a reference to a malicious string's `format` method, then pass that to a filter that calls it. No such filters are built-in to Jinja, but could be present through custom filters in an application. After the fix, such indirect calls are also handled by the sandbox.",
      "cve": "CVE-2024-56326",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade jinja2@2.10.3 to 3.1.5",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/jinja2@2.10.3"
          },
          "version": "2.10.3"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-56326",
          "value": "CVE-2024-56326",
          "url": "https://scout.docker.com/v/CVE-2024-56326?s=github&n=jinja2&t=pypi&vr=%3C%3D3.1.4"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-56326?s=github&n=jinja2&t=pypi&vr=%3C%3D3.1.4"
        }
      ]
    },
    {
      "id": "7f1ca6a5ee2fa442ac0dcf2da67a679a1e89ca8baeb366a61da0ade1e1372670",
      "category": "container_scanning",
      "message": "CVE-2025-27516 on jinja2@2.10.3",
      "description": "An oversight in how the Jinja sandboxed environment interacts with the `|attr` filter allows an attacker that controls the content of a template to execute arbitrary Python code.\n\nTo exploit the vulnerability, an attacker needs to control the content of a template. Whether that is the case depends on the type of application using Jinja. This vulnerability impacts users of applications which execute untrusted templates.\n\nJinja's sandbox does catch calls to `str.format` and ensures they don't escape the sandbox. However, it's possible to use the `|attr` filter to get a reference to a string's plain format method, bypassing the sandbox. After the fix, the `|attr` filter no longer bypasses the environment's attribute lookup.",
      "cve": "CVE-2025-27516",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade jinja2@2.10.3 to 3.1.6",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/jinja2@2.10.3"
          },
          "version": "2.10.3"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-27516",
          "value": "CVE-2025-27516",
          "url": "https://scout.docker.com/v/CVE-2025-27516?s=github&n=jinja2&t=pypi&vr=%3C%3D3.1.5"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-27516?s=github&n=jinja2&t=pypi&vr=%3C%3D3.1.5"
        }
      ]
    },
    {
      "id": "c6b1a0ef9e8d496a4df9702e2a241d2b09efe0fe6c2dede934499d82f1843157",
      "category": "container_scanning",
      "message": "CVE-2021-41496 on numpy@1.18.2",
      "description": "Buffer overflow in the array_from_pyobj function of fortranobject.c in NumPy < 1.19, which allows attackers to conduct a Denial of Service attacks by carefully constructing an array with negative values.",
      "cve": "CVE-2021-41496",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade numpy@1.18.2 to 1.19",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/numpy@1.18.2"
          },
          "version": "1.18.2"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-41496",
          "value": "CVE-2021-41496",
          "url": "https://scout.docker.com/v/CVE-2021-41496?s=github&n=numpy&t=pypi&vr=%3C%3D1.18.5"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-41496?s=github&n=numpy&t=pypi&vr=%3C%3D1.18.5"
        }
      ]
    },
    {
      "id": "cfd15706149c3413746583a1fcbf8dcb7c9bfbe3118552611bf1e076b806ed85",
      "category": "container_scanning",
      "message": "CVE-2022-40954 on apache-airflow@1.10.10",
      "description": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') vulnerability in Apache Airflow Spark Provider, Apache Airflow allows an attacker to read arbtrary files in the task execution context, without write access to DAG files. This issue affects Spark Provider versions prior to 4.0.0. It also impacts any Apache Airflow versions prior to 2.3.0 in case Spark Provider is installed (Spark Provider 4.0.0 can only be installed for Airflow 2.3.0+). Note that you need to manually install the Spark Provider version 4.0.0 in order to get rid of the vulnerability on top of Airflow 2.3.0+ version that has lower version of the Spark Provider installed).",
      "cve": "CVE-2022-40954",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.3.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-40954",
          "value": "CVE-2022-40954",
          "url": "https://scout.docker.com/v/CVE-2022-40954?s=github&n=apache-airflow&t=pypi&vr=%3C2.3.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-40954?s=github&n=apache-airflow&t=pypi&vr=%3C2.3.0"
        }
      ]
    },
    {
      "id": "6631a4cb4bd43623eab2145e54df762aa4c84e3967bf9190ce742b37123ff959",
      "category": "container_scanning",
      "message": "CVE-2024-0727 on cryptography@2.8",
      "description": "Issue summary: Processing a maliciously formatted PKCS12 file may lead OpenSSL\nto crash leading to a potential Denial of Service attack\n\nImpact summary: Applications loading files in the PKCS12 format from untrusted\nsources might terminate abruptly.\n\nA file in PKCS12 format can contain certificates and keys and may come from an\nuntrusted source. The PKCS12 specification allows certain fields to be NULL, but\nOpenSSL does not correctly check for this case. This can lead to a NULL pointer\ndereference that results in OpenSSL crashing. If an application processes PKCS12\nfiles from an untrusted source using the OpenSSL APIs then that application will\nbe vulnerable to this issue.\n\nOpenSSL APIs that are vulnerable to this are: PKCS12_parse(),\nPKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(), PKCS12_unpack_authsafes()\nand PKCS12_newpass().\n\nWe have also fixed a similar issue in SMIME_write_PKCS7(). However since this\nfunction is related to writing data we do not consider it security significant.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue.",
      "cve": "CVE-2024-0727",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade cryptography@2.8 to 42.0.2",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/cryptography@2.8"
          },
          "version": "2.8"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-0727",
          "value": "CVE-2024-0727",
          "url": "https://scout.docker.com/v/CVE-2024-0727?s=github&n=cryptography&t=pypi&vr=%3C42.0.2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-0727?s=github&n=cryptography&t=pypi&vr=%3C42.0.2"
        }
      ]
    },
    {
      "id": "95dbb2fe0ead198321589c6213b59a08e720e62e8b370c9a1bc8c37aa2afea6c",
      "category": "container_scanning",
      "message": "CVE-2024-35195 on requests@2.23.0",
      "description": "When making requests through a Requests `Session`, if the first request is made with `verify=False` to disable cert verification, all subsequent requests to the same origin will continue to ignore cert verification regardless of changes to the value of `verify`. This behavior will continue for the lifecycle of the connection in the connection pool.\n\n### Remediation\nAny of these options can be used to remediate the current issue, we highly recommend upgrading as the preferred mitigation.\n\n* Upgrade to `requests>=2.32.0`.\n* For `requests<2.32.0`, avoid setting `verify=False` for the first request to a host while using a Requests Session.\n* For `requests<2.32.0`, call `close()` on `Session` objects to clear existing connections if `verify=False` is used.\n\n### Related Links\n* https://github.com/psf/requests/pull/6655",
      "cve": "CVE-2024-35195",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade requests@2.23.0 to 2.32.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/requests@2.23.0"
          },
          "version": "2.23.0"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-35195",
          "value": "CVE-2024-35195",
          "url": "https://scout.docker.com/v/CVE-2024-35195?s=github&n=requests&t=pypi&vr=%3C2.32.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-35195?s=github&n=requests&t=pypi&vr=%3C2.32.0"
        }
      ]
    },
    {
      "id": "15b4f909af54213fbccdf8be93cd52987e935df4d006397253a978f33ac13f3c",
      "category": "container_scanning",
      "message": "CVE-2022-38170 on apache-airflow@1.10.10",
      "description": "In Apache Airflow prior to 2.3.4, an insecure umask was configured for numerous Airflow components when running with the `--daemon` flag which could result in a race condition giving world-writable files in the Airflow home directory and allowing local users to expose arbitrary file contents via the webserver.",
      "cve": "CVE-2022-38170",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.3.4",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-38170",
          "value": "CVE-2022-38170",
          "url": "https://scout.docker.com/v/CVE-2022-38170?s=github&n=apache-airflow&t=pypi&vr=%3C2.3.4"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-38170?s=github&n=apache-airflow&t=pypi&vr=%3C2.3.4"
        }
      ]
    },
    {
      "id": "e73a6fa2f745c9920699e3738cb1114e625b7b7dd2379514e4abf8c884eaae5d",
      "category": "container_scanning",
      "message": "CVE-2023-45803 on urllib3@1.25.8",
      "description": "urllib3 previously wouldn't remove the HTTP request body when an HTTP redirect response using status 303 \"See Other\" after the request had its method changed from one that could accept a request body (like `POST`) to `GET` as is required by HTTP RFCs. Although the behavior of removing the request body is not specified in the section for redirects, it can be inferred by piecing together information from different sections and we have observed the behavior in other major HTTP client implementations like curl and web browsers.\n\nFrom [RFC 9110 Section 9.3.1](https://www.rfc-editor.org/rfc/rfc9110.html#name-get):\n\n> A client SHOULD NOT generate content in a GET request unless it is made directly to an origin server that has previously indicated, in or out of band, that such a request has a purpose and will be adequately supported.\n\n## Affected usages\n\nBecause the vulnerability requires a previously trusted service to become compromised in order to have an impact on confidentiality we believe the exploitability of this vulnerability is low. Additionally, many users aren't putting sensitive data in HTTP request bodies, if this is the case then this vulnerability isn't exploitable.\n\nBoth of the following conditions must be true to be affected by this vulnerability:\n\n* If you're using urllib3 and submitting sensitive information in the HTTP request body (such as form data or JSON)\n* The origin service is compromised and starts redirecting using 303 to a malicious peer or the redirected-to service becomes compromised.\n\n## Remediation\n\nYou can remediate this vulnerability with any of the following steps:\n\n* Upgrade to a patched version of urllib3 (v1.26.18 or v2.0.7)\n* Disable redirects for services that you aren't expecting to respond with redirects with `redirects=False`.\n* Disable automatic redirects with `redirects=False` and handle 303 redirects manually by stripping the HTTP request body.",
      "cve": "CVE-2023-45803",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade urllib3@1.25.8 to 1.26.18",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/urllib3@1.25.8"
          },
          "version": "1.25.8"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45803",
          "value": "CVE-2023-45803",
          "url": "https://scout.docker.com/v/CVE-2023-45803?s=github&n=urllib3&t=pypi&vr=%3C1.26.18"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45803?s=github&n=urllib3&t=pypi&vr=%3C1.26.18"
        }
      ]
    },
    {
      "id": "40a048e323afda8be21c88aab34d519b797ba56edf358b373dfea11ffb968f07",
      "category": "container_scanning",
      "message": "CVE-2023-46136 on werkzeug@0.16.1",
      "description": "Werkzeug multipart data parser needs to find a boundary that may be between consecutive chunks. That's why parsing is based on looking for newline characters. Unfortunately, code looking for partial boundary in the buffer is written inefficiently, so if we upload a file that starts with CR or LF and then is followed by megabytes of data without these characters: all of these bytes are appended chunk by chunk into internal bytearray and lookup for boundary is performed on growing buffer.\n\nThis allows an attacker to cause a denial of service by sending crafted multipart data to an endpoint that will parse it. The amount of CPU time required can block worker processes from handling legitimate requests. The amount of RAM required can trigger an out of memory kill of the process. If many concurrent requests are sent continuously, this can exhaust or kill all available workers.\n",
      "cve": "CVE-2023-46136",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade werkzeug@0.16.1 to 2.3.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/werkzeug@0.16.1"
          },
          "version": "0.16.1"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-46136",
          "value": "CVE-2023-46136",
          "url": "https://scout.docker.com/v/CVE-2023-46136?s=github&n=werkzeug&t=pypi&vr=%3C2.3.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-46136?s=github&n=werkzeug&t=pypi&vr=%3C2.3.8"
        }
      ]
    },
    {
      "id": "cbf5ce823bca30dabbedcdb716709d3c828ce50e7a8ac9c9bac6c58708096a77",
      "category": "container_scanning",
      "message": "CVE-2022-23491 on certifi@2019.11.28",
      "description": "Certifi 2022.12.07 removes root certificates from \"TrustCor\" from the root store. These are in the process of being removed from Mozilla's trust store.\n\nTrustCor's root certificates are being removed pursuant to an investigation prompted by media reporting that TrustCor's ownership also operated a business that produced spyware. Conclusions of Mozilla's investigation can be found [here](https://groups.google.com/a/mozilla.org/g/dev-security-policy/c/oxX69KFvsm4/m/yLohoVqtCgAJ).",
      "cve": "CVE-2022-23491",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade certifi@2019.11.28 to 2022.12.07",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/certifi@2019.11.28"
          },
          "version": "2019.11.28"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-23491",
          "value": "CVE-2022-23491",
          "url": "https://scout.docker.com/v/CVE-2022-23491?s=github&n=certifi&t=pypi&vr=%3E%3D2017.11.05%2C%3C2022.12.07"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-23491?s=github&n=certifi&t=pypi&vr=%3E%3D2017.11.05%2C%3C2022.12.07"
        }
      ]
    },
    {
      "id": "7954757132b9abc6a3b7c8c07b98f00c64914d7a627968d0c7dee00c648cd052",
      "category": "container_scanning",
      "message": "CVE-2022-24302 on paramiko@2.7.1",
      "description": "In Paramiko before 2.10.1, a race condition (between creation and chmod) in the write_private_key_file function could allow unauthorized information disclosure.",
      "cve": "CVE-2022-24302",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade paramiko@2.7.1 to 2.9.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/paramiko@2.7.1"
          },
          "version": "2.7.1"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-24302",
          "value": "CVE-2022-24302",
          "url": "https://scout.docker.com/v/CVE-2022-24302?s=pypa&n=paramiko&t=pypi&vr=%3C2.9.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-24302?s=pypa&n=paramiko&t=pypi&vr=%3C2.9.3"
        }
      ]
    },
    {
      "id": "87b781d939fcdb8881ceb41d2216be489c83f5d79147532286d516e622dacf75",
      "category": "container_scanning",
      "message": "CVE-2023-29483 on eventlet@0.25.2",
      "description": "eventlet before 0.35.2, as used in dnspython before 2.6.0, allows remote attackers to interfere with DNS name resolution by quickly sending an invalid packet from the expected IP address and source port, aka a \"TuDoor\" attack. In other words, dnspython does not have the preferred behavior in which the DNS name resolution algorithm would proceed, within the full time window, in order to wait for a valid packet. NOTE: dnspython 2.6.0 is unusable for a different reason that was addressed in 2.6.1.",
      "cve": "CVE-2023-29483",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade eventlet@0.25.2 to 0.35.2",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/eventlet@0.25.2"
          },
          "version": "0.25.2"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-29483",
          "value": "CVE-2023-29483",
          "url": "https://scout.docker.com/v/CVE-2023-29483?s=github&n=eventlet&t=pypi&vr=%3C0.35.2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-29483?s=github&n=eventlet&t=pypi&vr=%3C0.35.2"
        }
      ]
    },
    {
      "id": "da419580670e05567afd43ba1e633abc71ee860194df5fee11f00900719ad337",
      "category": "container_scanning",
      "message": "CVE-2023-29483 on dnspython@1.16.0",
      "description": "eventlet before 0.35.2, as used in dnspython before 2.6.0, allows remote attackers to interfere with DNS name resolution by quickly sending an invalid packet from the expected IP address and source port, aka a \"TuDoor\" attack. In other words, dnspython does not have the preferred behavior in which the DNS name resolution algorithm would proceed, within the full time window, in order to wait for a valid packet. NOTE: dnspython 2.6.0 is unusable for a different reason that was addressed in 2.6.1.",
      "cve": "CVE-2023-29483",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade dnspython@1.16.0 to 2.6.1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/dnspython@1.16.0"
          },
          "version": "1.16.0"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-29483",
          "value": "CVE-2023-29483",
          "url": "https://scout.docker.com/v/CVE-2023-29483?s=github&n=dnspython&t=pypi&vr=%3C2.6.1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-29483?s=github&n=dnspython&t=pypi&vr=%3C2.6.1"
        }
      ]
    },
    {
      "id": "d5c7f45d0a711076b34a4b2894e6e6eb479930af7024e9f7428a138a01f31024",
      "category": "container_scanning",
      "message": "CVE-2023-39441 on apache-airflow@1.10.10",
      "description": "Apache Airflow SMTP Provider before 1.3.0, Apache Airflow IMAP Provider before 3.3.0, and Apache Airflow before 2.7.0 are affected by the Validation of OpenSSL Certificate vulnerability.\n\nThe default SSL context with SSL library did not check a server's X.509 certificate.  Instead, the code accepted any certificate, which could result in the disclosure of mail server credentials or mail contents when the client connects to an attacker in a MITM position.\n\nUsers are strongly advised to upgrade to Apache Airflow version 2.7.0 or newer, Apache Airflow IMAP Provider version 3.3.0 or newer, and Apache Airflow SMTP Provider version 1.3.0 or newer to mitigate the risk associated with this vulnerability",
      "cve": "CVE-2023-39441",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.7.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-39441",
          "value": "CVE-2023-39441",
          "url": "https://scout.docker.com/v/CVE-2023-39441?s=github&n=apache-airflow&t=pypi&vr=%3C2.7.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-39441?s=github&n=apache-airflow&t=pypi&vr=%3C2.7.0"
        }
      ]
    },
    {
      "id": "3256bd9415457b61c7a1d99edb0720ad69db4678275d6a51bafb4ebaaef3b17e",
      "category": "container_scanning",
      "message": "CVE-2023-48795 on paramiko@2.7.1",
      "description": "### Summary\n\nTerrapin is a prefix truncation attack targeting the SSH protocol. More precisely, Terrapin breaks the integrity of SSH's secure channel. By carefully adjusting the sequence numbers during the handshake, an attacker can remove an arbitrary amount of messages sent by the client or server at the beginning of the secure channel without the client or server noticing it.\n\n### Mitigations\n\nTo mitigate this protocol vulnerability, OpenSSH suggested a so-called \"strict kex\" which alters the SSH handshake to ensure a Man-in-the-Middle attacker cannot introduce unauthenticated messages as well as convey sequence number manipulation across handshakes.\n\n**Warning: To take effect, both the client and server must support this countermeasure.** \n\nAs a stop-gap measure, peers may also (temporarily) disable the affected algorithms and use unaffected alternatives like AES-GCM instead until patches are available.\n\n### Details\n\nThe SSH specifications of ChaCha20-Poly1305 (chacha20-poly1305@openssh.com) and Encrypt-then-MAC (*-etm@openssh.com MACs) are vulnerable against an arbitrary prefix truncation attack (a.k.a. Terrapin attack). This allows for an extension negotiation downgrade by stripping the SSH_MSG_EXT_INFO sent after the first message after SSH_MSG_NEWKEYS, downgrading security, and disabling attack countermeasures in some versions of OpenSSH. When targeting Encrypt-then-MAC, this attack requires the use of a CBC cipher to be practically exploitable due to the internal workings of the cipher mode. Additionally, this novel attack technique can be used to exploit previously unexploitable implementation flaws in a Man-in-the-Middle scenario.\n\nThe attack works by an attacker injecting an arbitrary number of SSH_MSG_IGNORE messages during the initial key exchange and consequently removing the same number of messages just after the initial key exchange has concluded. This is possible due to missing authentication of the excess SSH_MSG_IGNORE messages and the fact that the implicit sequence numbers used within the SSH protocol are only checked after the initial key exchange.\n\nIn the case of ChaCha20-Poly1305, the attack is guaranteed to work on every connection as this cipher does not maintain an internal state other than the message's sequence number. In the case of Encrypt-Then-MAC, practical exploitation requires the use of a CBC cipher; while theoretical integrity is broken for all ciphers when using this mode, message processing will fail at the application layer for CTR and stream ciphers.\n\nFor more details see [https://terrapin-attack.com](https://terrapin-attack.com). \n\n### Impact\n\nThis attack targets the specification of ChaCha20-Poly1305 (chacha20-poly1305@openssh.com) and Encrypt-then-MAC (*-etm@openssh.com), which are widely adopted by well-known SSH implementations and can be considered de-facto standard. These algorithms can be practically exploited; however, in the case of Encrypt-Then-MAC, we additionally require the use of a CBC cipher. As a consequence, this attack works against all well-behaving SSH implementations supporting either of those algorithms and can be used to downgrade (but not fully strip) connection security in case SSH extension negotiation (RFC8308) is supported. The attack may also enable attackers to exploit certain implementation flaws in a man-in-the-middle (MitM) scenario.",
      "cve": "CVE-2023-48795",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade paramiko@2.7.1 to 3.4.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/paramiko@2.7.1"
          },
          "version": "2.7.1"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-48795",
          "value": "CVE-2023-48795",
          "url": "https://scout.docker.com/v/CVE-2023-48795?s=github&n=paramiko&t=pypi&vr=%3E%3D2.5.0%2C%3C3.4.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-48795?s=github&n=paramiko&t=pypi&vr=%3E%3D2.5.0%2C%3C3.4.0"
        }
      ]
    },
    {
      "id": "6410566dcbf8f5586ffdbc3690e27f7ffad1c4472453269185527d5fa3d45827",
      "category": "container_scanning",
      "message": "CVE-2025-8869 on pip@19.0.2",
      "description": "### Summary\n\nIn the fallback extraction path for source distributions, `pip` used Python’s `tarfile` module without verifying that symbolic/hard link targets resolve inside the intended extraction directory. A malicious sdist can include links that escape the target directory and overwrite arbitrary files on the invoking host during `pip install`.\n\n### Impact\n\nSuccessful exploitation enables arbitrary file overwrite outside the build/extraction directory on the machine running `pip`. This can be leveraged to tamper with configuration or startup files and may lead to further code execution depending on the environment, but the direct, guaranteed impact is integrity compromise on the vulnerable system.\n\n### Conditions\n\nThe issue is triggered when installing an attacker-controlled sdist (e.g., from an index or URL) and the fallback extraction code path is used. No special privileges are required beyond running `pip install`; active user action is necessary.\n\n### Remediation\n\nThe [fix](https://github.com/pypa/pip/pull/13550) is available starting in pip `25.3`. Using a Python interpreter that implements the safe-extraction behavior described by **PEP 706** provides additional defense in depth for other `tarfile` issues but is not a substitute for upgrading pip for this specific flaw.",
      "cve": "CVE-2025-8869",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade pip@19.0.2 to 25.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/pip@19.0.2"
          },
          "version": "19.0.2"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-8869",
          "value": "CVE-2025-8869",
          "url": "https://scout.docker.com/v/CVE-2025-8869?s=github&n=pip&t=pypi&vr=%3C%3D25.2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-8869?s=github&n=pip&t=pypi&vr=%3C%3D25.2"
        }
      ]
    },
    {
      "id": "1f461f1ced3d23090df147d88a73c30e657661ea1957259c682a7556bab838d9",
      "category": "container_scanning",
      "message": "CVE-2021-33430 on numpy@1.18.2",
      "description": "A Buffer Overflow vulnerability exists in NumPy 1.9.x in the PyArray_NewFromDescr_int function of ctors.c when specifying arrays of large dimensions (over 32) from Python code, which could let a malicious user cause a Denial of Service.\n\nNOTE: The vendor does not agree this is a vulnerability; In (very limited) circumstances a user may be able provoke the buffer overflow, the user is most likely already privileged to at least provoke denial of service by exhausting memory. Triggering this further requires the use of uncommon API (complicated structured dtypes), which is very unlikely to be available to an unprivileged user.",
      "cve": "CVE-2021-33430",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade numpy@1.18.2 to 1.21",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/numpy@1.18.2"
          },
          "version": "1.18.2"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-33430",
          "value": "CVE-2021-33430",
          "url": "https://scout.docker.com/v/CVE-2021-33430?s=github&n=numpy&t=pypi&vr=%3E%3D1.9.0%2C%3C1.21"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-33430?s=github&n=numpy&t=pypi&vr=%3E%3D1.9.0%2C%3C1.21"
        }
      ]
    },
    {
      "id": "2e423dc8dac9cb23b29214647c4bf4abe922f90e04bac6bcda0bcff942e1d20c",
      "category": "container_scanning",
      "message": "CVE-2020-17515 on apache-airflow@1.10.10",
      "description": "The `origin` parameter passed to some of the endpoints like `/trigger` was vulnerable to XSS exploit. This issue affects Apache Airflow versions prior to 1.10.15. This is same as CVE-2020-13944 but the implemented fix in Airflow 1.10.13 did not fix the issue completely.",
      "cve": "CVE-2020-17515",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 1.10.15rc1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2020-17515",
          "value": "CVE-2020-17515",
          "url": "https://scout.docker.com/v/CVE-2020-17515?s=github&n=apache-airflow&t=pypi&vr=%3C1.10.15rc1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2020-17515?s=github&n=apache-airflow&t=pypi&vr=%3C1.10.15rc1"
        }
      ]
    },
    {
      "id": "b8b358ec237752b8a14f41895bcbfb842539a82efef172b292a43bef0a3b53d9",
      "category": "container_scanning",
      "message": "CVE-2022-24776 on flask-appbuilder@2.3.0",
      "description": "Flask-AppBuilder is an application development framework built on top of Flask. Versions prior to 3.4.5 contain an open redirect vulnerability when using the database authentication login page. There are no known workarounds. Users are recommended to upgrade to version 3.4.5 or later.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [Flask-AppBuilder](https://github.com/dpgaspar/Flask-AppBuilder)\n",
      "cve": "CVE-2022-24776",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade flask-appbuilder@2.3.0 to 3.4.5",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/flask-appbuilder@2.3.0"
          },
          "version": "2.3.0"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-24776",
          "value": "CVE-2022-24776",
          "url": "https://scout.docker.com/v/CVE-2022-24776?s=github&n=flask-appbuilder&t=pypi&vr=%3C3.4.5"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-24776?s=github&n=flask-appbuilder&t=pypi&vr=%3C3.4.5"
        }
      ]
    },
    {
      "id": "11e09ddc74c56821066d12b3d800b5f82eadbd3706eea27d58e2ff9f2d3d28de",
      "category": "container_scanning",
      "message": "CVE-2022-45402 on apache-airflow@1.10.10",
      "description": "In Apache Airflow versions prior to 2.4.3, there was an open redirect in the webserver's `/login` endpoint.",
      "cve": "CVE-2022-45402",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.4.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-45402",
          "value": "CVE-2022-45402",
          "url": "https://scout.docker.com/v/CVE-2022-45402?s=github&n=apache-airflow&t=pypi&vr=%3C2.4.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-45402?s=github&n=apache-airflow&t=pypi&vr=%3C2.4.3"
        }
      ]
    },
    {
      "id": "7bb091b233c87a70ecb073600283c996107ea59b44341b4e6c3eeaec0ea2d7e0",
      "category": "container_scanning",
      "message": "CVE-2023-32681 on requests@2.23.0",
      "description": "### Impact\n\nSince Requests v2.3.0, Requests has been vulnerable to potentially leaking `Proxy-Authorization` headers to destination servers, specifically during redirects to an HTTPS origin. This is a product of how `rebuild_proxies` is used to recompute and [reattach the `Proxy-Authorization` header](https://github.com/psf/requests/blob/f2629e9e3c7ce3c3c8c025bcd8db551101cbc773/requests/sessions.py#L319-L328) to requests when redirected. Note this behavior has _only_ been observed to affect proxied requests when credentials are supplied in the URL user information component (e.g. `https://username:password@proxy:8080`).\n\n**Current vulnerable behavior(s):**\n\n1. HTTP → HTTPS: **leak**\n2. HTTPS → HTTP: **no leak**\n3. HTTPS → HTTPS: **leak**\n4. HTTP → HTTP: **no leak**\n\nFor HTTP connections sent through the proxy, the proxy will identify the header in the request itself and remove it prior to forwarding to the destination server. However when sent over HTTPS, the `Proxy-Authorization` header must be sent in the CONNECT request as the proxy has no visibility into further tunneled requests. This results in Requests forwarding the header to the destination server unintentionally, allowing a malicious actor to potentially exfiltrate those credentials.\n\nThe reason this currently works for HTTPS connections in Requests is the `Proxy-Authorization` header is also handled by urllib3 with our usage of the ProxyManager in adapters.py with [`proxy_manager_for`](https://github.com/psf/requests/blob/f2629e9e3c7ce3c3c8c025bcd8db551101cbc773/requests/adapters.py#L199-L235). This will compute the required proxy headers in `proxy_headers` and pass them to the Proxy Manager, avoiding attaching them directly to the Request object. This will be our preferred option going forward for default usage.\n\n### Patches\nStarting in Requests v2.31.0, Requests will no longer attach this header to redirects with an HTTPS destination. This should have no negative impacts on the default behavior of the library as the proxy credentials are already properly being handled by urllib3's ProxyManager.\n\nFor users with custom adapters, this _may_ be potentially breaking if you were already working around this behavior. The previous functionality of `rebuild_proxies` doesn't make sense in any case, so we would encourage any users impacted to migrate any handling of Proxy-Authorization directly into their custom adapter.\n\n### Workarounds\nFor users who are not able to update Requests immediately, there is one potential workaround.\n\nYou may disable redirects by setting `allow_redirects` to `False` on all calls through Requests top-level APIs. Note that if you're currently relying on redirect behaviors, you will need to capture the 3xx response codes and ensure a new request is made to the redirect destination.\n```\nimport requests\nr = requests.get('http://github.com/', allow_redirects=False)\n```\n\n### Credits\n\nThis vulnerability was discovered and disclosed by the following individuals.\n\nDennis Brinkrolf, Haxolot (https://haxolot.com/)\nTobias Funke, (tobiasfunke93@gmail.com)",
      "cve": "CVE-2023-32681",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade requests@2.23.0 to 2.31.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/requests@2.23.0"
          },
          "version": "2.23.0"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-32681",
          "value": "CVE-2023-32681",
          "url": "https://scout.docker.com/v/CVE-2023-32681?s=github&n=requests&t=pypi&vr=%3E%3D2.3.0%2C%3C2.31.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-32681?s=github&n=requests&t=pypi&vr=%3E%3D2.3.0%2C%3C2.31.0"
        }
      ]
    },
    {
      "id": "740ae622adbfb8ee66f66561fb3abe3b266b12bc8f90783e57c888999130434b",
      "category": "container_scanning",
      "message": "CVE-2020-11078 on httplib2@0.17.0",
      "description": "### Impact\nAttacker controlling unescaped part of uri for `httplib2.Http.request()` could change request headers and body, send additional hidden requests to same server.\n\nImpacts software that uses httplib2 with uri constructed by string concatenation, as opposed to proper urllib building with escaping.\n\n### Patches\nProblem has been fixed in 0.18.0\nSpace, CR, LF characters are now quoted before any use.\nThis solution should not impact any valid usage of httplib2 library, that is uri constructed by urllib.\n\n### Workarounds\nCreate URI with `urllib.parse` family functions: `urlencode`, `urlunsplit`.\n\n```diff\nuser_input = \" HTTP/1.1\\r\\ninjected: attack\\r\\nignore-http:\"\n-uri = \"https://api.server/?q={}\".format(user_input)\n+uri = urllib.parse.urlunsplit((\"https\", \"api.server\", \"/v1\", urllib.parse.urlencode({\"q\": user_input}), \"\"))\nhttp.request(uri)\n```\n\n### References\nhttps://cwe.mitre.org/data/definitions/93.html\nhttps://docs.python.org/3/library/urllib.parse.html\n\nThanks to Recar https://github.com/Ciyfly for finding vulnerability and discrete notification.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [httplib2](https://github.com/httplib2/httplib2/issues/new)\n* Email [current maintainer at 2020-05](mailto:temotor@gmail.com)",
      "cve": "CVE-2020-11078",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade httplib2@0.17.0 to 0.18.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/httplib2@0.17.0"
          },
          "version": "0.17.0"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2020-11078",
          "value": "CVE-2020-11078",
          "url": "https://scout.docker.com/v/CVE-2020-11078?s=github&n=httplib2&t=pypi&vr=%3C0.18.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2020-11078?s=github&n=httplib2&t=pypi&vr=%3C0.18.0"
        }
      ]
    },
    {
      "id": "0ad5aeb911f819117ced9a5200cc389fe1157213ae62bdc4f80bf76652c8c7a5",
      "category": "container_scanning",
      "message": "CVE-2024-49766 on werkzeug@0.16.1",
      "description": "On Python < 3.11 on Windows, `os.path.isabs()` does not catch UNC paths like `//server/share`. Werkzeug's `safe_join()` relies on this check, and so can produce a path that is not safe, potentially allowing unintended access to data. Applications using Python >= 3.11, or not using Windows, are not vulnerable.",
      "cve": "CVE-2024-49766",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade werkzeug@0.16.1 to 3.0.6",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/werkzeug@0.16.1"
          },
          "version": "0.16.1"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-49766",
          "value": "CVE-2024-49766",
          "url": "https://scout.docker.com/v/CVE-2024-49766?s=github&n=werkzeug&t=pypi&vr=%3C%3D3.0.5"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-49766?s=github&n=werkzeug&t=pypi&vr=%3C%3D3.0.5"
        }
      ]
    },
    {
      "id": "9a493a125c2371b9c2549ed7871eba82f7b3e5a005c281b82e500149650d80cd",
      "category": "container_scanning",
      "message": "CVE-2025-58068 on eventlet@0.25.2",
      "description": "### Impact\nThe Eventlet WSGI parser is vulnerable to HTTP Request Smuggling due to improper handling of HTTP trailer sections.\n\nThis vulnerability could enable attackers to:\n- Bypass front-end security controls\n- Launch targeted attacks against active site users\n- Poison web caches\n\n### Patches\nProblem has been patched in eventlet 0.40.3.\n\nThe patch just drops trailers. If a backend behind eventlet.wsgi proxy requires trailers, then this patch BREAKS your setup.\n\n### Workarounds\nDo not use eventlet.wsgi facing untrusted clients.\n\n### References\n- Patch https://github.com/eventlet/eventlet/pull/1062\n- This issue is similar to https://github.com/advisories/GHSA-9548-qrrj-x5pj",
      "cve": "CVE-2025-58068",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade eventlet@0.25.2 to 0.40.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/eventlet@0.25.2"
          },
          "version": "0.25.2"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-58068",
          "value": "CVE-2025-58068",
          "url": "https://scout.docker.com/v/CVE-2025-58068?s=github&n=eventlet&t=pypi&vr=%3C0.40.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-58068?s=github&n=eventlet&t=pypi&vr=%3C0.40.3"
        }
      ]
    },
    {
      "id": "33c1b50b1a5cd4875918c38aabcf8fa50ad3b09ce290916caf73e0391e8a9415",
      "category": "container_scanning",
      "message": "CVE-2021-22570 on protobuf@3.11.3",
      "description": "Nullptr dereference when a null char is present in a proto symbol. The symbol is parsed incorrectly, leading to an unchecked call into the proto file's name during generation of the resulting error message. Since the symbol is incorrectly parsed, the file is nullptr. We recommend upgrading to version 3.15.0 or greater.",
      "cve": "CVE-2021-22570",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade protobuf@3.11.3 to 3.15.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/protobuf@3.11.3"
          },
          "version": "3.11.3"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-22570",
          "value": "CVE-2021-22570",
          "url": "https://scout.docker.com/v/CVE-2021-22570?s=pypa&n=protobuf&t=pypi&vr=%3C3.15.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-22570?s=pypa&n=protobuf&t=pypi&vr=%3C3.15.0"
        }
      ]
    },
    {
      "id": "dc783ee49019bde91d8d4de10751a16033573b06520b562f8e679dc018471b23",
      "category": "container_scanning",
      "message": "CVE-2021-26559 on apache-airflow@1.10.10",
      "description": "Improper Access Control on Configurations Endpoint for the Stable API of Apache Airflow allows users with Viewer or User role to get Airflow Configurations including sensitive information even when `[webserver] expose_config` is set to `False` in `airflow.cfg`. This allowed a privilege escalation attack. This issue affects Apache Airflow 2.0.0.",
      "cve": "CVE-2021-26559",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.0.1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-26559",
          "value": "CVE-2021-26559",
          "url": "https://scout.docker.com/v/CVE-2021-26559?s=pypa&n=apache-airflow&t=pypi&vr=%3C2.0.1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-26559?s=pypa&n=apache-airflow&t=pypi&vr=%3C2.0.1"
        }
      ]
    },
    {
      "id": "55006fbe222a848338f471f2814302c4eac695692af793fe871147bd53315da5",
      "category": "container_scanning",
      "message": "CVE-2021-45230 on apache-airflow@1.10.10",
      "description": "In Apache Airflow prior to 2.2.0. This CVE applies to a specific case where a User who has \"can_create\" permissions on DAG Runs can create Dag Runs for dags that they don't have \"edit\" permissions for.",
      "cve": "CVE-2021-45230",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.2.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-45230",
          "value": "CVE-2021-45230",
          "url": "https://scout.docker.com/v/CVE-2021-45230?s=github&n=apache-airflow&t=pypi&vr=%3C2.2.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-45230?s=github&n=apache-airflow&t=pypi&vr=%3C2.2.0"
        }
      ]
    },
    {
      "id": "26504fbfeabe5ce76c8f82e9fb14c5cbaca419288b0ff00497ae0a3c79af325e",
      "category": "container_scanning",
      "message": "CVE-2023-42663 on apache-airflow@1.10.10",
      "description": "Apache Airflow, versions before 2.7.2, has a vulnerability that allows an authorized user with access to read specific DAGs _only_ to read information about task instances in other DAGs. Users of Apache Airflow are advised to upgrade to version 2.7.2 or newer to mitigate the risk associated with this vulnerability.",
      "cve": "CVE-2023-42663",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.7.2",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-42663",
          "value": "CVE-2023-42663",
          "url": "https://scout.docker.com/v/CVE-2023-42663?s=github&n=apache-airflow&t=pypi&vr=%3C2.7.2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-42663?s=github&n=apache-airflow&t=pypi&vr=%3C2.7.2"
        }
      ]
    },
    {
      "id": "332d8c12654234e1f5bb606c6dcee072a85d4aa5e4a3c2743d4f686c61e436ee",
      "category": "container_scanning",
      "message": "CVE-2023-42780 on apache-airflow@1.10.10",
      "description": "Apache Airflow, versions prior to 2.7.2, contains a security vulnerability that allows authenticated users of Airflow to list warnings for all DAGs, even if the user had no permission to see those DAGs. It would reveal the dag_ids and the stack-traces of import errors for those DAGs with import errors. Users of Apache Airflow are advised to upgrade to version 2.7.2 or newer to mitigate the risk associated with this vulnerability.\n\n",
      "cve": "CVE-2023-42780",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.7.2",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-42780",
          "value": "CVE-2023-42780",
          "url": "https://scout.docker.com/v/CVE-2023-42780?s=github&n=apache-airflow&t=pypi&vr=%3C2.7.2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-42780?s=github&n=apache-airflow&t=pypi&vr=%3C2.7.2"
        }
      ]
    },
    {
      "id": "2130c57b29987e015945be1f2bbcba090aaa65f66a4d0db0df9bad0b3ec067fe",
      "category": "container_scanning",
      "message": "CVE-2023-42792 on apache-airflow@1.10.10",
      "description": "Apache Airflow, in versions prior to 2.7.2, contains a security vulnerability that allows an authenticated user with limited access to some DAGs, to craft a request that could give the user write access to various DAG resources for DAGs that the user had no access to, thus, enabling the user to clear DAGs they shouldn't.\n\nUsers of Apache Airflow are strongly advised to upgrade to version 2.7.2 or newer to mitigate the risk associated with this vulnerability.",
      "cve": "CVE-2023-42792",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.7.2",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-42792",
          "value": "CVE-2023-42792",
          "url": "https://scout.docker.com/v/CVE-2023-42792?s=github&n=apache-airflow&t=pypi&vr=%3C2.7.2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-42792?s=github&n=apache-airflow&t=pypi&vr=%3C2.7.2"
        }
      ]
    },
    {
      "id": "e48fdb201a3d1d9c3193e2dd094d0d5158b454df4fb273d4bcc49cc9745ee084",
      "category": "container_scanning",
      "message": "CVE-2023-50783 on apache-airflow@1.10.10",
      "description": "Apache Airflow, versions before 2.8.0, is affected by a vulnerability that allows an authenticated user without the variable edit permission, to update a variable.\nThis flaw compromises the integrity of variable management, potentially leading to unauthorized data modification.\nUsers are recommended to upgrade to 2.8.0, which fixes this issue.",
      "cve": "CVE-2023-50783",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.8.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-50783",
          "value": "CVE-2023-50783",
          "url": "https://scout.docker.com/v/CVE-2023-50783?s=github&n=apache-airflow&t=pypi&vr=%3C2.8.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-50783?s=github&n=apache-airflow&t=pypi&vr=%3C2.8.0"
        }
      ]
    },
    {
      "id": "14f2532d2717f981ba7c5edd65abba52ba2bf2ed8ad5a2b2bfa88f23ddb92bc1",
      "category": "container_scanning",
      "message": "CVE-2025-58065 on flask-appbuilder@2.3.0",
      "description": "### Impact\nWhen Flask-AppBuilder is configured to use OAuth, LDAP, or other non-database authentication methods, the password reset endpoint remains registered and accessible, despite not being displayed in the user interface. This allows an enabled user to reset their password and be able to create JWT tokens even after the user is disabled on the authentication provider.\n\n### Patches\nUpgrade to Flask-AppBuilder version 4.8.1 or later\n\n### Workarounds\nIf immediate upgrade is not possible:\n- Manually disable password reset routes in the application configuration\n- Implement additional access controls at the web server or proxy level to block access to the reset my password URL.\n- Monitor for suspicious password reset attempts from disabled accounts",
      "cve": "CVE-2025-58065",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade flask-appbuilder@2.3.0 to 4.8.1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/flask-appbuilder@2.3.0"
          },
          "version": "2.3.0"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-58065",
          "value": "CVE-2025-58065",
          "url": "https://scout.docker.com/v/CVE-2025-58065?s=github&n=flask-appbuilder&t=pypi&vr=%3C4.8.1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-58065?s=github&n=flask-appbuilder&t=pypi&vr=%3C4.8.1"
        }
      ]
    },
    {
      "id": "f51f0db1e4f9c864e03d360e1e9c0b9226c7ca384db81b7f96af3f3c5217ebdd",
      "category": "container_scanning",
      "message": "GHSA-w235-7p84-xx57 on tornado@5.1.1",
      "description": "### Summary\nTornado’s `curl_httpclient.CurlAsyncHTTPClient` class is vulnerable to CRLF (carriage return/line feed) injection in the request headers.\n\n### Details\nWhen an HTTP request is sent using `CurlAsyncHTTPClient`, Tornado does not reject carriage return (\\r) or line feed (\\n) characters in the request headers. As a result, if an application includes an attacker-controlled header value in a request sent using `CurlAsyncHTTPClient`, the attacker can inject arbitrary headers into the request or cause the application to send arbitrary requests to the specified server.\n\nThis behavior differs from that of the standard `AsyncHTTPClient` class, which does reject CRLF characters.\n\nThis issue appears to stem from libcurl's (as well as pycurl's) lack of validation for the [`HTTPHEADER`](https://curl.se/libcurl/c/CURLOPT_HTTPHEADER.html) option. libcurl’s documentation states:\n\n> The headers included in the linked list must not be CRLF-terminated, because libcurl adds CRLF after each header item itself. Failure to comply with this might result in strange behavior. libcurl passes on the verbatim strings you give it, without any filter or other safe guards. That includes white space and control characters.\n\npycurl similarly appears to assume that the headers adhere to the correct format. Therefore, without any validation on Tornado’s part, header names and values are included verbatim in the request sent by `CurlAsyncHTTPClient`, including any control characters that have special meaning in HTTP semantics.\n\n### PoC\nThe issue can be reproduced using the following script:\n\n```python\nimport asyncio\n\nfrom tornado import httpclient\nfrom tornado import curl_httpclient\n\nasync def main():\n    http_client = curl_httpclient.CurlAsyncHTTPClient()\n\n    request = httpclient.HTTPRequest(\n        # Burp Collaborator payload\n        \"http://727ymeu841qydmnwlol261ktkkqbe24qt.oastify.com/\",\n        method=\"POST\",\n        body=\"body\",\n        # Injected header using CRLF characters\n        headers={\"Foo\": \"Bar\\r\\nHeader: Injected\"}\n    )\n\n    response = await http_client.fetch(request)\n    print(response.body)\n\n    http_client.close()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\nWhen the specified server receives the request, it contains the injected header (`Header: Injected`) on its own line:\n\n```http\nPOST / HTTP/1.1\nHost: 727ymeu841qydmnwlol261ktkkqbe24qt.oastify.com\nUser-Agent: Mozilla/5.0 (compatible; pycurl)\nAccept: */*\nAccept-Encoding: gzip,deflate\nFoo: Bar\nHeader: Injected\nContent-Length: 4\nContent-Type: application/x-www-form-urlencoded\n\nbody\n```\n\nThe attacker can also construct entirely new requests using a payload with multiple CRLF sequences. For example, specifying a header value of `\\r\\n\\r\\nPOST /attacker-controlled-url HTTP/1.1\\r\\nHost: 727ymeu841qydmnwlol261ktkkqbe24qt.oastify.com` results in the server receiving an additional, attacker-controlled request:\n\n```http\nPOST /attacker-controlled-url HTTP/1.1\nHost: 727ymeu841qydmnwlol261ktkkqbe24qt.oastify.com\nContent-Length: 4\nContent-Type: application/x-www-form-urlencoded\n\nbody\n```\n\n### Impact\nApplications using the Tornado library to send HTTP requests with untrusted header data are affected. This issue may facilitate the exploitation of server-side request forgery (SSRF) vulnerabilities.",
      "cve": "GHSA-w235-7p84-xx57",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade tornado@5.1.1 to 6.4.1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/tornado@5.1.1"
          },
          "version": "5.1.1"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "GHSA-w235-7p84-xx57",
          "value": "GHSA-w235-7p84-xx57",
          "url": "https://scout.docker.com/v/GHSA-w235-7p84-xx57?s=github&n=tornado&t=pypi&vr=%3C%3D6.4.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/GHSA-w235-7p84-xx57?s=github&n=tornado&t=pypi&vr=%3C%3D6.4.0"
        }
      ]
    },
    {
      "id": "4f9604957d2f9fa0333ab8309c3434289b8e0c0f9c4c5a3307b771128c6c1434",
      "category": "container_scanning",
      "message": "CVE-2022-40896 on pygments@2.6.1",
      "description": "A ReDoS issue was discovered in `pygments/lexers/smithy.py` in Pygments until 2.15.0 via SmithyLexer.",
      "cve": "CVE-2022-40896",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade pygments@2.6.1 to 2.15.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/pygments@2.6.1"
          },
          "version": "2.6.1"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-40896",
          "value": "CVE-2022-40896",
          "url": "https://scout.docker.com/v/CVE-2022-40896?s=github&n=pygments&t=pypi&vr=%3C2.15.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-40896?s=github&n=pygments&t=pypi&vr=%3C2.15.0"
        }
      ]
    },
    {
      "id": "134a52b837e858a647bf6fb170fca85cf206f69ad8d860dd719451f36b01d6a3",
      "category": "container_scanning",
      "message": "CVE-2023-5752 on pip@19.0.2",
      "description": "When installing a package from a Mercurial VCS URL, e.g. `pip install hg+...`, with pip prior to v23.3, the specified Mercurial revision could be used to inject arbitrary configuration options to the `hg clone` call (e.g. `--config`). Controlling the Mercurial configuration can modify how and which repository is installed. This vulnerability does not affect users who aren't installing from Mercurial.",
      "cve": "CVE-2023-5752",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade pip@19.0.2 to 23.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/pip@19.0.2"
          },
          "version": "19.0.2"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-5752",
          "value": "CVE-2023-5752",
          "url": "https://scout.docker.com/v/CVE-2023-5752?s=github&n=pip&t=pypi&vr=%3C23.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-5752?s=github&n=pip&t=pypi&vr=%3C23.3"
        }
      ]
    },
    {
      "id": "5e331a35cbe4b7e1096a219de6371578037b144582f622cf1967ca944f7457d6",
      "category": "container_scanning",
      "message": "CVE-2020-17513 on apache-airflow@1.10.10",
      "description": "In Apache Airflow versions prior to 1.10.13, the Charts and Query View of the old (Flask-admin based) UI were vulnerable for SSRF attack.",
      "cve": "CVE-2020-17513",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 1.10.13",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2020-17513",
          "value": "CVE-2020-17513",
          "url": "https://scout.docker.com/v/CVE-2020-17513?s=github&n=apache-airflow&t=pypi&vr=%3C1.10.13"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2020-17513?s=github&n=apache-airflow&t=pypi&vr=%3C1.10.13"
        }
      ]
    },
    {
      "id": "a986c3a44281c2c0f8c4acb1efab1b8d2cd6340add38aae9bff284941518d318",
      "category": "container_scanning",
      "message": "CVE-2020-26137 on urllib3@1.25.8",
      "description": "urllib3 before 1.25.9 allows CRLF injection if the attacker controls the HTTP request method, as demonstrated by inserting CR and LF control characters in the first argument of `putrequest()`. NOTE: this is similar to CVE-2020-26116.",
      "cve": "CVE-2020-26137",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade urllib3@1.25.8 to 1.25.9",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/urllib3@1.25.8"
          },
          "version": "1.25.8"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2020-26137",
          "value": "CVE-2020-26137",
          "url": "https://scout.docker.com/v/CVE-2020-26137?s=github&n=urllib3&t=pypi&vr=%3C1.25.9"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2020-26137?s=github&n=urllib3&t=pypi&vr=%3C1.25.9"
        }
      ]
    },
    {
      "id": "d896fd9828640865663ddae4a9047ce55492e126dbafc29f62af19ccf53ee423",
      "category": "container_scanning",
      "message": "CVE-2020-28493 on jinja2@2.10.3",
      "description": "This affects the package jinja2 from 0.0.0 and before 2.11.3. The ReDOS vulnerability of the regex is mainly due to the sub-pattern [a-zA-Z0-9._-]+.[a-zA-Z0-9._-]+ This issue can be mitigated by Markdown to format user content instead of the urlize filter, or by implementing request timeouts and limiting process memory.",
      "cve": "CVE-2020-28493",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade jinja2@2.10.3 to 2.11.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/jinja2@2.10.3"
          },
          "version": "2.10.3"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2020-28493",
          "value": "CVE-2020-28493",
          "url": "https://scout.docker.com/v/CVE-2020-28493?s=github&n=jinja2&t=pypi&vr=%3C2.11.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2020-28493?s=github&n=jinja2&t=pypi&vr=%3C2.11.3"
        }
      ]
    },
    {
      "id": "b5df0babee7b93265cc81c5cd95c5e40022c1a85de9f190aa7628f49dcf98d04",
      "category": "container_scanning",
      "message": "CVE-2021-21419 on eventlet@0.25.2",
      "description": "### Impact\nA websocket peer may exhaust memory on Eventlet side by sending very large websocket frames. Malicious peer may exhaust memory on Eventlet side by sending highly compressed data frame.\n\n### Patches\nVersion 0.31.0 restricts websocket frame to reasonable limits.\n\n### Workarounds\nRestricting memory usage via OS limits would help against overall machine exhaustion. No workaround to protect Eventlet process.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [eventlet](https://github.com/eventlet/eventlet/issues)\n* Contact current maintainers. At 2021-03: temotor@gmail.com or https://t.me/temotor",
      "cve": "CVE-2021-21419",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade eventlet@0.25.2 to 0.31.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/eventlet@0.25.2"
          },
          "version": "0.25.2"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-21419",
          "value": "CVE-2021-21419",
          "url": "https://scout.docker.com/v/CVE-2021-21419?s=github&n=eventlet&t=pypi&vr=%3E%3D0.10%2C%3C0.31.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-21419?s=github&n=eventlet&t=pypi&vr=%3E%3D0.10%2C%3C0.31.0"
        }
      ]
    },
    {
      "id": "7db29ce4e8b3cfb5f7f0910a231866463e3ff55a08169de993a909073e1026fa",
      "category": "container_scanning",
      "message": "CVE-2021-29621 on flask-appbuilder@2.3.0",
      "description": "### Impact\nUser enumeration in database authentication in Flask-AppBuilder <= 3.2.3. Allows for a non authenticated user to enumerate existing accounts by timing the response time from the server when you are logging in.\n\n### Patches\nUpgrade to 3.3.0\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [Flask-AppBuilder](https://github.com/dpgaspar/Flask-AppBuilder)",
      "cve": "CVE-2021-29621",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade flask-appbuilder@2.3.0 to 3.3.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/flask-appbuilder@2.3.0"
          },
          "version": "2.3.0"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-29621",
          "value": "CVE-2021-29621",
          "url": "https://scout.docker.com/v/CVE-2021-29621?s=github&n=flask-appbuilder&t=pypi&vr=%3C3.3.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-29621?s=github&n=flask-appbuilder&t=pypi&vr=%3C3.3.0"
        }
      ]
    },
    {
      "id": "e2df7b1a636bd4040fe4763217da7b0640836e36852f03a877847ad37052bd70",
      "category": "container_scanning",
      "message": "CVE-2021-32805 on flask-appbuilder@2.3.0",
      "description": "### Impact\nIf using Flask-AppBuilder OAuth, an attacker can share a carefully crafted URL with a trusted domain for an application built with Flask-AppBuilder, this URL can redirect a user to a malicious site. This is an open redirect vulnerability \n\n### Patches\nInstall Flask-AppBuilder 3.2.2 or above\n\n### Workarounds\nFilter HTTP traffic containing `?next={next-site}` where the `next-site` domain is different from the application you are protecting",
      "cve": "CVE-2021-32805",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade flask-appbuilder@2.3.0 to 3.3.2",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/flask-appbuilder@2.3.0"
          },
          "version": "2.3.0"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-32805",
          "value": "CVE-2021-32805",
          "url": "https://scout.docker.com/v/CVE-2021-32805?s=github&n=flask-appbuilder&t=pypi&vr=%3C3.3.2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-32805?s=github&n=flask-appbuilder&t=pypi&vr=%3C3.3.2"
        }
      ]
    },
    {
      "id": "66f052032956d376eb66e64ad79ffc2e234fc1479fa2a7c172f87d32c110e170",
      "category": "container_scanning",
      "message": "CVE-2022-21659 on flask-appbuilder@2.3.0",
      "description": "### Impact\nUser enumeration in database authentication in Flask-AppBuilder  < 3.4.4. Allows for a non authenticated user to enumerate existing accounts by timing the response time from the server when you are logging in.\n\n### Patches\nUpgrade to 3.4.4\n\n### Workarounds\n\n### References\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [example link to repo](http://example.com)\n* Email us at [example email address](mailto:example@example.com)",
      "cve": "CVE-2022-21659",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade flask-appbuilder@2.3.0 to 3.4.4",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/flask-appbuilder@2.3.0"
          },
          "version": "2.3.0"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-21659",
          "value": "CVE-2022-21659",
          "url": "https://scout.docker.com/v/CVE-2022-21659?s=github&n=flask-appbuilder&t=pypi&vr=%3C3.4.4"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-21659?s=github&n=flask-appbuilder&t=pypi&vr=%3C3.4.4"
        }
      ]
    },
    {
      "id": "8a5dfad507567a9e434e1797d1f8ed5220ce577a9318588c5b3274db94c78782",
      "category": "container_scanning",
      "message": "CVE-2023-23931 on cryptography@2.8",
      "description": "Previously, `Cipher.update_into` would accept Python objects which implement the buffer protocol, but provide only immutable buffers:\n\n```pycon\n>>> outbuf = b\"\\x00\" * 32\n>>> c = ciphers.Cipher(AES(b\"\\x00\" * 32), modes.ECB()).encryptor()\n>>> c.update_into(b\"\\x00\" * 16, outbuf)\n16\n>>> outbuf\nb'\\xdc\\x95\\xc0x\\xa2@\\x89\\x89\\xadH\\xa2\\x14\\x92\\x84 \\x87\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n```\n\nThis would allow immutable objects (such as `bytes`) to be mutated, thus violating fundamental rules of Python. This is a soundness bug -- it allows programmers to misuse an API, it cannot be exploited by attacker controlled data alone.\n\nThis now correctly raises an exception.\n\nThis issue has been present since `update_into` was originally introduced in cryptography 1.8.",
      "cve": "CVE-2023-23931",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade cryptography@2.8 to 39.0.1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/cryptography@2.8"
          },
          "version": "2.8"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-23931",
          "value": "CVE-2023-23931",
          "url": "https://scout.docker.com/v/CVE-2023-23931?s=github&n=cryptography&t=pypi&vr=%3E%3D1.8%2C%3C39.0.1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-23931?s=github&n=cryptography&t=pypi&vr=%3E%3D1.8%2C%3C39.0.1"
        }
      ]
    },
    {
      "id": "3374da129398507b34f03d42f3daf518641f42e128e72ffdc09f141380726e5c",
      "category": "container_scanning",
      "message": "CVE-2023-25695 on apache-airflow@1.10.10",
      "description": "Generation of Error Message Containing Sensitive Information vulnerability in Apache Software Foundation Apache Airflow.This issue affects Apache Airflow: before 2.5.2. The traceback contains information that might be useful for a potential attacker to better target their attack (Python/Airflow version, node name). This information should not be shown if traceback is shown to unauthenticated user.",
      "cve": "CVE-2023-25695",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.5.2rc1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-25695",
          "value": "CVE-2023-25695",
          "url": "https://scout.docker.com/v/CVE-2023-25695?s=github&n=apache-airflow&t=pypi&vr=%3C2.5.2rc1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-25695?s=github&n=apache-airflow&t=pypi&vr=%3C2.5.2rc1"
        }
      ]
    },
    {
      "id": "4209d5618cd3e4c938b59eb90e713283ac79a57e9486cdf2d09f9684aba5129c",
      "category": "container_scanning",
      "message": "CVE-2024-3651 on idna@2.9",
      "description": "### Impact\nA specially crafted argument to the `idna.encode()` function could consume significant resources. This may lead to a denial-of-service.\n\n### Patches\nThe function has been refined to reject such strings without the associated resource consumption in version 3.7.\n\n### Workarounds\nDomain names cannot exceed 253 characters in length, if this length limit is enforced prior to passing the domain to the `idna.encode()` function it should no longer consume significant resources. This is triggered by arbitrarily large inputs that would not occur in normal usage, but may be passed to the library assuming there is no preliminary input validation by the higher-level application.\n\n### References\n* https://huntr.com/bounties/93d78d07-d791-4b39-a845-cbfabc44aadb",
      "cve": "CVE-2024-3651",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade idna@2.9 to 3.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/idna@2.9"
          },
          "version": "2.9"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-3651",
          "value": "CVE-2024-3651",
          "url": "https://scout.docker.com/v/CVE-2024-3651?s=github&n=idna&t=pypi&vr=%3C3.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-3651?s=github&n=idna&t=pypi&vr=%3C3.7"
        }
      ]
    },
    {
      "id": "f4c6b18e3c2c2a32d928329880ea2c7e981e8e47351393944e61c0ddf8c867bb",
      "category": "container_scanning",
      "message": "CVE-2024-49767 on werkzeug@0.16.1",
      "description": "Applications using Werkzeug to parse `multipart/form-data` requests are vulnerable to resource exhaustion. A specially crafted form body can bypass the `Request.max_form_memory_size` setting.\n\n\nThe `Request.max_content_length` setting, as well as resource limits provided by deployment software and platforms, are also available to limit the resources used during a request. This vulnerability does not affect those settings. All three types of limits should be considered and set appropriately when deploying an application.",
      "cve": "CVE-2024-49767",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade werkzeug@0.16.1 to 3.0.6",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/werkzeug@0.16.1"
          },
          "version": "0.16.1"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-49767",
          "value": "CVE-2024-49767",
          "url": "https://scout.docker.com/v/CVE-2024-49767?s=github&n=werkzeug&t=pypi&vr=%3C%3D3.0.5"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-49767?s=github&n=werkzeug&t=pypi&vr=%3C%3D3.0.5"
        }
      ]
    },
    {
      "id": "3e7fb349d32009f9c160d0d0643f90088cb3da60421644be4a22e539f71b534b",
      "category": "container_scanning",
      "message": "CVE-2024-5569 on zipp@3.1.0",
      "description": "A Denial of Service (DoS) vulnerability exists in the jaraco/zipp library, affecting all versions prior to 3.19.1. The vulnerability is triggered when processing a specially crafted zip file that leads to an infinite loop. This issue also impacts the zipfile module of CPython, as features from the third-party zipp library are later merged into CPython, and the affected code is identical in both projects. The infinite loop can be initiated through the use of functions affecting the `Path` module in both zipp and zipfile, such as `joinpath`, the overloaded division operator, and `iterdir`. Although the infinite loop is not resource exhaustive, it prevents the application from responding. The vulnerability was addressed in version 3.19.1 of jaraco/zipp.",
      "cve": "CVE-2024-5569",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade zipp@3.1.0 to 3.19.1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/zipp@3.1.0"
          },
          "version": "3.1.0"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-5569",
          "value": "CVE-2024-5569",
          "url": "https://scout.docker.com/v/CVE-2024-5569?s=github&n=zipp&t=pypi&vr=%3C3.19.1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-5569?s=github&n=zipp&t=pypi&vr=%3C3.19.1"
        }
      ]
    },
    {
      "id": "d186d4c2007a08d141ced52e0c8a8a3a6596cdea6828d0812d158c1434d6043a",
      "category": "container_scanning",
      "message": "CVE-2020-14349 on debian/postgresql-11@11.7-0+deb10u1",
      "description": "It was found that PostgreSQL versions before 12.4, before 11.9 and before 10.14 did not properly sanitize the search_path during logical replication. An authenticated attacker could use this flaw in an attack similar to CVE-2018-1058, in order to execute arbitrary SQL command in the context of the user used for replication.\n\n---\n- postgresql-12 12.4-1\n- postgresql-11 <removed>\n[buster] - postgresql-11 11.9-0+deb10u1\n- postgresql-9.6 <not-affected> (Vulnerable code introduced later)\nhttps://www.postgresql.org/about/news/2060/\nhttps://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=11da97024abbe76b8c81e3f2375b2a62e9717c67\nhttps://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=cec57b1a0fbcd3833086ba686897c5883e0a2afc",
      "cve": "CVE-2020-14349",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade debian/postgresql-11@11.7-0+deb10u1 to 11.9-0+deb10u1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:deb/debian/postgresql-11@11.7-0%2Bdeb10u1?os_distro=buster&os_name=debian&os_version=10"
          },
          "version": "11.7-0+deb10u1"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2020-14349",
          "value": "CVE-2020-14349",
          "url": "https://scout.docker.com/v/CVE-2020-14349?s=debian&n=postgresql-11&ns=debian&t=deb&osn=debian&osv=10&vr=%3C11.9-0%2Bdeb10u1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2020-14349?s=debian&n=postgresql-11&ns=debian&t=deb&osn=debian&osv=10&vr=%3C11.9-0%2Bdeb10u1"
        }
      ]
    },
    {
      "id": "205e9e6782e8aaa709455979710688babdb48dd59f63b0f019df7382ed49a5f8",
      "category": "container_scanning",
      "message": "CVE-2021-3572 on pip@19.0.2",
      "description": "A flaw was found in python-pip in the way it handled Unicode separators in git references. A remote attacker could possibly use this issue to install a different revision on a repository. The highest threat from this vulnerability is to data integrity. This is fixed in python-pip version 21.1.",
      "cve": "CVE-2021-3572",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade pip@19.0.2 to 21.1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/pip@19.0.2"
          },
          "version": "19.0.2"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-3572",
          "value": "CVE-2021-3572",
          "url": "https://scout.docker.com/v/CVE-2021-3572?s=github&n=pip&t=pypi&vr=%3C21.1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-3572?s=github&n=pip&t=pypi&vr=%3C21.1"
        }
      ]
    },
    {
      "id": "00bac0c756befa269d2862807c8c6dfcc829b4d3f46ab0951cfbdfc09c6eeb27",
      "category": "container_scanning",
      "message": "CVE-2022-46651 on apache-airflow@1.10.10",
      "description": "Apache Airflow, versions before 2.6.3, is affected by a vulnerability that allows an unauthorized actor to gain access to sensitive information in Connection edit view. This vulnerability is considered low since it requires someone with access to Connection resources specifically updating the connection to exploit it. Users should upgrade to version 2.6.3 or later which has removed the vulnerability.\n",
      "cve": "CVE-2022-46651",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.6.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-46651",
          "value": "CVE-2022-46651",
          "url": "https://scout.docker.com/v/CVE-2022-46651?s=github&n=apache-airflow&t=pypi&vr=%3C2.6.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-46651?s=github&n=apache-airflow&t=pypi&vr=%3C2.6.3"
        }
      ]
    },
    {
      "id": "dcb747b274966e99fa64b34763f28118fc6b18b405a58966a981d46737a68e09",
      "category": "container_scanning",
      "message": "CVE-2023-22887 on apache-airflow@1.10.10",
      "description": "Apache Airflow, versions before 2.6.3, is affected by a vulnerability that allows an attacker to perform unauthorized file access outside the intended directory structure by manipulating the run_id parameter. This vulnerability is considered low since it requires an authenticated user to exploit it. It is recommended to upgrade to a version that is not affected",
      "cve": "CVE-2023-22887",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.6.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-22887",
          "value": "CVE-2023-22887",
          "url": "https://scout.docker.com/v/CVE-2023-22887?s=github&n=apache-airflow&t=pypi&vr=%3C2.6.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-22887?s=github&n=apache-airflow&t=pypi&vr=%3C2.6.3"
        }
      ]
    },
    {
      "id": "0d2f6d4f61f4662b05ba6f45fa68d799b5d0446186ee46b2939f790435ef39ec",
      "category": "container_scanning",
      "message": "CVE-2023-22888 on apache-airflow@1.10.10",
      "description": "Apache Airflow, versions before 2.6.3, is affected by a vulnerability that allows an attacker to cause a service disruption by manipulating the run_id parameter. This vulnerability is considered low since it requires an authenticated user to exploit it. It is recommended to upgrade to a version that is not affected",
      "cve": "CVE-2023-22888",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.6.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-22888",
          "value": "CVE-2023-22888",
          "url": "https://scout.docker.com/v/CVE-2023-22888?s=github&n=apache-airflow&t=pypi&vr=%3C2.6.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-22888?s=github&n=apache-airflow&t=pypi&vr=%3C2.6.3"
        }
      ]
    },
    {
      "id": "cdd3ac21c2cddc1bc5a7d5006aade5974c92360cb45be4fac003b894a496c2b2",
      "category": "container_scanning",
      "message": "CVE-2023-35908 on apache-airflow@1.10.10",
      "description": "Apache Airflow, versions before 2.6.3, is affected by a vulnerability that allows unauthorized read access to a DAG through the URL. It is recommended to upgrade to a version that is not affected",
      "cve": "CVE-2023-35908",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.6.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-35908",
          "value": "CVE-2023-35908",
          "url": "https://scout.docker.com/v/CVE-2023-35908?s=github&n=apache-airflow&t=pypi&vr=%3C2.6.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-35908?s=github&n=apache-airflow&t=pypi&vr=%3C2.6.3"
        }
      ]
    },
    {
      "id": "de96e270b74a8377281301be3fbb03ba09bc5cbbf57f50b9a2970bf09d8e63d5",
      "category": "container_scanning",
      "message": "CVE-2023-36543 on apache-airflow@1.10.10",
      "description": "Apache Airflow, versions before 2.6.3, has a vulnerability where an authenticated user can use crafted input to make the current request hang. It is recommended to upgrade to a version that is not affected",
      "cve": "CVE-2023-36543",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.6.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-36543",
          "value": "CVE-2023-36543",
          "url": "https://scout.docker.com/v/CVE-2023-36543?s=github&n=apache-airflow&t=pypi&vr=%3C2.6.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-36543?s=github&n=apache-airflow&t=pypi&vr=%3C2.6.3"
        }
      ]
    },
    {
      "id": "14aca2bf54638db29041b5b40a1c0f391ca3436c636011af321897e06c4d6d97",
      "category": "container_scanning",
      "message": "CVE-2023-40712 on apache-airflow@1.10.10",
      "description": "Apache Airflow, versions before 2.7.1, is affected by a vulnerability that allows authenticated users who have access to see the task/dag in the UI, to craft a URL, which could lead to unmasking the secret configuration of the task that otherwise would be masked in the UI.\n\nUsers are strongly advised to upgrade to version 2.7.1 or later which has removed the vulnerability.",
      "cve": "CVE-2023-40712",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.7.1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-40712",
          "value": "CVE-2023-40712",
          "url": "https://scout.docker.com/v/CVE-2023-40712?s=github&n=apache-airflow&t=pypi&vr=%3C2.7.1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-40712?s=github&n=apache-airflow&t=pypi&vr=%3C2.7.1"
        }
      ]
    },
    {
      "id": "392e71ff0a3402804ef5524b213b9bbf7d6f8c95c32d46b08051c58144a02c4f",
      "category": "container_scanning",
      "message": "CVE-2023-42781 on apache-airflow@1.10.10",
      "description": "Apache Airflow, versions before 2.7.3, has a vulnerability that allows an authorized user who has access to read specific DAGs only, to read information about task instances in other DAGs.  This is a different issue than CVE-2023-42663 but leading to similar outcome.\nUsers of Apache Airflow are advised to upgrade to version 2.7.3 or newer to mitigate the risk associated with this vulnerability.",
      "cve": "CVE-2023-42781",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.7.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-42781",
          "value": "CVE-2023-42781",
          "url": "https://scout.docker.com/v/CVE-2023-42781?s=github&n=apache-airflow&t=pypi&vr=%3C2.7.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-42781?s=github&n=apache-airflow&t=pypi&vr=%3C2.7.3"
        }
      ]
    },
    {
      "id": "de72b39e90b1521f9a55ad257f0d359ad9d754d5c73ca7dfbaace65ece317f1b",
      "category": "container_scanning",
      "message": "CVE-2023-50944 on apache-airflow@1.10.10",
      "description": "Apache Airflow, versions before 2.8.1, have a vulnerability that allows an authenticated user to access the source code of a DAG to which they don't have access. This vulnerability is considered low since it requires an authenticated user to exploit it. Users are recommended to upgrade to version 2.8.1, which fixes this issue.",
      "cve": "CVE-2023-50944",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.8.1rc1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-50944",
          "value": "CVE-2023-50944",
          "url": "https://scout.docker.com/v/CVE-2023-50944?s=github&n=apache-airflow&t=pypi&vr=%3C2.8.1rc1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-50944?s=github&n=apache-airflow&t=pypi&vr=%3C2.8.1rc1"
        }
      ]
    },
    {
      "id": "3a18bb5f205cc915d5c6dcbd231a05a3ccb901b2f00325eba1210d9240d69f85",
      "category": "container_scanning",
      "message": "CVE-2023-37379 on apache-airflow@1.10.10",
      "description": "Apache Airflow, in versions prior to 2.7.0, contains a security vulnerability that can be exploited by an authenticated user possessing Connection edit privileges. This vulnerability allows the user to access connection information and exploit the test connection feature by sending many requests, leading to a denial of service (DoS) condition on the server. Furthermore, malicious actors can leverage this vulnerability to establish harmful connections with the server.\n\nUsers of Apache Airflow are strongly advised to upgrade to version 2.7.0 or newer to mitigate the risk associated with this vulnerability. Additionally, administrators are encouraged to review and adjust user permissions to restrict access to sensitive functionalities, reducing the attack surface.",
      "cve": "CVE-2023-37379",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.7.0b1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-37379",
          "value": "CVE-2023-37379",
          "url": "https://scout.docker.com/v/CVE-2023-37379?s=github&n=apache-airflow&t=pypi&vr=%3C2.7.0b1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-37379?s=github&n=apache-airflow&t=pypi&vr=%3C2.7.0b1"
        }
      ]
    },
    {
      "id": "3738a8647b48fba26b362d4fd40839c5fb90e407f65ad7730e9254a648de008f",
      "category": "container_scanning",
      "message": "CVE-2020-14350 on debian/postgresql-11@11.7-0+deb10u1",
      "description": "It was found that some PostgreSQL extensions did not use search_path safely in their installation script. An attacker with sufficient privileges could use this flaw to trick an administrator into executing a specially crafted script, during the installation or update of such extension. This affects PostgreSQL versions before 12.4, before 11.9, before 10.14, before 9.6.19, and before 9.5.23.\n\n---\n- postgresql-12 12.4-1\n- postgresql-11 <removed>\n[buster] - postgresql-11 11.9-0+deb10u1\n- postgresql-9.6 <removed>\nhttps://www.postgresql.org/about/news/2060/\nhttps://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=7eeb1d9861b0a3f453f8b31c7648396cdd7f1e59",
      "cve": "CVE-2020-14350",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade debian/postgresql-11@11.7-0+deb10u1 to 11.9-0+deb10u1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:deb/debian/postgresql-11@11.7-0%2Bdeb10u1?os_distro=buster&os_name=debian&os_version=10"
          },
          "version": "11.7-0+deb10u1"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2020-14350",
          "value": "CVE-2020-14350",
          "url": "https://scout.docker.com/v/CVE-2020-14350?s=debian&n=postgresql-11&ns=debian&t=deb&osn=debian&osv=10&vr=%3C11.9-0%2Bdeb10u1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2020-14350?s=debian&n=postgresql-11&ns=debian&t=deb&osn=debian&osv=10&vr=%3C11.9-0%2Bdeb10u1"
        }
      ]
    },
    {
      "id": "e1e7194173b833b705c93fda2b77495a55010cd2bf7a1a9056acdbc7cebeb3ce",
      "category": "container_scanning",
      "message": "CVE-2022-29217 on pyjwt@1.7.1",
      "description": "### Impact\n_What kind of vulnerability is it? Who is impacted?_\n\nDisclosed by Aapo Oksman (Senior Security Specialist, Nixu Corporation).\n\n> PyJWT supports multiple different JWT signing algorithms. With JWT, an \n> attacker submitting the JWT token can choose the used signing algorithm.\n> \n> The PyJWT library requires that the application chooses what algorithms \n> are supported. The application can specify \n> \"jwt.algorithms.get_default_algorithms()\" to get support for all \n> algorithms. They can also specify a single one of them (which is the \n> usual use case if calling jwt.decode directly. However, if calling \n> jwt.decode in a helper function, all algorithms might be enabled.)\n> \n> For example, if the user chooses \"none\" algorithm and the JWT checker \n> supports that, there will be no signature checking. This is a common \n> security issue with some JWT implementations.\n> \n> PyJWT combats this by requiring that the if the \"none\" algorithm is \n> used, the key has to be empty. As the key is given by the application \n> running the checker, attacker cannot force \"none\" cipher to be used.\n> \n> Similarly with HMAC (symmetric) algorithm, PyJWT checks that the key is \n> not a public key meant for asymmetric algorithm i.e. HMAC cannot be used \n> if the key begins with \"ssh-rsa\". If HMAC is used with a public key, the \n> attacker can just use the publicly known public key to sign the token \n> and the checker would use the same key to verify.\n> \n>  From PyJWT 2.0.0 onwards, PyJWT supports ed25519 asymmetric algorithm. \n> With ed25519, PyJWT supports public keys that start with \"ssh-\", for \n> example \"ssh-ed25519\".\n\n```python\nimport jwt\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import ed25519\n\n# Generate ed25519 private key\nprivate_key = ed25519.Ed25519PrivateKey.generate()\n\n# Get private key bytes as they would be stored in a file\npriv_key_bytes = \nprivate_key.private_bytes(encoding=serialization.Encoding.PEM,format=serialization.PrivateFormat.PKCS8, \nencryption_algorithm=serialization.NoEncryption())\n\n# Get public key bytes as they would be stored in a file\npub_key_bytes = \nprivate_key.public_key().public_bytes(encoding=serialization.Encoding.OpenSSH,format=serialization.PublicFormat.OpenSSH)\n\n# Making a good jwt token that should work by signing it with the \nprivate key\nencoded_good = jwt.encode({\"test\": 1234}, priv_key_bytes, algorithm=\"EdDSA\")\n\n# Using HMAC with the public key to trick the receiver to think that the \npublic key is a HMAC secret\nencoded_bad = jwt.encode({\"test\": 1234}, pub_key_bytes, algorithm=\"HS256\")\n\n# Both of the jwt tokens are validated as valid\ndecoded_good = jwt.decode(encoded_good, pub_key_bytes, \nalgorithms=jwt.algorithms.get_default_algorithms())\ndecoded_bad = jwt.decode(encoded_bad, pub_key_bytes, \nalgorithms=jwt.algorithms.get_default_algorithms())\n\nif decoded_good == decoded_bad:\n     print(\"POC Successfull\")\n\n# Of course the receiver should specify ed25519 algorithm to be used if \nthey specify ed25519 public key. However, if other algorithms are used, \nthe POC does not work\n# HMAC specifies illegal strings for the HMAC secret in jwt/algorithms.py\n#\n#        invalid_strings = [\n#            b\"-----BEGIN PUBLIC KEY-----\",\n#            b\"-----BEGIN CERTIFICATE-----\",\n#            b\"-----BEGIN RSA PUBLIC KEY-----\",\n#            b\"ssh-rsa\",\n#        ]\n#\n# However, OKPAlgorithm (ed25519) accepts the following in \njwt/algorithms.py:\n#\n#                if \"-----BEGIN PUBLIC\" in str_key:\n#                    return load_pem_public_key(key)\n#                if \"-----BEGIN PRIVATE\" in str_key:\n#                    return load_pem_private_key(key, password=None)\n#                if str_key[0:4] == \"ssh-\":\n#                    return load_ssh_public_key(key)\n#\n# These should most likely made to match each other to prevent this behavior\n```\n\n\n```python\nimport jwt\n\n#openssl ecparam -genkey -name prime256v1 -noout -out ec256-key-priv.pem\n#openssl ec -in ec256-key-priv.pem -pubout > ec256-key-pub.pem\n#ssh-keygen -y -f ec256-key-priv.pem > ec256-key-ssh.pub\n\npriv_key_bytes = b\"\"\"-----BEGIN EC PRIVATE KEY-----\nMHcCAQEEIOWc7RbaNswMtNtc+n6WZDlUblMr2FBPo79fcGXsJlGQoAoGCCqGSM49\nAwEHoUQDQgAElcy2RSSSgn2RA/xCGko79N+7FwoLZr3Z0ij/ENjow2XpUDwwKEKk\nAk3TDXC9U8nipMlGcY7sDpXp2XyhHEM+Rw==\n-----END EC PRIVATE KEY-----\"\"\"\n\npub_key_bytes = b\"\"\"-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAElcy2RSSSgn2RA/xCGko79N+7FwoL\nZr3Z0ij/ENjow2XpUDwwKEKkAk3TDXC9U8nipMlGcY7sDpXp2XyhHEM+Rw==\n-----END PUBLIC KEY-----\"\"\"\n\nssh_key_bytes = b\"\"\"ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBJXMtkUkkoJ9kQP8QhpKO/TfuxcKC2a92dIo/xDY6MNl6VA8MChCpAJN0w1wvVPJ4qTJRnGO7A6V6dl8oRxDPkc=\"\"\"\n\n# Making a good jwt token that should work by signing it with the private key\nencoded_good = jwt.encode({\"test\": 1234}, priv_key_bytes, algorithm=\"ES256\")\n\n# Using HMAC with the ssh public key to trick the receiver to think that the public key is a HMAC secret\nencoded_bad = jwt.encode({\"test\": 1234}, ssh_key_bytes, algorithm=\"HS256\")\n\n# Both of the jwt tokens are validated as valid\ndecoded_good = jwt.decode(encoded_good, ssh_key_bytes, algorithms=jwt.algorithms.get_default_algorithms())\ndecoded_bad = jwt.decode(encoded_bad, ssh_key_bytes, algorithms=jwt.algorithms.get_default_algorithms())\n\nif decoded_good == decoded_bad:\n    print(\"POC Successfull\")\nelse:\n    print(\"POC Failed\")\n```\n\n> The issue is not that big as \n> algorithms=jwt.algorithms.get_default_algorithms() has to be used. \n> However, with quick googling, this seems to be used in some cases at \n> least in some minor projects.\n\n### Patches\n\nUsers should upgrade to v2.4.0.\n\n### Workarounds\n\nAlways be explicit with the algorithms that are accepted and expected when decoding.\n\n### References\n_Are there any links users can visit to find out more?_\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in https://github.com/jpadilla/pyjwt\n* Email José Padilla: pyjwt at jpadilla dot com\n",
      "cve": "CVE-2022-29217",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade pyjwt@1.7.1 to 2.4.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/pyjwt@1.7.1"
          },
          "version": "1.7.1"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-29217",
          "value": "CVE-2022-29217",
          "url": "https://scout.docker.com/v/CVE-2022-29217?s=github&n=pyjwt&t=pypi&vr=%3E%3D1.5.0%2C%3C2.4.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-29217?s=github&n=pyjwt&t=pypi&vr=%3E%3D1.5.0%2C%3C2.4.0"
        }
      ]
    },
    {
      "id": "f34cfb00e7e3e502ceb0fb4fa58ea78ef5c7220479464685e9020b6b19a81ec0",
      "category": "container_scanning",
      "message": "CVE-2023-0286 on cryptography@2.8",
      "description": "pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 0.8.1-39.0.0  are vulnerable to a security issue. More details about the vulnerabilities themselves can be found in https://www.openssl.org/news/secadv/20221213.txt and https://www.openssl.org/news/secadv/20230207.txt.\n\nIf you are building cryptography source (\"sdist\") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions.",
      "cve": "CVE-2023-0286",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade cryptography@2.8 to 39.0.1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/cryptography@2.8"
          },
          "version": "2.8"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-0286",
          "value": "CVE-2023-0286",
          "url": "https://scout.docker.com/v/CVE-2023-0286?s=github&n=cryptography&t=pypi&vr=%3E%3D0.8.1%2C%3C39.0.1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-0286?s=github&n=cryptography&t=pypi&vr=%3E%3D0.8.1%2C%3C39.0.1"
        }
      ]
    },
    {
      "id": "098ca99476ab9f8b8c368e3fbd736a6d98a9de439f1d8d68659236d788658621",
      "category": "container_scanning",
      "message": "CVE-2023-43804 on urllib3@1.25.8",
      "description": "urllib3 doesn't treat the `Cookie` HTTP header special or provide any helpers for managing cookies over HTTP, that is the responsibility of the user. However, it is possible for a user to specify a `Cookie` header and unknowingly leak information via HTTP redirects to a different origin if that user doesn't disable redirects explicitly.\n\nUsers **must** handle redirects themselves instead of relying on urllib3's automatic redirects to achieve safe processing of the `Cookie` header, thus we decided to strip the header by default in order to further protect users who aren't using the correct approach.\n\n## Affected usages\n\nWe believe the number of usages affected by this advisory is low. It requires all of the following to be true to be exploited:\n\n* Using an affected version of urllib3 (patched in v1.26.17 and v2.0.6)\n* Using the `Cookie` header on requests, which is mostly typical for impersonating a browser.\n* Not disabling HTTP redirects\n* Either not using HTTPS or for the origin server to redirect to a malicious origin.\n\n## Remediation\n\n* Upgrading to at least urllib3 v1.26.17 or v2.0.6\n* Disabling HTTP redirects using `redirects=False` when sending requests.\n* Not using the `Cookie` header.",
      "cve": "CVE-2023-43804",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade urllib3@1.25.8 to 1.26.17",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/urllib3@1.25.8"
          },
          "version": "1.25.8"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-43804",
          "value": "CVE-2023-43804",
          "url": "https://scout.docker.com/v/CVE-2023-43804?s=github&n=urllib3&t=pypi&vr=%3C1.26.17"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-43804?s=github&n=urllib3&t=pypi&vr=%3C1.26.17"
        }
      ]
    },
    {
      "id": "7e19cc18148e858fca17c48fd5f38f33b1bf733872e3af90ce5ef16d74b72e5f",
      "category": "container_scanning",
      "message": "CVE-2020-13757 on rsa@4.0",
      "description": "Python-RSA before 4.1 ignores leading '\\0' bytes during decryption of ciphertext. This could conceivably have a security-relevant impact, e.g., by helping an attacker to infer that an application uses Python-RSA, or if the length of accepted ciphertext affects application behavior (such as by causing excessive memory allocation).",
      "cve": "CVE-2020-13757",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade rsa@4.0 to 4.1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/rsa@4.0"
          },
          "version": "4.0"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2020-13757",
          "value": "CVE-2020-13757",
          "url": "https://scout.docker.com/v/CVE-2020-13757?s=github&n=rsa&t=pypi&vr=%3C4.1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2020-13757?s=github&n=rsa&t=pypi&vr=%3C4.1"
        }
      ]
    },
    {
      "id": "9a7eeafa85ced8f0afb34cd05377601ea3bce7d9d58beaf8fefcc479a3de7181",
      "category": "container_scanning",
      "message": "CVE-2021-41495 on numpy@1.18.2",
      "description": "Null Pointer Dereference vulnerability exists in numpy.sort in NumPy &lt and 1.19 in the PyArray_DescrNew function due to missing return-value validation, which allows attackers to conduct DoS attacks by repetitively creating sort arrays.",
      "cve": "CVE-2021-41495",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade numpy@1.18.2 to 1.19",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/numpy@1.18.2"
          },
          "version": "1.18.2"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-41495",
          "value": "CVE-2021-41495",
          "url": "https://scout.docker.com/v/CVE-2021-41495?s=github&n=numpy&t=pypi&vr=%3C%3D1.18.5"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-41495?s=github&n=numpy&t=pypi&vr=%3C%3D1.18.5"
        }
      ]
    },
    {
      "id": "e86cad565e408ffd8e895350fe0f4760342eaf37285d95d6f30487e9c1f5c511",
      "category": "container_scanning",
      "message": "CVE-2022-1941 on protobuf@3.11.3",
      "description": "### Summary\n\nA message parsing and memory management vulnerability in ProtocolBuffer’s C++ and Python implementations can trigger an out of memory (OOM) failure when processing a specially crafted message, which could lead to a denial of service (DoS) on services using the libraries.\n\nReporter: [ClusterFuzz](https://google.github.io/clusterfuzz/)\n\nAffected versions: All versions of C++ Protobufs (including Python) prior to the versions listed below.\n\n### Severity & Impact\nAs scored by google  \n**Medium 5.7** - [CVSS:3.1/AV:A/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H](https://www.first.org/cvss/calculator/3.1#CVSS:3.1/AV:A/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H)  \nAsscored byt NIST  \n**High 7.5** - [CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H](https://www.first.org/cvss/calculator/3.1#CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)\n\nA small (~500 KB) malicious payload can be constructed which causes the running service to allocate more than 3GB of RAM.\n\n### Proof of Concept\n\nFor reproduction details, please refer to the unit test that identifies the specific inputs that exercise this parsing weakness.\n\n### Mitigation / Patching\n\nPlease update to the latest available versions of the following packages:\n- protobuf-cpp (3.18.3, 3.19.5, 3.20.2, 3.21.6)\n- protobuf-python (3.18.3, 3.19.5, 3.20.2, 4.21.6)",
      "cve": "CVE-2022-1941",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade protobuf@3.11.3 to 3.18.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/protobuf@3.11.3"
          },
          "version": "3.11.3"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-1941",
          "value": "CVE-2022-1941",
          "url": "https://scout.docker.com/v/CVE-2022-1941?s=github&n=protobuf&t=pypi&vr=%3C3.18.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-1941?s=github&n=protobuf&t=pypi&vr=%3C3.18.3"
        }
      ]
    },
    {
      "id": "a54ae569361de534f627687c47e7da0a1aacbef147dc2bbf07cafdaf22d4e6ac",
      "category": "container_scanning",
      "message": "CVE-2022-40898 on wheel@0.34.2",
      "description": "Python Packaging Authority (PyPA) Wheel is a reference implementation of the Python wheel packaging standard. Wheel 0.37.1 and earlier are vulnerable to a Regular Expression denial of service via attacker controlled input to the wheel cli. The vulnerable regex is used to verify the validity of Wheel file names. This has been patched in version 0.38.1.",
      "cve": "CVE-2022-40898",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade wheel@0.34.2 to 0.38.1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/wheel@0.34.2"
          },
          "version": "0.34.2"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-40898",
          "value": "CVE-2022-40898",
          "url": "https://scout.docker.com/v/CVE-2022-40898?s=github&n=wheel&t=pypi&vr=%3C0.38.1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-40898?s=github&n=wheel&t=pypi&vr=%3C0.38.1"
        }
      ]
    },
    {
      "id": "1376472763a674b4ba87a475f29106e43a4f5699fedb05beed215fc7a20d77a5",
      "category": "container_scanning",
      "message": "CVE-2023-1428 on grpcio@1.27.2",
      "description": "There exists an vulnerability causing an abort() to be called in gRPC. \nThe following headers cause gRPC's C++ implementation to abort() when called via http2:\n\nte: x (x != trailers)\n\n:scheme: x (x != http, https)\n\ngrpclb_client_stats: x (x == anything)\n\nOn top of sending one of those headers, a later header must be sent that gets the total header size past 8KB. We recommend upgrading past git commit 2485fa94bd8a723e5c977d55a3ce10b301b437f8 or v1.53 and above.\n\n",
      "cve": "CVE-2023-1428",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade grpcio@1.27.2 to 1.53.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/grpcio@1.27.2"
          },
          "version": "1.27.2"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-1428",
          "value": "CVE-2023-1428",
          "url": "https://scout.docker.com/v/CVE-2023-1428?s=gitlab&n=grpcio&t=pypi&vr=%3C1.53.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-1428?s=gitlab&n=grpcio&t=pypi&vr=%3C1.53.0"
        }
      ]
    },
    {
      "id": "8f399523905eed13ef7c7fda346e6b11cff8c3f59d1ab9bc2625536f378bf4c4",
      "category": "container_scanning",
      "message": "CVE-2023-25577 on werkzeug@0.16.1",
      "description": "Werkzeug's multipart form data parser will parse an unlimited number of parts, including file parts. Parts can be a small amount of bytes, but each requires CPU time to parse and may use more memory as Python data. If a request can be made to an endpoint that accesses `request.data`, `request.form`, `request.files`, or `request.get_data(parse_form_data=False)`, it can cause unexpectedly high resource usage.\n\nThis allows an attacker to cause a denial of service by sending crafted multipart data to an endpoint that will parse it. The amount of CPU time required can block worker processes from handling legitimate requests. The amount of RAM required can trigger an out of memory kill of the process. Unlimited file parts can use up memory and file handles. If many concurrent requests are sent continuously, this can exhaust or kill all available workers.",
      "cve": "CVE-2023-25577",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade werkzeug@0.16.1 to 2.2.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/werkzeug@0.16.1"
          },
          "version": "0.16.1"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-25577",
          "value": "CVE-2023-25577",
          "url": "https://scout.docker.com/v/CVE-2023-25577?s=github&n=werkzeug&t=pypi&vr=%3C2.2.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-25577?s=github&n=werkzeug&t=pypi&vr=%3C2.2.3"
        }
      ]
    },
    {
      "id": "8a8ca59f40ec1524ed232363d2607b7f62eb9a03b92d08f933092c8a4db2116c",
      "category": "container_scanning",
      "message": "CVE-2023-28707 on apache-airflow@1.10.10",
      "description": "Improper Input Validation vulnerability in Apache Software Foundation Apache Airflow Drill Provider.This issue affects Apache Airflow Drill Provider: before 2.3.2.",
      "cve": "CVE-2023-28707",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.3.2",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-28707",
          "value": "CVE-2023-28707",
          "url": "https://scout.docker.com/v/CVE-2023-28707?s=pypa&n=apache-airflow&t=pypi&vr=%3C2.3.2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-28707?s=pypa&n=apache-airflow&t=pypi&vr=%3C2.3.2"
        }
      ]
    },
    {
      "id": "ebd9e28f29f64a8ee9f7644acfeeaff96502cb48697de06bab12c6c01ac29e4f",
      "category": "container_scanning",
      "message": "CVE-2023-29005 on flask-appbuilder@2.3.0",
      "description": "### Impact\nLack of rate limiting will allow an attacker to brute-force user credentials.\n\n### Patches\nAbility to enable rate limiting on Flask-AppBuilder >=  4.3.0. Use `AUTH_RATE_LIMITED = True` and `RATELIMIT_ENABLED = True` set the limit itself by using `AUTH_RATE_LIMIT`. Will apply only to database authentication.\n\n### Workarounds\nImplement rate limiting using a reverse proxy or other strategies.",
      "cve": "CVE-2023-29005",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade flask-appbuilder@2.3.0 to 4.3.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/flask-appbuilder@2.3.0"
          },
          "version": "2.3.0"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-29005",
          "value": "CVE-2023-29005",
          "url": "https://scout.docker.com/v/CVE-2023-29005?s=github&n=flask-appbuilder&t=pypi&vr=%3C4.3.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-29005?s=github&n=flask-appbuilder&t=pypi&vr=%3C4.3.0"
        }
      ]
    },
    {
      "id": "1cfd5e42e914a06d02e043fbecb3a15c832b224cfd1d0d929f568ac9df756d3b",
      "category": "container_scanning",
      "message": "CVE-2023-32731 on grpcio@1.27.2",
      "description": "When gRPC HTTP2 stack raised a header size exceeded error, it skipped parsing the rest of the HPACK frame. This caused any HPACK table mutations to also be skipped, resulting in a desynchronization of HPACK tables between sender and receiver. If leveraged, say, between a proxy and a backend, this could lead to requests from the proxy being interpreted as containing headers from different proxy clients - leading to an information leak that can be used for privilege escalation or data exfiltration. We recommend upgrading beyond the commit contained in  https://github.com/grpc/grpc/pull/33005 https://github.com/grpc/grpc/pull/33005 \n",
      "cve": "CVE-2023-32731",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade grpcio@1.27.2 to 1.53.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/grpcio@1.27.2"
          },
          "version": "1.27.2"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-32731",
          "value": "CVE-2023-32731",
          "url": "https://scout.docker.com/v/CVE-2023-32731?s=gitlab&n=grpcio&t=pypi&vr=%3C1.53.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-32731?s=gitlab&n=grpcio&t=pypi&vr=%3C1.53.0"
        }
      ]
    },
    {
      "id": "6f60f32d7daa1b24ed12ccc5d0af09018d9caebc0892e13cc528e31de3aad3a2",
      "category": "container_scanning",
      "message": "CVE-2023-33953 on grpcio@1.27.2",
      "description": "gRPC contains a vulnerability that allows hpack table accounting errors could lead to unwanted disconnects between clients and servers in exceptional cases/ Three vectors were found that allow the following DOS attacks:\n\n- Unbounded memory buffering in the HPACK parser\n- Unbounded CPU consumption in the HPACK parser\n\nThe unbounded CPU consumption is down to a copy that occurred per-input-block in the parser, and because that could be unbounded due to the memory copy bug we end up with an O(n^2) parsing loop, with n selected by the client.\n\nThe unbounded memory buffering bugs:\n\n- The header size limit check was behind the string reading code, so we needed to first buffer up to a 4 gigabyte string before rejecting it as longer than 8 or 16kb.\n- HPACK varints have an encoding quirk whereby an infinite number of 0’s can be added at the start of an integer. gRPC’s hpack parser needed to read all of them before concluding a parse.\n- gRPC’s metadata overflow check was performed per frame, so that the following sequence of frames could cause infinite buffering: HEADERS: containing a: 1 CONTINUATION: containing a: 2 CONTINUATION: containing a: 3 etc…",
      "cve": "CVE-2023-33953",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade grpcio@1.27.2 to 1.53.2",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/grpcio@1.27.2"
          },
          "version": "1.27.2"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-33953",
          "value": "CVE-2023-33953",
          "url": "https://scout.docker.com/v/CVE-2023-33953?s=github&n=grpcio&t=pypi&vr=%3C1.53.2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-33953?s=github&n=grpcio&t=pypi&vr=%3C1.53.2"
        }
      ]
    },
    {
      "id": "52a0efc0c0aaf53bba7237e941756b7dc9de13f13085d19f5c5c0d81795bdbb9",
      "category": "container_scanning",
      "message": "CVE-2023-37920 on certifi@2019.11.28",
      "description": "Certifi 2023.07.22 removes root certificates from \"e-Tugra\" from the root store. These are in the process of being removed from Mozilla's trust store.\n\n e-Tugra's root certificates are being removed pursuant to an investigation prompted by reporting of security issues in their systems. Conclusions of Mozilla's investigation can be found [here](https://groups.google.com/a/mozilla.org/g/dev-security-policy/c/C-HrP1SEq1A).",
      "cve": "CVE-2023-37920",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade certifi@2019.11.28 to 2023.7.22",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/certifi@2019.11.28"
          },
          "version": "2019.11.28"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-37920",
          "value": "CVE-2023-37920",
          "url": "https://scout.docker.com/v/CVE-2023-37920?s=github&n=certifi&t=pypi&vr=%3E%3D2015.4.28%2C%3C2023.7.22"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-37920?s=github&n=certifi&t=pypi&vr=%3E%3D2015.4.28%2C%3C2023.7.22"
        }
      ]
    },
    {
      "id": "ef39028b2265ca4cf6b297ab1a8cbbcb95ba70dfdfeb3177de46d03770c77938",
      "category": "container_scanning",
      "message": "CVE-2023-39553 on apache-airflow@1.10.10",
      "description": "Improper Input Validation vulnerability in Apache Software Foundation Apache Airflow Drill Provider.\n\nApache Airflow Drill Provider is affected by a vulnerability that allows an attacker to pass in malicious parameters when establishing a connection with DrillHook giving an opportunity to read files on the Airflow server.\nThis issue affects Apache Airflow Drill Provider: before 2.4.3.\nIt is recommended to upgrade to a version that is not affected.\n\n",
      "cve": "CVE-2023-39553",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.4.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-39553",
          "value": "CVE-2023-39553",
          "url": "https://scout.docker.com/v/CVE-2023-39553?s=pypa&n=apache-airflow&t=pypi&vr=%3C2.4.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-39553?s=pypa&n=apache-airflow&t=pypi&vr=%3C2.4.3"
        }
      ]
    },
    {
      "id": "c64e1b154347e0b1b5e5591d38610158808ca4bd640a0947c42a1a40895cb2bb",
      "category": "container_scanning",
      "message": "CVE-2023-46215 on apache-airflow@1.10.10",
      "description": "Insertion of Sensitive Information into Log File vulnerability in Apache Airflow Celery provider, Apache Airflow.\n\nSensitive information logged as clear text when rediss, amqp, rpc protocols are used as Celery result backend\nNote: the vulnerability is about the information exposed in the logs not about accessing the logs.\n\nThis issue affects Apache Airflow Celery provider: from 3.3.0 through 3.4.0; Apache Airflow: from 1.10.0 through 2.6.3.\n\nUsers are recommended to upgrade Airflow Celery provider to version 3.4.1 and Apache Airlfow to version 2.7.0 which fixes the issue.",
      "cve": "CVE-2023-46215",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.7.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-46215",
          "value": "CVE-2023-46215",
          "url": "https://scout.docker.com/v/CVE-2023-46215?s=github&n=apache-airflow&t=pypi&vr=%3E%3D1.10.0%2C%3C2.7.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-46215?s=github&n=apache-airflow&t=pypi&vr=%3E%3D1.10.0%2C%3C2.7.0"
        }
      ]
    },
    {
      "id": "4e8780ff81e3a8a4ebd97a9bee18f3939a874f70862b738df22a1b98778fd604",
      "category": "container_scanning",
      "message": "CVE-2024-34069 on werkzeug@0.16.1",
      "description": "The debugger in affected versions of Werkzeug can allow an attacker to execute code on a developer's machine under some circumstances. This requires the attacker to get the developer to interact with a domain and subdomain they control, and enter the debugger PIN, but if they are successful it allows access to the debugger even if it is only running on localhost. This also requires the attacker to guess a URL in the developer's application that will trigger the debugger.",
      "cve": "CVE-2024-34069",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade werkzeug@0.16.1 to 3.0.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/werkzeug@0.16.1"
          },
          "version": "0.16.1"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-34069",
          "value": "CVE-2024-34069",
          "url": "https://scout.docker.com/v/CVE-2024-34069?s=github&n=werkzeug&t=pypi&vr=%3C3.0.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-34069?s=github&n=werkzeug&t=pypi&vr=%3C3.0.3"
        }
      ]
    },
    {
      "id": "d5aaa9792b2fa3d54135e43a82bc7cfc7ecc0d88f2dac24a1f487fa53630bafd",
      "category": "container_scanning",
      "message": "CVE-2024-45784 on apache-airflow@1.10.10",
      "description": "Apache Airflow versions before 2.10.3 contain a vulnerability that could expose sensitive configuration variables in task logs. This vulnerability allows DAG authors to unintentionally or intentionally log sensitive configuration variables. Unauthorized users could access these logs, potentially exposing critical data that could be exploited to compromise the security of the Airflow deployment. In version 2.10.3, secrets are now masked in task logs to prevent sensitive configuration variables from being exposed in the logging output. Users should upgrade to Airflow 2.10.3 or the latest version to eliminate this vulnerability. If you suspect that DAG authors could have logged the secret values to the logs and that your logs are not additionally protected, it is also recommended that you update those secrets.",
      "cve": "CVE-2024-45784",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.10.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-45784",
          "value": "CVE-2024-45784",
          "url": "https://scout.docker.com/v/CVE-2024-45784?s=pypa&n=apache-airflow&t=pypi&vr=%3C2.10.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-45784?s=pypa&n=apache-airflow&t=pypi&vr=%3C2.10.3"
        }
      ]
    },
    {
      "id": "c061618a11d58e257f1c11150148d94e9c9458d8339f587075cbe5b6f91ce032",
      "category": "container_scanning",
      "message": "CVE-2024-52804 on tornado@5.1.1",
      "description": "The algorithm used for parsing HTTP cookies in Tornado versions prior to 6.4.2 sometimes has quadratic complexity, leading to excessive CPU consumption when parsing maliciously-crafted cookie headers. This parsing occurs in the event loop thread and may block the processing of other requests.\n\nSee also CVE-2024-7592 for a similar vulnerability in cpython.",
      "cve": "CVE-2024-52804",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade tornado@5.1.1 to 6.4.2",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/tornado@5.1.1"
          },
          "version": "5.1.1"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-52804",
          "value": "CVE-2024-52804",
          "url": "https://scout.docker.com/v/CVE-2024-52804?s=github&n=tornado&t=pypi&vr=%3C%3D6.4.1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-52804?s=github&n=tornado&t=pypi&vr=%3C%3D6.4.1"
        }
      ]
    },
    {
      "id": "e89f2e12aba3c61823f8697f868e2c50835c45412ce7399e3e9d2454f3b68873",
      "category": "container_scanning",
      "message": "CVE-2024-6345 on setuptools@46.1.3",
      "description": "A vulnerability in the `package_index` module of pypa/setuptools versions up to 69.1.1 allows for remote code execution via its download functions. These functions, which are used to download packages from URLs provided by users or retrieved from package index servers, are susceptible to code injection. If these functions are exposed to user-controlled inputs, such as package URLs, they can execute arbitrary commands on the system. The issue is fixed in version 70.0.",
      "cve": "CVE-2024-6345",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade setuptools@46.1.3 to 70.0.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/setuptools@46.1.3"
          },
          "version": "46.1.3"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-6345",
          "value": "CVE-2024-6345",
          "url": "https://scout.docker.com/v/CVE-2024-6345?s=github&n=setuptools&t=pypi&vr=%3C70.0.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-6345?s=github&n=setuptools&t=pypi&vr=%3C70.0.0"
        }
      ]
    },
    {
      "id": "a4a5b1b8a0dbfbc0f1f209c9df8fcf8a5d5acd8f5f47827f635f8e9aabb72d7f",
      "category": "container_scanning",
      "message": "CVE-2024-6827 on gunicorn@19.10.0",
      "description": "Gunicorn version 21.2.0 does not properly validate the value of the 'Transfer-Encoding' header as specified in the RFC standards, which leads to the default fallback method of 'Content-Length,' making it vulnerable to TE.CL request smuggling. This vulnerability can lead to cache poisoning, data exposure, session manipulation, SSRF, XSS, DoS, data integrity compromise, security bypass, information leakage, and business logic abuse.",
      "cve": "CVE-2024-6827",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade gunicorn@19.10.0 to 23.0.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/gunicorn@19.10.0"
          },
          "version": "19.10.0"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-6827",
          "value": "CVE-2024-6827",
          "url": "https://scout.docker.com/v/CVE-2024-6827?s=github&n=gunicorn&t=pypi&vr=%3C22.0.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-6827?s=github&n=gunicorn&t=pypi&vr=%3C22.0.0"
        }
      ]
    },
    {
      "id": "ba61e92f915f1805c10c92a38a76c4fc4b51e948a2278c9b9a36a905ac4e2865",
      "category": "container_scanning",
      "message": "CVE-2025-47287 on tornado@5.1.1",
      "description": "### Summary\n\nWhen Tornado's ``multipart/form-data`` parser encounters certain errors, it logs a warning but continues trying to parse the remainder of the data. This allows remote attackers to generate an extremely high volume of logs, constituting a DoS attack. This DoS is compounded by the fact that the logging subsystem is synchronous.\n\n### Affected versions\n\nAll versions of Tornado prior to 6.5 are affected. The vulnerable parser is enabled by default.\n\n### Solution\n\nUpgrade to Tornado version 6.5. In the meantime, risk can be mitigated by blocking `Content-Type: multipart/form-data` in a proxy.",
      "cve": "CVE-2025-47287",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade tornado@5.1.1 to 6.5.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/tornado@5.1.1"
          },
          "version": "5.1.1"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-47287",
          "value": "CVE-2025-47287",
          "url": "https://scout.docker.com/v/CVE-2025-47287?s=github&n=tornado&t=pypi&vr=%3C6.5"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-47287?s=github&n=tornado&t=pypi&vr=%3C6.5"
        }
      ]
    },
    {
      "id": "83c474271c34314f8dbdfa806127d96101c1585b014fd2db2d9bb4c7702830b1",
      "category": "container_scanning",
      "message": "CVE-2021-21240 on httplib2@0.17.0",
      "description": "### Impact\nA malicious server which responds with long series of `\\xa0` characters in the `www-authenticate` header may cause Denial of Service (CPU burn while parsing header) of the httplib2 client accessing said server.\n\n### Patches\nVersion 0.19.0 contains new implementation of auth headers parsing, using pyparsing library.\nhttps://github.com/httplib2/httplib2/pull/182\n\n### Workarounds\n```py\nimport httplib2\nhttplib2.USE_WWW_AUTH_STRICT_PARSING = True\n```\n\n### Technical Details\n\nThe vulnerable regular expression is https://github.com/httplib2/httplib2/blob/595e248d0958c00e83cb28f136a2a54772772b50/python3/httplib2/__init__.py#L336-L338\n\nThe section before the equals sign contains multiple overlapping groups. Ignoring the optional part containing a comma, we have:\n\n    \\s*[^ \\t\\r\\n=]+\\s*=\n\nSince all three infinitely repeating groups accept the non-breaking space character `\\xa0`, a long string of `\\xa0` causes catastrophic backtracking.\n\nThe complexity is cubic, so doubling the length of the malicious string of `\\xa0` makes processing take 8 times as long.\n\n### Reproduction Steps\n\nRun a malicious server which responds with\n\n    www-authenticate: x \\xa0\\xa0\\xa0\\xa0x\n\nbut with many more `\\xa0` characters.\n\nAn example malicious python server is below:\n\n```py\nfrom http.server import BaseHTTPRequestHandler, HTTPServer\n\ndef make_header_value(n_spaces):\n    repeat = \"\\xa0\" * n_spaces\n    return f\"x {repeat}x\"\n\nclass Handler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.log_request(401)\n        self.send_response_only(401)  # Don't bother sending Server and Date\n        n_spaces = (\n            int(self.path[1:])  # Can GET e.g. /100 to test shorter sequences\n            if len(self.path) > 1 else\n            65512  # Max header line length 65536\n        )\n        value = make_header_value(n_spaces)\n        self.send_header(\"www-authenticate\", value)  # This header can actually be sent multiple times\n        self.end_headers()\n\nif __name__ == \"__main__\":\n    HTTPServer((\"\", 1337), Handler).serve_forever()\n```\n\nConnect to the server with httplib2:\n\n```py\nimport httplib2\nhttplib2.Http(\".cache\").request(\"http://localhost:1337\", \"GET\")\n```\n\nTo benchmark performance with shorter strings, you can set the path to a number e.g. http://localhost:1337/1000\n\n\n### References\nThanks to [Ben Caller](https://github.com/b-c-ds) ([Doyensec](https://doyensec.com)) for finding vulnerability and discrete notification.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [httplib2](https://github.com/httplib2/httplib2/issues/new)\n* Email [current maintainer at 2021-01](mailto:temotor@gmail.com)",
      "cve": "CVE-2021-21240",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade httplib2@0.17.0 to 0.19.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/httplib2@0.17.0"
          },
          "version": "0.17.0"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-21240",
          "value": "CVE-2021-21240",
          "url": "https://scout.docker.com/v/CVE-2021-21240?s=github&n=httplib2&t=pypi&vr=%3C0.19.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-21240?s=github&n=httplib2&t=pypi&vr=%3C0.19.0"
        }
      ]
    },
    {
      "id": "7e5c5d162a099f96b2acfde9f149f6fc40dfeae5081bbaf11e4d4e1869a08831",
      "category": "container_scanning",
      "message": "CVE-2021-23727 on celery@4.4.2",
      "description": "This affects the package celery before 5.2.2. It by default trusts the messages and metadata stored in backends (result stores). When reading task metadata from the backend, the data is deserialized. Given that an attacker can gain access to, or somehow manipulate the metadata within a celery backend, they could trigger a stored command injection vulnerability and potentially gain further access to the system.",
      "cve": "CVE-2021-23727",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade celery@4.4.2 to 5.2.2",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/celery@4.4.2"
          },
          "version": "4.4.2"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-23727",
          "value": "CVE-2021-23727",
          "url": "https://scout.docker.com/v/CVE-2021-23727?s=github&n=celery&t=pypi&vr=%3C5.2.2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-23727?s=github&n=celery&t=pypi&vr=%3C5.2.2"
        }
      ]
    },
    {
      "id": "178ef9a76dddfb0347f3353fa742acb657da42ae9ca76a50eab2eef81e5612b6",
      "category": "container_scanning",
      "message": "CVE-2025-47273 on setuptools@46.1.3",
      "description": "### Summary \nA path traversal vulnerability in `PackageIndex` was fixed in setuptools version 78.1.1\n\n### Details\n```\n    def _download_url(self, url, tmpdir):\n        # Determine download filename\n        #\n        name, _fragment = egg_info_for_url(url)\n        if name:\n            while '..' in name:\n                name = name.replace('..', '.').replace('\\\\', '_')\n        else:\n            name = \"__downloaded__\"  # default if URL has no path contents\n\n        if name.endswith('.[egg.zip](http://egg.zip/)'):\n            name = name[:-4]  # strip the extra .zip before download\n\n -->       filename = os.path.join(tmpdir, name)\n```\n\nHere: https://github.com/pypa/setuptools/blob/6ead555c5fb29bc57fe6105b1bffc163f56fd558/setuptools/package_index.py#L810C1-L825C88\n\n`os.path.join()` discards the first argument `tmpdir` if the second begins with a slash or drive letter.\n`name` is derived from a URL without sufficient sanitization. While there is some attempt to sanitize by replacing instances of '..' with '.', it is insufficient.\n\n### Risk Assessment\nAs easy_install and package_index are deprecated, the exploitation surface is reduced.\nHowever, it seems this could be exploited in a similar fashion like https://github.com/advisories/GHSA-r9hx-vwmv-q579, and as described by POC 4 in https://github.com/advisories/GHSA-cx63-2mw6-8hw5 report: via malicious URLs present on the pages of a package index.\n\n### Impact\nAn attacker would be allowed to write files to arbitrary locations on the filesystem with the permissions of the process running the Python code, which could escalate to RCE depending on the context.\n\n### References\nhttps://huntr.com/bounties/d6362117-ad57-4e83-951f-b8141c6e7ca5\nhttps://github.com/pypa/setuptools/issues/4946",
      "cve": "CVE-2025-47273",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade setuptools@46.1.3 to 78.1.1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/setuptools@46.1.3"
          },
          "version": "46.1.3"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-47273",
          "value": "CVE-2025-47273",
          "url": "https://scout.docker.com/v/CVE-2025-47273?s=github&n=setuptools&t=pypi&vr=%3C78.1.1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-47273?s=github&n=setuptools&t=pypi&vr=%3C78.1.1"
        }
      ]
    },
    {
      "id": "461ea452d3c8123ae7c2e6894678c6f5d2d6a0cbbd450cb125f5e82266df81be",
      "category": "container_scanning",
      "message": "CVE-2022-41131 on apache-airflow@1.10.10",
      "description": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') vulnerability in Apache Airflow Hive Provider, Apache Airflow allows an attacker to execute arbtrary commands in the task execution context, without write access to DAG files. This issue affects Hive Provider versions prior to 4.1.0. It also impacts any Apache Airflow versions prior to 2.3.0 in case HIve Provider is installed (Hive Provider 4.1.0 can only be installed for Airflow 2.3.0+). Note that you need to manually install the HIve Provider version 4.1.0 in order to get rid of the vulnerability on top of Airflow 2.3.0+ version that has lower version of the Hive Provider installed).",
      "cve": "CVE-2022-41131",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.3.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-41131",
          "value": "CVE-2022-41131",
          "url": "https://scout.docker.com/v/CVE-2022-41131?s=gitlab&n=apache-airflow&t=pypi&vr=%3C2.3.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-41131?s=gitlab&n=apache-airflow&t=pypi&vr=%3C2.3.0"
        }
      ]
    },
    {
      "id": "45cd031349f5d5c2b43114c4e0afda93cb0289dd807e937ef482d09d7dfc9c67",
      "category": "container_scanning",
      "message": "CVE-2020-25658 on rsa@4.0",
      "description": "It was found that python-rsa is vulnerable to Bleichenbacher timing attacks. An attacker can use this flaw via the RSA decryption API to decrypt parts of the cipher text encrypted with RSA",
      "cve": "CVE-2020-25658",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade rsa@4.0 to 4.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/rsa@4.0"
          },
          "version": "4.0"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2020-25658",
          "value": "CVE-2020-25658",
          "url": "https://scout.docker.com/v/CVE-2020-25658?s=github&n=rsa&t=pypi&vr=%3E%3D2.1%2C%3C4.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2020-25658?s=github&n=rsa&t=pypi&vr=%3E%3D2.1%2C%3C4.7"
        }
      ]
    },
    {
      "id": "a68069de87f59183c3e53f7906893314621925fc92352f360e33799733d27446",
      "category": "container_scanning",
      "message": "CVE-2020-25659 on cryptography@2.8",
      "description": "RSA decryption was vulnerable to Bleichenbacher timing vulnerabilities, which would impact people using RSA decryption in online scenarios. This is fixed in cryptography 3.2. ",
      "cve": "CVE-2020-25659",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade cryptography@2.8 to 3.2",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/cryptography@2.8"
          },
          "version": "2.8"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2020-25659",
          "value": "CVE-2020-25659",
          "url": "https://scout.docker.com/v/CVE-2020-25659?s=github&n=cryptography&t=pypi&vr=%3C3.2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2020-25659?s=github&n=cryptography&t=pypi&vr=%3C3.2"
        }
      ]
    },
    {
      "id": "ed36c488191304b1c44f57f691f3cdfe26a23b359d4e5c10b61d0e07de16ac28",
      "category": "container_scanning",
      "message": "CVE-2024-1135 on gunicorn@19.10.0",
      "description": "Gunicorn fails to properly validate Transfer-Encoding headers, leading to HTTP Request Smuggling (HRS) vulnerabilities. By crafting requests with conflicting Transfer-Encoding headers, attackers can bypass security restrictions and access restricted endpoints. This issue is due to Gunicorn's handling of Transfer-Encoding headers, where it incorrectly processes requests with multiple, conflicting Transfer-Encoding headers, treating them as chunked regardless of the final encoding specified. This vulnerability has been shown to allow access to endpoints restricted by gunicorn. This issue has been addressed in version 22.0.0.\n\nTo be affected users must have a network path which does not filter out invalid requests. These users are advised to block access to restricted endpoints via a firewall or other mechanism if they are unable to update.",
      "cve": "CVE-2024-1135",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade gunicorn@19.10.0 to 22.0.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/gunicorn@19.10.0"
          },
          "version": "19.10.0"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-1135",
          "value": "CVE-2024-1135",
          "url": "https://scout.docker.com/v/CVE-2024-1135?s=github&n=gunicorn&t=pypi&vr=%3C22.0.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-1135?s=github&n=gunicorn&t=pypi&vr=%3C22.0.0"
        }
      ]
    },
    {
      "id": "5554e349fe70bb8e2e2f3de4ffb3f75d165563e83ecb590a2ff73e6799f3c33d",
      "category": "container_scanning",
      "message": "CVE-2025-4565 on protobuf@3.11.3",
      "description": "### Summary\nAny project that uses Protobuf pure-Python backend to parse untrusted Protocol Buffers data containing an arbitrary number of **recursive groups**, **recursive messages** or **a series of [`SGROUP`](https://protobuf.dev/programming-guides/encoding/#groups) tags** can be corrupted by exceeding the Python recursion limit.\n\nReporter: Alexis Challande, Trail of Bits Ecosystem Security Team\n[ecosystem@trailofbits.com](mailto:ecosystem@trailofbits.com)\n\nAffected versions: This issue only affects the [pure-Python implementation](https://github.com/protocolbuffers/protobuf/tree/main/python#implementation-backends) of protobuf-python backend. This is the implementation when `PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python` environment variable is set or the default when protobuf is used from Bazel or pure-Python PyPi wheels. CPython PyPi wheels do not use pure-Python by default.\n\nThis is a Python variant of a [previous issue affecting protobuf-java](https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-735f-pc8j-v9w8).\n\n### Severity\nThis is a potential Denial of Service. Parsing nested protobuf data creates unbounded recursions that can be abused by an attacker.\n\n### Proof of Concept\nFor reproduction details, please refer to the unit tests [decoder_test.py](https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/decoder_test.py#L87-L98) and [message_test](https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/message_test.py#L1436-L1478)\n\n### Remediation and Mitigation\nA mitigation is available now. Please update to the latest available versions of the following packages:\n* protobuf-python(4.25.8, 5.29.5, 6.31.1)",
      "cve": "CVE-2025-4565",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade protobuf@3.11.3 to 4.25.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/protobuf@3.11.3"
          },
          "version": "3.11.3"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-4565",
          "value": "CVE-2025-4565",
          "url": "https://scout.docker.com/v/CVE-2025-4565?s=github&n=protobuf&t=pypi&vr=%3C4.25.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-4565?s=github&n=protobuf&t=pypi&vr=%3C4.25.8"
        }
      ]
    },
    {
      "id": "dccbafa1316c12fdd58bc440b0ca233a655ebcc6c2b29b064ece210c82d1f3a9",
      "category": "container_scanning",
      "message": "CVE-2020-17526 on apache-airflow@1.10.10",
      "description": "Incorrect Session Validation in Apache Airflow Webserver versions prior to 1.10.14 with default config allows a malicious airflow user on site A where they log in normally, to access unauthorized Airflow Webserver on Site B through the session from Site A. This does not affect users who have changed the default value for `[webserver] secret_key` config.",
      "cve": "CVE-2020-17526",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 1.10.14",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2020-17526",
          "value": "CVE-2020-17526",
          "url": "https://scout.docker.com/v/CVE-2020-17526?s=github&n=apache-airflow&t=pypi&vr=%3C1.10.14"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2020-17526?s=github&n=apache-airflow&t=pypi&vr=%3C1.10.14"
        }
      ]
    },
    {
      "id": "b8edaec4a11769e0d538bc1c89f08a61b9652bff3df2c18c22896a0da0e57076",
      "category": "container_scanning",
      "message": "CVE-2024-53899 on virtualenv@20.0.13",
      "description": "virtualenv before 20.26.6 allows command injection through the activation scripts for a virtual environment. Magic template strings are not quoted correctly when replacing. NOTE: this is not the same as CVE-2024-9287.",
      "cve": "CVE-2024-53899",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade virtualenv@20.0.13 to 20.26.6",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/virtualenv@20.0.13"
          },
          "version": "20.0.13"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-53899",
          "value": "CVE-2024-53899",
          "url": "https://scout.docker.com/v/CVE-2024-53899?s=github&n=virtualenv&t=pypi&vr=%3C20.26.6"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-53899?s=github&n=virtualenv&t=pypi&vr=%3C20.26.6"
        }
      ]
    },
    {
      "id": "097308f0c3392c3367d805ac0c810d67a280ec69f70a3b96c36614253e059ef3",
      "category": "container_scanning",
      "message": "CVE-2021-41265 on flask-appbuilder@2.3.0",
      "description": "### Impact\nImproper authentication on the REST API. Allows for a malicious actor with a carefully crafted request to successfully authenticate and gain access to existing protected REST API endpoints. Only affects non database authentication types, and new REST API endpoints.\n\n### Patches\nUpgrade to Flask-AppBuilder 3.3.4\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in https://github.com/dpgaspar/Flask-AppBuilder",
      "cve": "CVE-2021-41265",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade flask-appbuilder@2.3.0 to 3.3.4",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/flask-appbuilder@2.3.0"
          },
          "version": "2.3.0"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-41265",
          "value": "CVE-2021-41265",
          "url": "https://scout.docker.com/v/CVE-2021-41265?s=github&n=flask-appbuilder&t=pypi&vr=%3C3.3.4"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-41265?s=github&n=flask-appbuilder&t=pypi&vr=%3C3.3.4"
        }
      ]
    },
    {
      "id": "65fa56be7e750b722e71f80fba301849c90769b4e3b18ad075cc362938f698de",
      "category": "container_scanning",
      "message": "CVE-2022-41672 on apache-airflow@1.10.10",
      "description": "In Apache Airflow, prior to version 2.4.1, deactivating a user wouldn't prevent an already authenticated user from being able to continue using the UI or API.",
      "cve": "CVE-2022-41672",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.4.1rc1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-41672",
          "value": "CVE-2022-41672",
          "url": "https://scout.docker.com/v/CVE-2022-41672?s=github&n=apache-airflow&t=pypi&vr=%3C2.4.1rc1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-41672?s=github&n=apache-airflow&t=pypi&vr=%3C2.4.1rc1"
        }
      ]
    },
    {
      "id": "e846e0e9668ab78e8a637e5cd0239c65c3883cebf9033f497723036e26d0330a",
      "category": "container_scanning",
      "message": "CVE-2023-40273 on apache-airflow@1.10.10",
      "description": "The session fixation vulnerability allowed the authenticated user to continue accessing Airflow webserver even after the password of the user has been reset by the admin - up until the expiry of the session of the user. Other than manually cleaning the session database (for database session backend), or changing the secure_key and restarting the webserver, there were no mechanisms to force-logout the user (and all other users with that).\n\nWith this fix implemented, when using the database session backend, the existing sessions of the user are invalidated when the password of the user is reset. When using the securecookie session backend, the sessions are NOT invalidated and still require changing the secure key and restarting the webserver (and logging out all other users), but the user resetting the password is informed about it with a flash message warning displayed in the UI. Documentation is also updated explaining this behaviour.\n\nUsers of Apache Airflow are advised to upgrade to version 2.7.0 or newer to mitigate the risk associated with this vulnerability.\n",
      "cve": "CVE-2023-40273",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.7.0rc2",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-40273",
          "value": "CVE-2023-40273",
          "url": "https://scout.docker.com/v/CVE-2023-40273?s=github&n=apache-airflow&t=pypi&vr=%3C2.7.0rc2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-40273?s=github&n=apache-airflow&t=pypi&vr=%3C2.7.0rc2"
        }
      ]
    },
    {
      "id": "641895d17a84d8df150fb374b13edd4aafbf547a819a46b89d5dafa68f6f3bfa",
      "category": "container_scanning",
      "message": "CVE-2019-20916 on pip@19.0.2",
      "description": "The pip package before 19.2 for Python allows Directory Traversal when a URL is given in an install command, because a Content-Disposition header can have ../ in a filename, as demonstrated by overwriting the /root/.ssh/authorized_keys file. This occurs in _download_http_url in _internal/download.py. A fix was committed 6704f2ace.",
      "cve": "CVE-2019-20916",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade pip@19.0.2 to 19.2",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/pip@19.0.2"
          },
          "version": "19.0.2"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2019-20916",
          "value": "CVE-2019-20916",
          "url": "https://scout.docker.com/v/CVE-2019-20916?s=github&n=pip&t=pypi&vr=%3C19.2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2019-20916?s=github&n=pip&t=pypi&vr=%3C19.2"
        }
      ]
    },
    {
      "id": "0c150525044be7d15b5741f71a64e9061db466207a6e5096ec47be9efbb4b2ad",
      "category": "container_scanning",
      "message": "CVE-2020-11978 on apache-airflow@1.10.10",
      "description": "An issue was found in Apache Airflow versions 1.10.10 and below. A remote code/command injection vulnerability was discovered in one of the example DAGs shipped with Airflow which would allow any authenticated user to run arbitrary commands as the user running airflow worker/scheduler (depending on the executor in use). If you already have examples disabled by setting `load_examples=False` in the config then you are not vulnerable.",
      "cve": "CVE-2020-11978",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 1.10.11rc1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2020-11978",
          "value": "CVE-2020-11978",
          "url": "https://scout.docker.com/v/CVE-2020-11978?s=github&n=apache-airflow&t=pypi&vr=%3C1.10.11rc1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2020-11978?s=github&n=apache-airflow&t=pypi&vr=%3C1.10.11rc1"
        }
      ]
    },
    {
      "id": "133024fc43fc119839859787a6bdf8ef873b72f1315dac698d5d24ad6b8577ab",
      "category": "container_scanning",
      "message": "CVE-2021-20270 on pygments@2.6.1",
      "description": "An infinite loop in SMLLexer in Pygments versions 1.5 to 2.7.3 may lead to denial of service when performing syntax highlighting of a Standard ML (SML) source file, as demonstrated by input that only contains the \"exception\" keyword.",
      "cve": "CVE-2021-20270",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade pygments@2.6.1 to 2.7.4",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/pygments@2.6.1"
          },
          "version": "2.6.1"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-20270",
          "value": "CVE-2021-20270",
          "url": "https://scout.docker.com/v/CVE-2021-20270?s=github&n=pygments&t=pypi&vr=%3E%3D1.5%2C%3C2.7.4"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-20270?s=github&n=pygments&t=pypi&vr=%3E%3D1.5%2C%3C2.7.4"
        }
      ]
    },
    {
      "id": "cac2e31bd9b124366a2978b0fe751b1592de3b74a8b619f6e6e9bb2b7f308e2d",
      "category": "container_scanning",
      "message": "CVE-2021-27291 on pygments@2.6.1",
      "description": "In pygments 1.1+, fixed in 2.7.4, the lexers used to parse programming languages rely heavily on regular expressions. Some of the regular expressions have exponential or cubic worst-case complexity and are vulnerable to ReDoS. By crafting malicious input, an attacker can cause a denial of service.",
      "cve": "CVE-2021-27291",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade pygments@2.6.1 to 2.7.4",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/pygments@2.6.1"
          },
          "version": "2.6.1"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-27291",
          "value": "CVE-2021-27291",
          "url": "https://scout.docker.com/v/CVE-2021-27291?s=github&n=pygments&t=pypi&vr=%3E%3D1.1%2C%3C2.7.4"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-27291?s=github&n=pygments&t=pypi&vr=%3E%3D1.1%2C%3C2.7.4"
        }
      ]
    },
    {
      "id": "33ea462bb701663a8cbac298d0965f1b8d7629ca67a46f00f8f90a805c43c2ae",
      "category": "container_scanning",
      "message": "CVE-2021-33503 on urllib3@1.25.8",
      "description": "### Impact\n\nWhen provided with a URL containing many `@` characters in the authority component the authority regular expression exhibits catastrophic backtracking causing a denial of service if a URL were passed as a parameter or redirected to via an HTTP redirect.\n\n\n### Patches\n\nThe issue has been fixed in urllib3 v1.26.5.\n\n### References\n\n- [CVE-2021-33503](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-33503)\n- [JVNVU#92413403 (English)](https://jvn.jp/en/vu/JVNVU92413403/)\n- [JVNVU#92413403 (Japanese)](https://jvn.jp/vu/JVNVU92413403/)\n- [urllib3 v1.26.5](https://github.com/urllib3/urllib3/releases/tag/1.26.5)\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Ask in our [community Discord](https://discord.gg/urllib3)\n* Email [sethmichaellarson@gmail.com](mailto:sethmichaellarson@gmail.com)\n",
      "cve": "CVE-2021-33503",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade urllib3@1.25.8 to 1.26.5",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/urllib3@1.25.8"
          },
          "version": "1.25.8"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-33503",
          "value": "CVE-2021-33503",
          "url": "https://scout.docker.com/v/CVE-2021-33503?s=github&n=urllib3&t=pypi&vr=%3E%3D1.25.4%2C%3C1.26.5"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-33503?s=github&n=urllib3&t=pypi&vr=%3E%3D1.25.4%2C%3C1.26.5"
        }
      ]
    },
    {
      "id": "608c4e765356d234993d61d6ba37d5b29c5910bafccd29649dd89569fe968f39",
      "category": "container_scanning",
      "message": "CVE-2021-42771 on babel@2.8.0",
      "description": "Babel.Locale in Babel before 2.9.1 allows attackers to load arbitrary locale .dat files (containing serialized Python objects) via directory traversal, leading to code execution.",
      "cve": "CVE-2021-42771",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade babel@2.8.0 to 2.9.1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/babel@2.8.0"
          },
          "version": "2.8.0"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-42771",
          "value": "CVE-2021-42771",
          "url": "https://scout.docker.com/v/CVE-2021-42771?s=github&n=babel&t=pypi&vr=%3C2.9.1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-42771?s=github&n=babel&t=pypi&vr=%3C2.9.1"
        }
      ]
    },
    {
      "id": "b0be5bbcc86635610046a50bdf83167967556d01d6e127559b4a7a8255cc0c61",
      "category": "container_scanning",
      "message": "CVE-2022-24288 on apache-airflow@1.10.10",
      "description": "In Apache Airflow, prior to version 2.2.4, some example DAGs did not properly sanitize user-provided params, making them susceptible to OS Command Injection from the web UI.",
      "cve": "CVE-2022-24288",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.2.4",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-24288",
          "value": "CVE-2022-24288",
          "url": "https://scout.docker.com/v/CVE-2022-24288?s=github&n=apache-airflow&t=pypi&vr=%3C2.2.4"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-24288?s=github&n=apache-airflow&t=pypi&vr=%3C2.2.4"
        }
      ]
    },
    {
      "id": "a510975900373046040e7af4b4cad3250ccbebb9a7fe41f8d932782936068661",
      "category": "container_scanning",
      "message": "CVE-2022-27949 on apache-airflow@1.10.10",
      "description": "A vulnerability in UI of Apache Airflow allows an attacker to view unmasked secrets in rendered template values for tasks which were not executed (for example when they were depending on past and previous instances of the task failed). This issue affects Apache Airflow prior to 2.3.1.",
      "cve": "CVE-2022-27949",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.3.1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-27949",
          "value": "CVE-2022-27949",
          "url": "https://scout.docker.com/v/CVE-2022-27949?s=github&n=apache-airflow&t=pypi&vr=%3C2.3.1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-27949?s=github&n=apache-airflow&t=pypi&vr=%3C2.3.1"
        }
      ]
    },
    {
      "id": "03043d604417de239451419cc5feead00c391d8caa15fba10f16411e0f4844dd",
      "category": "container_scanning",
      "message": "CVE-2022-40023 on mako@1.1.2",
      "description": "Sqlalchemy mako before 1.2.2 is vulnerable to Regular expression Denial of Service when using the Lexer class to parse. This also affects babelplugin and linguaplugin.",
      "cve": "CVE-2022-40023",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade mako@1.1.2 to 1.2.2",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/mako@1.1.2"
          },
          "version": "1.1.2"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-40023",
          "value": "CVE-2022-40023",
          "url": "https://scout.docker.com/v/CVE-2022-40023?s=github&n=mako&t=pypi&vr=%3C1.2.2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-40023?s=github&n=mako&t=pypi&vr=%3C1.2.2"
        }
      ]
    },
    {
      "id": "015e3eee94f10bcd3bebc68ca0bfe693dda9dd07df80efdb1aad8786a161c6e0",
      "category": "container_scanning",
      "message": "CVE-2022-40127 on apache-airflow@1.10.10",
      "description": "A vulnerability in Example Dags of Apache Airflow allows an attacker with UI access who can trigger DAGs, to execute arbitrary commands via manually provided run_id parameter. This issue affects Apache Airflow versions prior to 2.4.0.",
      "cve": "CVE-2022-40127",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.4.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-40127",
          "value": "CVE-2022-40127",
          "url": "https://scout.docker.com/v/CVE-2022-40127?s=github&n=apache-airflow&t=pypi&vr=%3C2.4.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-40127?s=github&n=apache-airflow&t=pypi&vr=%3C2.4.0"
        }
      ]
    },
    {
      "id": "3f28a7e7f229ec9dc3d9da02014400ad41722b90ac8894afca93695d4744e73f",
      "category": "container_scanning",
      "message": "CVE-2022-40897 on setuptools@46.1.3",
      "description": "Python Packaging Authority (PyPA)'s setuptools is a library designed to facilitate packaging Python projects. Setuptools version 65.5.0 and earlier could allow remote attackers to cause a denial of service by fetching malicious HTML from a PyPI package or custom PackageIndex page due to a vulnerable Regular Expression in `package_index`. This has been patched in version 65.5.1.",
      "cve": "CVE-2022-40897",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade setuptools@46.1.3 to 65.5.1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/setuptools@46.1.3"
          },
          "version": "46.1.3"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-40897",
          "value": "CVE-2022-40897",
          "url": "https://scout.docker.com/v/CVE-2022-40897?s=github&n=setuptools&t=pypi&vr=%3C65.5.1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-40897?s=github&n=setuptools&t=pypi&vr=%3C65.5.1"
        }
      ]
    },
    {
      "id": "54ffaeed2745388ea8d43172c069b935e2b822f6091d60c2eaa9d0f3b6363e2f",
      "category": "container_scanning",
      "message": "CVE-2022-40899 on future@0.18.2",
      "description": "An issue discovered in Python Charmers Future 0.18.2 and earlier allows remote attackers to cause a denial of service via crafted Set-Cookie header from malicious web server. This issue has been patched in version 0.18.3.",
      "cve": "CVE-2022-40899",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade future@0.18.2 to 0.18.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/future@0.18.2"
          },
          "version": "0.18.2"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-40899",
          "value": "CVE-2022-40899",
          "url": "https://scout.docker.com/v/CVE-2022-40899?s=github&n=future&t=pypi&vr=%3C%3D0.18.2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-40899?s=github&n=future&t=pypi&vr=%3C%3D0.18.2"
        }
      ]
    },
    {
      "id": "df7bc724a9202be8a04854ec24204e524efc9b5dc4796053abfdedb5ad0d7f76",
      "category": "container_scanning",
      "message": "CVE-2023-30861 on flask@1.1.1",
      "description": "When all of the following conditions are met, a response containing data intended for one client may be cached and subsequently sent by a proxy to other clients. If the proxy also caches `Set-Cookie` headers, it may send one client's `session` cookie to other clients. The severity depends on the application's use of the session, and the proxy's behavior regarding cookies. The risk depends on _all_ these conditions being met.\n\n1. The application must be hosted behind a caching proxy that does not strip cookies or ignore responses with cookies.\n2. The application sets [`session.permanent = True`](https://flask.palletsprojects.com/en/2.3.x/api/#flask.session.permanent).\n2. The application does not access or modify the session at any point during a request.\n4. [`SESSION_REFRESH_EACH_REQUEST`](https://flask.palletsprojects.com/en/2.3.x/config/#SESSION_REFRESH_EACH_REQUEST) is enabled (the default).\n5. The application does not set a `Cache-Control` header to indicate that a page is private or should not be cached.\n\nThis happens because vulnerable versions of Flask only set the `Vary: Cookie` header when the session is accessed or modified, not when it is refreshed (re-sent to update the expiration) without being accessed or modified.",
      "cve": "CVE-2023-30861",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade flask@1.1.1 to 2.2.5",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/flask@1.1.1"
          },
          "version": "1.1.1"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-30861",
          "value": "CVE-2023-30861",
          "url": "https://scout.docker.com/v/CVE-2023-30861?s=github&n=flask&t=pypi&vr=%3C2.2.5"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-30861?s=github&n=flask&t=pypi&vr=%3C2.2.5"
        }
      ]
    },
    {
      "id": "148c991d7ea1bb4689748ce87e649b6c9741ca95c0495741c2d694dce1c17eaf",
      "category": "container_scanning",
      "message": "CVE-2023-39508 on apache-airflow@1.10.10",
      "description": "Execution with Unnecessary Privileges, : Exposure of Sensitive Information to an Unauthorized Actor vulnerability in Apache Software Foundation Apache Airflow.The \"Run Task\" feature enables authenticated user to bypass some of the restrictions put in place. It allows to execute code in the webserver context as well as allows to bypas limitation of access the user has to certain DAGs. The \"Run Task\" feature is considered dangerous and it has been removed entirely in Airflow 2.6.0.\n\nThis issue affects Apache Airflow: before 2.6.0.",
      "cve": "CVE-2023-39508",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.6.0b1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-39508",
          "value": "CVE-2023-39508",
          "url": "https://scout.docker.com/v/CVE-2023-39508?s=github&n=apache-airflow&t=pypi&vr=%3C2.6.0b1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-39508?s=github&n=apache-airflow&t=pypi&vr=%3C2.6.0b1"
        }
      ]
    },
    {
      "id": "05dbceea379989513cc1985fcb5d226cb08fd46f23b9f133f044084c8e1bca45",
      "category": "container_scanning",
      "message": "CVE-2023-50782 on cryptography@2.8",
      "description": "A flaw was found in the python-cryptography package. This issue may allow a remote attacker to decrypt captured messages in TLS servers that use RSA key exchanges, which may lead to exposure of confidential or sensitive data.",
      "cve": "CVE-2023-50782",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade cryptography@2.8 to 42.0.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/cryptography@2.8"
          },
          "version": "2.8"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-50782",
          "value": "CVE-2023-50782",
          "url": "https://scout.docker.com/v/CVE-2023-50782?s=github&n=cryptography&t=pypi&vr=%3C42.0.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-50782?s=github&n=cryptography&t=pypi&vr=%3C42.0.0"
        }
      ]
    },
    {
      "id": "2d00ac1c877c05ddcfe7db3ca76f69f6948ddb0ea91f2f639927b4dc61a57b66",
      "category": "container_scanning",
      "message": "CVE-2023-50943 on apache-airflow@1.10.10",
      "description": "Apache Airflow, versions before 2.8.1, have a vulnerability that allows a potential attacker to poison the XCom data by bypassing the protection of \"enable_xcom_pickling=False\" configuration setting resulting in poisoned data after XCom deserialization. This vulnerability is considered low since it requires a DAG author to exploit it. Users are recommended to upgrade to version 2.8.1 or later, which fixes this issue.",
      "cve": "CVE-2023-50943",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.8.1rc1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-50943",
          "value": "CVE-2023-50943",
          "url": "https://scout.docker.com/v/CVE-2023-50943?s=github&n=apache-airflow&t=pypi&vr=%3C2.8.1rc1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-50943?s=github&n=apache-airflow&t=pypi&vr=%3C2.8.1rc1"
        }
      ]
    },
    {
      "id": "c49f34dc905aca684aa7f1382c785ec49db9ba69dabb6828fa4029ac06358465",
      "category": "container_scanning",
      "message": "CVE-2024-45034 on apache-airflow@1.10.10",
      "description": "Apache Airflow versions before 2.10.1 have a vulnerability that allows DAG authors to add local settings to the DAG folder and get it executed by the scheduler, where the scheduler is not supposed to execute code submitted by the DAG author. \nUsers are advised to upgrade to version 2.10.1 or later, which has fixed the vulnerability.",
      "cve": "CVE-2024-45034",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.10.1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-45034",
          "value": "CVE-2024-45034",
          "url": "https://scout.docker.com/v/CVE-2024-45034?s=github&n=apache-airflow&t=pypi&vr=%3C2.10.1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-45034?s=github&n=apache-airflow&t=pypi&vr=%3C2.10.1"
        }
      ]
    },
    {
      "id": "4ba96540318d1787af178dbc7c1061f6dc426038a0603fb8fc5411730f2d1e6e",
      "category": "container_scanning",
      "message": "CVE-2022-30034 on flower@0.9.3",
      "description": "All versions of Flower, a web UI for the Celery Python RPC framework, as of 05-02-2022 are vulnerable to an OAuth authentication bypass. An attacker could then access the Flower API to discover and invoke arbitrary Celery RPC calls or deny service by shutting down Celery task nodes. A fix was released in version 1.2.0.",
      "cve": "CVE-2022-30034",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade flower@0.9.3 to 1.2.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/flower@0.9.3"
          },
          "version": "0.9.3"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-30034",
          "value": "CVE-2022-30034",
          "url": "https://scout.docker.com/v/CVE-2022-30034?s=github&n=flower&t=pypi&vr=%3C1.2.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-30034?s=github&n=flower&t=pypi&vr=%3C1.2.0"
        }
      ]
    },
    {
      "id": "7ebf3ee6e6c00dcb405bbc056a196b28ad24c70da1e37e2ee09e3b7fae2042d9",
      "category": "container_scanning",
      "message": "CVE-2024-25128 on flask-appbuilder@2.3.0",
      "description": "### Impact\nWhen Flask-AppBuilder is set to AUTH_TYPE AUTH_OID, allows an attacker to forge an HTTP request, that could deceive the backend into using any requested OpenID service. This vulnerability could grant an attacker unauthorised privilege access if a custom OpenID service is deployed by the attacker and accessible by the backend. \n\nThis vulnerability is only exploitable when the application is using the old (deprecated 10 years ago) OpenID 2.0 authorization protocol (which is very different from the popular OIDC - Open ID Connect - popular protocol used today). Currently, this protocol is regarded as legacy, with significantly reduced usage and not supported for several years by major authorization providers.\n\n### Patches\nUpgrade to Flask-AppBuilder 4.3.11\n\n### Workarounds\nIf upgrade is not possible add the following to your config:\n\n```\nfrom flask import flash, redirect\nfrom flask_appbuilder import expose\nfrom flask_appbuilder.security.sqla.manager import SecurityManager\nfrom flask_appbuilder.security.views import AuthOIDView\nfrom flask_appbuilder.security.forms import LoginForm_oid\n\nbasedir = os.path.abspath(os.path.dirname(__file__))\n\n\nclass FixedOIDView(AuthOIDView):\n    @expose(\"/login/\", methods=[\"GET\", \"POST\"])\n    def login(self, flag=True):\n        form = LoginForm_oid()\n        if form.validate_on_submit():\n            identity_url = None\n            for provider in self.appbuilder.sm.openid_providers:\n                if provider.get(\"url\") == form.openid.data:\n                    identity_url = form.openid.data\n            if identity_url is None:\n                flash(self.invalid_login_message, \"warning\")\n                return redirect(self.appbuilder.get_url_for_login)\n        return super().login(flag=flag)\n\nclass FixedSecurityManager(SecurityManager):\n    authoidview = FixedOIDView\n\n\nFAB_SECURITY_MANAGER_CLASS = \"config.FixedSecurityManager\"\n```",
      "cve": "CVE-2024-25128",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade flask-appbuilder@2.3.0 to 4.3.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/flask-appbuilder@2.3.0"
          },
          "version": "2.3.0"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-25128",
          "value": "CVE-2024-25128",
          "url": "https://scout.docker.com/v/CVE-2024-25128?s=github&n=flask-appbuilder&t=pypi&vr=%3C4.3.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-25128?s=github&n=flask-appbuilder&t=pypi&vr=%3C4.3.11"
        }
      ]
    },
    {
      "id": "f0658a8d21923013015314e3903feb3aac4c9f5c7bca61b7dceb1bca8dcb58bb",
      "category": "container_scanning",
      "message": "CVE-2020-11981 on apache-airflow@1.10.10",
      "description": "An issue was found in Apache Airflow versions 1.10.10 and below. When using CeleryExecutor, if an attacker can connect to the broker (Redis, RabbitMQ) directly, it is possible to inject commands, resulting in the celery worker running arbitrary commands.",
      "cve": "CVE-2020-11981",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 1.10.11rc1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2020-11981",
          "value": "CVE-2020-11981",
          "url": "https://scout.docker.com/v/CVE-2020-11981?s=github&n=apache-airflow&t=pypi&vr=%3C1.10.11rc1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2020-11981?s=github&n=apache-airflow&t=pypi&vr=%3C1.10.11rc1"
        }
      ]
    },
    {
      "id": "e4a62e353fde2db6130a16c032c72b01f1a34ff981271238c1e8013126a3bfd9",
      "category": "container_scanning",
      "message": "CVE-2020-11982 on apache-airflow@1.10.10",
      "description": "An issue was found in Apache Airflow versions 1.10.10 and below. When using CeleryExecutor, if an attack can connect to the broker (Redis, RabbitMQ) directly, it was possible to insert a malicious payload directly to the broker which could lead to a deserialization attack (and thus remote code execution) on the Worker.",
      "cve": "CVE-2020-11982",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 1.10.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2020-11982",
          "value": "CVE-2020-11982",
          "url": "https://scout.docker.com/v/CVE-2020-11982?s=github&n=apache-airflow&t=pypi&vr=%3C1.10.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2020-11982?s=github&n=apache-airflow&t=pypi&vr=%3C1.10.11"
        }
      ]
    },
    {
      "id": "cf3f4b8f2247c8682094041620ff0141e2e39430233182f3909a627c185668a1",
      "category": "container_scanning",
      "message": "CVE-2020-13927 on apache-airflow@1.10.10",
      "description": "The previous default setting for Airflow's Experimental API was to allow all API requests without authentication, but this poses security risks to users who miss this fact. From Airflow 1.10.11 the default has been changed to deny all requests by default and is documented at https://airflow.apache.org/docs/1.10.11/security.html#api-authentication. Note this change fixes it for new installs but existing users need to change their config to default `[api]auth_backend = airflow.api.auth.backend.deny_all` as mentioned in the Updating Guide: https://github.com/apache/airflow/blob/1.10.11/UPDATING.md#experimental-api-will-deny-all-request-by-default",
      "cve": "CVE-2020-13927",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 1.10.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2020-13927",
          "value": "CVE-2020-13927",
          "url": "https://scout.docker.com/v/CVE-2020-13927?s=github&n=apache-airflow&t=pypi&vr=%3C1.10.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2020-13927?s=github&n=apache-airflow&t=pypi&vr=%3C1.10.11"
        }
      ]
    },
    {
      "id": "ecd093273b02368388d7f75dcbab97f1d3ffec754579db591e62fbb3b557430c",
      "category": "container_scanning",
      "message": "CVE-2020-14343 on pyyaml@5.3.1",
      "description": "A vulnerability was discovered in the PyYAML library in versions before 5.4, where it is susceptible to arbitrary code execution when it processes untrusted YAML files through the full_load method or with the FullLoader loader. Applications that use the library to process untrusted input may be vulnerable to this flaw. This flaw allows an attacker to execute arbitrary code on the system by abusing the python/object/new constructor. This flaw is due to an incomplete fix for CVE-2020-1747.",
      "cve": "CVE-2020-14343",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade pyyaml@5.3.1 to 5.4",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/pyyaml@5.3.1"
          },
          "version": "5.3.1"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2020-14343",
          "value": "CVE-2020-14343",
          "url": "https://scout.docker.com/v/CVE-2020-14343?s=github&n=pyyaml&t=pypi&vr=%3C5.4"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2020-14343?s=github&n=pyyaml&t=pypi&vr=%3C5.4"
        }
      ]
    },
    {
      "id": "536958adec1c2f2f2d1901ef5c179bef796f5168fad5ab3d67cb19a5e94c5482",
      "category": "container_scanning",
      "message": "CVE-2021-42343 on dask@2.14.0",
      "description": "An issue was discovered in Dask (aka python-dask) through 2021.09.1. Single machine Dask clusters started with dask.distributed.LocalCluster or dask.distributed.Client (which defaults to using LocalCluster) would mistakenly configure their respective Dask workers to listen on external interfaces (typically with a randomly selected high port) rather than only on localhost. A Dask cluster created using this method (when running on a machine that has an applicable port exposed) could be used by a sophisticated attacker to achieve remote code execution.",
      "cve": "CVE-2021-42343",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade dask@2.14.0 to 2021.10.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/dask@2.14.0"
          },
          "version": "2.14.0"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-42343",
          "value": "CVE-2021-42343",
          "url": "https://scout.docker.com/v/CVE-2021-42343?s=github&n=dask&t=pypi&vr=%3C2021.10.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-42343?s=github&n=dask&t=pypi&vr=%3C2021.10.0"
        }
      ]
    },
    {
      "id": "73416acb4dbe7abe61905800fb7734308e34db76c0fa5516c9c02a6b8c8b577c",
      "category": "container_scanning",
      "message": "CVE-2023-25754 on apache-airflow@1.10.10",
      "description": "Privilege Context Switching Error vulnerability in Apache Software Foundation Apache Airflow. This issue affects Apache Airflow: before 2.6.0.",
      "cve": "CVE-2023-25754",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.6.0b1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-25754",
          "value": "CVE-2023-25754",
          "url": "https://scout.docker.com/v/CVE-2023-25754?s=github&n=apache-airflow&t=pypi&vr=%3C2.6.0b1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-25754?s=github&n=apache-airflow&t=pypi&vr=%3C2.6.0b1"
        }
      ]
    },
    {
      "id": "b70c271e55aa2928f7f308ea9a1a5193f0586844f5705783cb937603bffced2d",
      "category": "container_scanning",
      "message": "GHSA-hwqr-f3v9-hwxr on distributed@1.28.1",
      "description": "Versions of `distributed` earlier than `2021.10.0` had a potential security vulnerability relating to single-machine Dask clusters.\n\nClusters started with `dask.distributed.LocalCluster` or `dask.distributed.Client()` (which defaults to using `LocalCluster`) would mistakenly configure their respective Dask workers to listen on external interfaces (typically with a randomly selected high port) rather than only on `localhost`. A Dask cluster created using this method AND running on a machine that has these ports exposed could be used by a sophisticated attacker to enable remote code execution. Users running on machines with standard firewalls in place, or using clusters created via cluster objects other than `LocalCluster` (e.g. `dask_kubernetes.KubeCluster`) should not be affected. This vulnerability is documented in CVE-2021-42343, and was fixed in version `2021.10.0` (PR #5427).",
      "cve": "GHSA-hwqr-f3v9-hwxr",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade distributed@1.28.1 to 2021.10.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/distributed@1.28.1"
          },
          "version": "1.28.1"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "GHSA-hwqr-f3v9-hwxr",
          "value": "GHSA-hwqr-f3v9-hwxr",
          "url": "https://scout.docker.com/v/GHSA-hwqr-f3v9-hwxr?s=github&n=distributed&t=pypi&vr=%3C2021.10.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/GHSA-hwqr-f3v9-hwxr?s=github&n=distributed&t=pypi&vr=%3C2021.10.0"
        }
      ]
    },
    {
      "id": "060156fb55e7cf9e00455111a255500fb2e2fe996e2edaea3062780cc666df0a",
      "category": "container_scanning",
      "message": "CVE-2020-13091 on pandas@0.25.3",
      "description": "** DISPUTED ** pandas through 1.0.3 can unserialize and execute commands from an untrusted file that is passed to the read_pickle() function, if __reduce__ makes an os.system call. NOTE: third parties dispute this issue because the read_pickle() function is documented as unsafe and it is the user's responsibility to use the function in a secure manner.",
      "cve": "CVE-2020-13091",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade pandas@0.25.3 to 1.0.4",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/pandas@0.25.3"
          },
          "version": "0.25.3"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2020-13091",
          "value": "CVE-2020-13091",
          "url": "https://scout.docker.com/v/CVE-2020-13091?s=pypa&n=pandas&t=pypi&vr=%3C1.0.4"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2020-13091?s=pypa&n=pandas&t=pypi&vr=%3C1.0.4"
        }
      ]
    },
    {
      "id": "c4a4a2bfdcb49b76773493d75a6dd04cd007bdb89e3be6d14fd125eb1cc8a9fd",
      "category": "container_scanning",
      "message": "CVE-2021-42343 on distributed@1.28.1",
      "description": "An issue was discovered in the Dask distributed package before 2021.10.0 for Python. Single machine Dask clusters started with dask.distributed.LocalCluster or dask.distributed.Client (which defaults to using LocalCluster) would mistakenly configure their respective Dask workers to listen on external interfaces (typically with a randomly selected high port) rather than only on localhost. A Dask cluster created using this method (when running on a machine that has an applicable port exposed) could be used by a sophisticated attacker to achieve remote code execution.",
      "cve": "CVE-2021-42343",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade distributed@1.28.1 to 2021.10.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/distributed@1.28.1"
          },
          "version": "1.28.1"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-42343",
          "value": "CVE-2021-42343",
          "url": "https://scout.docker.com/v/CVE-2021-42343?s=pypa&n=distributed&t=pypi&vr=%3C2021.10.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-42343?s=pypa&n=distributed&t=pypi&vr=%3C2021.10.0"
        }
      ]
    },
    {
      "id": "9644f6e15e901740297a6094f26090579c3ac0091231badeaa78316fdb3102fc",
      "category": "container_scanning",
      "message": "CVE-2022-29361 on werkzeug@0.16.1",
      "description": "** DISPUTED ** Improper parsing of HTTP requests in Pallets Werkzeug v2.1.0 and below allows attackers to perform HTTP Request Smuggling using a crafted HTTP request with multiple requests included inside the body. NOTE: the vendor's position is that this behavior can only occur in unsupported configurations involving development mode and an HTTP server from outside the Werkzeug project.",
      "cve": "CVE-2022-29361",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade werkzeug@0.16.1 to 2.1.1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/werkzeug@0.16.1"
          },
          "version": "0.16.1"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-29361",
          "value": "CVE-2022-29361",
          "url": "https://scout.docker.com/v/CVE-2022-29361?s=pypa&n=werkzeug&t=pypi&vr=%3C2.1.1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-29361?s=pypa&n=werkzeug&t=pypi&vr=%3C2.1.1"
        }
      ]
    },
    {
      "id": "54f0f9ff7716e7f9fec07b9be0e96494998da3cc372faf6146d8a64ebae9033e",
      "category": "container_scanning",
      "message": "CVE-2022-38649 on apache-airflow@1.10.10",
      "description": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') vulnerability in Apache Airflow Pinot Provider, Apache Airflow allows an attacker to control commands executed in the task execution context, without write access to DAG files. This issue affects Apache Airflow Pinot Provider versions prior to 4.0.0. It also impacts any Apache Airflow versions prior to 2.3.0 in case Apache Airflow Pinot Provider is installed (Apache Airflow Pinot Provider 4.0.0 can only be installed for Airflow 2.3.0+). Note that you need to manually install the Pinot Provider version 4.0.0 in order to get rid of the vulnerability on top of Airflow 2.3.0+ version.",
      "cve": "CVE-2022-38649",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.3.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-38649",
          "value": "CVE-2022-38649",
          "url": "https://scout.docker.com/v/CVE-2022-38649?s=github&n=apache-airflow&t=pypi&vr=%3C2.3.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-38649?s=github&n=apache-airflow&t=pypi&vr=%3C2.3.0"
        }
      ]
    },
    {
      "id": "cf605d75d571083076ed0f9165b3636afced00034ca21980e4e2522b0a6d8056",
      "category": "container_scanning",
      "message": "CVE-2022-40189 on apache-airflow@1.10.10",
      "description": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') vulnerability in Apache Airflow Pig Provider, Apache Airflow allows an attacker to control commands executed in the task execution context, without write access to DAG files. This issue affects Pig Provider versions prior to 4.0.0. It also impacts any Apache Airflow versions prior to 2.3.0 in case Pig Provider is installed (Pig Provider 4.0.0 can only be installed for Airflow 2.3.0+). Note that you need to manually install the Pig Provider version 4.0.0 in order to get rid of the vulnerability on top of Airflow 2.3.0+ version.",
      "cve": "CVE-2022-40189",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.3.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-40189",
          "value": "CVE-2022-40189",
          "url": "https://scout.docker.com/v/CVE-2022-40189?s=github&n=apache-airflow&t=pypi&vr=%3C2.3.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-40189?s=github&n=apache-airflow&t=pypi&vr=%3C2.3.0"
        }
      ]
    },
    {
      "id": "825d95555dff09187ad082ff0be11cd185dde8dc82559b0076b5514ccc2dcd57",
      "category": "container_scanning",
      "message": "CVE-2023-22884 on apache-airflow@1.10.10",
      "description": "Improper Neutralization of Special Elements used in a Command ('Command Injection') vulnerability in Apache Software Foundation Apache Airflow, Apache Software Foundation Apache Airflow MySQL Provider.This issue affects Apache Airflow: before 2.5.1; Apache Airflow MySQL Provider: before 4.0.0.",
      "cve": "CVE-2023-22884",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade apache-airflow@1.10.10 to 2.5.1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/apache-airflow@1.10.10"
          },
          "version": "1.10.10"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-22884",
          "value": "CVE-2023-22884",
          "url": "https://scout.docker.com/v/CVE-2023-22884?s=github&n=apache-airflow&t=pypi&vr=%3C2.5.1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-22884?s=github&n=apache-airflow&t=pypi&vr=%3C2.5.1"
        }
      ]
    },
    {
      "id": "f496565644a81834d8289b1fbbd6a15737f0a9f767b5fcc69c9803709eafdd24",
      "category": "container_scanning",
      "message": "CVE-2023-41419 on gevent@1.4.0",
      "description": "An issue in Gevent before version 23.9.0 allows a remote attacker to escalate privileges via a crafted script to the WSGIServer component.",
      "cve": "CVE-2023-41419",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade gevent@1.4.0 to 23.9.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/gevent@1.4.0"
          },
          "version": "1.4.0"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-41419",
          "value": "CVE-2023-41419",
          "url": "https://scout.docker.com/v/CVE-2023-41419?s=github&n=gevent&t=pypi&vr=%3C23.9.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-41419?s=github&n=gevent&t=pypi&vr=%3C23.9.0"
        }
      ]
    },
    {
      "id": "9bd107a9caabd9ab91c6c609faf7c04034549e0c2a17f06fae07105c8342ef23",
      "category": "container_scanning",
      "message": "CVE-2024-10096 on dask@2.14.0",
      "description": "# Withdrawn Advisory\nThis advisory has been withdrawn because it describes [intended functionality](https://distributed.dask.org/en/stable/limitations.html?highlight=host#security). This link is maintained to preserve external references.\n\n# Original Description\n\nDask versions <=2024.8.2 contain a vulnerability in the Dask Distributed Server where the use of pickle serialization allows attackers to craft malicious objects. These objects can be serialized on the client side and sent to the server for deserialization, leading to remote command execution and potentially granting full control over the Dask server.",
      "cve": "CVE-2024-10096",
      "severity": "Critical",
      "confidence": "Unknown",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/dask@2.14.0"
          },
          "version": "2.14.0"
        },
        "operating_system": "debian 10",
        "image": "apache/airflow:1.10.10-python3.7"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-10096",
          "value": "CVE-2024-10096",
          "url": "https://scout.docker.com/v/CVE-2024-10096?s=gitlab&n=dask&t=pypi&vr=%3C%3D2024.8.2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-10096?s=gitlab&n=dask&t=pypi&vr=%3C%3D2024.8.2"
        }
      ]
    }
  ],
  "remediations": [],
  "scan": {
    "start_time": "2025-10-30T23:31:12",
    "end_time": "2025-10-30T23:31:12",
    "status": "success",
    "type": "container_scanning",
    "scanner": {
      "id": "docker-scout",
      "name": "Docker Scout",
      "version": "1.18.3",
      "vendor": {
        "name": "Docker"
      }
    },
    "analyzer": {
      "id": "docker-scout",
      "name": "Docker Scout",
      "version": "1.18.3",
      "vendor": {
        "name": "Docker"
      }
    }
  }
}
