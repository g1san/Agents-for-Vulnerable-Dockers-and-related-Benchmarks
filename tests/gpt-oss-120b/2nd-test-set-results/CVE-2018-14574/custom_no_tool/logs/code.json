{
    "files": [
        {
            "location": "./../../dockers/CVE-2018-14574/custom_no_tool/docker-compose.yml",
            "content": "version: '3.8'\nservices:\n  web:\n    build: ./web\n    command: gunicorn myproject.wsgi:application --bind 0.0.0.0:8000\n    ports:\n      - \"8000:8000\"\n    depends_on:\n      - db\n      - redis\n  nginx:\n    image: nginx:1.25.2\n    ports:\n      - \"80:80\"\n      - \"8080:80\"\n    volumes:\n      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro\n    depends_on:\n      - web\n  db:\n    image: mysql:5.7\n    environment:\n      MYSQL_ROOT_PASSWORD: rootpass\n      MYSQL_DATABASE: testdb\n      MYSQL_USER: user\n      MYSQL_PASSWORD: userpass\n    ports:\n      - \"3306:3306\"\n    healthcheck:\n      test: [\"CMD\", \"mysqladmin\", \"ping\", \"-h\", \"localhost\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n    command: --default-authentication-plugin=mysql_native_password\n    volumes:\n      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql\n  redis:\n    image: redis:5\n    ports:\n      - \"6379:6379\"\n"
        },
        {
            "location": "./../../dockers/CVE-2018-14574/custom_no_tool/web/Dockerfile",
            "content": "FROM python:3.8-slim\nENV PYTHONUNBUFFERED=1\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\nCOPY myproject/ .\nRUN python manage.py collectstatic --noinput\n"
        },
        {
            "location": "./../../dockers/CVE-2018-14574/custom_no_tool/web/requirements.txt",
            "content": "django==1.11.14\ngunicorn\n"
        },
        {
            "location": "./../../dockers/CVE-2018-14574/custom_no_tool/web/myproject/manage.py",
            "content": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"myproject.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"
        },
        {
            "location": "./../../dockers/CVE-2018-14574/custom_no_tool/web/myproject/myproject/__init__.py",
            "content": ""
        },
        {
            "location": "./../../dockers/CVE-2018-14574/custom_no_tool/web/myproject/myproject/settings.py",
            "content": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'replace-me-with-a-secure-key'\nDEBUG = True\nALLOWED_HOSTS = ['*']\n\nINSTALLED_APPS = [\n    'django.contrib.contenttypes',\n    'django.contrib.staticfiles',\n    'app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.middleware.common.CommonMiddleware',  # CommonMiddleware with APPEND_SLASH=True (default)\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = []\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\n# Using SQLite for simplicity; DB service remains in stack but is not required for the demo\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\n"
        },
        {
            "location": "./../../dockers/CVE-2018-14574/custom_no_tool/web/myproject/myproject/urls.py",
            "content": "from django.urls import path, include\n\nurlpatterns = [\n    path('', include('app.urls')),\n]\n"
        },
        {
            "location": "./../../dockers/CVE-2018-14574/custom_no_tool/web/myproject/myproject/wsgi.py",
            "content": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\napplication = get_wsgi_application()\n"
        },
        {
            "location": "./../../dockers/CVE-2018-14574/custom_no_tool/web/myproject/app/__init__.py",
            "content": ""
        },
        {
            "location": "./../../dockers/CVE-2018-14574/custom_no_tool/web/myproject/app/views.py",
            "content": "from django.http import HttpResponse\n\ndef index(request):\n    return HttpResponse('Hello from vulnerable Django 1.11.14 - CVE-2018-14574 demonstration')\n"
        },
        {
            "location": "./../../dockers/CVE-2018-14574/custom_no_tool/web/myproject/app/urls.py",
            "content": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]\n"
        },
        {
            "location": "./../../dockers/CVE-2018-14574/custom_no_tool/nginx/nginx.conf",
            "content": "upstream django {\n    server web:8000;\n}\n\nserver {\n    listen 80;\n    location / {\n        proxy_pass http://django;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n"
        },
        {
            "location": "./../../dockers/CVE-2018-14574/custom_no_tool/db/init.sql",
            "content": "CREATE TABLE IF NOT EXISTS users (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(100));\nINSERT INTO users (name) VALUES ('Alice'), ('Bob'), ('Charlie');\n"
        }
    ],
    "directory_tree": "CVE-2018-14574/custom_no_tool"
}