{
  "version": "15.0.6",
  "vulnerabilities": [
    {
      "id": "5db5b9dbf15e325899a23bc44cce2cd4d04d112e763aae51769045b70ada272e",
      "category": "container_scanning",
      "message": "2019-03-12 on twig/twig@1.25.0",
      "description": "Sandbox Information Disclosure.",
      "cve": "2019-03-12",
      "severity": "Unknown",
      "confidence": "Unknown",
      "solution": "Upgrade twig/twig@1.25.0 to 1.38.0, 2.7.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:composer/twig/twig@1.25.0"
          },
          "version": "1.25.0"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "2019-03-12",
          "value": "2019-03-12",
          "url": "https://scout.docker.com/v/2019-03-12?s=gitlab&n=twig&ns=twig&t=composer&vr=%3C1.38.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/2019-03-12?s=gitlab&n=twig&ns=twig&t=composer&vr=%3C1.38.0"
        }
      ]
    },
    {
      "id": "d2a8114c598e761a0087b181e07ab371d49ad4ad5e034fba2445ea8f32a7d085",
      "category": "container_scanning",
      "message": "GMS-2016-46 on jquery-ui@1.11.4",
      "description": "jQuery-UI has a cross site scripting (XSS) vulnerability in the `closeText` parameter of the `dialog` function. If your application passes user input to this parameter, it may be vulnerable to XSS via this attack vector.",
      "cve": "GMS-2016-46",
      "severity": "Unknown",
      "confidence": "Unknown",
      "solution": "Upgrade jquery-ui@1.11.4 to 1.12.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:npm/jquery-ui@1.11.4"
          },
          "version": "1.11.4"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "GMS-2016-46",
          "value": "GMS-2016-46",
          "url": "https://scout.docker.com/v/GMS-2016-46?s=gitlab&n=jquery-ui&t=npm&vr=%3C%3D1.11.4"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/GMS-2016-46?s=gitlab&n=jquery-ui&t=npm&vr=%3C%3D1.11.4"
        }
      ]
    },
    {
      "id": "584fd403ce60f5854e69157555f1c809733cf24c27c6c671d67b8ba5c028e529",
      "category": "container_scanning",
      "message": "ZF2018-01 on zendframework/zend-feed@2.7.0",
      "description": "URL Rewrite vulnerability in `zend-diactoros`.",
      "cve": "ZF2018-01",
      "severity": "Unknown",
      "confidence": "Unknown",
      "solution": "Upgrade zendframework/zend-feed@2.7.0 to 2.10.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:composer/zendframework/zend-feed@2.7.0"
          },
          "version": "2.7.0"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "ZF2018-01",
          "value": "ZF2018-01",
          "url": "https://scout.docker.com/v/ZF2018-01?s=gitlab&n=zend-feed&ns=zendframework&t=composer&vr=%3E%3D1.0.0%2C%3C2.10.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/ZF2018-01?s=gitlab&n=zend-feed&ns=zendframework&t=composer&vr=%3E%3D1.0.0%2C%3C2.10.3"
        }
      ]
    },
    {
      "id": "bd774953fb0511aef8ed980f1e915e6afe4b2bcd110197d35b1bc293727d5195",
      "category": "container_scanning",
      "message": "ZF2018-01 on zendframework/zend-diactoros@1.3.10",
      "description": "URL Rewrite vulnerability in `zend-diactoros`.",
      "cve": "ZF2018-01",
      "severity": "Unknown",
      "confidence": "Unknown",
      "solution": "Upgrade zendframework/zend-diactoros@1.3.10 to 1.8.4",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:composer/zendframework/zend-diactoros@1.3.10"
          },
          "version": "1.3.10"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "ZF2018-01",
          "value": "ZF2018-01",
          "url": "https://scout.docker.com/v/ZF2018-01?s=gitlab&n=zend-diactoros&ns=zendframework&t=composer&vr=%3E%3D1.0.0%2C%3C1.8.4"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/ZF2018-01?s=gitlab&n=zend-diactoros&ns=zendframework&t=composer&vr=%3E%3D1.0.0%2C%3C1.8.4"
        }
      ]
    },
    {
      "id": "9ffc42651d402c6227dd7bc94f1a5ec730926a64d482638570f8b14070f4d008",
      "category": "container_scanning",
      "message": "CVE-2024-51754 on twig/twig@1.25.0",
      "description": "### Description\n\nIn a sandbox, an attacker can call `__toString()` on an object even if the `__toString()` method is not allowed by the security policy when the object is part of an array or an argument list (arguments to a function or a filter for instance).\n\n### Resolution\n\nThe sandbox mode now checks the `__toString()` method call on all objects.\n\nThe patch for this issue is available [here](https://github.com/twigphp/Twig/commit/cafc608ece310e62a35a76f17e25c04ab9ed05cc) for the 3.11.x branch, and [here](https://github.com/twigphp/Twig/commit/d4a302681bca9f7c6ce2835470d53609cdf3e23e) for the 3.x branch.\n\n### Credits\n\nWe would like to thank Jamie Schouten for reporting the issue and Fabien Potencier for providing the fix.",
      "cve": "CVE-2024-51754",
      "severity": "Low",
      "confidence": "Unknown",
      "solution": "Upgrade twig/twig@1.25.0 to 3.11.2",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:composer/twig/twig@1.25.0"
          },
          "version": "1.25.0"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-51754",
          "value": "CVE-2024-51754",
          "url": "https://scout.docker.com/v/CVE-2024-51754?s=github&n=twig&ns=twig&t=composer&vr=%3C3.11.2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-51754?s=github&n=twig&ns=twig&t=composer&vr=%3C3.11.2"
        }
      ]
    },
    {
      "id": "3626212a8db0357643aec8585b0fa7964fc5f460b8264ce9cd13088f82558039",
      "category": "container_scanning",
      "message": "CVE-2024-51755 on twig/twig@1.25.0",
      "description": "### Description\n\nIn a sandbox, and attacker can access attributes of Array-like objects as they were not checked by the security policy.\nThey are now checked via the property policy and the `__isset()` method is now called after the security check.\n**This is a BC break.**\n\n### Resolution\n\nThe sandbox mode now ensures access to array-like's properties is allowed.\n\nThe patch for this issue is available [here](https://github.com/twigphp/Twig/commit/ec39a9dccc5fb4eaaba55e5d79a6f84a8dd8b69d) for the 3.11.x branch, and [here](https://github.com/twigphp/Twig/commit/b957e5a44cc0075d04ccff52f8fa9d8e6db3e3a0) for the 3.x branch.\n\n### Credits\n\nWe would like to thank Jamie Schouten for reporting the issue and Nicolas Grekas for providing the fix.\n",
      "cve": "CVE-2024-51755",
      "severity": "Low",
      "confidence": "Unknown",
      "solution": "Upgrade twig/twig@1.25.0 to 3.11.2",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:composer/twig/twig@1.25.0"
          },
          "version": "1.25.0"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-51755",
          "value": "CVE-2024-51755",
          "url": "https://scout.docker.com/v/CVE-2024-51755?s=github&n=twig&ns=twig&t=composer&vr=%3C3.11.2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-51755?s=github&n=twig&ns=twig&t=composer&vr=%3C3.11.2"
        }
      ]
    },
    {
      "id": "efb32e252445f44c4e8260cd7dbff4d4f7fb9daf0ba681065b2c824f8ec67d55",
      "category": "container_scanning",
      "message": "CVE-2024-50343 on symfony/validator@2.8.18",
      "description": "### Description\n\nIt is possible to trick a `Validator` configured with a regular expression using the `$` metacharacters, with an input ending with `\\n`.\n\n### Resolution\n\nSymfony now uses the `D` regex modifier to match the entire input.\n\nThe patch for this issue is available [here](https://github.com/symfony/symfony/commit/7d1032bbead9a4229b32fa6ebca32681c80cb76f) for branch 5.4.\n\n### Credits\n\nWe would like to thank Offscript for reporting the issue and Alexandre Daubois for providing the fix.",
      "cve": "CVE-2024-50343",
      "severity": "Low",
      "confidence": "Unknown",
      "solution": "Upgrade symfony/validator@2.8.18 to 5.4.43",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:composer/symfony/validator@2.8.18"
          },
          "version": "2.8.18"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-50343",
          "value": "CVE-2024-50343",
          "url": "https://scout.docker.com/v/CVE-2024-50343?s=github&n=validator&ns=symfony&t=composer&vr=%3C5.4.43"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-50343?s=github&n=validator&ns=symfony&t=composer&vr=%3C5.4.43"
        }
      ]
    },
    {
      "id": "9583ee8b4a326df921c1434e8de55576b8a32fc559014385c546d31a94a600b3",
      "category": "container_scanning",
      "message": "CVE-2024-50345 on symfony/http-foundation@2.8.18",
      "description": "### Description\n\nThe `Request` class, does not parse URI with special characters the same way browsers do. As a result, an attacker can trick a validator relying on the `Request` class to redirect users to another domain.\n\n### Resolution\n\nThe `Request::create` methods now assert the URI does not contain invalid characters as defined by https://url.spec.whatwg.org/\n\nThe patch for this issue is available [here](https://github.com/symfony/symfony/commit/5a9b08e5740af795854b1b639b7d45b9cbfe8819) for branch 5.4.\n\n### Credits\n\nWe would like to thank Sam Mush - IPASSLab && ZGC Lab for reporting the issue and Nicolas Grekas for providing the fix.",
      "cve": "CVE-2024-50345",
      "severity": "Low",
      "confidence": "Unknown",
      "solution": "Upgrade symfony/http-foundation@2.8.18 to 5.4.46",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:composer/symfony/http-foundation@2.8.18"
          },
          "version": "2.8.18"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-50345",
          "value": "CVE-2024-50345",
          "url": "https://scout.docker.com/v/CVE-2024-50345?s=github&n=http-foundation&ns=symfony&t=composer&vr=%3C5.4.46"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-50345?s=github&n=http-foundation&ns=symfony&t=composer&vr=%3C5.4.46"
        }
      ]
    },
    {
      "id": "8170d1a9ca9da7ea3e56a521f3687a1bff062c5fe06022981ee7410bee82f32e",
      "category": "container_scanning",
      "message": "CVE-2019-9942 on twig/twig@1.25.0",
      "description": "A sandbox information disclosure exists in Twig before 1.38.0 and 2.x before 2.7.0 because, under some circumstances, it is possible to call the `__toString()` method on an object even if not allowed by the security policy in place.",
      "cve": "CVE-2019-9942",
      "severity": "Low",
      "confidence": "Unknown",
      "solution": "Upgrade twig/twig@1.25.0 to 1.38.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:composer/twig/twig@1.25.0"
          },
          "version": "1.25.0"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2019-9942",
          "value": "CVE-2019-9942",
          "url": "https://scout.docker.com/v/CVE-2019-9942?s=github&n=twig&ns=twig&t=composer&vr=%3C1.38.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2019-9942?s=github&n=twig&ns=twig&t=composer&vr=%3C1.38.0"
        }
      ]
    },
    {
      "id": "e0d00a27e7ebd00d86276f0dcc8a83e2dbca410d46c6c74b3326f0299e9e9c63",
      "category": "container_scanning",
      "message": "GHSA-fq4p-86hh-42v9 on zendframework/zend-diactoros@1.3.10",
      "description": "zend-diactoros (and, by extension, Expressive), zend-http (and, by extension, Zend Framework MVC projects), and zend-feed (specifically, its PubSubHubbub sub-component) each contain a potential URL rewrite exploit. In each case, marshaling a request URI includes logic that introspects HTTP request headers that are specific to a given server-side URL rewrite mechanism.\n\nWhen these headers are present on systems not running the specific URL rewriting mechanism, the logic would still trigger, allowing a malicious client or proxy to emulate the headers to request arbitrary content.",
      "cve": "GHSA-fq4p-86hh-42v9",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade zendframework/zend-diactoros@1.3.10 to 1.8.4",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:composer/zendframework/zend-diactoros@1.3.10"
          },
          "version": "1.3.10"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "GHSA-fq4p-86hh-42v9",
          "value": "GHSA-fq4p-86hh-42v9",
          "url": "https://scout.docker.com/v/GHSA-fq4p-86hh-42v9?s=github&n=zend-diactoros&ns=zendframework&t=composer&vr=%3E%3D1.0.0%2C%3C1.8.4"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/GHSA-fq4p-86hh-42v9?s=github&n=zend-diactoros&ns=zendframework&t=composer&vr=%3E%3D1.0.0%2C%3C1.8.4"
        }
      ]
    },
    {
      "id": "c71f15e46e40d765385a5e6d5661a36b6d50cedb9915c2fe2acee9c604782e9c",
      "category": "container_scanning",
      "message": "CVE-2013-5958 on symfony/polyfill-php55@1.3.0",
      "description": "The Security component in Symfony allows remote attackers to cause a denial of service (CPU consumption) via a long password that triggers an expensive hash computation, as demonstrated by a PBKDF2 computation, a similar issue to CVE-2013-5750.",
      "cve": "CVE-2013-5958",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade symfony/polyfill-php55@1.3.0 to 1.10.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:composer/symfony/polyfill-php55@1.3.0"
          },
          "version": "1.3.0"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2013-5958",
          "value": "CVE-2013-5958",
          "url": "https://scout.docker.com/v/CVE-2013-5958?s=gitlab&n=polyfill-php55&ns=symfony&t=composer&vr=%3E%3D1.0.0%2C%3C1.10.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2013-5958?s=gitlab&n=polyfill-php55&ns=symfony&t=composer&vr=%3E%3D1.0.0%2C%3C1.10.0"
        }
      ]
    },
    {
      "id": "bb2753d24affe2734068cc8b8fd72787cd7274da751b9ee9affccda7a14c45ea",
      "category": "container_scanning",
      "message": "CVE-2021-21424 on symfony/http-foundation@2.8.18",
      "description": "Symfony is a PHP framework for web and console applications and a set of reusable PHP components. The ability to enumerate users was possible without relevant permissions due to different handling depending on whether the user existed or not when attempting to use the switch users functionality. We now ensure that error codes are returned whether the user exists or not if a user cannot switch to a user or if the user does not exist.",
      "cve": "CVE-2021-21424",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade symfony/http-foundation@2.8.18 to 4.4.23, 5.2.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:composer/symfony/http-foundation@2.8.18"
          },
          "version": "2.8.18"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-21424",
          "value": "CVE-2021-21424",
          "url": "https://scout.docker.com/v/CVE-2021-21424?s=gitlab&n=http-foundation&ns=symfony&t=composer&vr=%3E%3D2.8.0%2C%3C3.4.48"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-21424?s=gitlab&n=http-foundation&ns=symfony&t=composer&vr=%3E%3D2.8.0%2C%3C3.4.48"
        }
      ]
    },
    {
      "id": "ce951312bc42eeaf4641fa0910725662fdca69169020a482e2435a1bfce5f2c4",
      "category": "container_scanning",
      "message": "CVE-2021-21424 on symfony/http-kernel@2.8.18",
      "description": "Symfony is a PHP framework for web and console applications and a set of reusable PHP components. The ability to enumerate users was possible without relevant permissions due to different handling depending on whether the user existed or not when attempting to use the switch users functionality. We now ensure that error codes are returned whether the user exists or not if a user cannot switch to a user or if the user does not exist.",
      "cve": "CVE-2021-21424",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade symfony/http-kernel@2.8.18 to 3.4.48, 4.4.23, 5.2.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:composer/symfony/http-kernel@2.8.18"
          },
          "version": "2.8.18"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-21424",
          "value": "CVE-2021-21424",
          "url": "https://scout.docker.com/v/CVE-2021-21424?s=gitlab&n=http-kernel&ns=symfony&t=composer&vr=%3E%3D2.8.0%2C%3C3.4.48"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-21424?s=gitlab&n=http-kernel&ns=symfony&t=composer&vr=%3E%3D2.8.0%2C%3C3.4.48"
        }
      ]
    },
    {
      "id": "51e7e066ccd58868c05942fd51fff0de2c5bbebf2966cc3d115ae328b393e027",
      "category": "container_scanning",
      "message": "CVE-2022-24775 on guzzlehttp/psr7@1.4.2",
      "description": "### Impact\n\nImproper header parsing. An attacker could sneak in a carriage return character (`\\r`) and pass untrusted values in both the header names and values.\n\n### Patches\n\nThe issue is patched in 1.8.4 and 2.1.1.\n\n### Workarounds\n\nThere are no known workarounds.\n\n### References\n\n* https://www.rfc-editor.org/rfc/rfc7230#section-3.2.4\n",
      "cve": "CVE-2022-24775",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade guzzlehttp/psr7@1.4.2 to 1.8.4",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:composer/guzzlehttp/psr7@1.4.2"
          },
          "version": "1.4.2"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-24775",
          "value": "CVE-2022-24775",
          "url": "https://scout.docker.com/v/CVE-2022-24775?s=github&n=psr7&ns=guzzlehttp&t=composer&vr=%3C1.8.4"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-24775?s=github&n=psr7&ns=guzzlehttp&t=composer&vr=%3C1.8.4"
        }
      ]
    },
    {
      "id": "bcf5119ffa90c629ce9582c6e3642e2ac15cdee7d8f5c73190e5b0c64d43ed61",
      "category": "container_scanning",
      "message": "CVE-2023-29197 on guzzlehttp/psr7@1.4.2",
      "description": "### Impact\n\nImproper header parsing. An attacker could sneak in a newline (`\\n`) into both the header names and values. While the specification states that `\\r\\n\\r\\n` is used to terminate the header list, many servers in the wild will also accept `\\n\\n`.\n\n### Patches\n\nThe issue is patched in 1.9.1 and 2.4.5.\n\n### Workarounds\n\nThere are no known workarounds.\n\n### References\n\n* https://www.rfc-editor.org/rfc/rfc7230#section-3.2.4\n",
      "cve": "CVE-2023-29197",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade guzzlehttp/psr7@1.4.2 to 1.9.1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:composer/guzzlehttp/psr7@1.4.2"
          },
          "version": "1.4.2"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-29197",
          "value": "CVE-2023-29197",
          "url": "https://scout.docker.com/v/CVE-2023-29197?s=github&n=psr7&ns=guzzlehttp&t=composer&vr=%3C1.9.1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-29197?s=github&n=psr7&ns=guzzlehttp&t=composer&vr=%3C1.9.1"
        }
      ]
    },
    {
      "id": "da1e4e15af7b09ed1ba31bf9f8c859feaa033f89eb4f128c6f01412e7150d72b",
      "category": "container_scanning",
      "message": "CVE-2024-45411 on twig/twig@1.25.0",
      "description": "### Description\n\nUnder some circumstances, the sandbox security checks are not run which allows user-contributed templates to bypass the sandbox restrictions.\n\nThe security issue happens when all these conditions are met:\n\n * The sandbox is disabled globally;\n * The sandbox is enabled via a sandboxed `include()` function which references a template name (like `included.twig`) and not a `Template` or `TemplateWrapper` instance;\n * The included template has been loaded before the `include()` call but in a non-sandbox context (possible as the sandbox has been globally disabled).\n\n### Resolution\n\nThe patch ensures that the sandbox security checks are always run at runtime.\n\n### Credits\n\nWe would like to thank Fabien Potencier for reporting and fixing the issue.\n",
      "cve": "CVE-2024-45411",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade twig/twig@1.25.0 to 1.44.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:composer/twig/twig@1.25.0"
          },
          "version": "1.25.0"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-45411",
          "value": "CVE-2024-45411",
          "url": "https://scout.docker.com/v/CVE-2024-45411?s=github&n=twig&ns=twig&t=composer&vr=%3E%3D1.0.0%2C%3C1.44.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-45411?s=github&n=twig&ns=twig&t=composer&vr=%3E%3D1.0.0%2C%3C1.44.8"
        }
      ]
    },
    {
      "id": "2e0d946a499739a2c1fa1b6ddc9fe15160b524cb43c2a80314450c9685515186",
      "category": "container_scanning",
      "message": "CVE-2018-11386 on symfony/http-foundation@2.8.18",
      "description": "An issue was discovered in the HttpFoundation component in Symfony 2.7.x before 2.7.48, 2.8.x before 2.8.41, 3.3.x before 3.3.17, 3.4.x before 3.4.11, and 4.0.x before 4.0.11. The PDOSessionHandler class allows storing sessions on a PDO connection. Under some configurations and with a well-crafted payload, it was possible to do a denial of service on a Symfony application without too much resources.",
      "cve": "CVE-2018-11386",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade symfony/http-foundation@2.8.18 to 2.8.41",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:composer/symfony/http-foundation@2.8.18"
          },
          "version": "2.8.18"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2018-11386",
          "value": "CVE-2018-11386",
          "url": "https://scout.docker.com/v/CVE-2018-11386?s=github&n=http-foundation&ns=symfony&t=composer&vr=%3E%3D2.8.0%2C%3C2.8.41"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2018-11386?s=github&n=http-foundation&ns=symfony&t=composer&vr=%3E%3D2.8.0%2C%3C2.8.41"
        }
      ]
    },
    {
      "id": "ac08cffb499c16647a2a3876d2f4513a80f579e408c1cea5d0a482b1db44550d",
      "category": "container_scanning",
      "message": "CVE-2022-24894 on symfony/http-kernel@2.8.18",
      "description": "Description\n-----------\n\nThe Symfony HTTP cache system acts as a reverse proxy: it caches HTTP responses (including headers) and returns them to clients.\n\nIn a recent `AbstractSessionListener` change, the response might now contain a `Set-Cookie` header. If the Symfony HTTP cache system is enabled, this header might be stored and returned to some other clients. An attacker can use this vulnerability to retrieve the victim's session.\n\nResolution\n----------\n\nThe `HttpStore` constructor now takes a parameter containing a list of private headers that are removed from the HTTP response headers.\nThe default value for this parameter is `Set-Cookie`, but it can be overridden or extended by the application.\n\nThe patch for this issue is available [here](https://github.com/symfony/symfony/commit/d2f6322af9444ac5cd1ef3ac6f280dbef7f9d1fb) for branch 4.4.\n\nCredits\n-------\n\nWe would like to thank Soner Sayakci for reporting the issue and Nicolas Grekas for fixing it.",
      "cve": "CVE-2022-24894",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade symfony/http-kernel@2.8.18 to 4.4.50",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:composer/symfony/http-kernel@2.8.18"
          },
          "version": "2.8.18"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-24894",
          "value": "CVE-2022-24894",
          "url": "https://scout.docker.com/v/CVE-2022-24894?s=github&n=http-kernel&ns=symfony&t=composer&vr=%3E%3D2.0.0%2C%3C4.4.50"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-24894?s=github&n=http-kernel&ns=symfony&t=composer&vr=%3E%3D2.0.0%2C%3C4.4.50"
        }
      ]
    },
    {
      "id": "c91af0957dac9694c4dd567137831c5ef52f60c08d4e397e1016e985f002e45d",
      "category": "container_scanning",
      "message": "CVE-2016-7103 on jquery-ui@1.11.4",
      "description": "Affected versions of `jquery-ui` are vulnerable to a cross-site scripting vulnerability when arbitrary user input is supplied as the value of the `closeText` parameter in the `dialog` function. \n\njQuery-UI is a library for manipulating UI elements via jQuery.\n\nVersion 1.11.4 has a cross site scripting (XSS) vulnerability in the `closeText` parameter of the `dialog`  function.  If your application passes user input to this parameter, it may be vulnerable to XSS via this attack vector.\n\n\n## Recommendation\n\nUpgrade to jQuery-UI 1.12.0 or later.",
      "cve": "CVE-2016-7103",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade jquery-ui@1.11.4 to 1.12.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:npm/jquery-ui@1.11.4"
          },
          "version": "1.11.4"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2016-7103",
          "value": "CVE-2016-7103",
          "url": "https://scout.docker.com/v/CVE-2016-7103?s=github&n=jquery-ui&t=npm&vr=%3C1.12.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2016-7103?s=github&n=jquery-ui&t=npm&vr=%3C1.12.0"
        }
      ]
    },
    {
      "id": "8fd932379456615f7d4e220633e7e3fa3a29a6f64d5842fb9fde0f829f438b6b",
      "category": "container_scanning",
      "message": "CVE-2022-31160 on jquery-ui@1.11.4",
      "description": "### Impact\nInitializing a checkboxradio widget on an input enclosed within a label makes that parent label contents considered as the input label. If you call `.checkboxradio( \"refresh\" )` on such a widget and the initial HTML contained encoded HTML entities, they will erroneously get decoded. This can lead to potentially executing JavaScript code.\n\nFor example, starting with the following initial secure HTML:\n```html\n<label>\n\t<input id=\"test-input\">\n\t&lt;img src=x onerror=\"alert(1)\"&gt;\n</label>\n```\nand calling:\n```js\n$( \"#test-input\" ).checkboxradio();\n$( \"#test-input\" ).checkboxradio( \"refresh\" );\n```\nwill turn the initial HTML into:\n```html\n<label>\n\t<!-- some jQuery UI elements -->\n\t<input id=\"test-input\">\n\t<img src=x onerror=\"alert(1)\">\n</label>\n```\nand the alert will get executed.\n\n### Patches\nThe bug has been patched in jQuery UI 1.13.2.\n\n### Workarounds\nTo remediate the issue, if you can change the initial HTML, you can wrap all the non-input contents of the `label` in a `span`:\n```html\n<label>\n\t<input id=\"test-input\">\n\t<span>&lt;img src=x onerror=\"alert(1)\"&gt;</span>\n</label>\n```\n\n### References\nhttps://blog.jqueryui.com/2022/07/jquery-ui-1-13-2-released/\n\n### For more information\nIf you have any questions or comments about this advisory, search for a relevant issue in [the jQuery UI repo](https://github.com/jquery/jquery-ui/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc). If you don't find an answer, open a new issue.",
      "cve": "CVE-2022-31160",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade jquery-ui@1.11.4 to 1.13.2",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:npm/jquery-ui@1.11.4"
          },
          "version": "1.11.4"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-31160",
          "value": "CVE-2022-31160",
          "url": "https://scout.docker.com/v/CVE-2022-31160?s=github&n=jquery-ui&t=npm&vr=%3C1.13.2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-31160?s=github&n=jquery-ui&t=npm&vr=%3C1.13.2"
        }
      ]
    },
    {
      "id": "ec6528b69f66fe1fc8eb84a16919a9f3a6035c4c161d415fc726f02274f47b5e",
      "category": "container_scanning",
      "message": "CVE-2023-46734 on symfony/serializer@2.8.18",
      "description": "Symfony is a PHP framework for web and console applications and a set of reusable PHP components. Starting in versions 2.0.0, 5.0.0, and 6.0.0 and prior to versions 4.4.51, 5.4.31, and 6.3.8, some Twig filters in CodeExtension use `is_safe=html` but don't actually ensure their input is safe. As of versions 4.4.51, 5.4.31, and 6.3.8, Symfony now escapes the output of the affected filters.",
      "cve": "CVE-2023-46734",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade symfony/serializer@2.8.18 to 5.4.31, 6.3.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:composer/symfony/serializer@2.8.18"
          },
          "version": "2.8.18"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-46734",
          "value": "CVE-2023-46734",
          "url": "https://scout.docker.com/v/CVE-2023-46734?s=gitlab&n=serializer&ns=symfony&t=composer&vr=%3E%3D2.0.0%2C%3C4.4.51"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-46734?s=gitlab&n=serializer&ns=symfony&t=composer&vr=%3E%3D2.0.0%2C%3C4.4.51"
        }
      ]
    },
    {
      "id": "aaeef20ac56ed92a8050571cfbe5f348f4e4cea2e2114ea2fe28535f8e4fdc54",
      "category": "container_scanning",
      "message": "CVE-2018-14773 on symfony/http-foundation@2.8.18",
      "description": "An issue was discovered in Http Foundation in Symfony 2.7.0 through 2.7.48, 2.8.0 through 2.8.43, 3.3.0 through 3.3.17, 3.4.0 through 3.4.13, 4.0.0 through 4.0.13, and 4.1.0 through 4.1.2. It arises from support for a (legacy) IIS header that lets users override the path in the request URL via the X-Original-URL or X-Rewrite-URL HTTP request header. These headers are designed for IIS support, but it's not verified that the server is in fact running IIS, which means anybody who can send these requests to an application can trigger this. This affects \\Symfony\\Component\\HttpFoundation\\Request::prepareRequestUri() where X-Original-URL and X_REWRITE_URL are both used. The fix drops support for these methods so that they cannot be used as attack vectors such as web cache poisoning.",
      "cve": "CVE-2018-14773",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade symfony/http-foundation@2.8.18 to 2.8.44",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:composer/symfony/http-foundation@2.8.18"
          },
          "version": "2.8.18"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2018-14773",
          "value": "CVE-2018-14773",
          "url": "https://scout.docker.com/v/CVE-2018-14773?s=github&n=http-foundation&ns=symfony&t=composer&vr=%3E%3D2.8.0%2C%3C2.8.44"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2018-14773?s=github&n=http-foundation&ns=symfony&t=composer&vr=%3E%3D2.8.0%2C%3C2.8.44"
        }
      ]
    },
    {
      "id": "3a027d08d85883ff9c748e66a70656d8f1ccf90081694e871fe0ff280884d1f4",
      "category": "container_scanning",
      "message": "CVE-2021-41182 on jquery-ui@1.11.4",
      "description": "### Impact\nAccepting the value of the `altField` option of the Datepicker widget from untrusted sources may execute untrusted code. For example, initializing the datepicker in the following way:\n```js\n$( \"#datepicker\" ).datepicker( {\n\taltField: \"<img onerror='doEvilThing()' src='/404' />\",\n} );\n```\nwill call the `doEvilThing` function.\n\n### Patches\nThe issue is fixed in jQuery UI 1.13.0. Any string value passed to the `altField` option is now treated as a CSS selector.\n\n### Workarounds\nA workaround is to not accept the value of the `altField` option from untrusted sources.\n\n### For more information\nIf you have any questions or comments about this advisory, search for a relevant issue in [the jQuery UI repo](https://github.com/jquery/jquery-ui/issues). If you don't find an answer, open a new issue.",
      "cve": "CVE-2021-41182",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade jquery-ui@1.11.4 to 1.13.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:npm/jquery-ui@1.11.4"
          },
          "version": "1.11.4"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-41182",
          "value": "CVE-2021-41182",
          "url": "https://scout.docker.com/v/CVE-2021-41182?s=github&n=jquery-ui&t=npm&vr=%3C1.13.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-41182?s=github&n=jquery-ui&t=npm&vr=%3C1.13.0"
        }
      ]
    },
    {
      "id": "ed39217915d6f08d120e7aff00bc9fe8ca7ebcb27cff65d66f05e419fdfcd26f",
      "category": "container_scanning",
      "message": "CVE-2021-41183 on jquery-ui@1.11.4",
      "description": "### Impact\nAccepting the value of various `*Text` options of the Datepicker widget from untrusted sources may execute untrusted code. For example, initializing the datepicker in the following way:\n```js\n$( \"#datepicker\" ).datepicker( {\n\tshowButtonPanel: true,\n\tshowOn: \"both\",\n\tcloseText: \"<script>doEvilThing( 'closeText XSS' )</script>\",\n\tcurrentText: \"<script>doEvilThing( 'currentText XSS' )</script>\",\n\tprevText: \"<script>doEvilThing( 'prevText XSS' )</script>\",\n\tnextText: \"<script>doEvilThing( 'nextText XSS' )</script>\",\n\tbuttonText: \"<script>doEvilThing( 'buttonText XSS' )</script>\",\n\tappendText: \"<script>doEvilThing( 'appendText XSS' )</script>\",\n} );\n```\nwill call `doEvilThing` with 6 different parameters coming from all `*Text` options.\n\n### Patches\nThe issue is fixed in jQuery UI 1.13.0. The values passed to various `*Text` options are now always treated as pure text, not HTML.\n\n### Workarounds\nA workaround is to not accept the value of the `*Text` options from untrusted sources.\n\n### For more information\nIf you have any questions or comments about this advisory, search for a relevant issue in [the jQuery UI repo](https://github.com/jquery/jquery-ui/issues). If you don't find an answer, open a new issue.",
      "cve": "CVE-2021-41183",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade jquery-ui@1.11.4 to 1.13.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:npm/jquery-ui@1.11.4"
          },
          "version": "1.11.4"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-41183",
          "value": "CVE-2021-41183",
          "url": "https://scout.docker.com/v/CVE-2021-41183?s=github&n=jquery-ui&t=npm&vr=%3C1.13.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-41183?s=github&n=jquery-ui&t=npm&vr=%3C1.13.0"
        }
      ]
    },
    {
      "id": "151d8cf1898ebffd0d3605bee6c98eff96e0a8e2b73cb86d2dc1a7306734408c",
      "category": "container_scanning",
      "message": "CVE-2021-41184 on jquery-ui@1.11.4",
      "description": "### Impact\nAccepting the value of the `of` option of the [`.position()`](https://api.jqueryui.com/position/) util from untrusted sources may execute untrusted code. For example, invoking the following code:\n```js\n$( \"#element\" ).position( {\n\tmy: \"left top\",\n\tat: \"right bottom\",\n\tof: \"<img onerror='doEvilThing()' src='/404' />\",\n\tcollision: \"none\"\n} );\n```\nwill call the `doEvilThing()` function.\n\n### Patches\nThe issue is fixed in jQuery UI 1.13.0. Any string value passed to the `of` option is now treated as a CSS selector.\n\n### Workarounds\nA workaround is to not accept the value of the `of` option from untrusted sources.\n\n### For more information\nIf you have any questions or comments about this advisory, search for a relevant issue in [the jQuery UI repo](https://github.com/jquery/jquery-ui/issues). If you don't find an answer, open a new issue.",
      "cve": "CVE-2021-41184",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade jquery-ui@1.11.4 to 1.13.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:npm/jquery-ui@1.11.4"
          },
          "version": "1.11.4"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-41184",
          "value": "CVE-2021-41184",
          "url": "https://scout.docker.com/v/CVE-2021-41184?s=github&n=jquery-ui&t=npm&vr=%3C1.13.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-41184?s=github&n=jquery-ui&t=npm&vr=%3C1.13.0"
        }
      ]
    },
    {
      "id": "5599cfed50cacf08c0db2e647019e519feefc48a0b2d72103510a78a72657a48",
      "category": "container_scanning",
      "message": "GHSA-f6p5-76fp-m248 on zendframework/zend-diactoros@1.3.10",
      "description": "zend-diactoros (and, by extension, Expressive), zend-http (and, by extension, Zend Framework MVC projects), and zend-feed (specifically, its PubSubHubbub sub-component) each contain a potential URL rewrite exploit. In each case, marshaling a request URI includes logic that introspects HTTP request headers that are specific to a given server-side URL rewrite mechanism.\n\nWhen these headers are present on systems not running the specific URL rewriting mechanism, the logic would still trigger, allowing a malicious client or proxy to emulate the headers to request arbitrary content.",
      "cve": "GHSA-f6p5-76fp-m248",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade zendframework/zend-diactoros@1.3.10 to 1.8.4",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:composer/zendframework/zend-diactoros@1.3.10"
          },
          "version": "1.3.10"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "GHSA-f6p5-76fp-m248",
          "value": "GHSA-f6p5-76fp-m248",
          "url": "https://scout.docker.com/v/GHSA-f6p5-76fp-m248?s=github&n=zend-diactoros&ns=zendframework&t=composer&vr=%3C1.8.4"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/GHSA-f6p5-76fp-m248?s=github&n=zend-diactoros&ns=zendframework&t=composer&vr=%3C1.8.4"
        }
      ]
    },
    {
      "id": "85dc2d19112374cfbbb4cfc37760f2ba352acee3e3cb6bd790b0111a99f6f2a5",
      "category": "container_scanning",
      "message": "GHSA-f6p5-76fp-m248 on zendframework/zend-feed@2.7.0",
      "description": "zend-diactoros (and, by extension, Expressive), zend-http (and, by extension, Zend Framework MVC projects), and zend-feed (specifically, its PubSubHubbub sub-component) each contain a potential URL rewrite exploit. In each case, marshaling a request URI includes logic that introspects HTTP request headers that are specific to a given server-side URL rewrite mechanism.\n\nWhen these headers are present on systems not running the specific URL rewriting mechanism, the logic would still trigger, allowing a malicious client or proxy to emulate the headers to request arbitrary content.",
      "cve": "GHSA-f6p5-76fp-m248",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade zendframework/zend-feed@2.7.0 to 2.10.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:composer/zendframework/zend-feed@2.7.0"
          },
          "version": "2.7.0"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "GHSA-f6p5-76fp-m248",
          "value": "GHSA-f6p5-76fp-m248",
          "url": "https://scout.docker.com/v/GHSA-f6p5-76fp-m248?s=github&n=zend-feed&ns=zendframework&t=composer&vr=%3C2.10.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/GHSA-f6p5-76fp-m248?s=github&n=zend-feed&ns=zendframework&t=composer&vr=%3C2.10.3"
        }
      ]
    },
    {
      "id": "b915b8ffea9560079533e1b199c3bfcd7cb17fd02bf5d53c6d9fc0e0ab9ff40f",
      "category": "container_scanning",
      "message": "CVE-2019-18888 on symfony/http-foundation@2.8.18",
      "description": "An issue was discovered in Symfony 2.8.0 through 2.8.50, 3.4.0 through 3.4.34, 4.2.0 through 4.2.11, and 4.3.0 through 4.3.7. If an application passes unvalidated user input as the file for which MIME type validation should occur, then arbitrary arguments are passed to the underlying file command. This is related to symfony/http-foundation (and symfony/mime in 4.3.x).",
      "cve": "CVE-2019-18888",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade symfony/http-foundation@2.8.18 to 2.8.52",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:composer/symfony/http-foundation@2.8.18"
          },
          "version": "2.8.18"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2019-18888",
          "value": "CVE-2019-18888",
          "url": "https://scout.docker.com/v/CVE-2019-18888?s=github&n=http-foundation&ns=symfony&t=composer&vr=%3E%3D2.0.0%2C%3C2.8.52"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2019-18888?s=github&n=http-foundation&ns=symfony&t=composer&vr=%3E%3D2.0.0%2C%3C2.8.52"
        }
      ]
    },
    {
      "id": "1c0042e1af4a1a90704531fe2aa712c6238eedf4d98af7f1bd86cd65f69b0382",
      "category": "container_scanning",
      "message": "CVE-2022-31042 on guzzlehttp/guzzle@6.2.3",
      "description": "### Impact\n\n`Cookie` headers on requests are sensitive information. On making a request using the `https` scheme to a server which responds with a redirect to a URI with the `http` scheme, or on making a request to a server which responds with a redirect to a a URI to a different host, we should not forward the `Cookie` header on. Prior to this fix, only cookies that were managed by our cookie middleware would be safely removed, and any `Cookie` header manually added to the initial request would not be stripped. We now always strip it, and allow the cookie middleware to re-add any cookies that it deems should be there.\n\n### Patches\n\nAffected Guzzle 7 users should upgrade to Guzzle 7.4.4 as soon as possible. Affected users using any earlier series of Guzzle should upgrade to Guzzle 6.5.7 or 7.4.4.\n\n### Workarounds\n\nAn alternative approach would be to use your own redirect middleware, rather than ours, if you are unable to upgrade. If you do not require or expect redirects to be followed, one should simply disable redirects all together.\n\n### References\n\n* [RFC9110 Section 15.4](https://www.rfc-editor.org/rfc/rfc9110.html#name-redirection-3xx)\n\n### For more information\n\nIf you have any questions or comments about this advisory, please get in touch with us in `#guzzle` on the [PHP HTTP Slack](https://php-http.slack.com/). Do not report additional security advisories in that public channel, however - please follow our [vulnerability reporting process](https://github.com/guzzle/guzzle/security/policy).\n",
      "cve": "CVE-2022-31042",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade guzzlehttp/guzzle@6.2.3 to 6.5.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:composer/guzzlehttp/guzzle@6.2.3"
          },
          "version": "6.2.3"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-31042",
          "value": "CVE-2022-31042",
          "url": "https://scout.docker.com/v/CVE-2022-31042?s=github&n=guzzle&ns=guzzlehttp&t=composer&vr=%3E%3D4.0.0%2C%3C6.5.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-31042?s=github&n=guzzle&ns=guzzlehttp&t=composer&vr=%3E%3D4.0.0%2C%3C6.5.7"
        }
      ]
    },
    {
      "id": "c4ed0d0cbfedd919c020886649430b7d36cef2a71c267c5a555c05bf0d7a8d97",
      "category": "container_scanning",
      "message": "CVE-2022-31043 on guzzlehttp/guzzle@6.2.3",
      "description": "### Impact\n\n`Authorization` headers on requests are sensitive information. On making a request using the `https` scheme to a server which responds with a redirect to a URI with the `http` scheme, we should not forward the `Authorization` header on. This is much the same as to how we don't forward on the header if the host changes. Prior to this fix, `https` to `http` downgrades did not result in the `Authorization` header being removed, only changes to the host.\n\n### Patches\n\nAffected Guzzle 7 users should upgrade to Guzzle 7.4.4 as soon as possible. Affected users using any earlier series of Guzzle should upgrade to Guzzle 6.5.7 or 7.4.4.\n\n### Workarounds\n\nAn alternative approach would be to use your own redirect middleware, rather than ours, if you are unable to upgrade. If you do not require or expect redirects to be followed, one should simply disable redirects all together.\n\n### References\n\n* [RFC9110 Section 15.4](https://www.rfc-editor.org/rfc/rfc9110.html#name-redirection-3xx)\n\n### For more information\n\nIf you have any questions or comments about this advisory, please get in touch with us in `#guzzle` on the [PHP HTTP Slack](https://php-http.slack.com/). Do not report additional security advisories in that public channel, however - please follow our [vulnerability reporting process](https://github.com/guzzle/guzzle/security/policy).\n",
      "cve": "CVE-2022-31043",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade guzzlehttp/guzzle@6.2.3 to 6.5.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:composer/guzzlehttp/guzzle@6.2.3"
          },
          "version": "6.2.3"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-31043",
          "value": "CVE-2022-31043",
          "url": "https://scout.docker.com/v/CVE-2022-31043?s=github&n=guzzle&ns=guzzlehttp&t=composer&vr=%3E%3D4.0.0%2C%3C6.5.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-31043?s=github&n=guzzle&ns=guzzlehttp&t=composer&vr=%3E%3D4.0.0%2C%3C6.5.7"
        }
      ]
    },
    {
      "id": "1d48a78beb8f6e2e81a4b66f8e18c1b6f318496939ed08784d8cf8f47a57a45a",
      "category": "container_scanning",
      "message": "CVE-2022-39261 on twig/twig@1.25.0",
      "description": "# Description\n\nWhen using the filesystem loader to load templates for which the name is a user input, it is possible to use the `source` or `include` statement to read arbitrary files from outside the templates directory when using a namespace like `@somewhere/../some.file` (in such a case, validation is bypassed).\n\n# Resolution\n\nWe fixed validation for such template names.\n\nEven if the 1.x branch is not maintained anymore, a new version has been released.\n\n# Credits\n\nWe would like to thank Dariusz Tytko for reporting the issue and Fabien Potencier for fixing the issue.\n",
      "cve": "CVE-2022-39261",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade twig/twig@1.25.0 to 1.44.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:composer/twig/twig@1.25.0"
          },
          "version": "1.25.0"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-39261",
          "value": "CVE-2022-39261",
          "url": "https://scout.docker.com/v/CVE-2022-39261?s=github&n=twig&ns=twig&t=composer&vr=%3E%3D1.0.0%2C%3C1.44.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-39261?s=github&n=twig&ns=twig&t=composer&vr=%3E%3D1.0.0%2C%3C1.44.7"
        }
      ]
    },
    {
      "id": "4cb31543b8389a983443a4cc721462470684989f5153eed4894902d2cbd7b62e",
      "category": "container_scanning",
      "message": "GHSA-jmmp-vh96-78rm on zendframework/zend-feed@2.7.0",
      "description": "zend-diactoros (and, by extension, Expressive), zend-http (and, by extension, Zend Framework MVC projects), and zend-feed (specifically, its PubSubHubbub sub-component) each contain a potential URL rewrite exploit. In each case, marshaling a request URI includes logic that introspects HTTP request headers that are specific to a given server-side URL rewrite mechanism.\n\nWhen these headers are present on systems not running the specific URL rewriting mechanism, the logic would still trigger, allowing a malicious client or proxy to emulate the headers to request arbitrary content.",
      "cve": "GHSA-jmmp-vh96-78rm",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade zendframework/zend-feed@2.7.0 to 2.10.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:composer/zendframework/zend-feed@2.7.0"
          },
          "version": "2.7.0"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "GHSA-jmmp-vh96-78rm",
          "value": "GHSA-jmmp-vh96-78rm",
          "url": "https://scout.docker.com/v/GHSA-jmmp-vh96-78rm?s=github&n=zend-feed&ns=zendframework&t=composer&vr=%3E%3D1.0.0%2C%3C2.10.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/GHSA-jmmp-vh96-78rm?s=github&n=zend-feed&ns=zendframework&t=composer&vr=%3E%3D1.0.0%2C%3C2.10.3"
        }
      ]
    },
    {
      "id": "c0e4e680185398d2e16db083a76893b420b8327ff3e178b7d19e6f592917c0a8",
      "category": "container_scanning",
      "message": "CVE-2022-31090 on guzzlehttp/guzzle@6.2.3",
      "description": "### Impact\n\n`Authorization` headers on requests are sensitive information. When using our Curl handler, it is possible to use the `CURLOPT_HTTPAUTH` option to specify an `Authorization` header. On making a request which responds with a redirect to a URI with a different origin, if we choose to follow it, we should remove the `CURLOPT_HTTPAUTH` and `CURLOPT_USERPWD` options before continuing, stopping curl from appending the `Authorization` header to the new request. Previously, we would only consider a change in host. Now, we consider any change in host, port or scheme to be a change in origin.\n\n### Patches\n\nAffected Guzzle 7 users should upgrade to Guzzle 7.4.5 as soon as possible. Affected users using any earlier series of Guzzle should upgrade to Guzzle 6.5.8 or 7.4.5. Note that a partial fix was implemented in Guzzle 7.4.2, where a change in host would trigger removal of the curl-added Authorization header, however this earlier fix did not cover change in scheme or change in port.\n\n### Workarounds\n\nIf you do not require or expect redirects to be followed, one should simply disable redirects all together. Alternatively, one can specify to use the Guzzle stream handler backend, rather than curl.\n\n### References\n\n* [RFC9110 Section 15.4](https://www.rfc-editor.org/rfc/rfc9110.html#name-redirection-3xx)\n* [CVE-2022-27776](https://curl.se/docs/CVE-2022-27776.html)\n\n### For more information\n\nIf you have any questions or comments about this advisory, please get in touch with us in `#guzzle` on the [PHP HTTP Slack](https://php-http.slack.com/). Do not report additional security advisories in that public channel, however - please follow our [vulnerability reporting process](https://github.com/guzzle/guzzle/security/policy).\n",
      "cve": "CVE-2022-31090",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade guzzlehttp/guzzle@6.2.3 to 6.5.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:composer/guzzlehttp/guzzle@6.2.3"
          },
          "version": "6.2.3"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-31090",
          "value": "CVE-2022-31090",
          "url": "https://scout.docker.com/v/CVE-2022-31090?s=github&n=guzzle&ns=guzzlehttp&t=composer&vr=%3C6.5.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-31090?s=github&n=guzzle&ns=guzzlehttp&t=composer&vr=%3C6.5.8"
        }
      ]
    },
    {
      "id": "f6eb077d9c85b9552d42bfd2facde2f71a740c1b170b8899e22313e59ebca667",
      "category": "container_scanning",
      "message": "CVE-2022-31091 on guzzlehttp/guzzle@6.2.3",
      "description": "### Impact\n\n`Authorization` and `Cookie` headers on requests are sensitive information. On making a request which responds with a redirect to a URI with a different port, if we choose to follow it, we should remove the `Authorization` and `Cookie` headers from the request, before containing. Previously, we would only consider a change in host or scheme downgrade. Now, we consider any change in host, port or scheme to be a change in origin.\n\n### Patches\n\nAffected Guzzle 7 users should upgrade to Guzzle 7.4.5 as soon as possible. Affected users using any earlier series of Guzzle should upgrade to Guzzle 6.5.8 or 7.4.5.\n\n### Workarounds\n\nAn alternative approach would be to use your own redirect middleware, rather than ours, if you are unable to upgrade. If you do not require or expect redirects to be followed, one should simply disable redirects all together.\n\n### References\n\n* [RFC9110 Section 15.4](https://www.rfc-editor.org/rfc/rfc9110.html#name-redirection-3xx)\n* [CVE-2022-27776](https://curl.se/docs/CVE-2022-27776.html)\n\n### For more information\n\nIf you have any questions or comments about this advisory, please get in touch with us in `#guzzle` on the [PHP HTTP Slack](https://php-http.slack.com/). Do not report additional security advisories in that public channel, however please follow our [vulnerability reporting process](https://github.com/guzzle/guzzle/security/policy).\n",
      "cve": "CVE-2022-31091",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade guzzlehttp/guzzle@6.2.3 to 6.5.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:composer/guzzlehttp/guzzle@6.2.3"
          },
          "version": "6.2.3"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-31091",
          "value": "CVE-2022-31091",
          "url": "https://scout.docker.com/v/CVE-2022-31091?s=github&n=guzzle&ns=guzzlehttp&t=composer&vr=%3C6.5.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-31091?s=github&n=guzzle&ns=guzzlehttp&t=composer&vr=%3C6.5.8"
        }
      ]
    },
    {
      "id": "9a1d911c677da46f1cfefe450857d4d3ee44c6990bf34fdb383145c4af0346c5",
      "category": "container_scanning",
      "message": "CVE-2022-29248 on guzzlehttp/guzzle@6.2.3",
      "description": "### Impact\n\nPrevious version of Guzzle contain a vulnerability with the cookie middleware. The vulnerability is that it is not checked if the cookie domain equals the domain of the server which sets the cookie via the `Set-Cookie` header, allowing a malicious server to set cookies for unrelated domains. For example an attacker at `www.example.com` might set a session cookie for `api.example.net`, logging the Guzzle client into their account and retrieving private API requests from the security log of their account.\n\nNote that our cookie middleware is disabled by default, so most library consumers will not be affected by this issue. Only those who manually add the cookie middleware to the handler stack or construct the client with `['cookies' => true]` are affected. Moreover, those who do not use the same Guzzle client to call multiple domains and have disabled redirect forwarding are not affected by this vulnerability.\n\n### Patches\n\nAffected Guzzle 7 users should upgrade to Guzzle 7.4.3 as soon as possible. Affected users using any earlier series of Guzzle should upgrade to Guzzle 6.5.6 or 7.4.3.\n\n### Workarounds\n\nIf you do not need support for cookies, turn off the cookie middleware. It is already off by default, but if you have turned it on and no longer need it, turn it off.\n\n### References\n\n* [RFC6265 Section 5.3](https://datatracker.ietf.org/doc/html/rfc6265#section-5.3)\n* [RFC9110 Section 15.4](https://www.rfc-editor.org/rfc/rfc9110.html#name-redirection-3xx)\n\n### For more information\n\nIf you have any questions or comments about this advisory, please get in touch with us in `#guzzle` on the [PHP HTTP Slack](https://php-http.slack.com/). Do not report additional security advisories in that public channel, however - please follow our [vulnerability reporting process](https://github.com/guzzle/guzzle/security/policy).\n",
      "cve": "CVE-2022-29248",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade guzzlehttp/guzzle@6.2.3 to 6.5.6",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:composer/guzzlehttp/guzzle@6.2.3"
          },
          "version": "6.2.3"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-29248",
          "value": "CVE-2022-29248",
          "url": "https://scout.docker.com/v/CVE-2022-29248?s=github&n=guzzle&ns=guzzlehttp&t=composer&vr=%3C6.5.6"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-29248?s=github&n=guzzle&ns=guzzlehttp&t=composer&vr=%3C6.5.6"
        }
      ]
    },
    {
      "id": "635d6bf4ad74bdacd66ec2cdd12704bf0ed9bed8e50c50ddd0594613d5377db7",
      "category": "container_scanning",
      "message": "CVE-2019-18887 on symfony/http-kernel@2.8.18",
      "description": "When checking the signature of an URI (an ESI fragment URL for instance), the URISigner did not used a constant time string comparison function, resulting in a potential remote timing attack vulnerability.",
      "cve": "CVE-2019-18887",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade symfony/http-kernel@2.8.18 to 2.8.52",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:composer/symfony/http-kernel@2.8.18"
          },
          "version": "2.8.18"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2019-18887",
          "value": "CVE-2019-18887",
          "url": "https://scout.docker.com/v/CVE-2019-18887?s=github&n=http-kernel&ns=symfony&t=composer&vr=%3E%3D2.2.0%2C%3C2.8.52"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2019-18887?s=github&n=http-kernel&ns=symfony&t=composer&vr=%3E%3D2.2.0%2C%3C2.8.52"
        }
      ]
    },
    {
      "id": "0ee2bd2c13ec8560e8fdd389555200411bdb973d168d05e1c68f9df736c7dc62",
      "category": "container_scanning",
      "message": "CVE-2024-51736 on symfony/process@2.8.18",
      "description": "### Description\n\nOn Windows, when an executable file named `cmd.exe` is located in the current working directory it will be called by the `Process` class when preparing command arguments, leading to possible hijacking.\n\n### Resolution\n\nThe `Process` class now uses the absolute path to `cmd.exe`.\n\nThe patch for this issue is available [here](https://github.com/symfony/symfony/commit/18ecd03eda3917fdf901a48e72518f911c64a1c9) for branch 5.4.\n\n### Credits\n\nWe would like to thank Jordi Boggiano for reporting the issue and Nicolas Grekas for providing the fix.",
      "cve": "CVE-2024-51736",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade symfony/process@2.8.18 to 5.4.46",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:composer/symfony/process@2.8.18"
          },
          "version": "2.8.18"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-51736",
          "value": "CVE-2024-51736",
          "url": "https://scout.docker.com/v/CVE-2024-51736?s=github&n=process&ns=symfony&t=composer&vr=%3C5.4.46"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-51736?s=github&n=process&ns=symfony&t=composer&vr=%3C5.4.46"
        }
      ]
    },
    {
      "id": "e94c80437def1bd48dd0dc8c581a8e7d2d781ceebbf0e7f0849b6ec3c38cc9db",
      "category": "container_scanning",
      "message": "CVE-2019-10910 on symfony/dependency-injection@2.8.18",
      "description": "In Symfony before 2.7.51, 2.8.x before 2.8.50, 3.x before 3.4.26, 4.x before 4.1.12, and 4.2.x before 4.2.7, when service ids allow user input, this could allow for SQL Injection and remote code execution. This is related to symfony/dependency-injection.",
      "cve": "CVE-2019-10910",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade symfony/dependency-injection@2.8.18 to 2.8.50",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:composer/symfony/dependency-injection@2.8.18"
          },
          "version": "2.8.18"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2019-10910",
          "value": "CVE-2019-10910",
          "url": "https://scout.docker.com/v/CVE-2019-10910?s=github&n=dependency-injection&ns=symfony&t=composer&vr=%3E%3D2.8.0%2C%3C2.8.50"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2019-10910?s=github&n=dependency-injection&ns=symfony&t=composer&vr=%3E%3D2.8.0%2C%3C2.8.50"
        }
      ]
    },
    {
      "id": "30bb0f60bb4b26df0f035b7732522276c565bb11aa5777e5304791e9c8fedd81",
      "category": "container_scanning",
      "message": "CVE-2019-10913 on symfony/http-foundation@2.8.18",
      "description": "In Symfony before 2.7.51, 2.8.x before 2.8.50, 3.x before 3.4.26, 4.x before 4.1.12, and 4.2.x before 4.2.7, HTTP Methods provided as verbs or using the override header may be treated as trusted input, but they are not validated, possibly causing SQL injection or XSS. This is related to symfony/http-foundation.",
      "cve": "CVE-2019-10913",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade symfony/http-foundation@2.8.18 to 2.8.50",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:composer/symfony/http-foundation@2.8.18"
          },
          "version": "2.8.18"
        },
        "operating_system": "debian 8",
        "image": "custom_no_tool-drupal:latest"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2019-10913",
          "value": "CVE-2019-10913",
          "url": "https://scout.docker.com/v/CVE-2019-10913?s=github&n=http-foundation&ns=symfony&t=composer&vr=%3E%3D2.8.0%2C%3C2.8.50"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2019-10913?s=github&n=http-foundation&ns=symfony&t=composer&vr=%3E%3D2.8.0%2C%3C2.8.50"
        }
      ]
    }
  ],
  "remediations": [],
  "scan": {
    "start_time": "2025-10-31T13:51:27",
    "end_time": "2025-10-31T13:51:27",
    "status": "success",
    "type": "container_scanning",
    "scanner": {
      "id": "docker-scout",
      "name": "Docker Scout",
      "version": "1.18.3",
      "vendor": {
        "name": "Docker"
      }
    },
    "analyzer": {
      "id": "docker-scout",
      "name": "Docker Scout",
      "version": "1.18.3",
      "vendor": {
        "name": "Docker"
      }
    }
  }
}
