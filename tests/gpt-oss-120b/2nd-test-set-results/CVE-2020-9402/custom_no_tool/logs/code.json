{
    "files": [
        {
            "location": "./../../dockers/CVE-2020-9402/custom_no_tool/docker-compose.yml",
            "content": "services:\n  db:\n    image: gvenzl/oracle-xe:19.5.0\n    container_name: cve2020_9402_db\n    environment:\n      ORACLE_PASSWORD: OraclePass123\n    ports:\n      - \"1521:1521\"\n    volumes:\n      - db_data:/opt/oracle/oradata\n      - ./init.sql:/container-entrypoint-initdb.d/init.sql:ro\n    healthcheck:\n      test: [\"CMD\", \"bash\", \"-c\", \"echo > /dev/tcp/localhost/1521 && exit 0\"]\n      interval: 30s\n      timeout: 10s\n      retries: 10\n  web:\n    build:\n      context: ./web\n      dockerfile: Dockerfile\n    container_name: cve2020_9402_web\n    depends_on:\n      db:\n        condition: service_healthy\n    ports:\n      - \"8000:8000\"\n    environment:\n      DB_HOST: db\n      DB_USER: system\n      DB_PASSWORD: OraclePass123\n      DB_NAME: XE\nvolumes:\n  db_data:"
        },
        {
            "location": "./../../dockers/CVE-2020-9402/custom_no_tool/web/Dockerfile",
            "content": "FROM oraclelinux:8\n\n# Install required packages, Oracle Instant Client and Python 3.8\nRUN yum -y install oracle-release-el8 && \\\n    yum -y install oracle-instantclient19.8-basic oracle-instantclient19.8-sdk \\\n    python38 python38-pip gcc libaio libaio-devel && \\\n    yum clean all && rm -rf /var/cache/yum\n\n# Set environment variable for Instant Client\nENV LD_LIBRARY_PATH=/usr/lib/oracle/19.8/client64/lib:${LD_LIBRARY_PATH}\n\n# Install Python dependencies\nRUN pip3 install --no-cache-dir Django==2.2.24 cx_Oracle==8.3.0\n\nWORKDIR /app\nCOPY . /app\n\nEXPOSE 8000\n\nCMD [\"python3\", \"manage.py\", \"runserver\", \"0.0.0.0:8000\"]"
        },
        {
            "location": "./../../dockers/CVE-2020-9402/custom_no_tool/web/manage.py",
            "content": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"myproject.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"
        },
        {
            "location": "./../../dockers/CVE-2020-9402/custom_no_tool/web/myproject/__init__.py",
            "content": ""
        },
        {
            "location": "./../../dockers/CVE-2020-9402/custom_no_tool/web/myproject/settings.py",
            "content": "import os\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'insecure-secret-key-for-testing'\nDEBUG = True\nALLOWED_HOSTS = ['*']\nINSTALLED_APPS = [\n    'django.contrib.contenttypes',\n    'django.contrib.staticfiles',\n    'myapp',\n]\nMIDDLEWARE = []\nROOT_URLCONF = 'myproject.urls'\nTEMPLATES = []\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\n# Database configuration using Oracle backend\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.oracle',\n        'NAME': os.getenv('DB_NAME', 'XE'),\n        'USER': os.getenv('DB_USER', 'system'),\n        'PASSWORD': os.getenv('DB_PASSWORD', ''),\n        'HOST': os.getenv('DB_HOST', 'localhost'),\n        'PORT': '1521',\n    }\n}\n\nSTATIC_URL = '/static/'"
        },
        {
            "location": "./../../dockers/CVE-2020-9402/custom_no_tool/web/myproject/urls.py",
            "content": "from django.urls import path\nfrom myapp import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n    path('search/', views.search, name='search'),\n]"
        },
        {
            "location": "./../../dockers/CVE-2020-9402/custom_no_tool/web/myproject/wsgi.py",
            "content": "import os\nfrom django.core.wsgi import get_wsgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\napplication = get_wsgi_application()"
        },
        {
            "location": "./../../dockers/CVE-2020-9402/custom_no_tool/web/myapp/__init__.py",
            "content": ""
        },
        {
            "location": "./../../dockers/CVE-2020-9402/custom_no_tool/web/myapp/views.py",
            "content": "from django.http import JsonResponse, HttpResponse\nfrom django.db import connection\n\ndef index(request):\n    return HttpResponse('CVE-2020-9402 vulnerable Django app running.')\n\ndef search(request):\n    # Vulnerable parameter concatenated directly into raw SQL (demonstrates CVE-2020-9402)\n    tolerance = request.GET.get('tolerance', '')\n    with connection.cursor() as cursor:\n        sql = f\"SELECT * FROM users WHERE name LIKE '%{tolerance}%'\"\n        cursor.execute(sql)\n        columns = [col[0] for col in cursor.description]\n        rows = [dict(zip(columns, row)) for row in cursor.fetchall()]\n    return JsonResponse(rows, safe=False)"
        },
        {
            "location": "./../../dockers/CVE-2020-9402/custom_no_tool/init.sql",
            "content": "DROP TABLE users;\nCREATE TABLE users (\n    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n    name VARCHAR2(100) NOT NULL,\n    email VARCHAR2(100) NOT NULL\n);\nINSERT INTO users (name, email) VALUES ('alice', 'alice@example.com');\nINSERT INTO users (name, email) VALUES ('bob', 'bob@example.com');\nINSERT INTO users (name, email) VALUES ('charlie', 'charlie@example.com');\nCOMMIT;"
        }
    ],
    "directory_tree": "CVE-2020-9402/custom_no_tool"
}