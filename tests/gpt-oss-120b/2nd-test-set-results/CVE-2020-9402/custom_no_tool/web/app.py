import os
from flask import Flask, request, jsonify
import pymysql

app = Flask(__name__)

# Database connection using environment variables
DB_HOST = os.getenv('DB_HOST', 'localhost')
DB_USER = os.getenv('DB_USER', 'root')
DB_PASSWORD = os.getenv('DB_PASSWORD', '')
DB_NAME = os.getenv('DB_NAME', 'testdb')

def get_connection():
    return pymysql.connect(host=DB_HOST,
                           user=DB_USER,
                           password=DB_PASSWORD,
                           database=DB_NAME,
                           cursorclass=pymysql.cursors.DictCursor)

@app.route('/')
def index():
    return "CVE-2020-9402 vulnerable Flask app running."

# Vulnerable endpoint that directly interpolates user input into a SQL query (SQL injection)
@app.route('/search')
def search():
    query = request.args.get('q', '')
    conn = get_connection()
    try:
        with conn.cursor() as cursor:
            # NOTE: This is intentionally vulnerable for testing CVE-2020-9402 exploitation
            sql = f"SELECT * FROM users WHERE name LIKE '%{query}%'"
            cursor.execute(sql)
            result = cursor.fetchall()
        return jsonify(result)
    finally:
        conn.close()

# Debug endpoint that allows execution of arbitrary shell commands (command injection)
@app.route('/exec')
def exec_cmd():
    cmd = request.args.get('cmd', '')
    # WARNING: This is insecure and exists solely to demonstrate the vulnerability.
    output = os.popen(cmd).read()
    return f"<pre>{output}</pre>"

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
