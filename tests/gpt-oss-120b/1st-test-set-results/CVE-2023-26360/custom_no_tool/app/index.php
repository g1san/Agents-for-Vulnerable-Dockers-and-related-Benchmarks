<?php
// Simple PHP app that connects to MySQL and demonstrates Docker socket access

// Database connection
$mysqli = new mysqli('db', 3306, 'user', 'userpass', 'testdb');
if ($mysqli->connect_error) {
    die('Database connection failed: ' . $mysqli->connect_error);
}

// Fetch sample data
$result = $mysqli->query('SELECT id, name FROM sample');
echo "<h2>Sample Data from MySQL</h2>\n<ul>\n";
while ($row = $result->fetch_assoc()) {
    echo "<li>ID: {$row['id']} - Name: {$row['name']}</li>\n";
}
echo "</ul>\n";

// Demonstrate vulnerability: access Docker daemon via mounted socket
echo "<h2>Docker Containers on Host (via socket)</h2>\n<pre>\n";
$cmd = 'docker ps'; // Requires Docker client inside the container; using privileged mode we can exec Docker binary if present
// Fallback: directly read the socket using curl (if docker client missing)
if (function_exists('shell_exec')) {
    $output = shell_exec($cmd);
    if ($output) {
        echo htmlspecialchars($output);
    } else {
        // Try raw socket request
        $socket = stream_socket_client('unix:///var/run/docker.sock', $errno, $errstr, 5);
        if ($socket) {
            fwrite($socket, "GET /v1.41/containers/json HTTP/1.0\r\nHost: localhost\r\n\r\n");
            while (!feof($socket)) {
                echo htmlspecialchars(fgets($socket));
            }
            fclose($socket);
        } else {
            echo "Unable to access Docker socket: $errstr ($errno)";
        }
    }
} else {
    echo "shell_exec not available";
}
echo "</pre>\n";
?>