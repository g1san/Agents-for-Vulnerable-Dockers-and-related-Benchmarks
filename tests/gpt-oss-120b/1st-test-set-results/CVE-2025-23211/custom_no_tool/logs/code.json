{
    "files": [
        {
            "location": "./../../dockers/CVE-2025-23211/custom_no_tool/docker-compose.yml",
            "content": "services:\n  vulnerable-app:\n    build: ./vulnerable-app\n    ports:\n      - \"8080:8080\"\n    environment:\n      - VULN_MODE=exploitable\n    depends_on:\n      db:\n        condition: service_healthy\n    restart: unless-stopped\n  db:\n    image: postgres:13-alpine\n    environment:\n      POSTGRES_PASSWORD: example\n      POSTGRES_DB: testdb\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql\n    healthcheck:\n      test: [\"CMD\", \"pg_isready\", \"-U\", \"postgres\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n  tandoorrecipes:\n    image: tandoorrecipes/recipes:1.5.23\n    ports:\n      - \"8000:8000\"\n    restart: unless-stopped"
        },
        {
            "location": "./../../dockers/CVE-2025-23211/custom_no_tool/vulnerable-app/Dockerfile",
            "content": "FROM python:3.11-slim\nWORKDIR /app\n\n# Install build\u2011time tools and runtime libpq5\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n        gcc \\\n        build-essential \\\n        libpq-dev \\\n        libpq5 \\\n        python3-dev && \\\n    rm -rf /var/lib/apt/lists/*\n\nCOPY requirements.txt ./\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Remove only the build\u2011time packages, keep the runtime libpq5\nRUN apt-get purge -y --auto-remove gcc build-essential libpq-dev python3-dev && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\nCOPY app.py ./\nEXPOSE 8080\nCMD [\"python\", \"app.py\"]"
        },
        {
            "location": "./../../dockers/CVE-2025-23211/custom_no_tool/vulnerable-app/requirements.txt",
            "content": "flask==2.3.3\npsycopg2-binary==2.9.9"
        },
        {
            "location": "./../../dockers/CVE-2025-23211/custom_no_tool/vulnerable-app/app.py",
            "content": "import os\nfrom flask import Flask, request, jsonify\nimport psycopg2\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    try:\n        conn = psycopg2.connect(\n            host='db',\n            dbname='testdb',\n            user='postgres',\n            password='example'\n        )\n        return conn\n    except psycopg2.OperationalError:\n        return None\n\n@app.route('/search')\ndef search():\n    query = request.args.get('q', '')\n    result_lines = []\n    try:\n        data_path = os.path.join(os.path.dirname(__file__), 'data.txt')\n        with open(data_path, 'r', encoding='utf-8') as f:\n            for line in f:\n                if query.lower() in line.lower():\n                    result_lines.append(line.rstrip())\n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n    return jsonify({'result': result_lines})\n\n@app.route('/users')\ndef list_users():\n    conn = get_db_connection()\n    if conn is None:\n        return jsonify({'error': 'Database connection failed'}), 500\n    cur = conn.cursor()\n    cur.execute('SELECT id, username FROM users')\n    rows = cur.fetchall()\n    cur.close()\n    conn.close()\n    return jsonify([{'id': r[0], 'username': r[1]} for r in rows])\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8080)"
        },
        {
            "location": "./../../dockers/CVE-2025-23211/custom_no_tool/vulnerable-app/data.txt",
            "content": "Sample data line one\nAnother sample line\nSensitive information: secret_key=abcd1234"
        },
        {
            "location": "./../../dockers/CVE-2025-23211/custom_no_tool/postgres/init.sql",
            "content": "CREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password_hash VARCHAR(255) NOT NULL\n);\n\nINSERT INTO users (username, password_hash) VALUES\n('alice', 'hash1'),\n('bob', 'hash2'),\n('charlie', 'hash3');\n"
        }
    ],
    "directory_tree": "CVE-2025-23211/custom_no_tool"
}