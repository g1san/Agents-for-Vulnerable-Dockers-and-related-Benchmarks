const express = require('express');
const multer = require('multer');
const path = require('path');
const fs = require('fs');

const app = express();
const uploadDir = path.join(__dirname, 'uploads');
if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir);
}

// Vulnerable storage configuration: no filename sanitization, allowing path traversal
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, uploadDir);
  },
  filename: function (req, file, cb) {
    // Intentionally insecure: use original filename directly
    cb(null, file.originalname);
  }
});

const upload = multer({ storage: storage });

app.get('/', (req, res) => {
  res.send(`<h2>Vulnerable File Upload</h2>
    <form action="/upload" method="post" enctype="multipart/form-data">
      <input type="file" name="file" />
      <button type="submit">Upload</button>
    </form>`);
});

app.post('/upload', upload.single('file'), (req, res) => {
  res.send(`File uploaded as ${req.file.filename}`);
});

// Simple endpoint to read an arbitrary file (demonstrates exploitation)
app.get('/read', (req, res) => {
  const file = req.query.file;
  if (!file) {
    return res.status(400).send('Specify ?file=path');
  }
  const safePath = path.join(uploadDir, file);
  // No path traversal check â†’ vulnerable
  fs.readFile(safePath, 'utf8', (err, data) => {
    if (err) {
      return res.status(404).send('File not found');
    }
    res.type('text/plain').send(data);
  });
});

app.listen(8080, () => {
  console.log('Vulnerable app listening on port 8080');
});