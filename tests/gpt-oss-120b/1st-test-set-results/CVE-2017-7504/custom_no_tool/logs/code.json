{
    "files": [
        {
            "location": "./../../dockers/CVE-2017-7504/custom_no_tool/docker-compose.yml",
            "content": "services:\n  app:\n    build: ./app\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    ports:\n      - \"5000:5000\"\n    depends_on:\n      - db\n  db:\n    image: mysql:5.7\n    environment:\n      MYSQL_ROOT_PASSWORD: example\n      MYSQL_DATABASE: testdb\n      MYSQL_USER: user\n      MYSQL_PASSWORD: pass\n    ports:\n      - \"3306:3306\"\n    volumes:\n      - db_data:/var/lib/mysql\n      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql\n  jboss:\n    build: ./jboss\n    ports:\n      - \"8080:8080\"\n    environment:\n      JAVA_OPTS: \"-Djava.security.egd=file:/dev/./urandom\"\n    depends_on:\n      - db\nvolumes:\n  db_data:"
        },
        {
            "location": "./../../dockers/CVE-2017-7504/custom_no_tool/app/Dockerfile",
            "content": "FROM python:3.9-slim\nARG DEBIAN_FRONTEND=noninteractive\nRUN apt-get update && apt-get install -y --no-install-recommends ca-certificates git && rm -rf /var/lib/apt/lists/* \\\n    && pip install --upgrade pip\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\nCOPY . .\nEXPOSE 5000\nCMD [\"python\",\"app.py\"]"
        },
        {
            "location": "./../../dockers/CVE-2017-7504/custom_no_tool/app/requirements.txt",
            "content": "flask\ndocker\npymysql"
        },
        {
            "location": "./../../dockers/CVE-2017-7504/custom_no_tool/app/app.py",
            "content": "from flask import Flask, jsonify, request\nimport docker\n\napp = Flask(__name__)\n\nclient = docker.DockerClient(base_url='unix://var/run/docker.sock')\n\n@app.route('/containers')\ndef list_containers():\n    containers = client.containers.list()\n    return jsonify([c.name for c in containers])\n\n@app.route('/create')\ndef create():\n    image = request.args.get('image', 'alpine')\n    cmd = request.args.get('cmd', 'sleep 3600')\n    container = client.containers.run(image, cmd, detach=True)\n    return jsonify({\n        'id': container.id,\n        'image': image,\n        'command': cmd\n    })\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
        },
        {
            "location": "./../../dockers/CVE-2017-7504/custom_no_tool/db/init.sql",
            "content": "CREATE TABLE users (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n) ENGINE=InnoDB;\n\nINSERT INTO users (username, email) VALUES\n('alice', 'alice@example.com'),\n('bob', 'bob@example.com'),\n('carol', 'carol@example.com');"
        },
        {
            "location": "./../../dockers/CVE-2017-7504/custom_no_tool/jboss/Dockerfile",
            "content": "FROM openjdk:8-jdk-slim\nARG DEBIAN_FRONTEND=noninteractive\nENV JBoss_VERSION=4.1.0.GA\nRUN apt-get update && apt-get install -y --no-install-recommends wget ca-certificates tar bash && rm -rf /var/lib/apt/lists/* \\\n    && wget -q -L -O /tmp/jboss.tar.gz https://downloads.jboss.org/jbossas/4.1.0.GA/jboss-4.1.0.GA.tar.gz \\\n    && echo \"Verifying JBoss archive SHA256:\" && sha256sum /tmp/jboss.tar.gz \\\n    && mkdir -p /opt/jboss \\\n    && tar -xzf /tmp/jboss.tar.gz -C /opt/jboss --strip-components=1 \\\n    && rm /tmp/jboss.tar.gz \\\n    && chmod +x /opt/jboss/bin/run.sh\nENV JBOSS_HOME=/opt/jboss\nENV PATH=$JBOSS_HOME/bin:$PATH\nWORKDIR $JBOSS_HOME\nEXPOSE 8080\nCMD [\"bash\",\"./bin/run.sh\",\"-c\",\"default\"]"
        }
    ],
    "directory_tree": "CVE-2017-7504/custom_no_tool"
}