import logging
from flask import Flask, request, jsonify
import yaml
import os
import threading
import gradio as gr

app = Flask(__name__)

# Configure basic logging
logging.basicConfig(level=logging.INFO, format='[%(asctime)s] %(levelname)s: %(message)s')

# ---------------------------------------
# Safe Flask endpoints (yaml.safe_load used)
# ---------------------------------------
@app.route('/')
def index():
    return 'Vulnerable YAML parser demo. POST YAML to /parse.'

@app.route('/parse', methods=['POST'])
def parse_yaml():
    raw_yaml = request.data.decode('utf-8')
    try:
        data = yaml.safe_load(raw_yaml)
        return jsonify({"parsed": data})
    except Exception as e:
        logging.exception('Error parsing YAML')
        return jsonify({"error": str(e)}), 400

@app.route('/exec', methods=['POST'])
def exec_command():
    raw_yaml = request.data.decode('utf-8')
    try:
        yaml.safe_load(raw_yaml)
        return jsonify({"status": "executed"})
    except Exception as e:
        logging.exception('Error executing command')
        return jsonify({"error": str(e)}), 400

# ---------------------------------------
# Gradio demo exposing the vulnerable /file endpoint
# ---------------------------------------
def launch_gradio_demo():
    try:
        def echo_file(file):
            # Simply returns the uploaded file; the /file endpoint is provided by Gradio internally.
            return file

        iface = gr.Interface(
            fn=echo_file,
            inputs=gr.File(label="Upload a file"),
            outputs=gr.File(label="Returned file"),
            title="Gradio File Upload Demo (vulnerable)"
        )
        iface.launch(server_name="0.0.0.0", server_port=7860, share=False, prevent_thread_lock=True)
    except Exception as e:
        logging.exception('Failed to launch Gradio interface')

# Start Gradio in a background thread so Flask remains reachable.
threading.Thread(target=launch_gradio_demo, daemon=True).start()

if __name__ == '__main__':
    # Run the Flask app on all interfaces so Docker can expose it.
    app.run(host='0.0.0.0', port=5000)
