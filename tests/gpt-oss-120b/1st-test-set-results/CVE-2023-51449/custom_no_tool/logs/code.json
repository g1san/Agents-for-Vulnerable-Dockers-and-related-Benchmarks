{
    "files": [
        {
            "location": "./../../dockers/CVE-2023-51449/custom_no_tool/docker-compose.yml",
            "content": "services:\n  web:\n    build: ./app\n    ports:\n      - \"8080:80\"\n    depends_on:\n      - db\n    environment:\n      DB_HOST: db\n      DB_USER: vulnuser\n      DB_PASS: vulnpass\n      DB_NAME: vulndb\n    command: sh -c \"while ! nc -z db 3306; do sleep 1; done && docker-php-entrypoint apache2-foreground\"\n  db:\n    image: mysql:5.7\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: rootpass\n      MYSQL_DATABASE: vulndb\n      MYSQL_USER: vulnuser\n      MYSQL_PASSWORD: vulnpass\n    ports:\n      - \"3306:3306\"\n    volumes:\n      - db_data:/var/lib/mysql\n      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql\n  gradio:\n    build: ./gradio\n    ports:\n      - \"7860:7860\"\nvolumes:\n  db_data:"
        },
        {
            "location": "./../../dockers/CVE-2023-51449/custom_no_tool/app/Dockerfile",
            "content": "FROM php:8.2-apache\n\n# Install MySQL client, required libraries and PHP extensions\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n        default-mysql-client \\\n        libzip-dev libpng-dev zlib1g-dev \\\n    && docker-php-ext-configure zip \\\n    && docker-php-ext-install mysqli zip \\\n    && a2enmod rewrite \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\nCOPY . /var/www/html/"
        },
        {
            "location": "./../../dockers/CVE-2023-51449/custom_no_tool/app/start.sh",
            "content": "#!/bin/sh\n# Wait for MySQL to be reachable before starting Apache\nwhile ! nc -z db 3306; do\n  echo \"Waiting for MySQL...\"\n  sleep 1\ndone\n# Start the default Apache entrypoint\nexec docker-php-entrypoint apache2-foreground"
        },
        {
            "location": "./../../dockers/CVE-2023-51449/custom_no_tool/app/index.php",
            "content": "<?php\n// Simple vulnerable script that unserializes user input (CVE-2023-51449 demonstration)\nif (isset($_GET['data'])) {\n    $obj = unserialize($_GET['data']);\n    echo \"Object processed\";\n} else {\n    echo \"Send a serialized payload via the 'data' query parameter.\";\n}\n?>"
        },
        {
            "location": "./../../dockers/CVE-2023-51449/custom_no_tool/db/init.sql",
            "content": "CREATE TABLE users (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password VARCHAR(255) NOT NULL\n);\nINSERT INTO users (username, password) VALUES ('admin', 'admin');"
        },
        {
            "location": "./../../dockers/CVE-2023-51449/custom_no_tool/gradio/Dockerfile",
            "content": "FROM python:3.9-slim\n\n# Install build tools and required Python packages. Pin huggingface_hub to a version compatible with Gradio 4.11.0\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends gcc && \\\n    pip install --no-cache-dir gradio==4.11.0 huggingface_hub==0.16.0 && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*\n\nEXPOSE 7860\nWORKDIR /app\n\nCOPY app.py /app/app.py\n\nCMD [\"python\",\"/app/app.py\"]"
        },
        {
            "location": "./../../dockers/CVE-2023-51449/custom_no_tool/gradio/app.py",
            "content": "import gradio as gr\n\ndef fn():\n    return \"ok\"\n\niface = gr.Interface(fn=fn, inputs=None, outputs=\"text\")\n\nif __name__ == \"__main__\":\n    iface.launch(server_name=\"0.0.0.0\", server_port=7860)"
        }
    ],
    "directory_tree": "CVE-2023-51449/custom_no_tool"
}