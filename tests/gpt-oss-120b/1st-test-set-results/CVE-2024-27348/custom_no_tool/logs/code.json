{
    "files": [
        {
            "location": "./../../dockers/CVE-2024-27348/custom_no_tool/docker-compose.yml",
            "content": "services:\n  web:\n    build: ./app\n    ports:\n      - \"5000:5000\"\n    depends_on:\n      - redis\n      - hugegraph\n    environment:\n      - REDIS_HOST=redis\n      - REDIS_PORT=6379\n\n  redis:\n    image: redis:7.0.4\n    ports:\n      - \"6379:6379\"\n    restart: always\n\n  hugegraph:\n    image: hugegraph/hugegraph-server:1.2.1\n    container_name: hugegraph\n    ports:\n      - \"8080:8080\"\n    environment:\n      - JAVA_OPTS=-Xms512m -Xmx1024m\n\n  hugegraph-seed:\n    image: curlimages/curl:7.88.1\n    container_name: hugegraph-seed\n    depends_on:\n      - hugegraph\n    command: >\n      sh -c \"sleep 5 && curl -s -X POST 'http://hugegraph:8080/gremlin?script=graph.addVertex(label,\\\"person\\\",\\\"name\\\",\\\"Alice\\\")'\"\n    restart: \"no\""
        },
        {
            "location": "./../../dockers/CVE-2024-27348/custom_no_tool/app/Dockerfile",
            "content": "FROM python:3.11-bullseye\nWORKDIR /app\nCOPY requirements.txt .\nRUN apt-get update && apt-get install -y --no-install-recommends ca-certificates && rm -rf /var/lib/apt/lists/* && pip install --upgrade pip && pip install --no-cache-dir -r requirements.txt\nCOPY . .\nCMD [\"python\",\"app.py\"]"
        },
        {
            "location": "./../../dockers/CVE-2024-27348/custom_no_tool/app/requirements.txt",
            "content": "flask==2.3.2\nredis==5.0.1"
        },
        {
            "location": "./../../dockers/CVE-2024-27348/custom_no_tool/app/app.py",
            "content": "import os\nimport json\nfrom flask import Flask, request, jsonify, abort\nimport redis\n\napp = Flask(__name__)\n\nr = redis.Redis(host=os.getenv('REDIS_HOST', 'redis'), port=int(os.getenv('REDIS_PORT', 6379)))\n\n@app.route('/')\ndef index():\n    return 'Secure app'\n\n@app.route('/store', methods=['POST'])\ndef store():\n    key = request.form.get('key')\n    data = request.form.get('data')\n    if not key or not data:\n        abort(400, description='Missing key or data')\n    try:\n        # Validate that data is valid JSON\n        json_obj = json.loads(data)\n    except json.JSONDecodeError:\n        abort(400, description='Data must be valid JSON')\n    # Store the JSON string safely\n    r.set(key, json.dumps(json_obj))\n    return 'Stored', 201\n\n@app.route('/load', methods=['GET'])\ndef load():\n    key = request.args.get('key')\n    if not key:\n        abort(400, description='Missing key')\n    raw = r.get(key)\n    if raw is None:\n        return 'Not found', 404\n    try:\n        # Load JSON safely\n        obj = json.loads(raw)\n    except json.JSONDecodeError:\n        abort(500, description='Corrupted data')\n    return jsonify(obj)\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=False)"
        }
    ],
    "directory_tree": "CVE-2024-27348/custom_no_tool"
}