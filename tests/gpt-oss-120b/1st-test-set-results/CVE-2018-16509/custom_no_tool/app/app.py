from flask import Flask, request, jsonify
from PIL import Image
import os
import subprocess

app = Flask(__name__)

UPLOAD_FOLDER = '/tmp/uploads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

@app.route('/')
def index():
    return "Ghostscript CVE-2018-16509 vulnerable service running"

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return jsonify({'error': 'No file part'}), 400
    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': 'No selected file'}), 400
    file_path = os.path.join(UPLOAD_FOLDER, file.filename)
    file.save(file_path)
    try:
        # Open the file with Pillow which will invoke Ghostscript for EPS/PS files
        img = Image.open(file_path)
        img.load()
        # Optional: force processing to trigger potential exploit paths
        img.convert('RGB')
    except Exception as e:
        return jsonify({'error': str(e)}), 500
    finally:
        # Clean up uploaded file
        try:
            os.remove(file_path)
        except OSError:
            pass
    return jsonify({'status': 'file processed successfully'})

if __name__ == '__main__':
    # Bind to all interfaces so Docker can reach the app
    app.run(host='0.0.0.0', port=8080)
