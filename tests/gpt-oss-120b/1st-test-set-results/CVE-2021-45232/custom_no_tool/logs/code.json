{
    "files": [
        {
            "location": "./../../dockers/CVE-2021-45232/custom_no_tool/docker-compose.yml",
            "content": "version: \"3.8\"\nservices:\n  dind:\n    image: docker:20.10.6-dind\n    privileged: true\n    environment:\n      - DOCKER_TLS_CERTDIR=\n    command: [\"dockerd\", \"-H\", \"tcp://0.0.0.0:2375\", \"-H\", \"unix:///var/run/docker.sock\"]\n    ports:\n      - \"2375:2375\"\n    healthcheck:\n      test: [\"CMD\", \"docker\", \"info\"]\n      interval: 2s\n      timeout: 2s\n      retries: 5\n  app:\n    build: ./app\n    depends_on:\n      dind:\n        condition: service_healthy\n    ports:\n      - \"5000:5000\"\n    environment:\n      - DOCKER_HOST=tcp://dind:2375"
        },
        {
            "location": "./../../dockers/CVE-2021-45232/custom_no_tool/app/Dockerfile",
            "content": "FROM python:3.9\nWORKDIR /app\n\n# Install OS packages needed for the wait script and for pip operations\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n       curl ca-certificates \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install Python dependencies first to take advantage of caching\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy the rest of the application source code\nCOPY . .\n\n# Ensure the wait script is present and executable\nCOPY wait_for_dind.sh /usr/local/bin/\nRUN chmod +x /usr/local/bin/wait_for_dind.sh\n\nENTRYPOINT [\"wait_for_dind.sh\", \"python\", \"app.py\"]"
        },
        {
            "location": "./../../dockers/CVE-2021-45232/custom_no_tool/app/app.py",
            "content": "from flask import Flask, request, jsonify\nimport docker, os\n\napp = Flask(__name__)\n\n# Docker client will be created after the wait script ensures the daemon is reachable\nclient = docker.DockerClient(base_url=os.getenv('DOCKER_HOST', 'tcp://dind:2375'))\n\n@app.route('/')\ndef index():\n    return 'Vulnerable app running', 200\n\n@app.route('/run')\ndef run_image():\n    image = request.args.get('image')\n    if not image:\n        return 'Missing image parameter', 400\n    try:\n        client.images.pull(image)\n        container = client.containers.run(image, detach=True)\n        return jsonify({\"status\": \"started\", \"container_id\": container.id}), 200\n    except Exception as e:\n        return str(e), 500\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
        },
        {
            "location": "./../../dockers/CVE-2021-45232/custom_no_tool/app/requirements.txt",
            "content": "Flask==2.0.3\ndocker==5.0.3\nWerkzeug>=2.0,<2.1\n# Jinja2, click, itsdangerous, and other transitive dependencies are pulled automatically"
        },
        {
            "location": "./../../dockers/CVE-2021-45232/custom_no_tool/app/wait_for_dind.sh",
            "content": "#!/bin/sh\n# wait_for_dind.sh \u2013 blocks until the Docker-in-Docker daemon responds to /_ping\nset -e\nMAX_RETRIES=30\nCOUNT=0\nwhile true; do\n  if curl -s http://dind:2375/_ping | grep -q OK; then\n    echo \"Dind is healthy\"\n    break\n  fi\n  COUNT=$((COUNT+1))\n  if [ $COUNT -ge $MAX_RETRIES ]; then\n    echo \"Dind did not become healthy in time\"\n    exit 1\n  fi\n  echo \"Waiting for dind...\"\n  sleep 2\ndone\nexec \"$@\"\n"
        }
    ],
    "directory_tree": "./../../dockers/CVE-2021-45232/custom_no_tool"
}