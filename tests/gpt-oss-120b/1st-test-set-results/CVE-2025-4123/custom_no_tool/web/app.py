from flask import Flask, request, abort, Response
import os
import psycopg2

app = Flask(__name__)

# Database connection (unused in the vulnerable endpoint but illustrates full stack)

def get_db_connection():
    return psycopg2.connect(
        host=os.getenv('DB_HOST'),
        user=os.getenv('DB_USER'),
        password=os.getenv('DB_PASSWORD'),
        dbname=os.getenv('DB_NAME')
    )

# Base directory for allowed files
BASE_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'files')

# Ensure the base directory exists at runtime
if not os.path.isdir(BASE_DIR):
    os.makedirs(BASE_DIR, exist_ok=True)

# Secure endpoint: only serves files inside the 'files' directory
@app.route('/read')
def read_file():
    filename = request.args.get('file')
    if not filename:
        abort(400, 'Missing "file" parameter')

    # Prevent directory traversal
    safe_path = os.path.abspath(os.path.join(BASE_DIR, filename))
    if not safe_path.startswith(BASE_DIR + os.sep):
        abort(400, 'Invalid file path')

    if not os.path.isfile(safe_path):
        abort(404, 'File not found')

    try:
        with open(safe_path, 'r') as f:
            data = f.read()
        return Response(data, mimetype='text/plain')
    except Exception:
        abort(500, 'Error reading file')

# Simple health check
@app.route('/')
def index():
    return 'Flask app running with PostgreSQL backend.'

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)