{
    "files": [
        {
            "location": "./../../dockers/CVE-2025-4123/custom_no_tool/docker-compose.yml",
            "content": "version: '3.8'\nservices:\n  web:\n    build:\n      context: ./web\n    ports:\n      - \"5000:5000\"\n    depends_on:\n      - grafana\n      - postgres\n    environment:\n      - DB_HOST=postgres\n      - DB_USER=root\n      - DB_PASSWORD=example\n      - DB_NAME=testdb\n  grafana:\n    image: grafana/grafana:9.5.7\n    ports:\n      - \"3000:3000\"\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=admin\n    restart: always\n  postgres:\n    image: postgres:15\n    restart: always\n    environment:\n      POSTGRES_USER: root\n      POSTGRES_PASSWORD: example\n      POSTGRES_DB: testdb\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - pg_data:/var/lib/postgresql/data\n      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql\nvolumes:\n  pg_data:"
        },
        {
            "location": "./../../dockers/CVE-2025-4123/custom_no_tool/web/Dockerfile",
            "content": "FROM python:3.8-slim\nWORKDIR /app\nCOPY requirements.txt ./\nRUN pip install --no-cache-dir -r requirements.txt\nCOPY app.py ./\nCOPY files/ ./files/\nEXPOSE 5000\nENV FLASK_APP=app.py\nCMD [\"flask\", \"run\", \"--host=0.0.0.0\"]"
        },
        {
            "location": "./../../dockers/CVE-2025-4123/custom_no_tool/web/requirements.txt",
            "content": "Flask==2.0.3\nWerkzeug==2.0.3\npsycopg2-binary==2.9.9"
        },
        {
            "location": "./../../dockers/CVE-2025-4123/custom_no_tool/web/app.py",
            "content": "from flask import Flask, request, abort, Response\nimport os\nimport psycopg2\n\napp = Flask(__name__)\n\n# Database connection (unused in the vulnerable endpoint but illustrates full stack)\n\ndef get_db_connection():\n    return psycopg2.connect(\n        host=os.getenv('DB_HOST'),\n        user=os.getenv('DB_USER'),\n        password=os.getenv('DB_PASSWORD'),\n        dbname=os.getenv('DB_NAME')\n    )\n\n# Base directory for allowed files\nBASE_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'files')\n\n# Ensure the base directory exists at runtime\nif not os.path.isdir(BASE_DIR):\n    os.makedirs(BASE_DIR, exist_ok=True)\n\n# Secure endpoint: only serves files inside the 'files' directory\n@app.route('/read')\ndef read_file():\n    filename = request.args.get('file')\n    if not filename:\n        abort(400, 'Missing \"file\" parameter')\n\n    # Prevent directory traversal\n    safe_path = os.path.abspath(os.path.join(BASE_DIR, filename))\n    if not safe_path.startswith(BASE_DIR + os.sep):\n        abort(400, 'Invalid file path')\n\n    if not os.path.isfile(safe_path):\n        abort(404, 'File not found')\n\n    try:\n        with open(safe_path, 'r') as f:\n            data = f.read()\n        return Response(data, mimetype='text/plain')\n    except Exception:\n        abort(500, 'Error reading file')\n\n# Simple health check\n@app.route('/')\ndef index():\n    return 'Flask app running with PostgreSQL backend.'\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
        },
        {
            "location": "./../../dockers/CVE-2025-4123/custom_no_tool/web/files/README.txt",
            "content": "This is a safe test file.\nYou can read its contents via the /read endpoint using the 'file' query parameter, e.g., /read?file=README.txt"
        },
        {
            "location": "./../../dockers/CVE-2025-4123/custom_no_tool/db/init.sql",
            "content": "CREATE DATABASE testdb;\n\\c testdb;\nCREATE TABLE IF NOT EXISTS users (\n  id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password VARCHAR(255) NOT NULL\n);\nINSERT INTO users (username, password) VALUES ('alice', 'password123'), ('bob', 'letmein');"
        }
    ],
    "directory_tree": "./../../dockers/CVE-2025-4123/custom_no_tool"
}