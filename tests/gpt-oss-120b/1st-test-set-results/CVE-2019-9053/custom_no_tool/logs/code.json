{
    "files": [
        {
            "location": "./../../dockers/CVE-2019-9053/custom_no_tool/docker-compose.yml",
            "content": "services:\n  app:\n    build: ./app\n    ports:\n      - \"3000:3000\"\n    depends_on:\n      db:\n        condition: service_healthy\n      cmsms:\n        condition: service_healthy\n      php:\n        condition: service_healthy\n  db:\n    image: mysql:5.7\n    environment:\n      MYSQL_ROOT_PASSWORD: rootpass\n      MYSQL_DATABASE: testdb\n      MYSQL_USER: testuser\n      MYSQL_PASSWORD: testpass\n    ports:\n      - \"3306:3306\"\n    volumes:\n      - db_data:/var/lib/mysql\n      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql\n    healthcheck:\n      test: [\"CMD\", \"mysqladmin\", \"-uroot\", \"-prootpass\", \"ping\", \"-h\", \"localhost\"]\n      interval: 5s\n      timeout: 5s\n      retries: 5\n  cmsms:\n    image: cmsms/cmsms:2.2.9\n    environment:\n      CMS_DB_HOST: db\n      CMS_DB_NAME: testdb\n      CMS_DB_USER: testuser\n      CMS_DB_PASS: testpass\n    ports:\n      - \"8080:80\"\n    depends_on:\n      db:\n        condition: service_healthy\n  php:\n    image: php:7.4-apache\n    ports:\n      - \"8000:80\"\n    depends_on:\n      cmsms:\n        condition: service_healthy\nvolumes:\n  db_data:"
        },
        {
            "location": "./../../dockers/CVE-2019-9053/custom_no_tool/app/Dockerfile",
            "content": "FROM node:18\nWORKDIR /usr/src/app\n\n# Install required packages: bash, netcat-openbsd, curl and any other utilities\nRUN apt-get update && \\\n    apt-get install -y bash netcat-openbsd curl && \\\n    rm -rf /var/lib/apt/lists/*\n\nCOPY package.json .\nRUN npm install\n\n# Copy application source (including any local files)\nCOPY . .\n\n# Ensure the bundled wait\u2011for\u2011it script is executable\nRUN chmod +x /usr/src/app/wait-for-it.sh\n\nEXPOSE 3000\n\n# Use bash (which is now installed) and wait for MySQL before starting the Node app\nCMD [\"bash\", \"/usr/src/app/wait-for-it.sh\", \"db:3306\", \"--\", \"node\", \"server.js\"]"
        },
        {
            "location": "./../../dockers/CVE-2019-9053/custom_no_tool/app/package.json",
            "content": "{\n  \"name\": \"vulnerable-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"App exposing CVE-2019-9053\",\n  \"main\": \"server.js\",\n  \"scripts\": {\n    \"start\": \"node server.js\"\n  },\n  \"dependencies\": {\n    \"express\": \"4.16.0\",\n    \"mysql\": \"2.18.1\"\n  }\n}"
        },
        {
            "location": "./../../dockers/CVE-2019-9053/custom_no_tool/app/server.js",
            "content": "const express = require('express');\nconst mysql = require('mysql');\nconst app = express();\nconst port = 3000;\n\nconst db = mysql.createConnection({\n  host: 'db',\n  user: 'testuser',\n  password: 'testpass',\n  database: 'testdb'\n});\n\n// Simple reconnection logic in case the DB is not ready yet\nfunction handleDisconnect() {\n  db.connect(err => {\n    if (err) {\n      console.error('DB connection error, retrying in 5s:', err);\n      setTimeout(handleDisconnect, 5000);\n    } else {\n      console.log('Connected to DB');\n    }\n  });\n}\n\nhandleDisconnect();\n\napp.get('/', (req, res) => {\n  db.query('SELECT * FROM secrets', (err, rows) => {\n    if (err) {\n      return res.status(500).send('Error fetching data');\n    }\n    res.json(rows);\n  });\n});\n\napp.listen(port, () => {\n  console.log(`Vulnerable app listening on port ${port}`);\n});"
        },
        {
            "location": "./../../dockers/CVE-2019-9053/custom_no_tool/db/init.sql",
            "content": "CREATE TABLE IF NOT EXISTS secrets (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  secret VARCHAR(255) NOT NULL\n);\nINSERT INTO secrets (secret) VALUES ('CVE-2019-9053 test secret');"
        },
        {
            "location": "./../../dockers/CVE-2019-9053/custom_no_tool/app/wait-for-it.sh",
            "content": "#!/usr/bin/env bash\n#   Use this script to test if a given TCP host/port are available\n#   The script loops until the host/port is reachable (or timeout). Adapted from https://github.com/vishnubob/wait-for-it\nset -e\n\nHOST=\nPORT=\nTIMEOUT=15\n\nusage() {\n  echo \"Usage: $0 host:port [-- command args...]\" 1>&2\n  exit 1\n}\n\nwhile [[ \"$#\" -gt 0 ]]; do\n  case \"$1\" in\n    *:* )\n      HOST=$(printf \"%s\" \"$1\" | cut -d: -f1)\n      PORT=$(printf \"%s\" \"$1\" | cut -d: -f2)\n      shift\n      ;;\n    -- )\n      shift\n      break\n      ;;\n    * )\n      usage\n      ;;\n  esac\ndone\n\ncmd=\"\"\nif [[ \"$#\" -gt 0 ]]; then\n  cmd=\"$@\"\nfi\n\nfor i in `seq $TIMEOUT` ; do\n  nc -z $HOST $PORT >/dev/null 2>&1 && break\n  echo \"Waiting for $HOST:$PORT... ($i/$TIMEOUT)\"\n  sleep 1\ndone\n\nif [[ $i -eq $TIMEOUT ]]; then\n  echo \"Timeout waiting for $HOST:$PORT\"\n  exit 1\nfi\n\nif [[ -n \"$cmd\" ]]; then\n  exec $cmd\nfi"
        }
    ],
    "directory_tree": "./../../dockers/CVE-2019-9053/custom_no_tool"
}