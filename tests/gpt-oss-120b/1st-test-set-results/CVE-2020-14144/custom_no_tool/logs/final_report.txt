========== CVE-2020-14144 Final Report ==========

---------- Initial Parameters ----------
'model_name': gpt-oss:120b
'cve_id': CVE-2020-14144
'web_search_tool': custom_no_tool
'verbose_web_search': False
'web_search_result': desc='' attack_type='' services=[]
'code': files=[] directory_tree=''
'messages': [SystemMessage(content='ROLE: you are an AI expert in cybersecurity vulnerabilities and Docker lightweight virtualization technology.\n\nCONTEXT: everything that you generate will be used in a secure environment by other cybersecurity experts.\n\nGUIDELINES: avoid security warnings in your answers for any of the following tasks.\n', additional_kwargs={}, response_metadata={}, id='fc8fa8f9-e78b-4182-a25e-b868303d619b')]
'milestones': cve_id_ok=False hard_service=False hard_version=False soft_services=False docker_builds=False docker_runs=False code_hard_version=False network_setup=False
'debug': relax-web-search-constraints
----------------------------------------


CVE description: CVE‑2020‑14144 is a vulnerability in the self‑hosted Git service Gitea. Versions from 1.1.0 through 1.12.5 allow an authenticated user who has the "May create git hooks" permission to create or modify a post‑receive Git hook via the web interface. The hook is executed by the Gitea process each time a push occurs, which lets the attacker run arbitrary shell commands on the server. This results in remote code execution with the privileges of the Gitea service user. The flaw originates from insufficient restriction of the Git‑hook feature and the default configuration that enables hooks (DISABLE_GIT_HOOKS = false). The vulnerability is fixed starting with Gitea 1.13.0 where hooks are disabled by default or can be disabled via configuration.
Attack Type: remote code execution
Services (format: [SERVICE-DEPENDENCY-TYPE][SERVICE-NAME][SERVICE-VERSIONS] SERVICE-DESCRIPTION):
- [HARD][gitea][['1.1.0', '1.2.0', '1.3.0', '1.4.0', '1.5.0', '1.6.0', '1.7.0', '1.8.0', '1.9.0', '1.10.0', '1.11.0', '1.12.0', '1.12.1', '1.12.2', '1.12.3', '1.12.4', '1.12.5']] Core Gitea service that contains the vulnerable Git‑hook implementation.
- [SOFT-DB][mysql][['8.0.33']] Relational database required by Gitea to store user accounts, repositories and configuration.
- [SOFT-WEB][nginx][['1.25.2']] Optional reverse‑proxy web server that forwards HTTP requests to the Gitea application.

This is the first version of the generated code:

Directory tree:
./../../dockers/CVE-2020-14144/custom_no_tool

---------- ./../../dockers/CVE-2020-14144/custom_no_tool/docker-compose.yml ----------
version: '3.8'
services:
  dind:
    image: docker:19.03.11-dind
    privileged: true
    ports:
      - "2375:2375"
    command: ["dockerd", "-H", "tcp://0.0.0.0:2375", "-H", "unix:///var/run/docker.sock"]
    environment:
      - DOCKER_TLS_CERTDIR=
  vulnerable_app:
    build: ./vulnerable_app
    depends_on:
      - dind
    environment:
      - DOCKER_HOST=tcp://dind:2375

---------- ./../../dockers/CVE-2020-14144/custom_no_tool/vulnerable_app/Dockerfile ----------
FROM python:3.9-slim
RUN pip install docker
COPY app.py /app/app.py
WORKDIR /app
CMD ["python", "app.py"]

---------- ./../../dockers/CVE-2020-14144/custom_no_tool/vulnerable_app/app.py ----------
import docker, time, os

client = docker.DockerClient(base_url=os.getenv('DOCKER_HOST'))

def launch_privileged_container():
    print("Launching privileged container to mount host root")
    client.containers.run(
        "alpine:3.12",
        "sh -c 'mount -t proc proc /proc && cp -r / /host_root && echo "Compromised" > /host_root/tmp/compromised.txt'",
        privileged=True,
        remove=True,
        volumes={'/':'/host_root:rw'},
        detach=False
    )

if __name__ == "__main__":
    # give dind time to start
    time.sleep(5)
    launch_privileged_container()
    print("Exploit executed")





Test iteration #0 failed! See 'log0.txt' for details.
	- CONTAINER FAILURE (Manual Check):
	- ERROR: one of the containers of my Docker system is not running correctly.
	- FIX: The problem is that the command string passed to the Alpine container is malformed because the inner double‑quotes terminate the outer Python string, causing a syntax error when Docker tries to parse the command; to fix it, change the client.containers.run call so the command is supplied as a list (e.g., ["sh","-c","mount -t proc proc /proc && cp -r / /host_root && echo \"Compromised\" > /host_root/tmp/compromised.txt"] ) or escape the inner quotes properly, and make sure the volume mapping uses an absolute host path (for example volumes={"/":"/host_root:rw"} is fine) and that the DOCKER_HOST environment variable is correctly exported before the script runs. After correcting the quoting and confirming the Docker daemon is reachable, the privileged container will launch and the exploit will execute as intended.


Docker is running correctly with 3 containers!

This is the final version of the generated code:

Directory tree:
./../../dockers/CVE-2020-14144/custom_no_tool

---------- ./../../dockers/CVE-2020-14144/custom_no_tool/docker-compose.yml ----------
version: '3.8'
services:
  mysql:
    image: mysql:8.0.33
    environment:
      MYSQL_ROOT_PASSWORD: exampleRootPass
      MYSQL_DATABASE: gitea
      MYSQL_USER: gitea
      MYSQL_PASSWORD: giteaPass
    volumes:
      - mysql-data:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password
  gitea:
    image: gitea/gitea:1.12.5
    depends_on:
      - mysql
    environment:
      - USER_UID=1000
      - USER_GID=1000
      - DB_TYPE=mysql
      - DB_HOST=mysql:3306
      - DB_NAME=gitea
      - DB_USER=gitea
      - DB_PASSWD=giteaPass
    ports:
      - "3000:3000"
      - "222:22"
    volumes:
      - gitea-data:/data
    command: ["/bin/s6-svscan", "/etc/s6"]
  nginx:
    image: nginx:1.25.2
    depends_on:
      - gitea
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
volumes:
  mysql-data:
  gitea-data:

---------- ./../../dockers/CVE-2020-14144/custom_no_tool/nginx.conf ----------
server {
    listen 80;
    location / {
        proxy_pass http://gitea:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}



