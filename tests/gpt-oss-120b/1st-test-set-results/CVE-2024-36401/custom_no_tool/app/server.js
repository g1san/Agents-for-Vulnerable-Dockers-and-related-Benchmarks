const express = require('express');
const mysql = require('mysql');
const app = express();

app.use(express.json());

const dbConfig = {
  host: process.env.DB_HOST || 'db',
  user: process.env.DB_USER || 'root',
  password: process.env.DB_PASSWORD || 'example',
  database: process.env.DB_NAME || 'vuln'
};

let db;

function connectWithRetry(retries = 10, delay = 3000) {
  db = mysql.createConnection(dbConfig);
  db.connect(err => {
    if (err) {
      if (retries === 0) {
        console.error('Unable to connect to MySQL after multiple attempts:', err);
        process.exit(1);
      }
      console.warn(`MySQL connection failed. Retrying in ${delay}ms... (${retries} attempts left)`);
      setTimeout(() => connectWithRetry(retries - 1, delay), delay);
    } else {
      console.log('Connected to MySQL');
    }
  });
}

connectWithRetry();

// Endpoint that triggers the vulnerability â€“ uses eval to simulate the unsafe execution
app.get('/vuln', (req, res) => {
  const userInput = req.query.input || '';
  try {
    // NOTE: This is intentionally insecure for demonstration purposes
    const result = eval(userInput);
    res.send({ result });
  } catch (e) {
    res.status(500).send({ error: e.message });
  }
});

app.listen(8080, () => {
  console.log('App listening on port 8080');
});