{
    "files": [
        {
            "location": "docker-compose.yml",
            "content": "services:\n  app:\n    build: ./app\n    ports:\n      - \"5000:5000\"\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    user: \"0:0\"\n    depends_on:\n      - db\n      - activemq\n  db:\n    image: mysql:5.7\n    environment:\n      MYSQL_ROOT_PASSWORD: examplepass\n      MYSQL_DATABASE: testdb\n      MYSQL_USER: testuser\n      MYSQL_PASSWORD: testpass\n    ports:\n      - \"3306:3306\"\n    volumes:\n      - db_data:/var/lib/mysql\n      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql\n  activemq:\n    image: rmohr/activemq:5.17.3\n    ports:\n      - \"8161:8161\"\n    environment:\n      ACTIVEMQ_ADMIN_LOGIN: admin\n      ACTIVEMQ_ADMIN_PASSWORD: admin\n    volumes:\n      - activemq_data:/opt/activemq/data\nvolumes:\n  db_data:\n  activemq_data:"
        },
        {
            "location": "app/Dockerfile",
            "content": "FROM python:3.10-buster\n\n# Install required packages including Docker CLI\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n        ca-certificates curl gnupg docker.io && \\\n    rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\nCOPY requirements.txt requirements.txt\nRUN pip install --no-cache-dir -r requirements.txt\nCOPY . .\nEXPOSE 5000\nCMD [\"python\", \"app.py\"]\nUSER root"
        },
        {
            "location": "app/requirements.txt",
            "content": "Flask==2.0.3\nWerkzeug==2.0.3\nrequests==2.28.2"
        },
        {
            "location": "app/app.py",
            "content": "from flask import Flask, request, jsonify\nimport subprocess\nimport os\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return \"Vulnerable app for CVE-2022-41678\"\n\n@app.route('/run', methods=['POST'])\ndef run_container():\n    # This endpoint demonstrates the vulnerability: it allows a client to execute arbitrary Docker commands via the mounted Docker socket.\n    cmd = request.json.get('cmd')\n    if not cmd:\n        return jsonify({'error': 'No command provided'}), 400\n    # Explicit path to docker binary to avoid PATH issues\n    full_cmd = ['/usr/bin/docker', 'run', '--rm', 'alpine', 'sh', '-c', cmd]\n    try:\n        result = subprocess.check_output(full_cmd, stderr=subprocess.STDOUT, text=True)\n        return jsonify({'output': result})\n    except subprocess.CalledProcessError as e:\n        return jsonify({'error': e.output}), 500\n\nif __name__ == '__main__':\n    # Bind to all interfaces so Docker can map the port.\n    app.run(host='0.0.0.0', port=5000)"
        },
        {
            "location": "db/init.sql",
            "content": "CREATE TABLE IF NOT EXISTS users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\nINSERT INTO users (username, password) VALUES ('alice', 'password123'), ('bob', 'secure!');"
        }
    ],
    "directory_tree": "./../../dockers/CVE-2022-41678/custom_no_tool"
}