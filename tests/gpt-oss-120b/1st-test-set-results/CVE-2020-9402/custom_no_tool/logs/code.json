{
    "files": [
        {
            "location": "docker-compose.yml",
            "content": "services:\n  web:\n    build: ./app\n    ports:\n      - \"8080:8000\"\n    depends_on:\n      db:\n        condition: service_healthy\n    environment:\n      DB_HOST: db\n      DB_USER: system\n      DB_PASSWORD: Oradoc_db1\n      DB_NAME: ORCLCDB\n  db:\n    # Use the correct Oracle XE image tag\n    image: gvenzl/oracle-xe:19.3.0-slim\n    environment:\n      ORACLE_PASSWORD: Oradoc_db1\n    ports:\n      - \"1521:1521\"\n    volumes:\n      - db_data:/opt/oracle/oradata\n      - ./db/init.sql:/container-entrypoint-initdb.d/init.sql\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8080\"]\n      interval: 30s\n      timeout: 10s\n      retries: 10\nvolumes:\n  db_data:"
        },
        {
            "location": "app/Dockerfile",
            "content": "FROM python:3.8-bullseye-slim AS builder\n\nENV PYTHONDONTWRITEBYTECODE=1 \\\n    PYTHONUNBUFFERED=1 \\\n    LD_LIBRARY_PATH=/opt/oracle/instantclient:$LD_LIBRARY_PATH\n\n# Install build tools and native libraries needed for Pillow, GDAL and Oracle client\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        gcc \\\n        g++ \\\n        make \\\n        libaio1 libaio-dev \\\n        python3-dev \\\n        libffi-dev \\\n        libjpeg-dev \\\n        zlib1g-dev \\\n        libpng-dev \\\n        libgdal-dev gdal-bin \\\n        build-essential \\\n        unzip \\\n        wget \\\n        ca-certificates \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Install Oracle Instant Client Basic and SDK with required license cookie\nRUN wget --no-check-certificate \\\n        --header \"Cookie: oraclelicense=accept-securebackup-cookie\" \\\n        https://download.oracle.com/otn_software/linux/instantclient/1919000/instantclient-basic-linux.x64-19.19.0.0.0dbru.zip \\\n        -O /tmp/instantclient-basic.zip && \\\n    wget --no-check-certificate \\\n        --header \"Cookie: oraclelicense=accept-securebackup-cookie\" \\\n        https://download.oracle.com/otn_software/linux/instantclient/1919000/instantclient-sdk-linux.x64-19.19.0.0.0dbru.zip \\\n        -O /tmp/instantclient-sdk.zip && \\\n    unzip /tmp/instantclient-basic.zip -d /opt/oracle && \\\n    unzip /tmp/instantclient-sdk.zip -d /opt/oracle && \\\n    rm /tmp/instantclient-basic.zip /tmp/instantclient-sdk.zip && \\\n    ln -s /opt/oracle/instantclient_19_19 /opt/oracle/instantclient && \\\n    echo \"/opt/oracle/instantclient\" > /etc/ld.so.conf.d/oracle-instantclient.conf && ldconfig\n\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install --upgrade pip && pip install -r requirements.txt\n\nCOPY . .\n\nFROM python:3.8-bullseye-slim\n\nENV PYTHONDONTWRITEBYTECODE=1 \\\n    PYTHONUNBUFFERED=1 \\\n    LD_LIBRARY_PATH=/opt/oracle/instantclient:$LD_LIBRARY_PATH\n\n# Copy Oracle Instant Client libraries from builder\nCOPY --from=builder /opt/oracle /opt/oracle\n\n# Install runtime dependencies for Oracle client and GDAL\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n        libaio1 \\\n        libgdal-dev gdal-bin \\\n    && rm -rf /var/lib/apt/lists/* && \\\n    echo \"/opt/oracle/instantclient\" > /etc/ld.so.conf.d/oracle-instantclient.conf && ldconfig\n\nWORKDIR /app\nCOPY --from=builder /app /app\n\nEXPOSE 8000\nCMD [\"python\", \"manage.py\", \"runserver\", \"0.0.0.0:8000\"]"
        },
        {
            "location": "app/requirements.txt",
            "content": "Django==2.2.11\ncx_Oracle==8.3.0\npillow"
        },
        {
            "location": "app/manage.py",
            "content": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"
        },
        {
            "location": "app/project/__init__.py",
            "content": ""
        },
        {
            "location": "app/project/settings.py",
            "content": "import os\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'replace-this-with-a-secure-key'\nDEBUG = True\nALLOWED_HOSTS = ['*']\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'django.contrib.gis',\n    'app',\n]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'project.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\nWSGI_APPLICATION = 'project.wsgi.application'\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.contrib.gis.db.backends.oracle',\n        'NAME': os.getenv('DB_NAME', 'ORCLCDB'),\n        'USER': os.getenv('DB_USER', 'system'),\n        'PASSWORD': os.getenv('DB_PASSWORD', 'Oradoc_db1'),\n        'HOST': os.getenv('DB_HOST', 'db'),\n        'PORT': '1521',\n    }\n}\nAUTH_PASSWORD_VALIDATORS = []\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'"
        },
        {
            "location": "app/project/urls.py",
            "content": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('app.urls')),\n]"
        },
        {
            "location": "app/project/wsgi.py",
            "content": "import os\nfrom django.core.wsgi import get_wsgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\napplication = get_wsgi_application()"
        },
        {
            "location": "app/app/__init__.py",
            "content": ""
        },
        {
            "location": "app/app/models.py",
            "content": "from django.contrib.gis.db import models\n\nclass User(models.Model):\n    username = models.CharField(max_length=50)\n    password = models.CharField(max_length=255)\n\n    def __str__(self):\n        return self.username"
        },
        {
            "location": "app/app/views.py",
            "content": "from django.http import HttpResponse\nfrom .models import User\n\ndef index(request):\n    users = User.objects.all()\n    usernames = ', '.join([u.username for u in users])\n    return HttpResponse(f\"Users: {usernames}\")"
        },
        {
            "location": "app/app/urls.py",
            "content": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]"
        },
        {
            "location": "db/init.sql",
            "content": "CREATE TABLE users (id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, username VARCHAR2(50), password VARCHAR2(255));\nINSERT INTO users (username, password) VALUES ('alice', 'secret1');\nINSERT INTO users (username, password) VALUES ('bob', 'secret2');"
        }
    ],
    "directory_tree": "CVE-2020-9402/custom_no_tool"
}