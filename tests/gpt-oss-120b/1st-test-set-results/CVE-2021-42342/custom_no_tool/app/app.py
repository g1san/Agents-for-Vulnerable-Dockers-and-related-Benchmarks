import os
import pathlib
from flask import Flask, request, abort
import pymysql
app = Flask(__name__)

def get_db_connection():
    return pymysql.connect(
        host=os.getenv('DATABASE_HOST'),
        user=os.getenv('DATABASE_USER'),
        password=os.getenv('DATABASE_PASSWORD'),
        database=os.getenv('DATABASE_NAME'),
        charset='utf8mb4',
        cursorclass=pymysql.cursors.DictCursor
    )

# Hardened endpoint â€“ prevents directory traversal via "file" query parameter
@app.route('/view')
def view_file():
    filename = request.args.get('file')
    if not filename:
        abort(400, 'file parameter required')
    # Disallow path traversal sequences
    if '..' in pathlib.PurePath(filename).parts:
        abort(400, 'Invalid file path')
    base_dir = pathlib.Path('/app/files')
    target_path = (base_dir / filename).resolve()
    if not str(target_path).startswith(str(base_dir)):
        abort(400, 'Invalid file path')
    try:
        with open(target_path, 'r') as f:
            content = f.read()
        return f"<pre>{content}</pre>"
    except Exception as e:
        return str(e), 500

# Simple data display endpoint to confirm DB connectivity
@app.route('/users')
def list_users():
    conn = get_db_connection()
    with conn.cursor() as cur:
        cur.execute('SELECT id, username FROM users')
        rows = cur.fetchall()
    conn.close()
    return {'users': rows}

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)