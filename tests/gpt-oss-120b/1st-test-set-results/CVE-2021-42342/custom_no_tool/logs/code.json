{
    "files": [
        {
            "location": "./../../dockers/CVE-2021-42342/custom_no_tool/docker-compose.yml",
            "content": "version: \"2.4\"\nservices:\n  web:\n    build: ./web\n    ports:\n      - \"5000:5000\"\n    depends_on:\n      db:\n        condition: service_healthy\n    networks:\n      - cve-net\n    environment:\n      FLASK_APP: app.py\n      DB_HOST: db\n      DB_USER: testuser\n      DB_PASSWORD: testpass\n      DB_NAME: testdb\n  db:\n    image: mysql:5.7\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: exampleRootPass\n      MYSQL_DATABASE: testdb\n      MYSQL_USER: testuser\n      MYSQL_PASSWORD: testpass\n    ports:\n      - \"3306:3306\"\n    volumes:\n      - db_data:/var/lib/mysql\n      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro\n    networks:\n      - cve-net\n    healthcheck:\n      test: [\"CMD\", \"mysqladmin\", \"-uroot\", \"-pexampleRootPass\", \"ping\", \"-h\", \"127.0.0.1\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\nnetworks:\n  cve-net:\n    driver: bridge\nvolumes:\n  db_data:"
        },
        {
            "location": "./../../dockers/CVE-2021-42342/custom_no_tool/web/Dockerfile",
            "content": "FROM python:3.8-slim\n\nWORKDIR /app\n\nCOPY requirements.txt .\n\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends build-essential \\\n    && pip install --no-cache-dir -r requirements.txt \\\n    && apt-get purge -y --auto-remove build-essential \\\n    && rm -rf /var/lib/apt/lists/*\n\nCOPY . .\n\nEXPOSE 5000\n\nENV FLASK_APP=app.py\n\nCMD [\"flask\", \"run\", \"--host=0.0.0.0\", \"--port=5000\"]"
        },
        {
            "location": "./../../dockers/CVE-2021-42342/custom_no_tool/web/requirements.txt",
            "content": "Flask==1.1.2\nJinja2<3.0\nMarkupSafe==2.0.1\nmysql-connector-python==8.0.23\nitsdangerous==1.1.0\nWerkzeug<2.0"
        },
        {
            "location": "./../../dockers/CVE-2021-42342/custom_no_tool/web/app.py",
            "content": "from flask import Flask, jsonify\nimport mysql.connector\nimport os\n\napp = Flask(__name__)\n\ndef get_db_connection():\n    return mysql.connector.connect(\n        host=os.getenv('DB_HOST', 'db'),\n        user=os.getenv('DB_USER', 'testuser'),\n        password=os.getenv('DB_PASSWORD', 'testpass'),\n        database=os.getenv('DB_NAME', 'testdb')\n    )\n\n@app.route('/')\ndef index():\n    try:\n        conn = get_db_connection()\n        cursor = conn.cursor()\n        cursor.execute('SELECT COUNT(*) FROM users')\n        count = cursor.fetchone()[0]\n        cursor.close()\n        conn.close()\n        return jsonify({'status': 'ok', 'user_count': count})\n    except Exception as e:\n        return jsonify({'status': 'error', 'message': str(e)}), 500\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
        },
        {
            "location": "./../../dockers/CVE-2021-42342/custom_no_tool/init.sql",
            "content": "CREATE TABLE IF NOT EXISTS users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL\n);\nINSERT INTO users (name) VALUES ('alice'), ('bob');"
        }
    ],
    "directory_tree": "CVE-2021-42342/custom_no_tool"
}