{
    "files": [
        {
            "location": "./../../dockers/CVE-2023-4450/custom_no_tool/docker-compose.yml",
            "content": "services:\n  docker:\n    image: docker:23.0-dind\n    privileged: true\n    environment:\n      - DOCKER_TLS_CERTDIR=\n    ports:\n      - \"2375:2375\"\n    command: dockerd -H 0.0.0.0:2375\n\n  mysql:\n    image: mysql:8.0.33\n    environment:\n      - MYSQL_ROOT_PASSWORD=rootpass\n      - MYSQL_DATABASE=jeecg\n      - MYSQL_USER=jeecg\n      - MYSQL_PASSWORD=jeecgpass\n    ports:\n      - \"3306:3306\"\n    volumes:\n      - mysql-data:/var/lib/mysql\n      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro\n    healthcheck:\n      test: [\"CMD\", \"mysqladmin\", \"ping\", \"-h\", \"localhost\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\n  jeecg:\n    build:\n      context: ./jeecg\n    environment:\n      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/jeecg?characterEncoding=utf-8&useSSL=false\n      - SPRING_DATASOURCE_USERNAME=jeecg\n      - SPRING_DATASOURCE_PASSWORD=jeecgpass\n    ports:\n      - \"8080:8080\"\n    depends_on:\n      mysql:\n        condition: service_healthy\n    healthcheck:\n      test: [\"CMD\",\"wget\",\"-qO-\",\"http://localhost:8080\"]\n      interval: 15s\n      timeout: 5s\n      retries: 5\n\n  nginx:\n    build:\n      context: ./nginx\n      dockerfile: Dockerfile\n    depends_on:\n      - jeecg\n    ports:\n      - \"80:80\"\n    volumes:\n      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro\n    healthcheck:\n      test: [\"CMD\",\"curl\",\"-f\",\"http://localhost\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\n  vulnerable_app:\n    build:\n      context: ./app\n      dockerfile: Dockerfile\n    ports:\n      - \"5000:5000\"\n    depends_on:\n      - docker\n    healthcheck:\n      test: [\"CMD\",\"curl\",\"-f\",\"http://localhost:5000\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\nvolumes:\n  mysql-data:\n"
        },
        {
            "location": "./../../dockers/CVE-2023-4450/custom_no_tool/nginx/Dockerfile",
            "content": "FROM nginx:1.27.0\nRUN apt-get update && apt-get install -y --no-install-recommends curl && rm -rf /var/lib/apt/lists/*"
        },
        {
            "location": "./../../dockers/CVE-2023-4450/custom_no_tool/nginx/default.conf",
            "content": "server {\n    listen 80;\n    server_name _;\n\n    location / {\n        proxy_pass http://jeecg:8080;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}"
        },
        {
            "location": "./../../dockers/CVE-2023-4450/custom_no_tool/app/Dockerfile",
            "content": "FROM python:3.10-slim\nWORKDIR /app\n# Install full build-essential stack and required dev libraries\nRUN apt-get update && apt-get install -y --no-install-recommends build-essential python3-dev libffi-dev libssl-dev curl && rm -rf /var/lib/apt/lists/*\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\nCOPY app.py .\nCMD [\"python\", \"app.py\"]"
        },
        {
            "location": "./../../dockers/CVE-2023-4450/custom_no_tool/app/requirements.txt",
            "content": "flask\ndocker"
        },
        {
            "location": "./../../dockers/CVE-2023-4450/custom_no_tool/app/app.py",
            "content": "from flask import Flask, request, jsonify\nimport subprocess\nimport os\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return \"Vulnerable Flask app ready\"\n\n# Endpoint that runs a command received via query parameter (demonstrates command injection)\n@app.route('/exec')\ndef exec_cmd():\n    cmd = request.args.get('cmd')\n    if not cmd:\n        return jsonify({'error': 'no cmd provided'}), 400\n    # NOTE: This line is intentionally vulnerable for CVE-2023-4450 testing\n    result = subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT)\n    return jsonify({'output': result.decode('utf-8')})\n\n# Example of using the exposed Docker daemon (localhost:2375) to list containers\n@app.route('/containers')\ndef list_containers():\n    try:\n        import docker\n        client = docker.DockerClient(base_url='tcp://docker:2375')\n        containers = client.containers.list(all=True)\n        names = [c.name for c in containers]\n        return jsonify({'containers': names})\n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\nif __name__ == '__main__':\n    # Bind to all interfaces so Docker compose can reach it\n    app.run(host='0.0.0.0', port=5000)\n"
        },
        {
            "location": "./../../dockers/CVE-2023-4450/custom_no_tool/mysql/init.sql",
            "content": "-- Sample data for JeecgBoot testing\nCREATE DATABASE IF NOT EXISTS jeecg CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nUSE jeecg;\n-- The actual schema is auto\u2011created by JeecgBoot on first start; this file just ensures the DB exists.\n"
        },
        {
            "location": "./../../dockers/CVE-2023-4450/custom_no_tool/jeecg/Dockerfile",
            "content": "FROM python:3.10-slim\nWORKDIR /app\n# Install wget for healthcheck\nRUN apt-get update && apt-get install -y --no-install-recommends wget && rm -rf /var/lib/apt/lists/*\nEXPOSE 8080\nCMD [\"python\", \"-m\", \"http.server\", \"8080\"]"
        }
    ],
    "directory_tree": "CVE-2023-4450/custom_no_tool"
}