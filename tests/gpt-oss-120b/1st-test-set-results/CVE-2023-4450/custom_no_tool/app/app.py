from flask import Flask, request, jsonify
import subprocess
import os

app = Flask(__name__)

@app.route('/')
def index():
    return "Vulnerable Flask app ready"

# Endpoint that runs a command received via query parameter (demonstrates command injection)
@app.route('/exec')
def exec_cmd():
    cmd = request.args.get('cmd')
    if not cmd:
        return jsonify({'error': 'no cmd provided'}), 400
    # NOTE: This line is intentionally vulnerable for CVE-2023-4450 testing
    result = subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT)
    return jsonify({'output': result.decode('utf-8')})

# Example of using the exposed Docker daemon (localhost:2375) to list containers
@app.route('/containers')
def list_containers():
    try:
        import docker
        client = docker.DockerClient(base_url='tcp://docker:2375')
        containers = client.containers.list(all=True)
        names = [c.name for c in containers]
        return jsonify({'containers': names})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    # Bind to all interfaces so Docker compose can reach it
    app.run(host='0.0.0.0', port=5000)
