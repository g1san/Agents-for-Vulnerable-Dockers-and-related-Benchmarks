{
    "files": [
        {
            "location": "./../../dockers/CVE-2015-5254/custom_no_tool/docker-compose.yml",
            "content": "version: '3.9'\nservices:\n  web:\n    build: ./app\n    ports:\n      - \"5000:5000\"\n    depends_on:\n      db:\n        condition: service_healthy\n      activemq:\n        condition: service_started\n    environment:\n      - FLASK_APP=app.py\n      - FLASK_RUN_HOST=0.0.0.0\n  db:\n    build: ./db\n    ports:\n      - \"3306:3306\"\n    environment:\n      - MYSQL_ROOT_PASSWORD=rootpass\n      - MYSQL_DATABASE=vuln_db\n      - MYSQL_USER=vuln_user\n      - MYSQL_PASSWORD=vuln_pass\n    command: --default-authentication-plugin=mysql_native_password\n    healthcheck:\n      test: [\"CMD\", \"mysqladmin\", \"ping\", \"-uroot\", \"-prootpass\", \"-h\", \"localhost\", \"--silent\"]\n      interval: 5s\n      timeout: 3s\n      retries: 5\n  activemq:\n    image: rmohr/activemq:5.12.0\n    environment:\n      - ACTIVEMQ_ADMIN_LOGIN=admin\n      - ACTIVEMQ_ADMIN_PASSWORD=admin\n    ports:\n      - \"61616:61616\""
        },
        {
            "location": "./../../dockers/CVE-2015-5254/custom_no_tool/app/Dockerfile",
            "content": "FROM python:3.9-slim\nWORKDIR /app\nRUN apt-get update && apt-get install -y --no-install-recommends gcc libpq-dev default-libmysqlclient-dev && rm -rf /var/lib/apt/lists/*\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\nCOPY . .\nEXPOSE 5000\nCMD [\"python\", \"app.py\"]"
        },
        {
            "location": "./../../dockers/CVE-2015-5254/custom_no_tool/app/requirements.txt",
            "content": "Flask==1.1.2\nWerkzeug==1.0.1\npymysql==1.0.2\nJinja2==2.11.3\nMarkupSafe==2.0.1\nitsdangerous==1.1.0\nstomp.py==8.1.0"
        },
        {
            "location": "./../../dockers/CVE-2015-5254/custom_no_tool/app/app.py",
            "content": "import time\nimport subprocess\nimport json\nfrom flask import Flask, request, jsonify\nimport pymysql\nimport stomp\n\napp = Flask(__name__)\n\ndef get_db():\n    \"\"\"Lazily create a MySQL connection and ensure the notes table exists.\n    Retries for up to 30 seconds before giving up.\n    \"\"\"\n    if not hasattr(app, \"db_conn\"):\n        start = time.time()\n        while time.time() - start < 30:\n            try:\n                conn = pymysql.connect(host='db', user='vuln_user', password='vuln_pass', database='vuln_db')\n                cur = conn.cursor()\n                cur.execute('CREATE TABLE IF NOT EXISTS notes (id INT AUTO_INCREMENT PRIMARY KEY, content TEXT)')\n                conn.commit()\n                app.db_conn = conn\n                app.db_cur = cur\n                break\n            except Exception:\n                time.sleep(2)\n        else:\n            app.db_conn = None\n            app.db_cur = None\n    return getattr(app, \"db_conn\", None), getattr(app, \"db_cur\", None)\n\ndef send_to_activemq(message):\n    \"\"\"Send a simple text message to ActiveMQ using STOMP.\n    The broker is reachable at hostname 'activemq' and port 61616.\n    \"\"\"\n    conn = stomp.Connection([('activemq', 61616)])\n    conn.start()\n    conn.connect(wait=True)\n    conn.send(body=message, destination='/queue/test')\n    conn.disconnect()\n\n@app.route('/')\ndef index():\n    return 'Vulnerable Flask app running.'\n\n@app.route('/exec')\ndef exec_cmd():\n    cmd = request.args.get('cmd')\n    if not cmd:\n        return jsonify({'error': 'No cmd parameter provided'}), 400\n    try:\n        result = subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT, timeout=5)\n        return jsonify({'output': result.decode()})\n    except subprocess.CalledProcessError as e:\n        return jsonify({'error': e.output.decode()}), 500\n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/notes', methods=['GET', 'POST'])\ndef notes():\n    conn, cur = get_db()\n    if conn is None or cur is None:\n        return jsonify({'error': 'Database not available'}), 500\n    if request.method == 'POST':\n        data = request.get_json()\n        content = data.get('content', '')\n        cur.execute('INSERT INTO notes (content) VALUES (%s)', (content,))\n        conn.commit()\n        return jsonify({'status': 'saved'}), 201\n    else:\n        cur.execute('SELECT id, content FROM notes')\n        rows = cur.fetchall()\n        return jsonify([{'id': r[0], 'content': r[1]} for r in rows])\n\n@app.route('/activemq', methods=['POST'])\ndef activemq_endpoint():\n    data = request.get_json(silent=True) or {}\n    message = data.get('message', 'default message')\n    try:\n        send_to_activemq(message)\n        return jsonify({'status': 'message sent'}), 200\n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\n"
        },
        {
            "location": "./../../dockers/CVE-2015-5254/custom_no_tool/db/Dockerfile",
            "content": "FROM mysql:5.7\nENV MYSQL_ROOT_PASSWORD=rootpass\nENV MYSQL_DATABASE=vuln_db\nENV MYSQL_USER=vuln_user\nENV MYSQL_PASSWORD=vuln_pass\nCOPY init.sql /docker-entrypoint-initdb.d/"
        },
        {
            "location": "./../../dockers/CVE-2015-5254/custom_no_tool/db/init.sql",
            "content": "CREATE TABLE IF NOT EXISTS notes (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    content TEXT NOT NULL\n);\nINSERT INTO notes (content) VALUES ('test note 1'), ('test note 2');\n"
        }
    ],
    "directory_tree": "./../../dockers/CVE-2015-5254/custom_no_tool"
}