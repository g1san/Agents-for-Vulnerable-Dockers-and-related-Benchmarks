import time
import subprocess
import json
from flask import Flask, request, jsonify
import pymysql
import stomp

app = Flask(__name__)

def get_db():
    """Lazily create a MySQL connection and ensure the notes table exists.
    Retries for up to 30 seconds before giving up.
    """
    if not hasattr(app, "db_conn"):
        start = time.time()
        while time.time() - start < 30:
            try:
                conn = pymysql.connect(host='db', user='vuln_user', password='vuln_pass', database='vuln_db')
                cur = conn.cursor()
                cur.execute('CREATE TABLE IF NOT EXISTS notes (id INT AUTO_INCREMENT PRIMARY KEY, content TEXT)')
                conn.commit()
                app.db_conn = conn
                app.db_cur = cur
                break
            except Exception:
                time.sleep(2)
        else:
            app.db_conn = None
            app.db_cur = None
    return getattr(app, "db_conn", None), getattr(app, "db_cur", None)

def send_to_activemq(message):
    """Send a simple text message to ActiveMQ using STOMP.
    The broker is reachable at hostname 'activemq' and port 61616.
    """
    conn = stomp.Connection([('activemq', 61616)])
    conn.start()
    conn.connect(wait=True)
    conn.send(body=message, destination='/queue/test')
    conn.disconnect()

@app.route('/')
def index():
    return 'Vulnerable Flask app running.'

@app.route('/exec')
def exec_cmd():
    cmd = request.args.get('cmd')
    if not cmd:
        return jsonify({'error': 'No cmd parameter provided'}), 400
    try:
        result = subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT, timeout=5)
        return jsonify({'output': result.decode()})
    except subprocess.CalledProcessError as e:
        return jsonify({'error': e.output.decode()}), 500
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/notes', methods=['GET', 'POST'])
def notes():
    conn, cur = get_db()
    if conn is None or cur is None:
        return jsonify({'error': 'Database not available'}), 500
    if request.method == 'POST':
        data = request.get_json()
        content = data.get('content', '')
        cur.execute('INSERT INTO notes (content) VALUES (%s)', (content,))
        conn.commit()
        return jsonify({'status': 'saved'}), 201
    else:
        cur.execute('SELECT id, content FROM notes')
        rows = cur.fetchall()
        return jsonify([{'id': r[0], 'content': r[1]} for r in rows])

@app.route('/activemq', methods=['POST'])
def activemq_endpoint():
    data = request.get_json(silent=True) or {}
    message = data.get('message', 'default message')
    try:
        send_to_activemq(message)
        return jsonify({'status': 'message sent'}), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
