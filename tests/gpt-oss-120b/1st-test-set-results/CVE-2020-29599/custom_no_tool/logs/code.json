{
    "files": [
        {
            "location": "./../../dockers/CVE-2020-29599/custom_no_tool/docker-compose.yml",
            "content": "services:\n  app:\n    build: ./app\n    ports:\n      - \"8080:8080\"\n    depends_on:\n      - db\n    environment:\n      - DB_HOST=db\n      - DB_USER=postgres\n      - DB_PASSWORD=example\n      - DB_NAME=vuln_db\n    restart: unless-stopped\n  db:\n    build: ./db\n    ports:\n      - \"5432:5432\"\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: example\n      POSTGRES_DB: vuln_db\n    volumes:\n      - db_data:/var/lib/postgresql/data\n    restart: unless-stopped\nvolumes:\n  db_data:"
        },
        {
            "location": "./../../dockers/CVE-2020-29599/custom_no_tool/app/Dockerfile",
            "content": "FROM node:14-alpine3.12\nWORKDIR /usr/src/app\n# Install ImageMagick and required runtime dependencies\nRUN apk update && apk add --no-cache \\\n    imagemagick \\\n    ghostscript \\\n    libxml2 \\\n    libjpeg-turbo \\\n    libpng \\\n    freetype\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nEXPOSE 8080\nCMD [\"node\", \"server.js\"]"
        },
        {
            "location": "./../../dockers/CVE-2020-29599/custom_no_tool/app/package.json",
            "content": "{\n  \"name\": \"vulnerable-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Demo app vulnerable to CVE-2020-29599\",\n  \"main\": \"server.js\",\n  \"scripts\": {\n    \"start\": \"node server.js\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.17.1\",\n    \"pg\": \"^8.5.1\"\n  }\n}"
        },
        {
            "location": "./../../dockers/CVE-2020-29599/custom_no_tool/app/server.js",
            "content": "const express = require('express');\nconst { exec } = require('child_process');\nconst { Pool } = require('pg');\n\nconst app = express();\nconst port = 8080;\n\nconst pool = new Pool({\n  host: process.env.DB_HOST || 'db',\n  user: process.env.DB_USER || 'postgres',\n  password: process.env.DB_PASSWORD || 'example',\n  database: process.env.DB_NAME || 'vuln_db',\n});\n\napp.get('/', (req, res) => {\n  res.send('Vulnerable app ready');\n});\n\n// Vulnerable endpoint \u2013 command injection (CVE-2020-29599 demonstration)\napp.get('/run', (req, res) => {\n  const cmd = req.query.cmd || '';\n  // No sanitisation \u2013 directly executed\n  exec(cmd, (error, stdout, stderr) => {\n    if (error) {\n      return res.status(500).send(`Error: ${stderr}`);\n    }\n    res.send(`Output: ${stdout}`);\n  });\n});\n\n// Simple DB query endpoint\napp.get('/users', async (req, res) => {\n  try {\n    const result = await pool.query('SELECT id, name FROM users');\n    res.json(result.rows);\n  } catch (err) {\n    res.status(500).send('Database error');\n  }\n});\n\napp.listen(port, () => {\n  console.log(`App listening on port ${port}`);\n});"
        },
        {
            "location": "./../../dockers/CVE-2020-29599/custom_no_tool/db/Dockerfile",
            "content": "FROM postgres:9.6\n# Copy initialization script into the proper directory with correct ownership\nCOPY init.sql /docker-entrypoint-initdb.d/init.sql\nRUN chown postgres:postgres /docker-entrypoint-initdb.d/init.sql\nEXPOSE 5432"
        },
        {
            "location": "./../../dockers/CVE-2020-29599/custom_no_tool/db/init.sql",
            "content": "CREATE TABLE IF NOT EXISTS users (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(100) NOT NULL\n);\nINSERT INTO users (name) VALUES ('alice'), ('bob'), ('charlie');"
        }
    ],
    "directory_tree": "CVE-2020-29599/custom_no_tool"
}