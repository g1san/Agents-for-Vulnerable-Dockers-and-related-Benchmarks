{
    "files": [
        {
            "location": "./../../dockers/CVE-2016-9086/custom_no_tool/docker-compose.yml",
            "content": "services:\n  web:\n    build: ./web\n    ports:\n      - \"8080:80\"\n    depends_on:\n      - db\n    environment:\n      - DATABASE_HOST=db\n      - DATABASE_NAME=vulnapp\n      - DATABASE_USER=vulnuser\n      - DATABASE_PASSWORD=vulnpass\n  db:\n    image: postgres:9.6\n    environment:\n      POSTGRES_DB: vulnapp\n      POSTGRES_USER: vulnuser\n      POSTGRES_PASSWORD: vulnpass\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - db_data:/var/lib/postgresql/data\n      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql\n  gitlab:\n    image: gitlab/gitlab-ce:8.13.2-ce.0\n    restart: always\n    hostname: \"gitlab.example.com\"\n    environment:\n      GITLAB_OMNIBUS_CONFIG: |\n        external_url 'http://localhost:8081'\n    ports:\n      - \"8081:80\"\n      - \"8443:443\"\n      - \"2222:22\"\n    volumes:\n      - gitlab_config:/etc/gitlab\n      - gitlab_logs:/var/log/gitlab\n      - gitlab_data:/var/opt/gitlab\nvolumes:\n  db_data:\n  gitlab_config:\n  gitlab_logs:\n  gitlab_data:"
        },
        {
            "location": "./../../dockers/CVE-2016-9086/custom_no_tool/web/Dockerfile",
            "content": "FROM python:3.11-alpine\nWORKDIR /app\nCOPY requirements.txt ./\nRUN apk add --no-cache --virtual .build-deps \\\n        gcc musl-dev postgresql-dev && \\\n    pip install --no-cache-dir --upgrade pip && \\\n    pip install --no-cache-dir -r requirements.txt && \\\n    apk del .build-deps && \\\n    apk add --no-cache postgresql-client && \\\n    rm -rf /root/.cache\nCOPY . .\nCOPY wait-for-db.sh /app/wait-for-db.sh\nRUN chmod +x /app/wait-for-db.sh\nEXPOSE 80\nCMD [\"/app/wait-for-db.sh\", \"gunicorn\", \"-b\", \"0.0.0.0:80\", \"app:app\"]"
        },
        {
            "location": "./../../dockers/CVE-2016-9086/custom_no_tool/web/app.py",
            "content": "# -*- coding: utf-8 -*-\nimport os\nfrom flask import Flask, request, abort\nimport psycopg2\nimport json\n\napp = Flask(__name__)\n\n# Safe endpoint \u2013 parses JSON instead of unsafe pickle deserialization\n@app.route('/safe', methods=['POST'])\ndef safe():\n    try:\n        data = request.get_json(force=True)\n        return f\"Received: {json.dumps(data)}\"\n    except Exception as e:\n        abort(400, str(e))\n\ndef get_db_connection():\n    conn = psycopg2.connect(\n        host=os.getenv('DATABASE_HOST'),\n        database=os.getenv('DATABASE_NAME'),\n        user=os.getenv('DATABASE_USER'),\n        password=os.getenv('DATABASE_PASSWORD')\n    )\n    return conn\n\n@app.route('/')\ndef index():\n    conn = get_db_connection()\n    cur = conn.cursor()\n    cur.execute('SELECT message FROM greetings LIMIT 1;')\n    row = cur.fetchone()\n    conn.close()\n    return row[0] if row else 'Hello from vulnerable app!'\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=80)"
        },
        {
            "location": "./../../dockers/CVE-2016-9086/custom_no_tool/web/requirements.txt",
            "content": "Flask==2.3.3\ngunicorn==22.0.0\npsycopg2-binary==2.9.9"
        },
        {
            "location": "./../../dockers/CVE-2016-9086/custom_no_tool/web/wait-for-db.sh",
            "content": "#!/bin/sh\nset -e\nHOST=\"${DATABASE_HOST}\"\nPORT=5432\n# Wait until pg_isready reports the server is accepting connections\nuntil pg_isready -h \"$HOST\" -p \"$PORT\" > /dev/null 2>&1; do\n  echo \"Waiting for PostgreSQL at $HOST:$PORT...\"\n  sleep 2\ndone\n# Exec the command passed to the script (gunicorn)\nexec \"$@\""
        },
        {
            "location": "./../../dockers/CVE-2016-9086/custom_no_tool/db/init.sql",
            "content": "CREATE TABLE greetings (id SERIAL PRIMARY KEY, message TEXT);\nINSERT INTO greetings (message) VALUES ('Welcome to the CVE-2016-9086 vulnerable demo!');"
        }
    ],
    "directory_tree": "CVE-2016-9086/custom_no_tool"
}