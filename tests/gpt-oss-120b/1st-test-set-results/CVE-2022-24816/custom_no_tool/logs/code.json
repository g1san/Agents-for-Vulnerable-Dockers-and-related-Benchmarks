{
    "files": [
        {
            "location": "./../../dockers/CVE-2022-24816/custom_no_tool/docker-compose.yml",
            "content": "version: \"3.9\"\nservices:\n  vulnerable_app:\n    build: ./app\n    ports:\n      - \"8080:5000\"\n    environment:\n      - FLASK_ENV=development\n    depends_on:\n      - db\n      - geoserver\n  db:\n    image: postgres:13-alpine\n    environment:\n      POSTGRES_USER: testuser\n      POSTGRES_PASSWORD: testpass\n      POSTGRES_DB: testdb\n    ports:\n      - \"5432:5432\"\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U testuser\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n    volumes:\n      - db_data:/var/lib/postgresql/data\n      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql\n  geoserver:\n    build: ./geoserver\n    ports:\n      - \"8081:8080\"\n    healthcheck:\n      test: [\"CMD\", \"wget\", \"--spider\", \"-q\", \"http://localhost:8080/geoserver/wps\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\nvolumes:\n  db_data:"
        },
        {
            "location": "./../../dockers/CVE-2022-24816/custom_no_tool/app/Dockerfile",
            "content": "FROM python:3.9-slim\nWORKDIR /app\n# Install build tools, PostgreSQL client libraries, netcat, dos2unix and bash for the wait\u2011for\u2011it script\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    gcc \\\n    libpq-dev \\\n    python3-dev \\\n    netcat-openbsd \\\n    dos2unix \\\n    bash \\\n    && rm -rf /var/lib/apt/lists/*\n# Install Python dependencies (pin Werkzeug to a compatible version)\nRUN pip install Flask==2.0.1 Werkzeug==2.0.3 psycopg2-binary\n# Copy application code and helper script\nCOPY app.py .\nCOPY wait-for-it.sh .\n# Ensure the script has Unix line endings and is executable\nRUN dos2unix wait-for-it.sh && chmod +x wait-for-it.sh\nEXPOSE 5000\n# Wait for the database to become healthy before starting the app\nCMD [\"sh\", \"-c\", \"./wait-for-it.sh db:5432 -- python app.py\"]"
        },
        {
            "location": "./../../dockers/CVE-2022-24816/custom_no_tool/app/wait-for-it.sh",
            "content": "#!/usr/bin/env bash\n# wait-for-it.sh script (simplified version)\n# Usage: ./wait-for-it.sh host:port -- command args\nset -e\nHOSTPORT=$1\nshift\n# Extract host and port\nHOST=$(echo $HOSTPORT | cut -d':' -f1)\nPORT=$(echo $HOSTPORT | cut -d':' -f2)\n# Timeout after 60 seconds\nTIMEOUT=60\nSTART_TIME=$(date +%s)\nwhile ! nc -z $HOST $PORT >/dev/null 2>&1; do\n  echo \"Waiting for $HOST:$PORT...\"\n  sleep 1\n  CURRENT_TIME=$(date +%s)\n  ELAPSED=$((CURRENT_TIME - START_TIME))\n  if [ $ELAPSED -ge $TIMEOUT ]; then\n    echo \"Timeout waiting for $HOST:$PORT\"\n    exit 1\n  fi\ndone\n# Execute the remaining command\nexec \"$@\""
        },
        {
            "location": "./../../dockers/CVE-2022-24816/custom_no_tool/app/app.py",
            "content": "from flask import Flask, jsonify\nimport psycopg2\nimport os\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return jsonify({'status': 'ok'})\n\nif __name__ == '__main__':\n    # Simple connection test to ensure DB is reachable\n    conn = psycopg2.connect(\n        host='db',\n        dbname=os.getenv('POSTGRES_DB', 'testdb'),\n        user=os.getenv('POSTGRES_USER', 'testuser'),\n        password=os.getenv('POSTGRES_PASSWORD', 'testpass')\n    )\n    conn.close()\n    app.run(host='0.0.0.0', port=5000)"
        },
        {
            "location": "./../../dockers/CVE-2022-24816/custom_no_tool/geoserver/Dockerfile",
            "content": "FROM geoserver/geoserver:2.17.2\n# Switch to root to install packages, then revert to the original non\u2011root user\nUSER root\nRUN apt-get update && apt-get install -y wget && rm -rf /var/lib/apt/lists/*\nUSER geoserver"
        },
        {
            "location": "./../../dockers/CVE-2022-24816/custom_no_tool/db/init.sql",
            "content": "CREATE TABLE public.test (\n    id SERIAL PRIMARY KEY,\n    name TEXT\n);\nINSERT INTO public.test (name) VALUES ('sample data');"
        }
    ],
    "directory_tree": "CVE-2022-24816/custom_no_tool"
}