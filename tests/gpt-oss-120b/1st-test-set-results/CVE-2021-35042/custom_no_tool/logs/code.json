{
    "files": [
        {
            "location": "./../../dockers/CVE-2021-35042/custom_no_tool/docker-compose.yml",
            "content": "services:\n  web:\n    build: ./app\n    ports:\n      - \"8000:8000\"\n    environment:\n      - DB_HOST=db\n      - DB_NAME=demo\n      - DB_USER=demo\n      - DB_PASSWORD=demopass\n    depends_on:\n      db:\n        condition: service_healthy\n    # entrypoint is defined in the Dockerfile, no need for an explicit command here\n  db:\n    image: postgres:13\n    environment:\n      POSTGRES_DB: demo\n      POSTGRES_USER: demo\n      POSTGRES_PASSWORD: demopass\n    volumes:\n      - db_data:/var/lib/postgresql/data\n      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql\n    ports:\n      - \"5432:5432\"\n    healthcheck:\n      test: [\"CMD\", \"pg_isready\", \"-U\", \"demo\"]\n      interval: 5s\n      timeout: 5s\n      retries: 5\nvolumes:\n  db_data:"
        },
        {
            "location": "./../../dockers/CVE-2021-35042/custom_no_tool/app/Dockerfile",
            "content": "FROM python:3.9-slim\n# Install PostgreSQL client utilities needed for pg_isready\nRUN apt-get update && apt-get install -y --no-install-recommends postgresql-client && rm -rf /var/lib/apt/lists/*\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\nCOPY . .\nRUN chmod +x ./wait-for-db.sh\nEXPOSE 8000\nENTRYPOINT [\"./wait-for-db.sh\"]"
        },
        {
            "location": "./../../dockers/CVE-2021-35042/custom_no_tool/app/requirements.txt",
            "content": "Django==3.1.12\npsycopg2-binary"
        },
        {
            "location": "./../../dockers/CVE-2021-35042/custom_no_tool/app/manage.py",
            "content": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"
        },
        {
            "location": "./../../dockers/CVE-2021-35042/custom_no_tool/app/project/__init__.py",
            "content": ""
        },
        {
            "location": "./../../dockers/CVE-2021-35042/custom_no_tool/app/project/settings.py",
            "content": "import os\nfrom pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'replace-this-with-a-secure-key'\nDEBUG = True\nALLOWED_HOSTS = ['*']\n\nINSTALLED_APPS = [\n    'django.contrib.contenttypes',\n    'django.contrib.staticfiles',\n    'vulnerable',\n]\n\nMIDDLEWARE = []\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = []\nWSGI_APPLICATION = 'project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'HOST': os.getenv('DB_HOST', 'db'),\n        'NAME': os.getenv('DB_NAME', 'demo'),\n        'USER': os.getenv('DB_USER', 'demo'),\n        'PASSWORD': os.getenv('DB_PASSWORD', 'demopass'),\n        'PORT': '5432',\n    }\n}\n\nSTATIC_URL = '/static/'\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"
        },
        {
            "location": "./../../dockers/CVE-2021-35042/custom_no_tool/app/project/urls.py",
            "content": "from django.urls import path\nfrom vulnerable import views\n\nurlpatterns = [\n    path('users/', views.user_list, name='user_list'),\n]"
        },
        {
            "location": "./../../dockers/CVE-2021-35042/custom_no_tool/app/project/wsgi.py",
            "content": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\napplication = get_wsgi_application()"
        },
        {
            "location": "./../../dockers/CVE-2021-35042/custom_no_tool/app/vulnerable/__init__.py",
            "content": ""
        },
        {
            "location": "./../../dockers/CVE-2021-35042/custom_no_tool/app/vulnerable/models.py",
            "content": "from django.db import models\n\nclass User(models.Model):\n    username = models.CharField(max_length=50)\n    password = models.CharField(max_length=50)\n\n    def __str__(self):\n        return self.username"
        },
        {
            "location": "./../../dockers/CVE-2021-35042/custom_no_tool/app/vulnerable/views.py",
            "content": "from django.http import HttpResponse\nfrom .models import User\n\ndef user_list(request):\n    order = request.GET.get('order_by', 'id')\n    # Vulnerable: directly pass user\u2011controlled value to order_by()\n    users = User.objects.all().order_by(order)\n    data = ', '.join([f\"{u.username}:{u.password}\" for u in users])\n    return HttpResponse(data or 'No users')"
        },
        {
            "location": "./../../dockers/CVE-2021-35042/custom_no_tool/db/init.sql",
            "content": "CREATE TABLE IF NOT EXISTS vulnerable_user (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50),\n    password VARCHAR(50)\n);\nINSERT INTO vulnerable_user (username, password) VALUES ('admin', 'adminpass');"
        },
        {
            "location": "./../../dockers/CVE-2021-35042/custom_no_tool/app/wait-for-db.sh",
            "content": "#!/bin/sh\nset -e\n\n# Export password for pg_isready and psql commands\nexport PGPASSWORD=\"${DB_PASSWORD:-demopass}\"\n\nhost=\"${DB_HOST:-db}\"\nport=\"${DB_PORT:-5432}\"\nuser=\"${DB_USER:-demo}\"\n# Wait for the PostgreSQL server to accept connections (no specific DB needed)\nuntil pg_isready -h \"$host\" -p \"$port\" -U \"$user\" >/dev/null 2>&1; do\n  echo \"Waiting for PostgreSQL at $host:$port...\"\n  sleep 2\ndone\n\necho \"PostgreSQL is up - executing migrations\"\npython manage.py migrate --noinput\n\necho \"Starting Django server\"\nexec python manage.py runserver 0.0.0.0:8000"
        }
    ],
    "directory_tree": "./../../dockers/CVE-2021-35042/custom_no_tool"
}