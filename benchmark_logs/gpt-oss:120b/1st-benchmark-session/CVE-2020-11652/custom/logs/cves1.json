{
  "version": "15.0.6",
  "vulnerabilities": [
    {
      "id": "a868414d6827d73c7db879fc6a9d1afcf5494f08b865a42578b81a1870ddcc9c",
      "category": "container_scanning",
      "message": "CVE-2025-54410 on github.com/docker/docker@24.0.6+incompatible",
      "description": "Moby is an open source container framework developed by Docker Inc. that is distributed as Docker Engine, Mirantis Container Runtime, and various other downstream projects/products. The Moby daemon component (dockerd), which is developed as [moby/moby](https://github.com/moby/moby) is commonly referred to as Docker, or Docker Engine.\n\nFirewalld is a daemon used by some Linux distributions to provide a dynamically managed firewall. When Firewalld is running, Docker uses its iptables backend to create rules, including rules to isolate containers in one bridge network from containers in other bridge networks.\n\n### Impact\n\nThe iptables rules created by Docker are removed when firewalld is reloaded using, for example \"firewall-cmd --reload\", \"killall -HUP firewalld\", or \"systemctl reload firewalld\".\n\nWhen that happens, Docker must re-create the rules. However, in affected versions of Docker, the iptables rules that isolate containers in different bridge networks from each other are not re-created.\n\nOnce these rules have been removed, containers have access to any port, on any container, in any non-internal bridge network, running on the Docker host.\n\nContainers running in networks created with `--internal` or equivalent have no access to other networks. Containers that are only connected to these networks remain isolated after a firewalld reload.\n\nWhere Docker Engine is not running in the host's network namespace, it is unaffected. Including, for example, Rootless Mode, and Docker Desktop.\n\n### Patches\n\nMoby releases 28.0.0 and newer are not affected. A fix is available in moby release 25.0.13.\n\n### Workarounds\nAfter reloading firewalld, either:\n- Restart the docker daemon,\n- Re-create bridge networks, or\n- Use rootless mode.\n\n### References\nhttps://firewalld.org/\nhttps://firewalld.org/documentation/howto/reload-firewalld.html",
      "cve": "CVE-2025-54410",
      "severity": "Low",
      "confidence": "Unknown",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/docker/docker@24.0.6%2Bincompatible"
          },
          "version": "24.0.6+incompatible"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-54410",
          "value": "CVE-2025-54410",
          "url": "https://scout.docker.com/v/CVE-2025-54410?s=github&n=docker&ns=github.com%2Fdocker&t=golang&vr=%3C%3D25.0.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-54410?s=github&n=docker&ns=github.com%2Fdocker&t=golang&vr=%3C%3D25.0.12"
        }
      ]
    },
    {
      "id": "d3e07f0140c4c96cfe619b89f59a03a8c64faac6e96f3ddff45de313652a37fb",
      "category": "container_scanning",
      "message": "CVE-2025-54410 on github.com/docker/docker@24.0.5-0.20230714235725-36e9e796c6fc+incompatible",
      "description": "Moby is an open source container framework developed by Docker Inc. that is distributed as Docker Engine, Mirantis Container Runtime, and various other downstream projects/products. The Moby daemon component (dockerd), which is developed as [moby/moby](https://github.com/moby/moby) is commonly referred to as Docker, or Docker Engine.\n\nFirewalld is a daemon used by some Linux distributions to provide a dynamically managed firewall. When Firewalld is running, Docker uses its iptables backend to create rules, including rules to isolate containers in one bridge network from containers in other bridge networks.\n\n### Impact\n\nThe iptables rules created by Docker are removed when firewalld is reloaded using, for example \"firewall-cmd --reload\", \"killall -HUP firewalld\", or \"systemctl reload firewalld\".\n\nWhen that happens, Docker must re-create the rules. However, in affected versions of Docker, the iptables rules that isolate containers in different bridge networks from each other are not re-created.\n\nOnce these rules have been removed, containers have access to any port, on any container, in any non-internal bridge network, running on the Docker host.\n\nContainers running in networks created with `--internal` or equivalent have no access to other networks. Containers that are only connected to these networks remain isolated after a firewalld reload.\n\nWhere Docker Engine is not running in the host's network namespace, it is unaffected. Including, for example, Rootless Mode, and Docker Desktop.\n\n### Patches\n\nMoby releases 28.0.0 and newer are not affected. A fix is available in moby release 25.0.13.\n\n### Workarounds\nAfter reloading firewalld, either:\n- Restart the docker daemon,\n- Re-create bridge networks, or\n- Use rootless mode.\n\n### References\nhttps://firewalld.org/\nhttps://firewalld.org/documentation/howto/reload-firewalld.html",
      "cve": "CVE-2025-54410",
      "severity": "Low",
      "confidence": "Unknown",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/docker/docker@24.0.5-0.20230714235725-36e9e796c6fc%2Bincompatible"
          },
          "version": "24.0.5-0.20230714235725-36e9e796c6fc+incompatible"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-54410",
          "value": "CVE-2025-54410",
          "url": "https://scout.docker.com/v/CVE-2025-54410?s=github&n=docker&ns=github.com%2Fdocker&t=golang&vr=%3C%3D25.0.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-54410?s=github&n=docker&ns=github.com%2Fdocker&t=golang&vr=%3C%3D25.0.12"
        }
      ]
    },
    {
      "id": "73919d30ee61a8533612baf6398f6ccea9b7390df7198a677a56de23f99b422b",
      "category": "container_scanning",
      "message": "GHSA-7ww5-4wqc-m92c on github.com/containerd/containerd@1.7.6",
      "description": "# /sys/devices/virtual/powercap accessible by default to containers\n\nIntel's RAPL (Running Average Power Limit) feature, introduced by the Sandy Bridge microarchitecture, provides software insights into hardware energy consumption. To facilitate this, Intel introduced the powercap framework in Linux kernel 3.13, which reads values via relevant MSRs (model specific registers) and provides unprivileged userspace access via `sysfs`. As RAPL is an interface to access a hardware feature, it is only available when running on bare metal with the module compiled into the kernel.\n\nBy 2019, it was realized that in some cases unprivileged access to RAPL readings could be exploited as a power-based side-channel against security features including AES-NI (potentially inside a SGX enclave) and KASLR (kernel address space layout randomization). Also known as the [PLATYPUS attack](https://platypusattack.com/), Intel assigned [CVE-2020-8694](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8694) and [CVE-2020-8695](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8695), and AMD assigned [CVE-2020-12912](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-12912).\n\nSeveral mitigations were applied; Intel reduced the sampling resolution via a microcode update, and the Linux kernel [prevents access by non-root users](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=949dd0104c496fa7c14991a23c03c62e44637e71) since 5.10. However, this kernel-based mitigation does not apply to many container-based scenarios:\n* Unless using user namespaces, root inside a container has the same level of privilege as root outside the container, but with a slightly more narrow view of the system\n* `sysfs` is mounted inside containers read-only; however only read access is needed to carry out this attack on an unpatched CPU\n\nWhile this is not a direct vulnerability in container runtimes, defense in depth and safe defaults are valuable and preferred, especially as this poses a risk to multi-tenant container environments. This is provided by masking `/sys/devices/virtual/powercap` in the default mount configuration, and adding an additional set of rules to deny it in the default AppArmor profile.\n\nWhile `sysfs` is not the only way to read from the RAPL subsystem, other ways of accessing it require additional capabilities such as `CAP_SYS_RAWIO` which is not available to containers by default, or `perf` paranoia level less than 1, which is a non-default kernel tunable.\n\n## References\n\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8694\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8695\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-12912\n* https://platypusattack.com/\n* https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=949dd0104c496fa7c14991a23c03c62e44637e71\n* https://web.eece.maine.edu/~vweaver/projects/rapl/",
      "cve": "GHSA-7ww5-4wqc-m92c",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/containerd/containerd@1.7.6 to 1.7.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/containerd/containerd@1.7.6"
          },
          "version": "1.7.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "GHSA-7ww5-4wqc-m92c",
          "value": "GHSA-7ww5-4wqc-m92c",
          "url": "https://scout.docker.com/v/GHSA-7ww5-4wqc-m92c?s=github&n=containerd&ns=github.com%2Fcontainerd&t=golang&vr=%3E%3D1.7.0%2C%3C%3D1.7.10"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/GHSA-7ww5-4wqc-m92c?s=github&n=containerd&ns=github.com%2Fcontainerd&t=golang&vr=%3E%3D1.7.0%2C%3C%3D1.7.10"
        }
      ]
    },
    {
      "id": "a9adb00b5c1ae118e6bb5c876b5552613a7195feb8d5a3da359c26072759a96b",
      "category": "container_scanning",
      "message": "GHSA-7ww5-4wqc-m92c on github.com/containerd/containerd@1.7.2",
      "description": "# /sys/devices/virtual/powercap accessible by default to containers\n\nIntel's RAPL (Running Average Power Limit) feature, introduced by the Sandy Bridge microarchitecture, provides software insights into hardware energy consumption. To facilitate this, Intel introduced the powercap framework in Linux kernel 3.13, which reads values via relevant MSRs (model specific registers) and provides unprivileged userspace access via `sysfs`. As RAPL is an interface to access a hardware feature, it is only available when running on bare metal with the module compiled into the kernel.\n\nBy 2019, it was realized that in some cases unprivileged access to RAPL readings could be exploited as a power-based side-channel against security features including AES-NI (potentially inside a SGX enclave) and KASLR (kernel address space layout randomization). Also known as the [PLATYPUS attack](https://platypusattack.com/), Intel assigned [CVE-2020-8694](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8694) and [CVE-2020-8695](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8695), and AMD assigned [CVE-2020-12912](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-12912).\n\nSeveral mitigations were applied; Intel reduced the sampling resolution via a microcode update, and the Linux kernel [prevents access by non-root users](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=949dd0104c496fa7c14991a23c03c62e44637e71) since 5.10. However, this kernel-based mitigation does not apply to many container-based scenarios:\n* Unless using user namespaces, root inside a container has the same level of privilege as root outside the container, but with a slightly more narrow view of the system\n* `sysfs` is mounted inside containers read-only; however only read access is needed to carry out this attack on an unpatched CPU\n\nWhile this is not a direct vulnerability in container runtimes, defense in depth and safe defaults are valuable and preferred, especially as this poses a risk to multi-tenant container environments. This is provided by masking `/sys/devices/virtual/powercap` in the default mount configuration, and adding an additional set of rules to deny it in the default AppArmor profile.\n\nWhile `sysfs` is not the only way to read from the RAPL subsystem, other ways of accessing it require additional capabilities such as `CAP_SYS_RAWIO` which is not available to containers by default, or `perf` paranoia level less than 1, which is a non-default kernel tunable.\n\n## References\n\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8694\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8695\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-12912\n* https://platypusattack.com/\n* https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=949dd0104c496fa7c14991a23c03c62e44637e71\n* https://web.eece.maine.edu/~vweaver/projects/rapl/",
      "cve": "GHSA-7ww5-4wqc-m92c",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/containerd/containerd@1.7.2 to 1.7.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/containerd/containerd@1.7.2"
          },
          "version": "1.7.2"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "GHSA-7ww5-4wqc-m92c",
          "value": "GHSA-7ww5-4wqc-m92c",
          "url": "https://scout.docker.com/v/GHSA-7ww5-4wqc-m92c?s=github&n=containerd&ns=github.com%2Fcontainerd&t=golang&vr=%3E%3D1.7.0%2C%3C%3D1.7.10"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/GHSA-7ww5-4wqc-m92c?s=github&n=containerd&ns=github.com%2Fcontainerd&t=golang&vr=%3E%3D1.7.0%2C%3C%3D1.7.10"
        }
      ]
    },
    {
      "id": "5896179a0df0708c250da9c0970631264fb673fc4625255ac7ab64d7ad4d7e20",
      "category": "container_scanning",
      "message": "GHSA-jq35-85cj-fj4p on github.com/docker/docker@24.0.6+incompatible",
      "description": "Intel's RAPL (Running Average Power Limit) feature, introduced by the Sandy Bridge microarchitecture, provides software insights into hardware energy consumption. To facilitate this, Intel introduced the powercap framework in Linux kernel 3.13, which reads values via relevant MSRs (model specific registers) and provides unprivileged userspace access via `sysfs`. As RAPL is an interface to access a hardware feature, it is only available when running on bare metal with the module compiled into the kernel.\n\nBy 2019, it was realized that in some cases unprivileged access to RAPL readings could be exploited as a power-based side-channel against security features including AES-NI (potentially inside a SGX enclave) and KASLR (kernel address space layout randomization). Also known as the [PLATYPUS attack](https://platypusattack.com/), Intel assigned [CVE-2020-8694](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8694) and [CVE-2020-8695](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8695), and AMD assigned [CVE-2020-12912](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-12912).\n\nSeveral mitigations were applied; Intel reduced the sampling resolution via a microcode update, and the Linux kernel [prevents access by non-root users](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=949dd0104c496fa7c14991a23c03c62e44637e71) since 5.10. However, this kernel-based mitigation does not apply to many container-based scenarios:\n* Unless using user namespaces, root inside a container has the same level of privilege as root outside the container, but with a slightly more narrow view of the system\n* `sysfs` is mounted inside containers read-only; however only read access is needed to carry out this attack on an unpatched CPU\n\nWhile this is not a direct vulnerability in container runtimes, defense in depth and safe defaults are valuable and preferred, especially as this poses a risk to multi-tenant container environments running directly on affected hardware. This is provided by masking `/sys/devices/virtual/powercap` in the default mount configuration, and adding an additional set of rules to deny it in the default AppArmor profile.\n\nWhile `sysfs` is not the only way to read from the RAPL subsystem, other ways of accessing it require additional capabilities such as `CAP_SYS_RAWIO` which is not available to containers by default, or `perf` paranoia level less than 1, which is a non-default kernel tunable.\n\n## References\n\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8694\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8695\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-12912\n* https://platypusattack.com/\n* https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=949dd0104c496fa7c14991a23c03c62e44637e71\n* https://web.eece.maine.edu/~vweaver/projects/rapl/",
      "cve": "GHSA-jq35-85cj-fj4p",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/docker/docker@24.0.6+incompatible to 24.0.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/docker/docker@24.0.6%2Bincompatible"
          },
          "version": "24.0.6+incompatible"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "GHSA-jq35-85cj-fj4p",
          "value": "GHSA-jq35-85cj-fj4p",
          "url": "https://scout.docker.com/v/GHSA-jq35-85cj-fj4p?s=github&n=docker&ns=github.com%2Fdocker&t=golang&vr=%3E%3D24.0.0%2C%3C24.0.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/GHSA-jq35-85cj-fj4p?s=github&n=docker&ns=github.com%2Fdocker&t=golang&vr=%3E%3D24.0.0%2C%3C24.0.7"
        }
      ]
    },
    {
      "id": "08fe8a0ff2c053de45cc77f7a533186b1330fe5f6837c346a0d347734867bb6a",
      "category": "container_scanning",
      "message": "CVE-2023-6992 on alpine/zlib@1.2.13-r1",
      "cve": "CVE-2023-6992",
      "severity": "Medium",
      "confidence": "Unknown",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/zlib@1.2.13-r1?os_name=alpine&os_version=3.18"
          },
          "version": "1.2.13-r1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-6992",
          "value": "CVE-2023-6992",
          "url": "https://scout.docker.com/v/CVE-2023-6992?s=alpine&n=zlib&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C%3D1.2.13-r1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-6992?s=alpine&n=zlib&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C%3D1.2.13-r1"
        }
      ]
    },
    {
      "id": "df18b9c55fec59290e56fcee03e56383c1088dcd76840c7e894e47f6166a5d8d",
      "category": "container_scanning",
      "message": "CVE-2025-22866 on stdlib@1.21.1",
      "description": "Due to the usage of a variable time instruction in the assembly implementation of an internal function, a small number of bits of secret scalars are leaked on the ppc64le architecture. Due to the way this function is used, we do not believe this leakage is enough to allow recovery of the private key when P-256 is used in any well known protocols.",
      "cve": "CVE-2025-22866",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.21.1 to 1.22.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.21.1"
          },
          "version": "1.21.1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-22866",
          "value": "CVE-2025-22866",
          "url": "https://scout.docker.com/v/CVE-2025-22866?s=golang&n=stdlib&t=golang&vr=%3C1.22.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-22866?s=golang&n=stdlib&t=golang&vr=%3C1.22.12"
        }
      ]
    },
    {
      "id": "6ca09876484382bf6cf26e8071a5c7e756d2a1783a22665f91d7108fd72a690d",
      "category": "container_scanning",
      "message": "CVE-2025-22866 on stdlib@1.19.9",
      "description": "Due to the usage of a variable time instruction in the assembly implementation of an internal function, a small number of bits of secret scalars are leaked on the ppc64le architecture. Due to the way this function is used, we do not believe this leakage is enough to allow recovery of the private key when P-256 is used in any well known protocols.",
      "cve": "CVE-2025-22866",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.9 to 1.22.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.9"
          },
          "version": "1.19.9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-22866",
          "value": "CVE-2025-22866",
          "url": "https://scout.docker.com/v/CVE-2025-22866?s=golang&n=stdlib&t=golang&vr=%3C1.22.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-22866?s=golang&n=stdlib&t=golang&vr=%3C1.22.12"
        }
      ]
    },
    {
      "id": "efb17aeb8b5b1287dcc8151d475afc7d2b0825ec8984ffb24f2b96c046485070",
      "category": "container_scanning",
      "message": "CVE-2025-22866 on stdlib@1.20.6",
      "description": "Due to the usage of a variable time instruction in the assembly implementation of an internal function, a small number of bits of secret scalars are leaked on the ppc64le architecture. Due to the way this function is used, we do not believe this leakage is enough to allow recovery of the private key when P-256 is used in any well known protocols.",
      "cve": "CVE-2025-22866",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.6 to 1.22.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.6"
          },
          "version": "1.20.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-22866",
          "value": "CVE-2025-22866",
          "url": "https://scout.docker.com/v/CVE-2025-22866?s=golang&n=stdlib&t=golang&vr=%3C1.22.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-22866?s=golang&n=stdlib&t=golang&vr=%3C1.22.12"
        }
      ]
    },
    {
      "id": "0b04a9ac33826ab7064e9ec17fb20e87dd05a31aa78bd2d838711f930efb3f05",
      "category": "container_scanning",
      "message": "CVE-2024-13176 on alpine/openssl@3.1.3-r0",
      "cve": "CVE-2024-13176",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@3.1.3-r0 to 3.1.8-r0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@3.1.3-r0?os_name=alpine&os_version=3.18"
          },
          "version": "3.1.3-r0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-13176",
          "value": "CVE-2024-13176",
          "url": "https://scout.docker.com/v/CVE-2024-13176?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.8-r0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-13176?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.8-r0"
        }
      ]
    },
    {
      "id": "5f2ce51c68bb43cb5950c21bd2efcee2b2a437e11e6bcc72191afc35f6e24c94",
      "category": "container_scanning",
      "message": "CVE-2025-0495 on github.com/docker/buildx@0.11.2",
      "description": "### Impact\nSome cache backends allow configuring their credentials by setting secrets directly as attribute values in `cache-to/cache-from` configuration. If this was done by the user, these secure values could be captured together with OpenTelemetry trace as part of the arguments and flags for the traced CLI command. Passing tokens to Github cache backend via environment variables or using registry authentication is not affected.\n\nIf you passed a token value like this and use a custom OpenTelemetry collector for computing traces you should make sure that your traces are kept secure. OpenTelemetry traces are also saved in BuildKit daemon's history records.\n\n### Patches\nIssue has been fixed in Buildx v0.21.3 or newer.\n\n### Workarounds\nAvoid passing cache backend credentials with CLI arguments. Make sure access to traces and BuildKit history records is kept secure.",
      "cve": "CVE-2025-0495",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/docker/buildx@0.11.2 to 0.21.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/docker/buildx@0.11.2"
          },
          "version": "0.11.2"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-0495",
          "value": "CVE-2025-0495",
          "url": "https://scout.docker.com/v/CVE-2025-0495?s=github&n=buildx&ns=github.com%2Fdocker&t=golang&vr=%3C%3D0.21.2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-0495?s=github&n=buildx&ns=github.com%2Fdocker&t=golang&vr=%3C%3D0.21.2"
        }
      ]
    },
    {
      "id": "39b58903195beb8f2a887d7a5b6e2f5df63b9297f0997791ead20bad38645f21",
      "category": "container_scanning",
      "message": "CVE-2023-45289 on stdlib@1.21.1",
      "description": "When following an HTTP redirect to a domain which is not a subdomain match or exact match of the initial domain, an http.Client does not forward sensitive headers such as \"Authorization\" or \"Cookie\". For example, a redirect from foo.com to www.foo.com will forward the Authorization header, but a redirect to bar.com will not.\n\nA maliciously crafted HTTP redirect could cause sensitive headers to be unexpectedly forwarded.",
      "cve": "CVE-2023-45289",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.21.1 to 1.21.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.21.1"
          },
          "version": "1.21.1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45289",
          "value": "CVE-2023-45289",
          "url": "https://scout.docker.com/v/CVE-2023-45289?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45289?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ]
    },
    {
      "id": "63fbdd93acf64cecd50f3a237baf96c5ab4ebb54b3e7b4072da8b1f234b2c949",
      "category": "container_scanning",
      "message": "CVE-2023-45289 on stdlib@1.19.9",
      "description": "When following an HTTP redirect to a domain which is not a subdomain match or exact match of the initial domain, an http.Client does not forward sensitive headers such as \"Authorization\" or \"Cookie\". For example, a redirect from foo.com to www.foo.com will forward the Authorization header, but a redirect to bar.com will not.\n\nA maliciously crafted HTTP redirect could cause sensitive headers to be unexpectedly forwarded.",
      "cve": "CVE-2023-45289",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.9 to 1.21.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.9"
          },
          "version": "1.19.9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45289",
          "value": "CVE-2023-45289",
          "url": "https://scout.docker.com/v/CVE-2023-45289?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45289?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ]
    },
    {
      "id": "0df92eb2ca2bf250a1dc80e75746263f6715e9b93c41e24e0a8a38daf87dbc7d",
      "category": "container_scanning",
      "message": "CVE-2023-45289 on stdlib@1.20.6",
      "description": "When following an HTTP redirect to a domain which is not a subdomain match or exact match of the initial domain, an http.Client does not forward sensitive headers such as \"Authorization\" or \"Cookie\". For example, a redirect from foo.com to www.foo.com will forward the Authorization header, but a redirect to bar.com will not.\n\nA maliciously crafted HTTP redirect could cause sensitive headers to be unexpectedly forwarded.",
      "cve": "CVE-2023-45289",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.6 to 1.21.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.6"
          },
          "version": "1.20.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45289",
          "value": "CVE-2023-45289",
          "url": "https://scout.docker.com/v/CVE-2023-45289?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45289?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ]
    },
    {
      "id": "8026160cc5c8d3e11a2934362de6d671d135c063fb8aea337347bfcd191be7a7",
      "category": "container_scanning",
      "message": "CVE-2024-34155 on stdlib@1.20.6",
      "description": "Calling any of the Parse functions on Go source code which contains deeply nested literals can cause a panic due to stack exhaustion.",
      "cve": "CVE-2024-34155",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.6 to 1.22.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.6"
          },
          "version": "1.20.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-34155",
          "value": "CVE-2024-34155",
          "url": "https://scout.docker.com/v/CVE-2024-34155?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-34155?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ]
    },
    {
      "id": "632c5e978d9a716f98c03ca5e41fc4e3053439208ed34c7ca81939af092fbc27",
      "category": "container_scanning",
      "message": "CVE-2024-34155 on stdlib@1.21.1",
      "description": "Calling any of the Parse functions on Go source code which contains deeply nested literals can cause a panic due to stack exhaustion.",
      "cve": "CVE-2024-34155",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.21.1 to 1.22.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.21.1"
          },
          "version": "1.21.1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-34155",
          "value": "CVE-2024-34155",
          "url": "https://scout.docker.com/v/CVE-2024-34155?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-34155?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ]
    },
    {
      "id": "163786e43869be72960edd9383dedd3f65c7c1ed5d06ea3ee2da2b9c09058bee",
      "category": "container_scanning",
      "message": "CVE-2024-34155 on stdlib@1.19.9",
      "description": "Calling any of the Parse functions on Go source code which contains deeply nested literals can cause a panic due to stack exhaustion.",
      "cve": "CVE-2024-34155",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.9 to 1.22.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.9"
          },
          "version": "1.19.9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-34155",
          "value": "CVE-2024-34155",
          "url": "https://scout.docker.com/v/CVE-2024-34155?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-34155?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ]
    },
    {
      "id": "65dd339c6b5dbb0b62b4b440a86d0ea7ed0e64d0c4fbd7f1fb1f58a346b06998",
      "category": "container_scanning",
      "message": "CVE-2024-9143 on alpine/openssl@3.1.3-r0",
      "cve": "CVE-2024-9143",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@3.1.3-r0 to 3.1.7-r1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@3.1.3-r0?os_name=alpine&os_version=3.18"
          },
          "version": "3.1.3-r0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-9143",
          "value": "CVE-2024-9143",
          "url": "https://scout.docker.com/v/CVE-2024-9143?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.7-r1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-9143?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.7-r1"
        }
      ]
    },
    {
      "id": "760963e0ce66220847dff80e292a85d76eca152fe7c12005f4465ff9c08dc528",
      "category": "container_scanning",
      "message": "CVE-2025-22870 on golang.org/x/net@0.8.0",
      "description": "Matching of hosts against proxy patterns can improperly treat an IPv6 zone ID as a hostname component. For example, when the NO_PROXY environment variable is set to \"*.example.com\", a request to \"[::1%25.example.com]:80` will incorrectly match and not be proxied.",
      "cve": "CVE-2025-22870",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/net@0.8.0 to 0.36.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/net@0.8.0"
          },
          "version": "0.8.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-22870",
          "value": "CVE-2025-22870",
          "url": "https://scout.docker.com/v/CVE-2025-22870?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.36.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-22870?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.36.0"
        }
      ]
    },
    {
      "id": "f0aeef5fb378447bcee9c83419bd0c1cf018f607f94beacdd2e2e84ab7412638",
      "category": "container_scanning",
      "message": "CVE-2025-22870 on golang.org/x/net@0.12.0",
      "description": "Matching of hosts against proxy patterns can improperly treat an IPv6 zone ID as a hostname component. For example, when the NO_PROXY environment variable is set to \"*.example.com\", a request to \"[::1%25.example.com]:80` will incorrectly match and not be proxied.",
      "cve": "CVE-2025-22870",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/net@0.12.0 to 0.36.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/net@0.12.0"
          },
          "version": "0.12.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-22870",
          "value": "CVE-2025-22870",
          "url": "https://scout.docker.com/v/CVE-2025-22870?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.36.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-22870?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.36.0"
        }
      ]
    },
    {
      "id": "651fcc8f4c92f63a1054b73fc1448b3e45a1af715a90649d35cb466c2ea79991",
      "category": "container_scanning",
      "message": "CVE-2024-40635 on github.com/containerd/containerd@1.7.2",
      "description": "### Impact\nA bug was found in containerd where containers launched with a User set as a `UID:GID` larger than the maximum 32-bit signed integer can cause an overflow condition where the container ultimately runs as root (UID 0). This could cause unexpected behavior for environments that require containers to run as a non-root user.\n\n### Patches\nThis bug has been fixed in the following containerd versions: \n\n* 2.0.4 (Fixed in https://github.com/containerd/containerd/commit/1a43cb6a1035441f9aca8f5666a9b3ef9e70ab20)\n* 1.7.27 (Fixed in https://github.com/containerd/containerd/commit/05044ec0a9a75232cad458027ca83437aae3f4da)\n* 1.6.38 (Fixed in https://github.com/containerd/containerd/commit/cf158e884cfe4812a6c371b59e4ea9bc4c46e51a)\n\nUsers should update to these versions to resolve the issue.\n\n### Workarounds\nEnsure that only trusted images are used and that only trusted users have permissions to import images.\n\n### Credits\nThe containerd project would like to thank [Benjamin Koltermann](https://github.com/p4ck3t0) and [emxll](https://github.com/emxll) for responsibly disclosing this issue in accordance with the [containerd security policy](https://github.com/containerd/project/blob/main/SECURITY.md).\n\n### References\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-40635\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [containerd](https://github.com/containerd/containerd/issues/new/choose)\n* Email us at [security@containerd.io](mailto:security@containerd.io)\n\nTo report a security issue in containerd:\n* [Report a new vulnerability](https://github.com/containerd/containerd/security/advisories/new)\n* Email us at [security@containerd.io](mailto:security@containerd.io)",
      "cve": "CVE-2024-40635",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/containerd/containerd@1.7.2 to 1.7.27",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/containerd/containerd@1.7.2"
          },
          "version": "1.7.2"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-40635",
          "value": "CVE-2024-40635",
          "url": "https://scout.docker.com/v/CVE-2024-40635?s=github&n=containerd&ns=github.com%2Fcontainerd&t=golang&vr=%3E%3D1.7.0-beta.0%2C%3C1.7.27"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-40635?s=github&n=containerd&ns=github.com%2Fcontainerd&t=golang&vr=%3E%3D1.7.0-beta.0%2C%3C1.7.27"
        }
      ]
    },
    {
      "id": "601163f6af362cccb3d9eb90138ba4920c690931947b4518036eee1f46da7651",
      "category": "container_scanning",
      "message": "CVE-2024-40635 on github.com/containerd/containerd@1.7.6",
      "description": "### Impact\nA bug was found in containerd where containers launched with a User set as a `UID:GID` larger than the maximum 32-bit signed integer can cause an overflow condition where the container ultimately runs as root (UID 0). This could cause unexpected behavior for environments that require containers to run as a non-root user.\n\n### Patches\nThis bug has been fixed in the following containerd versions: \n\n* 2.0.4 (Fixed in https://github.com/containerd/containerd/commit/1a43cb6a1035441f9aca8f5666a9b3ef9e70ab20)\n* 1.7.27 (Fixed in https://github.com/containerd/containerd/commit/05044ec0a9a75232cad458027ca83437aae3f4da)\n* 1.6.38 (Fixed in https://github.com/containerd/containerd/commit/cf158e884cfe4812a6c371b59e4ea9bc4c46e51a)\n\nUsers should update to these versions to resolve the issue.\n\n### Workarounds\nEnsure that only trusted images are used and that only trusted users have permissions to import images.\n\n### Credits\nThe containerd project would like to thank [Benjamin Koltermann](https://github.com/p4ck3t0) and [emxll](https://github.com/emxll) for responsibly disclosing this issue in accordance with the [containerd security policy](https://github.com/containerd/project/blob/main/SECURITY.md).\n\n### References\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-40635\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [containerd](https://github.com/containerd/containerd/issues/new/choose)\n* Email us at [security@containerd.io](mailto:security@containerd.io)\n\nTo report a security issue in containerd:\n* [Report a new vulnerability](https://github.com/containerd/containerd/security/advisories/new)\n* Email us at [security@containerd.io](mailto:security@containerd.io)",
      "cve": "CVE-2024-40635",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/containerd/containerd@1.7.6 to 1.7.27",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/containerd/containerd@1.7.6"
          },
          "version": "1.7.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-40635",
          "value": "CVE-2024-40635",
          "url": "https://scout.docker.com/v/CVE-2024-40635?s=github&n=containerd&ns=github.com%2Fcontainerd&t=golang&vr=%3E%3D1.7.0-beta.0%2C%3C1.7.27"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-40635?s=github&n=containerd&ns=github.com%2Fcontainerd&t=golang&vr=%3E%3D1.7.0-beta.0%2C%3C1.7.27"
        }
      ]
    },
    {
      "id": "0330751841e255dc074c4066fd0514cf8cba5b4555f28ef947d19e24f30922be",
      "category": "container_scanning",
      "message": "CVE-2024-45310 on github.com/opencontainers/runc@1.1.7",
      "description": "### Impact\nrunc 1.1.13 and earlier as well as 1.2.0-rc2 and earlier can be tricked into\ncreating empty files or directories in arbitrary locations in the host\nfilesystem by sharing a volume between two containers and exploiting a race\nwith os.MkdirAll. While this can be used to create empty files, existing\nfiles **will not** be truncated.\n\nAn attacker must have the ability to start containers using some kind of custom\nvolume configuration. Containers using user namespaces are still affected, but\nthe scope of places an attacker can create inodes can be significantly reduced.\nSufficiently strict LSM policies (SELinux/Apparmor) can also in principle block\nthis attack -- we suspect the industry standard SELinux policy may restrict\nthis attack's scope but the exact scope of protection hasn't been analysed.\n\nThis is exploitable using runc directly as well as through Docker and\nKubernetes.\n\nThe CVSS score for this vulnerability is\nCVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:N/I:L/A:N (Low severity, 3.6).\n\n### Workarounds\nUsing user namespaces restricts this attack fairly significantly such that the\nattacker can only create inodes in directories that the remapped root\nuser/group has write access to. Unless the root user is remapped to an actual\nuser on the host (such as with rootless containers that don't use\n/etc/sub[ug]id), this in practice means that an attacker would only be able to\ncreate inodes in world-writable directories.\n\nA strict enough SELinux or AppArmor policy could in principle also restrict the\nscope if a specific label is applied to the runc runtime, though we haven't\nthoroughly tested to what extent the standard existing policies block this\nattack nor what exact policies are needed to sufficiently restrict this attack.\n\n### Patches\nFixed in runc v1.1.14 and v1.2.0-rc3.\n\n* `main` patches:\n  * https://github.com/opencontainers/runc/pull/4359\n  *  https://github.com/opencontainers/runc/commit/63c2908164f3a1daea455bf5bcd8d363d70328c7\n* `release-1.1` patches:\n  * https://github.com/opencontainers/runc/commit/8781993968fd964ac723ff5f360b6f259e809a3e\n  * https://github.com/opencontainers/runc/commit/f0b652ea61ff6750a8fcc69865d45a7abf37accf\n\n### Credits\nThanks to Rodrigo Campos Catelin (@rata) and Alban Crequy (@alban) from\nMicrosoft for discovering and reporting this vulnerability.",
      "cve": "CVE-2024-45310",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/opencontainers/runc@1.1.7 to 1.1.14",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/opencontainers/runc@1.1.7"
          },
          "version": "1.1.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-45310",
          "value": "CVE-2024-45310",
          "url": "https://scout.docker.com/v/CVE-2024-45310?s=github&n=runc&ns=github.com%2Fopencontainers&t=golang&vr=%3C1.1.14"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-45310?s=github&n=runc&ns=github.com%2Fopencontainers&t=golang&vr=%3C1.1.14"
        }
      ]
    },
    {
      "id": "3841274b151edfc6ee3964a3da0d17276ca7ed91000fd020c061543f2ed78e6a",
      "category": "container_scanning",
      "message": "CVE-2023-29409 on stdlib@1.19.9",
      "description": "Extremely large RSA keys in certificate chains can cause a client/server to expend significant CPU time verifying signatures.\n\nWith fix, the size of RSA keys transmitted during handshakes is restricted to <= 8192 bits.\n\nBased on a survey of publicly trusted RSA keys, there are currently only three certificates in circulation with keys larger than this, and all three appear to be test certificates that are not actively deployed. It is possible there are larger keys in use in private PKIs, but we target the web PKI, so causing breakage here in the interests of increasing the default safety of users of crypto/tls seems reasonable.",
      "cve": "CVE-2023-29409",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.9 to 1.19.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.9"
          },
          "version": "1.19.9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-29409",
          "value": "CVE-2023-29409",
          "url": "https://scout.docker.com/v/CVE-2023-29409?s=golang&n=stdlib&t=golang&vr=%3C1.19.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-29409?s=golang&n=stdlib&t=golang&vr=%3C1.19.12"
        }
      ]
    },
    {
      "id": "951bd1d058b636d2852cf41cd539a0439d8b4e91bd0d302113bd9928212f420b",
      "category": "container_scanning",
      "message": "CVE-2023-29409 on stdlib@1.20.6",
      "description": "Extremely large RSA keys in certificate chains can cause a client/server to expend significant CPU time verifying signatures.\n\nWith fix, the size of RSA keys transmitted during handshakes is restricted to <= 8192 bits.\n\nBased on a survey of publicly trusted RSA keys, there are currently only three certificates in circulation with keys larger than this, and all three appear to be test certificates that are not actively deployed. It is possible there are larger keys in use in private PKIs, but we target the web PKI, so causing breakage here in the interests of increasing the default safety of users of crypto/tls seems reasonable.",
      "cve": "CVE-2023-29409",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.6 to 1.20.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.6"
          },
          "version": "1.20.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-29409",
          "value": "CVE-2023-29409",
          "url": "https://scout.docker.com/v/CVE-2023-29409?s=golang&n=stdlib&t=golang&vr=%3E%3D1.20.0-0%2C%3C1.20.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-29409?s=golang&n=stdlib&t=golang&vr=%3E%3D1.20.0-0%2C%3C1.20.7"
        }
      ]
    },
    {
      "id": "5d63c33e0b84e1224f73c0b8328e193bfb19db0984d47b2c76027ea1a6954df7",
      "category": "container_scanning",
      "message": "CVE-2023-39326 on stdlib@1.19.9",
      "description": "A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body.\n\nA malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request.\n\nChunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small.",
      "cve": "CVE-2023-39326",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.9 to 1.20.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.9"
          },
          "version": "1.19.9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-39326",
          "value": "CVE-2023-39326",
          "url": "https://scout.docker.com/v/CVE-2023-39326?s=golang&n=stdlib&t=golang&vr=%3C1.20.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-39326?s=golang&n=stdlib&t=golang&vr=%3C1.20.12"
        }
      ]
    },
    {
      "id": "5977ff6d894c55eee876d25991a30eb2d4ea801c6082dfd784293cdcffd2f756",
      "category": "container_scanning",
      "message": "CVE-2023-39326 on stdlib@1.20.6",
      "description": "A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body.\n\nA malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request.\n\nChunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small.",
      "cve": "CVE-2023-39326",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.6 to 1.20.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.6"
          },
          "version": "1.20.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-39326",
          "value": "CVE-2023-39326",
          "url": "https://scout.docker.com/v/CVE-2023-39326?s=golang&n=stdlib&t=golang&vr=%3C1.20.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-39326?s=golang&n=stdlib&t=golang&vr=%3C1.20.12"
        }
      ]
    },
    {
      "id": "a4941f5713a8e34eb4bf95759b548ed86b8744fe2f2c3c7169cabbc53f595bcd",
      "category": "container_scanning",
      "message": "CVE-2023-39326 on stdlib@1.21.1",
      "description": "A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body.\n\nA malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request.\n\nChunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small.",
      "cve": "CVE-2023-39326",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.21.1 to 1.21.5",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.21.1"
          },
          "version": "1.21.1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-39326",
          "value": "CVE-2023-39326",
          "url": "https://scout.docker.com/v/CVE-2023-39326?s=golang&n=stdlib&t=golang&vr=%3E%3D1.21.0-0%2C%3C1.21.5"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-39326?s=golang&n=stdlib&t=golang&vr=%3E%3D1.21.0-0%2C%3C1.21.5"
        }
      ]
    },
    {
      "id": "e96a080a7fec04fedcb1bc1450ead25efde2a112648b7355ae14599da38d05e6",
      "category": "container_scanning",
      "message": "CVE-2023-45284 on stdlib@1.20.6",
      "description": "On Windows, The IsLocal function does not correctly detect reserved device names in some cases.\n\nReserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local.\n\nWith fix, IsLocal now correctly reports these names as non-local.",
      "cve": "CVE-2023-45284",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.6 to 1.20.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.6"
          },
          "version": "1.20.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45284",
          "value": "CVE-2023-45284",
          "url": "https://scout.docker.com/v/CVE-2023-45284?s=golang&n=stdlib&t=golang&vr=%3C1.20.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45284?s=golang&n=stdlib&t=golang&vr=%3C1.20.11"
        }
      ]
    },
    {
      "id": "733df2126952f59399d727e1b650a45e5dd553cc3c1bc68bcaee44b4eeb7a3bc",
      "category": "container_scanning",
      "message": "CVE-2023-45284 on stdlib@1.19.9",
      "description": "On Windows, The IsLocal function does not correctly detect reserved device names in some cases.\n\nReserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local.\n\nWith fix, IsLocal now correctly reports these names as non-local.",
      "cve": "CVE-2023-45284",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.9 to 1.20.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.9"
          },
          "version": "1.19.9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45284",
          "value": "CVE-2023-45284",
          "url": "https://scout.docker.com/v/CVE-2023-45284?s=golang&n=stdlib&t=golang&vr=%3C1.20.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45284?s=golang&n=stdlib&t=golang&vr=%3C1.20.11"
        }
      ]
    },
    {
      "id": "a2d6a36feb467a5bf505e1e47dcd1a61ec71270ad8456a3990c7c10975fa2ca7",
      "category": "container_scanning",
      "message": "CVE-2023-45284 on stdlib@1.21.1",
      "description": "On Windows, The IsLocal function does not correctly detect reserved device names in some cases.\n\nReserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local.\n\nWith fix, IsLocal now correctly reports these names as non-local.",
      "cve": "CVE-2023-45284",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.21.1 to 1.21.4",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.21.1"
          },
          "version": "1.21.1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45284",
          "value": "CVE-2023-45284",
          "url": "https://scout.docker.com/v/CVE-2023-45284?s=golang&n=stdlib&t=golang&vr=%3E%3D1.21.0-0%2C%3C1.21.4"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45284?s=golang&n=stdlib&t=golang&vr=%3E%3D1.21.0-0%2C%3C1.21.4"
        }
      ]
    },
    {
      "id": "5dcbf23547ba933183bfbc14e2c6ff94ed85ba580b02f74b631480281fa42d6f",
      "category": "container_scanning",
      "message": "CVE-2023-45288 on golang.org/x/net@0.8.0",
      "description": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
      "cve": "CVE-2023-45288",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/net@0.8.0 to 0.23.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/net@0.8.0"
          },
          "version": "0.8.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45288",
          "value": "CVE-2023-45288",
          "url": "https://scout.docker.com/v/CVE-2023-45288?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.23.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45288?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.23.0"
        }
      ]
    },
    {
      "id": "e3ca0575a1b268b788d8d889e2de279b9173b616ba8a3189603f756f94fc32ee",
      "category": "container_scanning",
      "message": "CVE-2023-45288 on golang.org/x/net@0.12.0",
      "description": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
      "cve": "CVE-2023-45288",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/net@0.12.0 to 0.23.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/net@0.12.0"
          },
          "version": "0.12.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45288",
          "value": "CVE-2023-45288",
          "url": "https://scout.docker.com/v/CVE-2023-45288?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.23.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45288?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.23.0"
        }
      ]
    },
    {
      "id": "3985c3ea572cf528582f38929d1b485c53d5a9f4caf5c135837e13df9979c698",
      "category": "container_scanning",
      "message": "CVE-2023-5678 on alpine/openssl@3.1.3-r0",
      "cve": "CVE-2023-5678",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@3.1.3-r0 to 3.1.4-r1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@3.1.3-r0?os_name=alpine&os_version=3.18"
          },
          "version": "3.1.3-r0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-5678",
          "value": "CVE-2023-5678",
          "url": "https://scout.docker.com/v/CVE-2023-5678?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.4-r1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-5678?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.4-r1"
        }
      ]
    },
    {
      "id": "c25e0a22f89ebcb79733a11caac2b96e8532f1660970d1562a0ad88f44ab05f5",
      "category": "container_scanning",
      "message": "CVE-2024-23650 on github.com/moby/buildkit@0.12.1-0.20230717122532-faa0cc7da353",
      "description": "### Impact\nA malicious BuildKit client or frontend could craft a request that could lead to BuildKit daemon crashing with a panic.\n\n### Patches\nThe issue has been fixed in v0.12.5\n\n### Workarounds\nAvoid using BuildKit frontends from untrusted sources. A frontend image is usually specified as the `#syntax` line on your Dockerfile, or with `--frontend` flag when using `buildctl build` command. \n\n### References\n\n",
      "cve": "CVE-2024-23650",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/moby/buildkit@0.12.1-0.20230717122532-faa0cc7da353 to 0.12.5",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/moby/buildkit@0.12.1-0.20230717122532-faa0cc7da353"
          },
          "version": "0.12.1-0.20230717122532-faa0cc7da353"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-23650",
          "value": "CVE-2024-23650",
          "url": "https://scout.docker.com/v/CVE-2024-23650?s=github&n=buildkit&ns=github.com%2Fmoby&t=golang&vr=%3C0.12.5"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-23650?s=github&n=buildkit&ns=github.com%2Fmoby&t=golang&vr=%3C0.12.5"
        }
      ]
    },
    {
      "id": "939cf8def1b87de6aae674be696eb9c2f1fa8cca217590b05194b7f4d52f3f9c",
      "category": "container_scanning",
      "message": "CVE-2024-23650 on github.com/moby/buildkit@0.12.2",
      "description": "### Impact\nA malicious BuildKit client or frontend could craft a request that could lead to BuildKit daemon crashing with a panic.\n\n### Patches\nThe issue has been fixed in v0.12.5\n\n### Workarounds\nAvoid using BuildKit frontends from untrusted sources. A frontend image is usually specified as the `#syntax` line on your Dockerfile, or with `--frontend` flag when using `buildctl build` command. \n\n### References\n\n",
      "cve": "CVE-2024-23650",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/moby/buildkit@0.12.2 to 0.12.5",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/moby/buildkit@0.12.2"
          },
          "version": "0.12.2"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-23650",
          "value": "CVE-2024-23650",
          "url": "https://scout.docker.com/v/CVE-2024-23650?s=github&n=buildkit&ns=github.com%2Fmoby&t=golang&vr=%3C0.12.5"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-23650?s=github&n=buildkit&ns=github.com%2Fmoby&t=golang&vr=%3C0.12.5"
        }
      ]
    },
    {
      "id": "0464fcbd9f3911e98f0a1896b07660c3e0703b6c689148487b95685e37304d84",
      "category": "container_scanning",
      "message": "CVE-2024-45338 on golang.org/x/net@0.8.0",
      "description": "An attacker can craft an input to the Parse functions that would be processed non-linearly with respect to its length, resulting in extremely slow parsing. This could cause a denial of service.",
      "cve": "CVE-2024-45338",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/net@0.8.0 to 0.33.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/net@0.8.0"
          },
          "version": "0.8.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-45338",
          "value": "CVE-2024-45338",
          "url": "https://scout.docker.com/v/CVE-2024-45338?s=golang&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.33.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-45338?s=golang&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.33.0"
        }
      ]
    },
    {
      "id": "9041f1a3113769bcfe0ab09f5e0543eae23ef705e79975463cd7f457a35cc33e",
      "category": "container_scanning",
      "message": "CVE-2024-45338 on golang.org/x/net@0.12.0",
      "description": "An attacker can craft an input to the Parse functions that would be processed non-linearly with respect to its length, resulting in extremely slow parsing. This could cause a denial of service.",
      "cve": "CVE-2024-45338",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/net@0.12.0 to 0.33.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/net@0.12.0"
          },
          "version": "0.12.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-45338",
          "value": "CVE-2024-45338",
          "url": "https://scout.docker.com/v/CVE-2024-45338?s=golang&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.33.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-45338?s=golang&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.33.0"
        }
      ]
    },
    {
      "id": "42ab49470c10c7c56ec9aca6db32c5dcbaae91857cb698f64e658cc924028762",
      "category": "container_scanning",
      "message": "CVE-2024-4603 on alpine/openssl@3.1.3-r0",
      "cve": "CVE-2024-4603",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@3.1.3-r0 to 3.1.5-r0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@3.1.3-r0?os_name=alpine&os_version=3.18"
          },
          "version": "3.1.3-r0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-4603",
          "value": "CVE-2024-4603",
          "url": "https://scout.docker.com/v/CVE-2024-4603?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.5-r0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-4603?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.5-r0"
        }
      ]
    },
    {
      "id": "afdb90d1d6df31fef666f065b9c9a9a8a7a8312ce1c7ebe03ac3b2322f577c66",
      "category": "container_scanning",
      "message": "CVE-2025-22872 on golang.org/x/net@0.8.0",
      "description": "The tokenizer incorrectly interprets tags with unquoted attribute values that end with a solidus character (/) as self-closing. When directly using Tokenizer, this can result in such tags incorrectly being marked as self-closing, and when using the Parse functions, this can result in content following such tags as being placed in the wrong scope during DOM construction, but only when tags are in foreign content (e.g. <math>, <svg>, etc contexts).",
      "cve": "CVE-2025-22872",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/net@0.8.0 to 0.38.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/net@0.8.0"
          },
          "version": "0.8.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-22872",
          "value": "CVE-2025-22872",
          "url": "https://scout.docker.com/v/CVE-2025-22872?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.38.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-22872?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.38.0"
        }
      ]
    },
    {
      "id": "1379c0e9abaa361b22403754baaa4aa977145f546bb978dc5f331f8ed91a5827",
      "category": "container_scanning",
      "message": "CVE-2025-22872 on golang.org/x/net@0.12.0",
      "description": "The tokenizer incorrectly interprets tags with unquoted attribute values that end with a solidus character (/) as self-closing. When directly using Tokenizer, this can result in such tags incorrectly being marked as self-closing, and when using the Parse functions, this can result in content following such tags as being placed in the wrong scope during DOM construction, but only when tags are in foreign content (e.g. <math>, <svg>, etc contexts).",
      "cve": "CVE-2025-22872",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/net@0.12.0 to 0.38.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/net@0.12.0"
          },
          "version": "0.12.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-22872",
          "value": "CVE-2025-22872",
          "url": "https://scout.docker.com/v/CVE-2025-22872?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.38.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-22872?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.38.0"
        }
      ]
    },
    {
      "id": "fe71a8b31179858a91a50e13e40a9a126f73e7ba760df5c04a99e661f9d96ce7",
      "category": "container_scanning",
      "message": "CVE-2024-24785 on stdlib@1.19.9",
      "description": "If errors returned from MarshalJSON methods contain user controlled data, they may be used to break the contextual auto-escaping behavior of the html/template package, allowing for subsequent actions to inject unexpected content into templates.",
      "cve": "CVE-2024-24785",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.9 to 1.21.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.9"
          },
          "version": "1.19.9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24785",
          "value": "CVE-2024-24785",
          "url": "https://scout.docker.com/v/CVE-2024-24785?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24785?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ]
    },
    {
      "id": "105ca4780cc25352179c0098d195d4f962da1f526aa8748c17174ef16b82a97f",
      "category": "container_scanning",
      "message": "CVE-2024-24785 on stdlib@1.21.1",
      "description": "If errors returned from MarshalJSON methods contain user controlled data, they may be used to break the contextual auto-escaping behavior of the html/template package, allowing for subsequent actions to inject unexpected content into templates.",
      "cve": "CVE-2024-24785",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.21.1 to 1.21.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.21.1"
          },
          "version": "1.21.1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24785",
          "value": "CVE-2024-24785",
          "url": "https://scout.docker.com/v/CVE-2024-24785?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24785?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ]
    },
    {
      "id": "3651b30de07c6d5c75e9db58c32929eb4d8c9e6f4dc6e1f5c185be86498b3abc",
      "category": "container_scanning",
      "message": "CVE-2024-24785 on stdlib@1.20.6",
      "description": "If errors returned from MarshalJSON methods contain user controlled data, they may be used to break the contextual auto-escaping behavior of the html/template package, allowing for subsequent actions to inject unexpected content into templates.",
      "cve": "CVE-2024-24785",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.6 to 1.21.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.6"
          },
          "version": "1.20.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24785",
          "value": "CVE-2024-24785",
          "url": "https://scout.docker.com/v/CVE-2024-24785?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24785?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ]
    },
    {
      "id": "d91782575c4c148551e4bfdb36996750e6e3729727f8beb53318374ea94a8cfd",
      "category": "container_scanning",
      "message": "CVE-2023-42363 on alpine/busybox@1.36.1-r2",
      "cve": "CVE-2023-42363",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/busybox@1.36.1-r2 to 1.36.1-r7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/busybox@1.36.1-r2?os_name=alpine&os_version=3.18"
          },
          "version": "1.36.1-r2"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-42363",
          "value": "CVE-2023-42363",
          "url": "https://scout.docker.com/v/CVE-2023-42363?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C1.36.1-r7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-42363?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C1.36.1-r7"
        }
      ]
    },
    {
      "id": "43361c9aeb2e65a0287e26d4b69eddf57f6e473f3a3b49e1a98dbe53c3c17250",
      "category": "container_scanning",
      "message": "CVE-2023-42364 on alpine/busybox@1.36.1-r2",
      "cve": "CVE-2023-42364",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/busybox@1.36.1-r2 to 1.36.1-r7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/busybox@1.36.1-r2?os_name=alpine&os_version=3.18"
          },
          "version": "1.36.1-r2"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-42364",
          "value": "CVE-2023-42364",
          "url": "https://scout.docker.com/v/CVE-2023-42364?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C1.36.1-r7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-42364?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C1.36.1-r7"
        }
      ]
    },
    {
      "id": "0d091717f374337403b327936056b2cdee2a2c2da55ba60bb86d930a44291880",
      "category": "container_scanning",
      "message": "CVE-2023-42365 on alpine/busybox@1.36.1-r2",
      "cve": "CVE-2023-42365",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/busybox@1.36.1-r2 to 1.36.1-r7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/busybox@1.36.1-r2?os_name=alpine&os_version=3.18"
          },
          "version": "1.36.1-r2"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-42365",
          "value": "CVE-2023-42365",
          "url": "https://scout.docker.com/v/CVE-2023-42365?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C1.36.1-r7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-42365?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C1.36.1-r7"
        }
      ]
    },
    {
      "id": "8b9dae808aaae9d3af7739a30c5d636ad3f5413dbe7d850e11edef35641d4c92",
      "category": "container_scanning",
      "message": "CVE-2023-42366 on alpine/busybox@1.36.1-r2",
      "cve": "CVE-2023-42366",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/busybox@1.36.1-r2 to 1.36.1-r6",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/busybox@1.36.1-r2?os_name=alpine&os_version=3.18"
          },
          "version": "1.36.1-r2"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-42366",
          "value": "CVE-2023-42366",
          "url": "https://scout.docker.com/v/CVE-2023-42366?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C1.36.1-r6"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-42366?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C1.36.1-r6"
        }
      ]
    },
    {
      "id": "acf88739614ec24f2791499a1a1e95abffec1120e818f8f41f51d5012f93f6a5",
      "category": "container_scanning",
      "message": "CVE-2023-51384 on alpine/openssh@9.3_p2-r0",
      "cve": "CVE-2023-51384",
      "severity": "Medium",
      "confidence": "Unknown",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssh@9.3_p2-r0?os_name=alpine&os_version=3.18"
          },
          "version": "9.3_p2-r0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-51384",
          "value": "CVE-2023-51384",
          "url": "https://scout.docker.com/v/CVE-2023-51384?s=alpine&n=openssh&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C%3D9.3_p2-r2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-51384?s=alpine&n=openssh&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C%3D9.3_p2-r2"
        }
      ]
    },
    {
      "id": "34591f67706d20208c3b635254419a430e7b56eb765dc50e5ff264e6576ed9e4",
      "category": "container_scanning",
      "message": "CVE-2024-0727 on alpine/openssl@3.1.3-r0",
      "cve": "CVE-2024-0727",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@3.1.3-r0 to 3.1.4-r5",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@3.1.3-r0?os_name=alpine&os_version=3.18"
          },
          "version": "3.1.3-r0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-0727",
          "value": "CVE-2024-0727",
          "url": "https://scout.docker.com/v/CVE-2024-0727?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.4-r5"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-0727?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.4-r5"
        }
      ]
    },
    {
      "id": "3b3d0cc391660f0728b283ee3f680c9f66474c282cfc7d0d344b32e232dd125f",
      "category": "container_scanning",
      "message": "CVE-2024-22365 on alpine/linux-pam@1.5.2-r10",
      "cve": "CVE-2024-22365",
      "severity": "Medium",
      "confidence": "Unknown",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/linux-pam@1.5.2-r10?os_name=alpine&os_version=3.18"
          },
          "version": "1.5.2-r10"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-22365",
          "value": "CVE-2024-22365",
          "url": "https://scout.docker.com/v/CVE-2024-22365?s=alpine&n=linux-pam&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C%3D1.5.2-r10"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-22365?s=alpine&n=linux-pam&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C%3D1.5.2-r10"
        }
      ]
    },
    {
      "id": "7302f968cf926f3b8fb611348a222ca5c3ecf48ddb5413625e6a5c115d673bc4",
      "category": "container_scanning",
      "message": "CVE-2024-24789 on stdlib@1.19.9",
      "description": "The archive/zip package's handling of certain types of invalid zip files differs from the behavior of most zip implementations. This misalignment could be exploited to create an zip file with contents that vary depending on the implementation reading the file. The archive/zip package now rejects files containing these errors.",
      "cve": "CVE-2024-24789",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.9 to 1.21.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.9"
          },
          "version": "1.19.9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24789",
          "value": "CVE-2024-24789",
          "url": "https://scout.docker.com/v/CVE-2024-24789?s=golang&n=stdlib&t=golang&vr=%3C1.21.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24789?s=golang&n=stdlib&t=golang&vr=%3C1.21.11"
        }
      ]
    },
    {
      "id": "a0145768c63fefe862842ae7a43e539bc237096002f9b1157628fbbfe760438a",
      "category": "container_scanning",
      "message": "CVE-2024-24789 on stdlib@1.21.1",
      "description": "The archive/zip package's handling of certain types of invalid zip files differs from the behavior of most zip implementations. This misalignment could be exploited to create an zip file with contents that vary depending on the implementation reading the file. The archive/zip package now rejects files containing these errors.",
      "cve": "CVE-2024-24789",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.21.1 to 1.21.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.21.1"
          },
          "version": "1.21.1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24789",
          "value": "CVE-2024-24789",
          "url": "https://scout.docker.com/v/CVE-2024-24789?s=golang&n=stdlib&t=golang&vr=%3C1.21.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24789?s=golang&n=stdlib&t=golang&vr=%3C1.21.11"
        }
      ]
    },
    {
      "id": "4e25e463800baf0570b974af1162f43abd5eef575ce190e6fd50655cac6588c1",
      "category": "container_scanning",
      "message": "CVE-2024-24789 on stdlib@1.20.6",
      "description": "The archive/zip package's handling of certain types of invalid zip files differs from the behavior of most zip implementations. This misalignment could be exploited to create an zip file with contents that vary depending on the implementation reading the file. The archive/zip package now rejects files containing these errors.",
      "cve": "CVE-2024-24789",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.6 to 1.21.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.6"
          },
          "version": "1.20.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24789",
          "value": "CVE-2024-24789",
          "url": "https://scout.docker.com/v/CVE-2024-24789?s=golang&n=stdlib&t=golang&vr=%3C1.21.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24789?s=golang&n=stdlib&t=golang&vr=%3C1.21.11"
        }
      ]
    },
    {
      "id": "30457336c3ac066537185d345abec5ecb1a6ef56b2472f680df1142b59ecf87e",
      "category": "container_scanning",
      "message": "CVE-2025-0913 on stdlib@1.19.9",
      "description": "os.OpenFile(path, os.O_CREATE|O_EXCL) behaved differently on Unix and Windows systems when the target path was a dangling symlink. On Unix systems, OpenFile with O_CREATE and O_EXCL flags never follows symlinks. On Windows, when the target path was a symlink to a nonexistent location, OpenFile would create a file in that location. OpenFile now always returns an error when the O_CREATE and O_EXCL flags are both set and the target path is a symlink.",
      "cve": "CVE-2025-0913",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.9 to 1.23.10",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.9"
          },
          "version": "1.19.9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-0913",
          "value": "CVE-2025-0913",
          "url": "https://scout.docker.com/v/CVE-2025-0913?s=golang&n=stdlib&t=golang&vr=%3C1.23.10"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-0913?s=golang&n=stdlib&t=golang&vr=%3C1.23.10"
        }
      ]
    },
    {
      "id": "59c898954e0637d6df657991469a8a9f117c833f20a91387513151ab507fd66e",
      "category": "container_scanning",
      "message": "CVE-2025-0913 on stdlib@1.20.6",
      "description": "os.OpenFile(path, os.O_CREATE|O_EXCL) behaved differently on Unix and Windows systems when the target path was a dangling symlink. On Unix systems, OpenFile with O_CREATE and O_EXCL flags never follows symlinks. On Windows, when the target path was a symlink to a nonexistent location, OpenFile would create a file in that location. OpenFile now always returns an error when the O_CREATE and O_EXCL flags are both set and the target path is a symlink.",
      "cve": "CVE-2025-0913",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.6 to 1.23.10",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.6"
          },
          "version": "1.20.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-0913",
          "value": "CVE-2025-0913",
          "url": "https://scout.docker.com/v/CVE-2025-0913?s=golang&n=stdlib&t=golang&vr=%3C1.23.10"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-0913?s=golang&n=stdlib&t=golang&vr=%3C1.23.10"
        }
      ]
    },
    {
      "id": "41a933bab1897a7deabc1e358288e95a16f59691a61c4962f1079f71547cf0ea",
      "category": "container_scanning",
      "message": "CVE-2025-0913 on stdlib@1.21.1",
      "description": "os.OpenFile(path, os.O_CREATE|O_EXCL) behaved differently on Unix and Windows systems when the target path was a dangling symlink. On Unix systems, OpenFile with O_CREATE and O_EXCL flags never follows symlinks. On Windows, when the target path was a symlink to a nonexistent location, OpenFile would create a file in that location. OpenFile now always returns an error when the O_CREATE and O_EXCL flags are both set and the target path is a symlink.",
      "cve": "CVE-2025-0913",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.21.1 to 1.23.10",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.21.1"
          },
          "version": "1.21.1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-0913",
          "value": "CVE-2025-0913",
          "url": "https://scout.docker.com/v/CVE-2025-0913?s=golang&n=stdlib&t=golang&vr=%3C1.23.10"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-0913?s=golang&n=stdlib&t=golang&vr=%3C1.23.10"
        }
      ]
    },
    {
      "id": "b16fd26a034328eec6b7ca8c23bfb1611f13093c899d8e09fdd4b4ab1ca9a2d3",
      "category": "container_scanning",
      "message": "CVE-2023-48795 on golang.org/x/crypto@0.11.0",
      "description": "### Summary\n\nTerrapin is a prefix truncation attack targeting the SSH protocol. More precisely, Terrapin breaks the integrity of SSH's secure channel. By carefully adjusting the sequence numbers during the handshake, an attacker can remove an arbitrary amount of messages sent by the client or server at the beginning of the secure channel without the client or server noticing it.\n\n### Mitigations\n\nTo mitigate this protocol vulnerability, OpenSSH suggested a so-called \"strict kex\" which alters the SSH handshake to ensure a Man-in-the-Middle attacker cannot introduce unauthenticated messages as well as convey sequence number manipulation across handshakes.\n\n**Warning: To take effect, both the client and server must support this countermeasure.** \n\nAs a stop-gap measure, peers may also (temporarily) disable the affected algorithms and use unaffected alternatives like AES-GCM instead until patches are available.\n\n### Details\n\nThe SSH specifications of ChaCha20-Poly1305 (chacha20-poly1305@openssh.com) and Encrypt-then-MAC (*-etm@openssh.com MACs) are vulnerable against an arbitrary prefix truncation attack (a.k.a. Terrapin attack). This allows for an extension negotiation downgrade by stripping the SSH_MSG_EXT_INFO sent after the first message after SSH_MSG_NEWKEYS, downgrading security, and disabling attack countermeasures in some versions of OpenSSH. When targeting Encrypt-then-MAC, this attack requires the use of a CBC cipher to be practically exploitable due to the internal workings of the cipher mode. Additionally, this novel attack technique can be used to exploit previously unexploitable implementation flaws in a Man-in-the-Middle scenario.\n\nThe attack works by an attacker injecting an arbitrary number of SSH_MSG_IGNORE messages during the initial key exchange and consequently removing the same number of messages just after the initial key exchange has concluded. This is possible due to missing authentication of the excess SSH_MSG_IGNORE messages and the fact that the implicit sequence numbers used within the SSH protocol are only checked after the initial key exchange.\n\nIn the case of ChaCha20-Poly1305, the attack is guaranteed to work on every connection as this cipher does not maintain an internal state other than the message's sequence number. In the case of Encrypt-Then-MAC, practical exploitation requires the use of a CBC cipher; while theoretical integrity is broken for all ciphers when using this mode, message processing will fail at the application layer for CTR and stream ciphers.\n\nFor more details see [https://terrapin-attack.com](https://terrapin-attack.com). \n\n### Impact\n\nThis attack targets the specification of ChaCha20-Poly1305 (chacha20-poly1305@openssh.com) and Encrypt-then-MAC (*-etm@openssh.com), which are widely adopted by well-known SSH implementations and can be considered de-facto standard. These algorithms can be practically exploited; however, in the case of Encrypt-Then-MAC, we additionally require the use of a CBC cipher. As a consequence, this attack works against all well-behaving SSH implementations supporting either of those algorithms and can be used to downgrade (but not fully strip) connection security in case SSH extension negotiation (RFC8308) is supported. The attack may also enable attackers to exploit certain implementation flaws in a man-in-the-middle (MitM) scenario.",
      "cve": "CVE-2023-48795",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/crypto@0.11.0 to 0.17.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/crypto@0.11.0"
          },
          "version": "0.11.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-48795",
          "value": "CVE-2023-48795",
          "url": "https://scout.docker.com/v/CVE-2023-48795?s=github&n=crypto&ns=golang.org%2Fx&t=golang&vr=%3E%3D0.1.0%2C%3C0.17.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-48795?s=github&n=crypto&ns=golang.org%2Fx&t=golang&vr=%3E%3D0.1.0%2C%3C0.17.0"
        }
      ]
    },
    {
      "id": "45843a1fdd3a67447028bb9bb9fa9dfdb683ae90b04ae0869ad9fb71ae97259d",
      "category": "container_scanning",
      "message": "CVE-2023-48795 on alpine/openssh@9.3_p2-r0",
      "cve": "CVE-2023-48795",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssh@9.3_p2-r0 to 9.3_p2-r1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssh@9.3_p2-r0?os_name=alpine&os_version=3.18"
          },
          "version": "9.3_p2-r0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-48795",
          "value": "CVE-2023-48795",
          "url": "https://scout.docker.com/v/CVE-2023-48795?s=alpine&n=openssh&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C9.3_p2-r1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-48795?s=alpine&n=openssh&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C9.3_p2-r1"
        }
      ]
    },
    {
      "id": "09abde598c45a551eeca5776a63acb6307dde6cf9e88cfd216f6ba2ef0aed142",
      "category": "container_scanning",
      "message": "CVE-2023-48795 on golang.org/x/crypto@0.2.0",
      "description": "### Summary\n\nTerrapin is a prefix truncation attack targeting the SSH protocol. More precisely, Terrapin breaks the integrity of SSH's secure channel. By carefully adjusting the sequence numbers during the handshake, an attacker can remove an arbitrary amount of messages sent by the client or server at the beginning of the secure channel without the client or server noticing it.\n\n### Mitigations\n\nTo mitigate this protocol vulnerability, OpenSSH suggested a so-called \"strict kex\" which alters the SSH handshake to ensure a Man-in-the-Middle attacker cannot introduce unauthenticated messages as well as convey sequence number manipulation across handshakes.\n\n**Warning: To take effect, both the client and server must support this countermeasure.** \n\nAs a stop-gap measure, peers may also (temporarily) disable the affected algorithms and use unaffected alternatives like AES-GCM instead until patches are available.\n\n### Details\n\nThe SSH specifications of ChaCha20-Poly1305 (chacha20-poly1305@openssh.com) and Encrypt-then-MAC (*-etm@openssh.com MACs) are vulnerable against an arbitrary prefix truncation attack (a.k.a. Terrapin attack). This allows for an extension negotiation downgrade by stripping the SSH_MSG_EXT_INFO sent after the first message after SSH_MSG_NEWKEYS, downgrading security, and disabling attack countermeasures in some versions of OpenSSH. When targeting Encrypt-then-MAC, this attack requires the use of a CBC cipher to be practically exploitable due to the internal workings of the cipher mode. Additionally, this novel attack technique can be used to exploit previously unexploitable implementation flaws in a Man-in-the-Middle scenario.\n\nThe attack works by an attacker injecting an arbitrary number of SSH_MSG_IGNORE messages during the initial key exchange and consequently removing the same number of messages just after the initial key exchange has concluded. This is possible due to missing authentication of the excess SSH_MSG_IGNORE messages and the fact that the implicit sequence numbers used within the SSH protocol are only checked after the initial key exchange.\n\nIn the case of ChaCha20-Poly1305, the attack is guaranteed to work on every connection as this cipher does not maintain an internal state other than the message's sequence number. In the case of Encrypt-Then-MAC, practical exploitation requires the use of a CBC cipher; while theoretical integrity is broken for all ciphers when using this mode, message processing will fail at the application layer for CTR and stream ciphers.\n\nFor more details see [https://terrapin-attack.com](https://terrapin-attack.com). \n\n### Impact\n\nThis attack targets the specification of ChaCha20-Poly1305 (chacha20-poly1305@openssh.com) and Encrypt-then-MAC (*-etm@openssh.com), which are widely adopted by well-known SSH implementations and can be considered de-facto standard. These algorithms can be practically exploited; however, in the case of Encrypt-Then-MAC, we additionally require the use of a CBC cipher. As a consequence, this attack works against all well-behaving SSH implementations supporting either of those algorithms and can be used to downgrade (but not fully strip) connection security in case SSH extension negotiation (RFC8308) is supported. The attack may also enable attackers to exploit certain implementation flaws in a man-in-the-middle (MitM) scenario.",
      "cve": "CVE-2023-48795",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/crypto@0.2.0 to 0.17.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/crypto@0.2.0"
          },
          "version": "0.2.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-48795",
          "value": "CVE-2023-48795",
          "url": "https://scout.docker.com/v/CVE-2023-48795?s=github&n=crypto&ns=golang.org%2Fx&t=golang&vr=%3E%3D0.1.0%2C%3C0.17.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-48795?s=github&n=crypto&ns=golang.org%2Fx&t=golang&vr=%3E%3D0.1.0%2C%3C0.17.0"
        }
      ]
    },
    {
      "id": "0a53bd311581a66035e8cfb0959af52e0998a1760d114ba66a1924beaa1219ce",
      "category": "container_scanning",
      "message": "CVE-2023-6237 on alpine/openssl@3.1.3-r0",
      "cve": "CVE-2023-6237",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@3.1.3-r0 to 3.1.4-r4",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@3.1.3-r0?os_name=alpine&os_version=3.18"
          },
          "version": "3.1.3-r0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-6237",
          "value": "CVE-2023-6237",
          "url": "https://scout.docker.com/v/CVE-2023-6237?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.4-r4"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-6237?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.4-r4"
        }
      ]
    },
    {
      "id": "d41eca2f86efd7ce0d7584e5f811f5d34a25c07fb4630bcb3359373357748243",
      "category": "container_scanning",
      "message": "CVE-2024-24783 on stdlib@1.20.6",
      "description": "Verifying a certificate chain which contains a certificate with an unknown public key algorithm will cause Certificate.Verify to panic.\n\nThis affects all crypto/tls clients, and servers that set Config.ClientAuth to VerifyClientCertIfGiven or RequireAndVerifyClientCert. The default behavior is for TLS servers to not verify client certificates.",
      "cve": "CVE-2024-24783",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.6 to 1.21.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.6"
          },
          "version": "1.20.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24783",
          "value": "CVE-2024-24783",
          "url": "https://scout.docker.com/v/CVE-2024-24783?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24783?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ]
    },
    {
      "id": "f7bd005ac2ffdb5589fdb400a435f4a446543a28a82745aff6c0bfa2071e5866",
      "category": "container_scanning",
      "message": "CVE-2024-24783 on stdlib@1.21.1",
      "description": "Verifying a certificate chain which contains a certificate with an unknown public key algorithm will cause Certificate.Verify to panic.\n\nThis affects all crypto/tls clients, and servers that set Config.ClientAuth to VerifyClientCertIfGiven or RequireAndVerifyClientCert. The default behavior is for TLS servers to not verify client certificates.",
      "cve": "CVE-2024-24783",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.21.1 to 1.21.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.21.1"
          },
          "version": "1.21.1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24783",
          "value": "CVE-2024-24783",
          "url": "https://scout.docker.com/v/CVE-2024-24783?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24783?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ]
    },
    {
      "id": "9995370c1e39f99da02c9a9912870b8aa9b7a1371a0924050d8e900fc081d552",
      "category": "container_scanning",
      "message": "CVE-2024-24783 on stdlib@1.19.9",
      "description": "Verifying a certificate chain which contains a certificate with an unknown public key algorithm will cause Certificate.Verify to panic.\n\nThis affects all crypto/tls clients, and servers that set Config.ClientAuth to VerifyClientCertIfGiven or RequireAndVerifyClientCert. The default behavior is for TLS servers to not verify client certificates.",
      "cve": "CVE-2024-24783",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.9 to 1.21.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.9"
          },
          "version": "1.19.9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24783",
          "value": "CVE-2024-24783",
          "url": "https://scout.docker.com/v/CVE-2024-24783?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24783?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ]
    },
    {
      "id": "0d5022ae509874b09e56de6bf5d821bf67a9650fbdcb5183a10b83c970a1e0f3",
      "category": "container_scanning",
      "message": "CVE-2024-2511 on alpine/openssl@3.1.3-r0",
      "cve": "CVE-2024-2511",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@3.1.3-r0 to 3.1.4-r6",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@3.1.3-r0?os_name=alpine&os_version=3.18"
          },
          "version": "3.1.3-r0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-2511",
          "value": "CVE-2024-2511",
          "url": "https://scout.docker.com/v/CVE-2024-2511?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.4-r6"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-2511?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.4-r6"
        }
      ]
    },
    {
      "id": "5c514f287fc5254db25cd3cbcda786e4dbb8209ed0f7ce5799e8d048dffb4ea1",
      "category": "container_scanning",
      "message": "CVE-2023-39318 on stdlib@1.20.6",
      "description": "The html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in <script> contexts. This may cause the template parser to improperly interpret the contents of <script> contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack.",
      "cve": "CVE-2023-39318",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.6 to 1.20.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.6"
          },
          "version": "1.20.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-39318",
          "value": "CVE-2023-39318",
          "url": "https://scout.docker.com/v/CVE-2023-39318?s=golang&n=stdlib&t=golang&vr=%3C1.20.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-39318?s=golang&n=stdlib&t=golang&vr=%3C1.20.8"
        }
      ]
    },
    {
      "id": "9b0023acee8c71bf609110b3a8bb1011bac9806c39d1d0e765281a00bcd5b73c",
      "category": "container_scanning",
      "message": "CVE-2023-39318 on stdlib@1.19.9",
      "description": "The html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in <script> contexts. This may cause the template parser to improperly interpret the contents of <script> contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack.",
      "cve": "CVE-2023-39318",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.9 to 1.20.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.9"
          },
          "version": "1.19.9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-39318",
          "value": "CVE-2023-39318",
          "url": "https://scout.docker.com/v/CVE-2023-39318?s=golang&n=stdlib&t=golang&vr=%3C1.20.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-39318?s=golang&n=stdlib&t=golang&vr=%3C1.20.8"
        }
      ]
    },
    {
      "id": "e436755a63e6eb2faa2798a6c960c3891383d46b8d772071c7502e713ee596dd",
      "category": "container_scanning",
      "message": "CVE-2023-39319 on stdlib@1.19.9",
      "description": "The html/template package does not apply the proper rules for handling occurrences of \"<script\", \"<!--\", and \"</script\" within JS literals in <script> contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack.",
      "cve": "CVE-2023-39319",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.9 to 1.20.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.9"
          },
          "version": "1.19.9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-39319",
          "value": "CVE-2023-39319",
          "url": "https://scout.docker.com/v/CVE-2023-39319?s=golang&n=stdlib&t=golang&vr=%3C1.20.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-39319?s=golang&n=stdlib&t=golang&vr=%3C1.20.8"
        }
      ]
    },
    {
      "id": "7d7b6567da7113330f5abbfca2b5b0780db07e7f740ad5aee4a7701c39813ac7",
      "category": "container_scanning",
      "message": "CVE-2023-39319 on stdlib@1.20.6",
      "description": "The html/template package does not apply the proper rules for handling occurrences of \"<script\", \"<!--\", and \"</script\" within JS literals in <script> contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack.",
      "cve": "CVE-2023-39319",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.6 to 1.20.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.6"
          },
          "version": "1.20.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-39319",
          "value": "CVE-2023-39319",
          "url": "https://scout.docker.com/v/CVE-2023-39319?s=golang&n=stdlib&t=golang&vr=%3C1.20.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-39319?s=golang&n=stdlib&t=golang&vr=%3C1.20.8"
        }
      ]
    },
    {
      "id": "8d0f4b89353a916253e8b4fec681a8cf236910b0b6bc18fd8d82d200e5d737aa",
      "category": "container_scanning",
      "message": "CVE-2023-3978 on golang.org/x/net@0.12.0",
      "description": "Text nodes not in the HTML namespace are incorrectly literally rendered, causing text which should be escaped to not be. This could lead to an XSS attack. ",
      "cve": "CVE-2023-3978",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/net@0.12.0 to 0.13.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/net@0.12.0"
          },
          "version": "0.12.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-3978",
          "value": "CVE-2023-3978",
          "url": "https://scout.docker.com/v/CVE-2023-3978?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.13.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-3978?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.13.0"
        }
      ]
    },
    {
      "id": "e6b1fce7b261c7b873578fba4570ee864019e295586f68108c9b24cfaf9eddf0",
      "category": "container_scanning",
      "message": "CVE-2023-3978 on golang.org/x/net@0.8.0",
      "description": "Text nodes not in the HTML namespace are incorrectly literally rendered, causing text which should be escaped to not be. This could lead to an XSS attack. ",
      "cve": "CVE-2023-3978",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/net@0.8.0 to 0.13.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/net@0.8.0"
          },
          "version": "0.8.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-3978",
          "value": "CVE-2023-3978",
          "url": "https://scout.docker.com/v/CVE-2023-3978?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.13.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-3978?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.13.0"
        }
      ]
    },
    {
      "id": "1eff669f5a009f1619fbeb946a66e80adf7023f6b65990feb0c10839517fa263",
      "category": "container_scanning",
      "message": "CVE-2024-45336 on stdlib@1.20.6",
      "description": "The HTTP client drops sensitive headers after following a cross-domain redirect. For example, a request to a.com/ containing an Authorization header which is redirected to b.com/ will not send that header to b.com.\n\nIn the event that the client received a subsequent same-domain redirect, however, the sensitive headers would be restored. For example, a chain of redirects from a.com/, to b.com/1, and finally to b.com/2 would incorrectly send the Authorization header to b.com/2.",
      "cve": "CVE-2024-45336",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.6 to 1.22.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.6"
          },
          "version": "1.20.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-45336",
          "value": "CVE-2024-45336",
          "url": "https://scout.docker.com/v/CVE-2024-45336?s=golang&n=stdlib&t=golang&vr=%3C1.22.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-45336?s=golang&n=stdlib&t=golang&vr=%3C1.22.11"
        }
      ]
    },
    {
      "id": "bd73e5ed86c3519eca9df13badae71c341c5026b4272ad160aae16d77e3f1fd7",
      "category": "container_scanning",
      "message": "CVE-2024-45336 on stdlib@1.19.9",
      "description": "The HTTP client drops sensitive headers after following a cross-domain redirect. For example, a request to a.com/ containing an Authorization header which is redirected to b.com/ will not send that header to b.com.\n\nIn the event that the client received a subsequent same-domain redirect, however, the sensitive headers would be restored. For example, a chain of redirects from a.com/, to b.com/1, and finally to b.com/2 would incorrectly send the Authorization header to b.com/2.",
      "cve": "CVE-2024-45336",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.9 to 1.22.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.9"
          },
          "version": "1.19.9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-45336",
          "value": "CVE-2024-45336",
          "url": "https://scout.docker.com/v/CVE-2024-45336?s=golang&n=stdlib&t=golang&vr=%3C1.22.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-45336?s=golang&n=stdlib&t=golang&vr=%3C1.22.11"
        }
      ]
    },
    {
      "id": "eab20820dd9a9ed997e54560dc215a9075ad7130cb11a42143fb2e1a8897aeae",
      "category": "container_scanning",
      "message": "CVE-2024-45336 on stdlib@1.21.1",
      "description": "The HTTP client drops sensitive headers after following a cross-domain redirect. For example, a request to a.com/ containing an Authorization header which is redirected to b.com/ will not send that header to b.com.\n\nIn the event that the client received a subsequent same-domain redirect, however, the sensitive headers would be restored. For example, a chain of redirects from a.com/, to b.com/1, and finally to b.com/2 would incorrectly send the Authorization header to b.com/2.",
      "cve": "CVE-2024-45336",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.21.1 to 1.22.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.21.1"
          },
          "version": "1.21.1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-45336",
          "value": "CVE-2024-45336",
          "url": "https://scout.docker.com/v/CVE-2024-45336?s=golang&n=stdlib&t=golang&vr=%3C1.22.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-45336?s=golang&n=stdlib&t=golang&vr=%3C1.22.11"
        }
      ]
    },
    {
      "id": "f2072d77cdce86abeef6f1d4b0c4912f8da4cd1eee1c170441cf2ce17191ada8",
      "category": "container_scanning",
      "message": "CVE-2024-45341 on stdlib@1.21.1",
      "description": "A certificate with a URI which has a IPv6 address with a zone ID may incorrectly satisfy a URI name constraint that applies to the certificate chain.\n\nCertificates containing URIs are not permitted in the web PKI, so this only affects users of private PKIs which make use of URIs.",
      "cve": "CVE-2024-45341",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.21.1 to 1.22.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.21.1"
          },
          "version": "1.21.1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-45341",
          "value": "CVE-2024-45341",
          "url": "https://scout.docker.com/v/CVE-2024-45341?s=golang&n=stdlib&t=golang&vr=%3C1.22.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-45341?s=golang&n=stdlib&t=golang&vr=%3C1.22.11"
        }
      ]
    },
    {
      "id": "fdf24064420ee1c287b665c41f3e6b5c21eb5d7181890a886cb10df0b23fe02f",
      "category": "container_scanning",
      "message": "CVE-2024-45341 on stdlib@1.19.9",
      "description": "A certificate with a URI which has a IPv6 address with a zone ID may incorrectly satisfy a URI name constraint that applies to the certificate chain.\n\nCertificates containing URIs are not permitted in the web PKI, so this only affects users of private PKIs which make use of URIs.",
      "cve": "CVE-2024-45341",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.9 to 1.22.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.9"
          },
          "version": "1.19.9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-45341",
          "value": "CVE-2024-45341",
          "url": "https://scout.docker.com/v/CVE-2024-45341?s=golang&n=stdlib&t=golang&vr=%3C1.22.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-45341?s=golang&n=stdlib&t=golang&vr=%3C1.22.11"
        }
      ]
    },
    {
      "id": "ec9acfc8875d9bf7f72f96296ad0927594a56a3f771c855374a871bfc0414531",
      "category": "container_scanning",
      "message": "CVE-2024-45341 on stdlib@1.20.6",
      "description": "A certificate with a URI which has a IPv6 address with a zone ID may incorrectly satisfy a URI name constraint that applies to the certificate chain.\n\nCertificates containing URIs are not permitted in the web PKI, so this only affects users of private PKIs which make use of URIs.",
      "cve": "CVE-2024-45341",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.6 to 1.22.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.6"
          },
          "version": "1.20.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-45341",
          "value": "CVE-2024-45341",
          "url": "https://scout.docker.com/v/CVE-2024-45341?s=golang&n=stdlib&t=golang&vr=%3C1.22.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-45341?s=golang&n=stdlib&t=golang&vr=%3C1.22.11"
        }
      ]
    },
    {
      "id": "2cae49f1426468914fef446c14b2602ec28cbd2ae13165c024ef72e3941254fc",
      "category": "container_scanning",
      "message": "CVE-2024-47611 on alpine/xz@5.4.3-r0",
      "cve": "CVE-2024-47611",
      "severity": "Medium",
      "confidence": "Unknown",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/xz@5.4.3-r0?os_name=alpine&os_version=3.18"
          },
          "version": "5.4.3-r0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-47611",
          "value": "CVE-2024-47611",
          "url": "https://scout.docker.com/v/CVE-2024-47611?s=alpine&n=xz&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C%3D5.4.3-r0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-47611?s=alpine&n=xz&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C%3D5.4.3-r0"
        }
      ]
    },
    {
      "id": "8d70daf4eae668763936c063a25a18d289085462a05e16c418ef6d5c2bfa5fda",
      "category": "container_scanning",
      "message": "CVE-2023-29406 on stdlib@1.19.9",
      "description": "The HTTP/1 client does not fully validate the contents of the Host header. A maliciously crafted Host header can inject additional headers or entire requests.\n\nWith fix, the HTTP/1 client now refuses to send requests containing an invalid Request.Host or Request.URL.Host value.",
      "cve": "CVE-2023-29406",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.9 to 1.19.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.9"
          },
          "version": "1.19.9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-29406",
          "value": "CVE-2023-29406",
          "url": "https://scout.docker.com/v/CVE-2023-29406?s=golang&n=stdlib&t=golang&vr=%3C1.19.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-29406?s=golang&n=stdlib&t=golang&vr=%3C1.19.11"
        }
      ]
    },
    {
      "id": "d74773a9b5e11f3f3bf9451f25b6e94da4212a7bc806dd6f46ee360b30453e84",
      "category": "container_scanning",
      "message": "CVE-2023-36054 on alpine/krb5@1.20.1-r1",
      "cve": "CVE-2023-36054",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/krb5@1.20.1-r1 to 1.20.2-r0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/krb5@1.20.1-r1?os_name=alpine&os_version=3.18"
          },
          "version": "1.20.1-r1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-36054",
          "value": "CVE-2023-36054",
          "url": "https://scout.docker.com/v/CVE-2023-36054?s=alpine&n=krb5&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C1.20.2-r0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-36054?s=alpine&n=krb5&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C1.20.2-r0"
        }
      ]
    },
    {
      "id": "7900acc2670774f6892cffca12bb40740efc2090a7f93d2eff8277d646080036",
      "category": "container_scanning",
      "message": "CVE-2023-45290 on stdlib@1.19.9",
      "description": "When parsing a multipart form (either explicitly with Request.ParseMultipartForm or implicitly with Request.FormValue, Request.PostFormValue, or Request.FormFile), limits on the total size of the parsed form were not applied to the memory consumed while reading a single form line. This permits a maliciously crafted input containing very long lines to cause allocation of arbitrarily large amounts of memory, potentially leading to memory exhaustion.\n\nWith fix, the ParseMultipartForm function now correctly limits the maximum size of form lines.",
      "cve": "CVE-2023-45290",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.9 to 1.21.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.9"
          },
          "version": "1.19.9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45290",
          "value": "CVE-2023-45290",
          "url": "https://scout.docker.com/v/CVE-2023-45290?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45290?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ]
    },
    {
      "id": "360d803890b975f43f4c300d595b6fb6fbfa37ae5feac081c0b9f31cbc532141",
      "category": "container_scanning",
      "message": "CVE-2023-45290 on stdlib@1.21.1",
      "description": "When parsing a multipart form (either explicitly with Request.ParseMultipartForm or implicitly with Request.FormValue, Request.PostFormValue, or Request.FormFile), limits on the total size of the parsed form were not applied to the memory consumed while reading a single form line. This permits a maliciously crafted input containing very long lines to cause allocation of arbitrarily large amounts of memory, potentially leading to memory exhaustion.\n\nWith fix, the ParseMultipartForm function now correctly limits the maximum size of form lines.",
      "cve": "CVE-2023-45290",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.21.1 to 1.21.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.21.1"
          },
          "version": "1.21.1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45290",
          "value": "CVE-2023-45290",
          "url": "https://scout.docker.com/v/CVE-2023-45290?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45290?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ]
    },
    {
      "id": "fc1fb70f356d94efee317827654cf5edbe6c370cde9e9746b9eec2b48e911492",
      "category": "container_scanning",
      "message": "CVE-2023-45290 on stdlib@1.20.6",
      "description": "When parsing a multipart form (either explicitly with Request.ParseMultipartForm or implicitly with Request.FormValue, Request.PostFormValue, or Request.FormFile), limits on the total size of the parsed form were not applied to the memory consumed while reading a single form line. This permits a maliciously crafted input containing very long lines to cause allocation of arbitrarily large amounts of memory, potentially leading to memory exhaustion.\n\nWith fix, the ParseMultipartForm function now correctly limits the maximum size of form lines.",
      "cve": "CVE-2023-45290",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.6 to 1.21.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.6"
          },
          "version": "1.20.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45290",
          "value": "CVE-2023-45290",
          "url": "https://scout.docker.com/v/CVE-2023-45290?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45290?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ]
    },
    {
      "id": "3a9422f318047460ec9c7faf4d5b98efd1ca72928679c7237e921f1c804876c4",
      "category": "container_scanning",
      "message": "CVE-2023-51385 on alpine/openssh@9.3_p2-r0",
      "cve": "CVE-2023-51385",
      "severity": "Medium",
      "confidence": "Unknown",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssh@9.3_p2-r0?os_name=alpine&os_version=3.18"
          },
          "version": "9.3_p2-r0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-51385",
          "value": "CVE-2023-51385",
          "url": "https://scout.docker.com/v/CVE-2023-51385?s=alpine&n=openssh&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C%3D9.3_p2-r2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-51385?s=alpine&n=openssh&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C%3D9.3_p2-r2"
        }
      ]
    },
    {
      "id": "be600922216b93bf27eadd9fb4f319838985a3dc9e2da051f6dd269f104d07a8",
      "category": "container_scanning",
      "message": "CVE-2023-6129 on alpine/openssl@3.1.3-r0",
      "cve": "CVE-2023-6129",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@3.1.3-r0 to 3.1.4-r3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@3.1.3-r0?os_name=alpine&os_version=3.18"
          },
          "version": "3.1.3-r0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-6129",
          "value": "CVE-2023-6129",
          "url": "https://scout.docker.com/v/CVE-2023-6129?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.4-r3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-6129?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.4-r3"
        }
      ]
    },
    {
      "id": "01691a096b641a7f269fc388596fc9017669718678bc9428a2bb75a858d822b6",
      "category": "container_scanning",
      "message": "CVE-2025-47906 on stdlib@1.19.9",
      "description": "If the PATH environment variable contains paths which are executables (rather than just directories), passing certain strings to LookPath (\"\", \".\", and \"..\"), can result in the binaries listed in the PATH being unexpectedly returned.",
      "cve": "CVE-2025-47906",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.9 to 1.23.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.9"
          },
          "version": "1.19.9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-47906",
          "value": "CVE-2025-47906",
          "url": "https://scout.docker.com/v/CVE-2025-47906?s=golang&n=stdlib&t=golang&vr=%3C1.23.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-47906?s=golang&n=stdlib&t=golang&vr=%3C1.23.12"
        }
      ]
    },
    {
      "id": "f3acad77a9333976e2275e9d3d8e8a2669e6a1e5261d4fb8a2c48e8d988b84ee",
      "category": "container_scanning",
      "message": "CVE-2025-47906 on stdlib@1.21.1",
      "description": "If the PATH environment variable contains paths which are executables (rather than just directories), passing certain strings to LookPath (\"\", \".\", and \"..\"), can result in the binaries listed in the PATH being unexpectedly returned.",
      "cve": "CVE-2025-47906",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.21.1 to 1.23.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.21.1"
          },
          "version": "1.21.1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-47906",
          "value": "CVE-2025-47906",
          "url": "https://scout.docker.com/v/CVE-2025-47906?s=golang&n=stdlib&t=golang&vr=%3C1.23.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-47906?s=golang&n=stdlib&t=golang&vr=%3C1.23.12"
        }
      ]
    },
    {
      "id": "710f5ca162afdfbe154f4409de09015af641267c793e3b28714e442912745934",
      "category": "container_scanning",
      "message": "CVE-2025-47906 on stdlib@1.20.6",
      "description": "If the PATH environment variable contains paths which are executables (rather than just directories), passing certain strings to LookPath (\"\", \".\", and \"..\"), can result in the binaries listed in the PATH being unexpectedly returned.",
      "cve": "CVE-2025-47906",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.6 to 1.23.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.6"
          },
          "version": "1.20.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-47906",
          "value": "CVE-2025-47906",
          "url": "https://scout.docker.com/v/CVE-2025-47906?s=golang&n=stdlib&t=golang&vr=%3C1.23.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-47906?s=golang&n=stdlib&t=golang&vr=%3C1.23.12"
        }
      ]
    },
    {
      "id": "c555a7567c1e74208985ba2f478634f73162afade5d4860d6108d409af6ccbd5",
      "category": "container_scanning",
      "message": "CVE-2024-24786 on google.golang.org/protobuf@1.31.0",
      "description": "The protojson.Unmarshal function can enter an infinite loop when unmarshaling certain forms of invalid JSON. This condition can occur when unmarshaling into a message which contains a google.protobuf.Any value, or when the UnmarshalOptions.DiscardUnknown option is set.",
      "cve": "CVE-2024-24786",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade google.golang.org/protobuf@1.31.0 to 1.33.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/google.golang.org/protobuf@1.31.0"
          },
          "version": "1.31.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24786",
          "value": "CVE-2024-24786",
          "url": "https://scout.docker.com/v/CVE-2024-24786?s=github&n=protobuf&ns=google.golang.org&t=golang&vr=%3C1.33.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24786?s=github&n=protobuf&ns=google.golang.org&t=golang&vr=%3C1.33.0"
        }
      ]
    },
    {
      "id": "5a25ed1cd21442ff6ec54d6ad347518e405c2328248f74ea31e426da7ba73775",
      "category": "container_scanning",
      "message": "CVE-2024-24786 on google.golang.org/protobuf@1.30.0",
      "description": "The protojson.Unmarshal function can enter an infinite loop when unmarshaling certain forms of invalid JSON. This condition can occur when unmarshaling into a message which contains a google.protobuf.Any value, or when the UnmarshalOptions.DiscardUnknown option is set.",
      "cve": "CVE-2024-24786",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade google.golang.org/protobuf@1.30.0 to 1.33.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/google.golang.org/protobuf@1.30.0"
          },
          "version": "1.30.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24786",
          "value": "CVE-2024-24786",
          "url": "https://scout.docker.com/v/CVE-2024-24786?s=github&n=protobuf&ns=google.golang.org&t=golang&vr=%3C1.33.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24786?s=github&n=protobuf&ns=google.golang.org&t=golang&vr=%3C1.33.0"
        }
      ]
    },
    {
      "id": "6baa0d77f3b9865fa720360c91c3e5b9809b14f73b519989cddb73c8e600acc5",
      "category": "container_scanning",
      "message": "CVE-2025-26465 on alpine/openssh@9.3_p2-r0",
      "cve": "CVE-2025-26465",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssh@9.3_p2-r0 to 9.3_p2-r3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssh@9.3_p2-r0?os_name=alpine&os_version=3.18"
          },
          "version": "9.3_p2-r0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-26465",
          "value": "CVE-2025-26465",
          "url": "https://scout.docker.com/v/CVE-2025-26465?s=alpine&n=openssh&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C9.3_p2-r3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-26465?s=alpine&n=openssh&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C9.3_p2-r3"
        }
      ]
    },
    {
      "id": "8587f08fe481e30f2f49c454440f95aac6b19785f771c270cd0cdbe1d3f48c15",
      "category": "container_scanning",
      "message": "CVE-2025-4673 on stdlib@1.21.1",
      "description": "Proxy-Authorization and Proxy-Authenticate headers persisted on cross-origin redirects potentially leaking sensitive information.",
      "cve": "CVE-2025-4673",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.21.1 to 1.23.10",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.21.1"
          },
          "version": "1.21.1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-4673",
          "value": "CVE-2025-4673",
          "url": "https://scout.docker.com/v/CVE-2025-4673?s=golang&n=stdlib&t=golang&vr=%3C1.23.10"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-4673?s=golang&n=stdlib&t=golang&vr=%3C1.23.10"
        }
      ]
    },
    {
      "id": "6546863d8e5fb4378c0ce3fe1b53184a3826df6c279a318b3a2b56c10a0cbdba",
      "category": "container_scanning",
      "message": "CVE-2025-4673 on stdlib@1.19.9",
      "description": "Proxy-Authorization and Proxy-Authenticate headers persisted on cross-origin redirects potentially leaking sensitive information.",
      "cve": "CVE-2025-4673",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.9 to 1.23.10",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.9"
          },
          "version": "1.19.9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-4673",
          "value": "CVE-2025-4673",
          "url": "https://scout.docker.com/v/CVE-2025-4673?s=golang&n=stdlib&t=golang&vr=%3C1.23.10"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-4673?s=golang&n=stdlib&t=golang&vr=%3C1.23.10"
        }
      ]
    },
    {
      "id": "86b0451c807899369f569651564ff5670a3234f311dbe0e1de390b431e797bb6",
      "category": "container_scanning",
      "message": "CVE-2025-4673 on stdlib@1.20.6",
      "description": "Proxy-Authorization and Proxy-Authenticate headers persisted on cross-origin redirects potentially leaking sensitive information.",
      "cve": "CVE-2025-4673",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.6 to 1.23.10",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.6"
          },
          "version": "1.20.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-4673",
          "value": "CVE-2025-4673",
          "url": "https://scout.docker.com/v/CVE-2025-4673?s=golang&n=stdlib&t=golang&vr=%3C1.23.10"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-4673?s=golang&n=stdlib&t=golang&vr=%3C1.23.10"
        }
      ]
    },
    {
      "id": "77bc733d531b1036a9f7328b7b9a0d4ece8096432b6c763f75092cb809dcde05",
      "category": "container_scanning",
      "message": "CVE-2023-44487 on golang.org/x/net@0.8.0",
      "description": "## HTTP/2 Rapid reset attack\nThe HTTP/2 protocol allows clients to indicate to the server that a previous stream should be canceled by sending a RST_STREAM frame. The protocol does not require the client and server to coordinate the cancellation in any way, the client may do it unilaterally. The client may also assume that the cancellation will take effect immediately when the server receives the RST_STREAM frame, before any other data from that TCP connection is processed.\n\nAbuse of this feature is called a Rapid Reset attack because it relies on the ability for an endpoint to send a RST_STREAM frame immediately after sending a request frame, which makes the other endpoint start working and then rapidly resets the request. The request is canceled, but leaves the HTTP/2 connection open. \n\nThe HTTP/2 Rapid Reset attack built on this capability is simple: The client opens a large number of streams at once as in the standard HTTP/2 attack, but rather than waiting for a response to each request stream from the server or proxy, the client cancels each request immediately.\n\nThe ability to reset streams immediately allows each connection to have an indefinite number of requests in flight. By explicitly canceling the requests, the attacker never exceeds the limit on the number of concurrent open streams. The number of in-flight requests is no longer dependent on the round-trip time (RTT), but only on the available network bandwidth.\n\nIn a typical HTTP/2 server implementation, the server will still have to do significant amounts of work for canceled requests, such as allocating new stream data structures, parsing the query and doing header decompression, and mapping the URL to a resource. For reverse proxy implementations, the request may be proxied to the backend server before the RST_STREAM frame is processed. The client on the other hand paid almost no costs for sending the requests. This creates an exploitable cost asymmetry between the server and the client.\n\nMultiple software artifacts implementing HTTP/2 are affected. This advisory was originally ingested from the `swift-nio-http2` repo advisory and their original conent follows.\n\n## swift-nio-http2 specific advisory\nswift-nio-http2 is vulnerable to a denial-of-service vulnerability in which a malicious client can create and then reset a large number of HTTP/2 streams in a short period of time. This causes swift-nio-http2 to commit to a large amount of expensive work which it then throws away, including creating entirely new `Channel`s to serve the traffic. This can easily overwhelm an `EventLoop` and prevent it from making forward progress.\n\nswift-nio-http2 1.28 contains a remediation for this issue that applies reset counter using a sliding window. This constrains the number of stream resets that may occur in a given window of time. Clients violating this limit will have their connections torn down. This allows clients to continue to cancel streams for legitimate reasons, while constraining malicious actors.",
      "cve": "CVE-2023-44487",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/net@0.8.0 to 0.17.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/net@0.8.0"
          },
          "version": "0.8.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-44487",
          "value": "CVE-2023-44487",
          "url": "https://scout.docker.com/v/CVE-2023-44487?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.17.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-44487?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.17.0"
        }
      ]
    },
    {
      "id": "28c8ce3241ef4d0127060fbf66c7735814609279ba7228598ba6c3867e5e31d8",
      "category": "container_scanning",
      "message": "CVE-2023-44487 on golang.org/x/net@0.12.0",
      "description": "## HTTP/2 Rapid reset attack\nThe HTTP/2 protocol allows clients to indicate to the server that a previous stream should be canceled by sending a RST_STREAM frame. The protocol does not require the client and server to coordinate the cancellation in any way, the client may do it unilaterally. The client may also assume that the cancellation will take effect immediately when the server receives the RST_STREAM frame, before any other data from that TCP connection is processed.\n\nAbuse of this feature is called a Rapid Reset attack because it relies on the ability for an endpoint to send a RST_STREAM frame immediately after sending a request frame, which makes the other endpoint start working and then rapidly resets the request. The request is canceled, but leaves the HTTP/2 connection open. \n\nThe HTTP/2 Rapid Reset attack built on this capability is simple: The client opens a large number of streams at once as in the standard HTTP/2 attack, but rather than waiting for a response to each request stream from the server or proxy, the client cancels each request immediately.\n\nThe ability to reset streams immediately allows each connection to have an indefinite number of requests in flight. By explicitly canceling the requests, the attacker never exceeds the limit on the number of concurrent open streams. The number of in-flight requests is no longer dependent on the round-trip time (RTT), but only on the available network bandwidth.\n\nIn a typical HTTP/2 server implementation, the server will still have to do significant amounts of work for canceled requests, such as allocating new stream data structures, parsing the query and doing header decompression, and mapping the URL to a resource. For reverse proxy implementations, the request may be proxied to the backend server before the RST_STREAM frame is processed. The client on the other hand paid almost no costs for sending the requests. This creates an exploitable cost asymmetry between the server and the client.\n\nMultiple software artifacts implementing HTTP/2 are affected. This advisory was originally ingested from the `swift-nio-http2` repo advisory and their original conent follows.\n\n## swift-nio-http2 specific advisory\nswift-nio-http2 is vulnerable to a denial-of-service vulnerability in which a malicious client can create and then reset a large number of HTTP/2 streams in a short period of time. This causes swift-nio-http2 to commit to a large amount of expensive work which it then throws away, including creating entirely new `Channel`s to serve the traffic. This can easily overwhelm an `EventLoop` and prevent it from making forward progress.\n\nswift-nio-http2 1.28 contains a remediation for this issue that applies reset counter using a sliding window. This constrains the number of stream resets that may occur in a given window of time. Clients violating this limit will have their connections torn down. This allows clients to continue to cancel streams for legitimate reasons, while constraining malicious actors.",
      "cve": "CVE-2023-44487",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/net@0.12.0 to 0.17.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/net@0.12.0"
          },
          "version": "0.12.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-44487",
          "value": "CVE-2023-44487",
          "url": "https://scout.docker.com/v/CVE-2023-44487?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.17.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-44487?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.17.0"
        }
      ]
    },
    {
      "id": "691878ab94dd6a07756e52f94f450260717ab597351d48e00f60d1646d727e30",
      "category": "container_scanning",
      "message": "CVE-2024-24557 on github.com/docker/docker@24.0.6+incompatible",
      "description": "The classic builder cache system is prone to cache poisoning if the image is built `FROM scratch`.\nAlso, changes to some instructions (most important being `HEALTHCHECK` and `ONBUILD`) would not cause a cache miss.\n\n\nAn attacker with the knowledge of the Dockerfile someone is using could poison their cache by making them pull a specially crafted image that would be considered as a valid cache candidate for some build steps.\n\nFor example, an attacker could create an image that is considered as a valid cache candidate for:\n```\nFROM scratch\nMAINTAINER Pawel\n```\n\nwhen in fact the malicious image used as a cache would be an image built from a different Dockerfile.\n\nIn the second case, the attacker could for example substitute a different `HEALTCHECK` command.\n\n\n### Impact\n\n23.0+ users are only affected if they explicitly opted out of Buildkit (`DOCKER_BUILDKIT=0` environment variable) or are using the `/build` API endpoint (which uses the classic builder by default).\n\nAll users on versions older than 23.0 could be impacted. An example could be a CI with a shared cache, or just a regular Docker user pulling a malicious image due to misspelling/typosquatting.\n\nImage build API endpoint (`/build`) and `ImageBuild` function from `github.com/docker/docker/client` is also affected as it the uses classic builder by default. \n\n\n### Patches\n\nPatches are included in Moby releases:\n\n- v25.0.2\n- v24.0.9\n- v23.0.10\n\n### Workarounds\n\n- Use `--no-cache` or use Buildkit if possible (`DOCKER_BUILDKIT=1`, it's default on 23.0+ assuming that the buildx plugin is installed).\n- Use `Version = types.BuilderBuildKit` or `NoCache = true` in `ImageBuildOptions` for `ImageBuild` call.\n\n",
      "cve": "CVE-2024-24557",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/docker/docker@24.0.6+incompatible to 24.0.9",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/docker/docker@24.0.6%2Bincompatible"
          },
          "version": "24.0.6+incompatible"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24557",
          "value": "CVE-2024-24557",
          "url": "https://scout.docker.com/v/CVE-2024-24557?s=github&n=docker&ns=github.com%2Fdocker&t=golang&vr=%3C24.0.9"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24557?s=github&n=docker&ns=github.com%2Fdocker&t=golang&vr=%3C24.0.9"
        }
      ]
    },
    {
      "id": "645b4ad4edb97ae8cd438cdaa2c747a9f00e2056866fbc15c15c85b3a9511a84",
      "category": "container_scanning",
      "message": "CVE-2024-24557 on github.com/docker/docker@24.0.5-0.20230714235725-36e9e796c6fc+incompatible",
      "description": "The classic builder cache system is prone to cache poisoning if the image is built `FROM scratch`.\nAlso, changes to some instructions (most important being `HEALTHCHECK` and `ONBUILD`) would not cause a cache miss.\n\n\nAn attacker with the knowledge of the Dockerfile someone is using could poison their cache by making them pull a specially crafted image that would be considered as a valid cache candidate for some build steps.\n\nFor example, an attacker could create an image that is considered as a valid cache candidate for:\n```\nFROM scratch\nMAINTAINER Pawel\n```\n\nwhen in fact the malicious image used as a cache would be an image built from a different Dockerfile.\n\nIn the second case, the attacker could for example substitute a different `HEALTCHECK` command.\n\n\n### Impact\n\n23.0+ users are only affected if they explicitly opted out of Buildkit (`DOCKER_BUILDKIT=0` environment variable) or are using the `/build` API endpoint (which uses the classic builder by default).\n\nAll users on versions older than 23.0 could be impacted. An example could be a CI with a shared cache, or just a regular Docker user pulling a malicious image due to misspelling/typosquatting.\n\nImage build API endpoint (`/build`) and `ImageBuild` function from `github.com/docker/docker/client` is also affected as it the uses classic builder by default. \n\n\n### Patches\n\nPatches are included in Moby releases:\n\n- v25.0.2\n- v24.0.9\n- v23.0.10\n\n### Workarounds\n\n- Use `--no-cache` or use Buildkit if possible (`DOCKER_BUILDKIT=1`, it's default on 23.0+ assuming that the buildx plugin is installed).\n- Use `Version = types.BuilderBuildKit` or `NoCache = true` in `ImageBuildOptions` for `ImageBuild` call.\n\n",
      "cve": "CVE-2024-24557",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/docker/docker@24.0.5-0.20230714235725-36e9e796c6fc+incompatible to 24.0.9",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/docker/docker@24.0.5-0.20230714235725-36e9e796c6fc%2Bincompatible"
          },
          "version": "24.0.5-0.20230714235725-36e9e796c6fc+incompatible"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24557",
          "value": "CVE-2024-24557",
          "url": "https://scout.docker.com/v/CVE-2024-24557?s=github&n=docker&ns=github.com%2Fdocker&t=golang&vr=%3C24.0.9"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24557?s=github&n=docker&ns=github.com%2Fdocker&t=golang&vr=%3C24.0.9"
        }
      ]
    },
    {
      "id": "e46ecd1a53c3fd7dc56c82e5d5d3bb94e892c6dc9de288fb3ef87166f50a7bd3",
      "category": "container_scanning",
      "message": "CVE-2023-51767 on alpine/openssh@9.3_p2-r0",
      "cve": "CVE-2023-51767",
      "severity": "High",
      "confidence": "Unknown",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssh@9.3_p2-r0?os_name=alpine&os_version=3.18"
          },
          "version": "9.3_p2-r0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-51767",
          "value": "CVE-2023-51767",
          "url": "https://scout.docker.com/v/CVE-2023-51767?s=alpine&n=openssh&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C%3D9.3_p2-r2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-51767?s=alpine&n=openssh&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C%3D9.3_p2-r2"
        }
      ]
    },
    {
      "id": "3dcf3cf816217173e41b1d53565f268e31684bd5af9dd33960a867458ab480b1",
      "category": "container_scanning",
      "message": "CVE-2022-21698 on go.opentelemetry.io/contrib/instrumentation@0.40.0",
      "description": "Memory exhaustion in go.opentelemetry.io/contrib/instrumentation",
      "cve": "CVE-2022-21698",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade go.opentelemetry.io/contrib/instrumentation@0.40.0 to 0.44.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/go.opentelemetry.io/contrib/instrumentation@0.40.0#net/http/httptrace/otelhttptrace"
          },
          "version": "0.40.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-21698",
          "value": "CVE-2022-21698",
          "url": "https://scout.docker.com/v/CVE-2022-21698?s=golang&n=net%2Fhttp%2Fhttptrace%2Fotelhttptrace&ns=go.opentelemetry.io%2Fcontrib%2Finstrumentation&t=golang&vr=%3C0.44.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-21698?s=golang&n=net%2Fhttp%2Fhttptrace%2Fotelhttptrace&ns=go.opentelemetry.io%2Fcontrib%2Finstrumentation&t=golang&vr=%3C0.44.0"
        }
      ]
    },
    {
      "id": "366d5570ddc16b6065eb54d265c083a153ca9a7ec3cf8d6e14dcf6b67c88373e",
      "category": "container_scanning",
      "message": "CVE-2022-21698 on go.opentelemetry.io/contrib/instrumentation@0.40.0",
      "description": "Memory exhaustion in go.opentelemetry.io/contrib/instrumentation",
      "cve": "CVE-2022-21698",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade go.opentelemetry.io/contrib/instrumentation@0.40.0 to 0.44.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/go.opentelemetry.io/contrib/instrumentation@0.40.0#net/http/otelhttp"
          },
          "version": "0.40.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-21698",
          "value": "CVE-2022-21698",
          "url": "https://scout.docker.com/v/CVE-2022-21698?s=golang&n=net%2Fhttp%2Fotelhttp&ns=go.opentelemetry.io%2Fcontrib%2Finstrumentation&t=golang&vr=%3C0.44.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-21698?s=golang&n=net%2Fhttp%2Fotelhttp&ns=go.opentelemetry.io%2Fcontrib%2Finstrumentation&t=golang&vr=%3C0.44.0"
        }
      ]
    },
    {
      "id": "ae220146c01534e099840bb9ad7309d0222aa4cf421851cadfff49701f0782af",
      "category": "container_scanning",
      "message": "CVE-2022-30635 on stdlib@1.20.6",
      "description": "Calling Decoder.Decode on a message which contains deeply nested structures can cause a panic due to stack exhaustion. This is a follow-up to CVE-2022-30635.",
      "cve": "CVE-2022-30635",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.6 to 1.22.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.6"
          },
          "version": "1.20.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-30635",
          "value": "CVE-2022-30635",
          "url": "https://scout.docker.com/v/CVE-2022-30635?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-30635?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ]
    },
    {
      "id": "da610ada29368c3242609f05236c8d14041f00f0b51418e042436cd892ae8ffe",
      "category": "container_scanning",
      "message": "CVE-2022-30635 on stdlib@1.19.9",
      "description": "Calling Decoder.Decode on a message which contains deeply nested structures can cause a panic due to stack exhaustion. This is a follow-up to CVE-2022-30635.",
      "cve": "CVE-2022-30635",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.9 to 1.22.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.9"
          },
          "version": "1.19.9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-30635",
          "value": "CVE-2022-30635",
          "url": "https://scout.docker.com/v/CVE-2022-30635?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-30635?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ]
    },
    {
      "id": "e4867679916d33bbafbf8cc0d8040c4bd49a972419c6776662ff13cd89ebacc1",
      "category": "container_scanning",
      "message": "CVE-2022-30635 on stdlib@1.21.1",
      "description": "Calling Decoder.Decode on a message which contains deeply nested structures can cause a panic due to stack exhaustion. This is a follow-up to CVE-2022-30635.",
      "cve": "CVE-2022-30635",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.21.1 to 1.22.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.21.1"
          },
          "version": "1.21.1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-30635",
          "value": "CVE-2022-30635",
          "url": "https://scout.docker.com/v/CVE-2022-30635?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-30635?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ]
    },
    {
      "id": "5801a8b2412c0d6e9139bf653d17f866768517ea0a31b84ea277becaab1efa6e",
      "category": "container_scanning",
      "message": "CVE-2023-25151 on go.opentelemetry.io/contrib/instrumentation@0.40.0",
      "description": "Memory exhaustion in go.opentelemetry.io/contrib/instrumentation",
      "cve": "CVE-2023-25151",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade go.opentelemetry.io/contrib/instrumentation@0.40.0 to 0.44.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/go.opentelemetry.io/contrib/instrumentation@0.40.0#net/http/httptrace/otelhttptrace"
          },
          "version": "0.40.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-25151",
          "value": "CVE-2023-25151",
          "url": "https://scout.docker.com/v/CVE-2023-25151?s=golang&n=net%2Fhttp%2Fhttptrace%2Fotelhttptrace&ns=go.opentelemetry.io%2Fcontrib%2Finstrumentation&t=golang&vr=%3C0.44.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-25151?s=golang&n=net%2Fhttp%2Fhttptrace%2Fotelhttptrace&ns=go.opentelemetry.io%2Fcontrib%2Finstrumentation&t=golang&vr=%3C0.44.0"
        }
      ]
    },
    {
      "id": "d03acc96eaf2749ba7c1693649fb75b9ff709a628c5fc3b921c2b30b3cc169e6",
      "category": "container_scanning",
      "message": "CVE-2023-25151 on go.opentelemetry.io/contrib/instrumentation@0.40.0",
      "description": "Memory exhaustion in go.opentelemetry.io/contrib/instrumentation",
      "cve": "CVE-2023-25151",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade go.opentelemetry.io/contrib/instrumentation@0.40.0 to 0.44.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/go.opentelemetry.io/contrib/instrumentation@0.40.0#net/http/otelhttp"
          },
          "version": "0.40.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-25151",
          "value": "CVE-2023-25151",
          "url": "https://scout.docker.com/v/CVE-2023-25151?s=golang&n=net%2Fhttp%2Fotelhttp&ns=go.opentelemetry.io%2Fcontrib%2Finstrumentation&t=golang&vr=%3C0.44.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-25151?s=golang&n=net%2Fhttp%2Fotelhttp&ns=go.opentelemetry.io%2Fcontrib%2Finstrumentation&t=golang&vr=%3C0.44.0"
        }
      ]
    },
    {
      "id": "777bdac28aefa12949613688661fab7e405db1b98b6c60a3de6da80ee697ae40",
      "category": "container_scanning",
      "message": "CVE-2023-39325 on golang.org/x/net@0.12.0",
      "description": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing. \n\nWith the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection. \n\nThis issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2.\n\nThe default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
      "cve": "CVE-2023-39325",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/net@0.12.0 to 0.17.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/net@0.12.0"
          },
          "version": "0.12.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-39325",
          "value": "CVE-2023-39325",
          "url": "https://scout.docker.com/v/CVE-2023-39325?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.17.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-39325?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.17.0"
        }
      ]
    },
    {
      "id": "64a246d438dbb8f7b1e76999a4da1c9e8ee32c2c0f55ca671541aba45c08b3da",
      "category": "container_scanning",
      "message": "CVE-2023-39325 on stdlib@1.21.1",
      "description": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing.\n\nWith the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection.\n\nThis issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2.\n\nThe default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
      "cve": "CVE-2023-39325",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.21.1 to 1.21.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.21.1"
          },
          "version": "1.21.1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-39325",
          "value": "CVE-2023-39325",
          "url": "https://scout.docker.com/v/CVE-2023-39325?s=golang&n=stdlib&t=golang&vr=%3E%3D1.21.0-0%2C%3C1.21.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-39325?s=golang&n=stdlib&t=golang&vr=%3E%3D1.21.0-0%2C%3C1.21.3"
        }
      ]
    },
    {
      "id": "ad63f9d2896591d3c2dd5cb7264217b096043e4911e678d4144ad2d2ccd05690",
      "category": "container_scanning",
      "message": "CVE-2023-39325 on stdlib@1.20.6",
      "description": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing.\n\nWith the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection.\n\nThis issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2.\n\nThe default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
      "cve": "CVE-2023-39325",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.6 to 1.20.10",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.6"
          },
          "version": "1.20.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-39325",
          "value": "CVE-2023-39325",
          "url": "https://scout.docker.com/v/CVE-2023-39325?s=golang&n=stdlib&t=golang&vr=%3C1.20.10"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-39325?s=golang&n=stdlib&t=golang&vr=%3C1.20.10"
        }
      ]
    },
    {
      "id": "4931ec9814c6ab3560353dd4d088dc8136d47d30107e6acd55507ae41d68ba0f",
      "category": "container_scanning",
      "message": "CVE-2023-39325 on stdlib@1.19.9",
      "description": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing.\n\nWith the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection.\n\nThis issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2.\n\nThe default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
      "cve": "CVE-2023-39325",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.9 to 1.20.10",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.9"
          },
          "version": "1.19.9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-39325",
          "value": "CVE-2023-39325",
          "url": "https://scout.docker.com/v/CVE-2023-39325?s=golang&n=stdlib&t=golang&vr=%3C1.20.10"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-39325?s=golang&n=stdlib&t=golang&vr=%3C1.20.10"
        }
      ]
    },
    {
      "id": "04328ca1b52885a5937f8403742643bc7b80162fa5f830f9e67d4e469c7f99ca",
      "category": "container_scanning",
      "message": "CVE-2023-39325 on golang.org/x/net@0.8.0",
      "description": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing. \n\nWith the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection. \n\nThis issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2.\n\nThe default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
      "cve": "CVE-2023-39325",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/net@0.8.0 to 0.17.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/net@0.8.0"
          },
          "version": "0.8.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-39325",
          "value": "CVE-2023-39325",
          "url": "https://scout.docker.com/v/CVE-2023-39325?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.17.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-39325?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.17.0"
        }
      ]
    },
    {
      "id": "b74da389a00bf75adb50d6d054ed931b9273a31cd2d9f3de6928b20d3971e4d7",
      "category": "container_scanning",
      "message": "CVE-2023-44487 on stdlib@1.20.6",
      "description": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing.\n\nWith the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection.\n\nThis issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2.\n\nThe default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
      "cve": "CVE-2023-44487",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.6 to 1.20.10",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.6"
          },
          "version": "1.20.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-44487",
          "value": "CVE-2023-44487",
          "url": "https://scout.docker.com/v/CVE-2023-44487?s=golang&n=stdlib&t=golang&vr=%3C1.20.10"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-44487?s=golang&n=stdlib&t=golang&vr=%3C1.20.10"
        }
      ]
    },
    {
      "id": "900fc243b9bb1aecd1122a13441351ef76db556fed32a215868540c445c8b006",
      "category": "container_scanning",
      "message": "CVE-2023-44487 on google.golang.org/grpc@1.58.1",
      "description": "An attacker can send HTTP/2 requests, cancel them, and send subsequent requests. This is valid by the HTTP/2 protocol, but would cause the gRPC-Go server to launch more concurrent method handlers than the configured maximum stream limit, grpc.MaxConcurrentStreams. This results in a denial of service due to resource consumption.",
      "cve": "CVE-2023-44487",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade google.golang.org/grpc@1.58.1 to 1.58.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/google.golang.org/grpc@1.58.1"
          },
          "version": "1.58.1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-44487",
          "value": "CVE-2023-44487",
          "url": "https://scout.docker.com/v/CVE-2023-44487?s=golang&n=grpc&ns=google.golang.org&t=golang&vr=%3E%3D1.58.0%2C%3C1.58.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-44487?s=golang&n=grpc&ns=google.golang.org&t=golang&vr=%3E%3D1.58.0%2C%3C1.58.3"
        }
      ]
    },
    {
      "id": "c0ae1ee7c41e51dff73dcddde2858db3dfd6189c6ade2f6f79e8328c17cb74e8",
      "category": "container_scanning",
      "message": "CVE-2023-44487 on stdlib@1.21.1",
      "description": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing.\n\nWith the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection.\n\nThis issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2.\n\nThe default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
      "cve": "CVE-2023-44487",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.21.1 to 1.21.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.21.1"
          },
          "version": "1.21.1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-44487",
          "value": "CVE-2023-44487",
          "url": "https://scout.docker.com/v/CVE-2023-44487?s=golang&n=stdlib&t=golang&vr=%3E%3D1.21.0-0%2C%3C1.21.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-44487?s=golang&n=stdlib&t=golang&vr=%3E%3D1.21.0-0%2C%3C1.21.3"
        }
      ]
    },
    {
      "id": "391d2453f8df48af28626b504d57eb490b3491758ed0802f2f8970afb8750305",
      "category": "container_scanning",
      "message": "CVE-2023-44487 on stdlib@1.19.9",
      "description": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing.\n\nWith the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection.\n\nThis issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2.\n\nThe default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
      "cve": "CVE-2023-44487",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.9 to 1.20.10",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.9"
          },
          "version": "1.19.9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-44487",
          "value": "CVE-2023-44487",
          "url": "https://scout.docker.com/v/CVE-2023-44487?s=golang&n=stdlib&t=golang&vr=%3C1.20.10"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-44487?s=golang&n=stdlib&t=golang&vr=%3C1.20.10"
        }
      ]
    },
    {
      "id": "c482260968c7ed1728b1e87991567589823ac6b13b7cf1e64a1911373076f845",
      "category": "container_scanning",
      "message": "CVE-2023-44487 on google.golang.org/grpc@1.53.0",
      "description": "An attacker can send HTTP/2 requests, cancel them, and send subsequent requests. This is valid by the HTTP/2 protocol, but would cause the gRPC-Go server to launch more concurrent method handlers than the configured maximum stream limit, grpc.MaxConcurrentStreams. This results in a denial of service due to resource consumption.",
      "cve": "CVE-2023-44487",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade google.golang.org/grpc@1.53.0 to 1.56.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/google.golang.org/grpc@1.53.0"
          },
          "version": "1.53.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-44487",
          "value": "CVE-2023-44487",
          "url": "https://scout.docker.com/v/CVE-2023-44487?s=golang&n=grpc&ns=google.golang.org&t=golang&vr=%3C1.56.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-44487?s=golang&n=grpc&ns=google.golang.org&t=golang&vr=%3C1.56.3"
        }
      ]
    },
    {
      "id": "39e2eed9f977c0f53e919c230039c1ccc39eeb4ea760b585913b029c3985c3d3",
      "category": "container_scanning",
      "message": "CVE-2023-45142 on go.opentelemetry.io/contrib/instrumentation@0.40.0",
      "description": "### Summary\n\nThis handler wrapper https://github.com/open-telemetry/opentelemetry-go-contrib/blob/5f7e6ad5a49b45df45f61a1deb29d7f1158032df/instrumentation/net/http/otelhttp/handler.go#L63-L65\nout of the box adds labels\n\n- `http.user_agent`\n- `http.method`\n\nthat have unbound cardinality. It leads to the server's potential memory exhaustion when many malicious requests are sent to it.\n\n### Details\n\nHTTP header User-Agent or HTTP method for requests can be easily set by an attacker to be random and long. The library internally uses [httpconv.ServerRequest](https://github.com/open-telemetry/opentelemetry-go/blob/v1.12.0/semconv/internal/v2/http.go#L159) that records every value for HTTP [method](https://github.com/open-telemetry/opentelemetry-go/blob/38e1b499c3da3107694ad2660b3888eee9c8b896/semconv/internal/v2/http.go#L204) and [User-Agent](https://github.com/open-telemetry/opentelemetry-go/blob/38e1b499c3da3107694ad2660b3888eee9c8b896/semconv/internal/v2/http.go#L223).\n\n### PoC\n\nSend many requests with long randomly generated HTTP methods or/and User agents (e.g. a million) and observe how memory consumption increases during it.\n\n### Impact\n\nIn order to be affected, the program has to configure a metrics pipeline, use [otelhttp.NewHandler](https://github.com/open-telemetry/opentelemetry-go-contrib/blob/5f7e6ad5a49b45df45f61a1deb29d7f1158032df/instrumentation/net/http/otelhttp/handler.go#L63-L65) wrapper, and does not filter any unknown HTTP methods or User agents on the level of CDN, LB, previous middleware, etc.\n\n### Others\n\nIt is similar to already reported vulnerabilities\n- https://github.com/open-telemetry/opentelemetry-go-contrib/security/advisories/GHSA-5r5m-65gx-7vrh ([open-telemetry/opentelemetry-go-contrib](https://github.com/open-telemetry/opentelemetry-go-contrib))\n- https://github.com/advisories/GHSA-cg3q-j54f-5p7p ([prometheus/client_golang](https://github.com/prometheus/client_golang))\n\n### Workaround for affected versions\n\nAs a workaround to stop being affected [otelhttp.WithFilter()](https://pkg.go.dev/go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp/filters) can be used, but it requires manual careful configuration to not log certain requests entirely.\n\nFor convenience and safe usage of this library, it should by default mark with the label `unknown` non-standard HTTP methods and User agents to show that such requests were made but do not increase cardinality. In case someone wants to stay with the current behavior, library API should allow to enable it.\n\nThe other possibility is to disable HTTP metrics instrumentation by passing [`otelhttp.WithMeterProvider`](https://pkg.go.dev/go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp#WithMeterProvider) option with [`noop.NewMeterProvider`](https://pkg.go.dev/go.opentelemetry.io/otel/metric/noop#NewMeterProvider).\n\n### Solution provided by upgrading\n\nIn PR https://github.com/open-telemetry/opentelemetry-go-contrib/pull/4277, released with package version 0.44.0, the values collected for attribute `http.request.method` were changed to be restricted to a set of well-known values and other high cardinality attributes were removed.\n\n### References\n\n- https://github.com/open-telemetry/opentelemetry-go-contrib/pull/4277\n- https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.19.0\n",
      "cve": "CVE-2023-45142",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade go.opentelemetry.io/contrib/instrumentation@0.40.0 to 0.44.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/go.opentelemetry.io/contrib/instrumentation@0.40.0#net/http/otelhttp"
          },
          "version": "0.40.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45142",
          "value": "CVE-2023-45142",
          "url": "https://scout.docker.com/v/CVE-2023-45142?s=github&n=net%2Fhttp%2Fotelhttp&ns=go.opentelemetry.io%2Fcontrib%2Finstrumentation&t=golang&vr=%3C0.44.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45142?s=github&n=net%2Fhttp%2Fotelhttp&ns=go.opentelemetry.io%2Fcontrib%2Finstrumentation&t=golang&vr=%3C0.44.0"
        }
      ]
    },
    {
      "id": "20b74cb070b471f4ada8f86dbebc16a652a151625cd9fb0d2493f67ae146fcc5",
      "category": "container_scanning",
      "message": "CVE-2023-45142 on go.opentelemetry.io/contrib/instrumentation@0.40.0",
      "description": "### Summary\n\nThis handler wrapper https://github.com/open-telemetry/opentelemetry-go-contrib/blob/5f7e6ad5a49b45df45f61a1deb29d7f1158032df/instrumentation/net/http/otelhttp/handler.go#L63-L65\nout of the box adds labels\n\n- `http.user_agent`\n- `http.method`\n\nthat have unbound cardinality. It leads to the server's potential memory exhaustion when many malicious requests are sent to it.\n\n### Details\n\nHTTP header User-Agent or HTTP method for requests can be easily set by an attacker to be random and long. The library internally uses [httpconv.ServerRequest](https://github.com/open-telemetry/opentelemetry-go/blob/v1.12.0/semconv/internal/v2/http.go#L159) that records every value for HTTP [method](https://github.com/open-telemetry/opentelemetry-go/blob/38e1b499c3da3107694ad2660b3888eee9c8b896/semconv/internal/v2/http.go#L204) and [User-Agent](https://github.com/open-telemetry/opentelemetry-go/blob/38e1b499c3da3107694ad2660b3888eee9c8b896/semconv/internal/v2/http.go#L223).\n\n### PoC\n\nSend many requests with long randomly generated HTTP methods or/and User agents (e.g. a million) and observe how memory consumption increases during it.\n\n### Impact\n\nIn order to be affected, the program has to configure a metrics pipeline, use [otelhttp.NewHandler](https://github.com/open-telemetry/opentelemetry-go-contrib/blob/5f7e6ad5a49b45df45f61a1deb29d7f1158032df/instrumentation/net/http/otelhttp/handler.go#L63-L65) wrapper, and does not filter any unknown HTTP methods or User agents on the level of CDN, LB, previous middleware, etc.\n\n### Others\n\nIt is similar to already reported vulnerabilities\n- https://github.com/open-telemetry/opentelemetry-go-contrib/security/advisories/GHSA-5r5m-65gx-7vrh ([open-telemetry/opentelemetry-go-contrib](https://github.com/open-telemetry/opentelemetry-go-contrib))\n- https://github.com/advisories/GHSA-cg3q-j54f-5p7p ([prometheus/client_golang](https://github.com/prometheus/client_golang))\n\n### Workaround for affected versions\n\nAs a workaround to stop being affected [otelhttp.WithFilter()](https://pkg.go.dev/go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp/filters) can be used, but it requires manual careful configuration to not log certain requests entirely.\n\nFor convenience and safe usage of this library, it should by default mark with the label `unknown` non-standard HTTP methods and User agents to show that such requests were made but do not increase cardinality. In case someone wants to stay with the current behavior, library API should allow to enable it.\n\nThe other possibility is to disable HTTP metrics instrumentation by passing [`otelhttp.WithMeterProvider`](https://pkg.go.dev/go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp#WithMeterProvider) option with [`noop.NewMeterProvider`](https://pkg.go.dev/go.opentelemetry.io/otel/metric/noop#NewMeterProvider).\n\n### Solution provided by upgrading\n\nIn PR https://github.com/open-telemetry/opentelemetry-go-contrib/pull/4277, released with package version 0.44.0, the values collected for attribute `http.request.method` were changed to be restricted to a set of well-known values and other high cardinality attributes were removed.\n\n### References\n\n- https://github.com/open-telemetry/opentelemetry-go-contrib/pull/4277\n- https://github.com/open-telemetry/opentelemetry-go-contrib/releases/tag/v1.19.0\n",
      "cve": "CVE-2023-45142",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade go.opentelemetry.io/contrib/instrumentation@0.40.0 to 0.44.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/go.opentelemetry.io/contrib/instrumentation@0.40.0#net/http/httptrace/otelhttptrace"
          },
          "version": "0.40.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45142",
          "value": "CVE-2023-45142",
          "url": "https://scout.docker.com/v/CVE-2023-45142?s=github&n=net%2Fhttp%2Fhttptrace%2Fotelhttptrace&ns=go.opentelemetry.io%2Fcontrib%2Finstrumentation&t=golang&vr=%3C0.44.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45142?s=github&n=net%2Fhttp%2Fhttptrace%2Fotelhttptrace&ns=go.opentelemetry.io%2Fcontrib%2Finstrumentation&t=golang&vr=%3C0.44.0"
        }
      ]
    },
    {
      "id": "3335c12704e1f990b9b5d5a188aadd5789bf80398f8d6fbdc9b751c42ae6ba02",
      "category": "container_scanning",
      "message": "CVE-2023-45283 on stdlib@1.21.1",
      "description": "The filepath package does not recognize paths with a \\??\\ prefix as special.\n\nOn Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x.\n\nBefore fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b.\n\nSimilarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b.\n\nIn addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name.\n\nUPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.",
      "cve": "CVE-2023-45283",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.21.1 to 1.21.4",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.21.1"
          },
          "version": "1.21.1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45283",
          "value": "CVE-2023-45283",
          "url": "https://scout.docker.com/v/CVE-2023-45283?s=golang&n=stdlib&t=golang&vr=%3E%3D1.21.0-0%2C%3C1.21.4"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45283?s=golang&n=stdlib&t=golang&vr=%3E%3D1.21.0-0%2C%3C1.21.4"
        }
      ]
    },
    {
      "id": "5e7e4913edc2636e5a5a948a4137faaaab398e53b6d941205379cb12dd4fb616",
      "category": "container_scanning",
      "message": "CVE-2023-45283 on stdlib@1.20.6",
      "description": "The filepath package does not recognize paths with a \\??\\ prefix as special.\n\nOn Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x.\n\nBefore fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b.\n\nSimilarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b.\n\nIn addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name.\n\nUPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.",
      "cve": "CVE-2023-45283",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.6 to 1.20.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.6"
          },
          "version": "1.20.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45283",
          "value": "CVE-2023-45283",
          "url": "https://scout.docker.com/v/CVE-2023-45283?s=golang&n=stdlib&t=golang&vr=%3C1.20.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45283?s=golang&n=stdlib&t=golang&vr=%3C1.20.11"
        }
      ]
    },
    {
      "id": "e108938360112aa71bfde9166177025ead357d0e2307abb70a2cb0c565939cee",
      "category": "container_scanning",
      "message": "CVE-2023-45283 on stdlib@1.19.9",
      "description": "The filepath package does not recognize paths with a \\??\\ prefix as special.\n\nOn Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x.\n\nBefore fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b.\n\nSimilarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b.\n\nIn addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name.\n\nUPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.",
      "cve": "CVE-2023-45283",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.9 to 1.20.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.9"
          },
          "version": "1.19.9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45283",
          "value": "CVE-2023-45283",
          "url": "https://scout.docker.com/v/CVE-2023-45283?s=golang&n=stdlib&t=golang&vr=%3C1.20.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45283?s=golang&n=stdlib&t=golang&vr=%3C1.20.11"
        }
      ]
    },
    {
      "id": "ef32fae8b5853f15254f7553b80628867c14d88fc929fc3f4ddd1d8fc38af9fb",
      "category": "container_scanning",
      "message": "CVE-2023-45287 on stdlib@1.19.9",
      "description": "Before Go 1.20, the RSA based TLS key exchanges used the math/big library, which is not constant time. RSA blinding was applied to prevent timing attacks, but analysis shows this may not have been fully effective. In particular it appears as if the removal of PKCS#1 padding may leak timing information, which in turn could be used to recover session key bits.\n\nIn Go 1.20, the crypto/tls library switched to a fully constant time RSA implementation, which we do not believe exhibits any timing side channels.",
      "cve": "CVE-2023-45287",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.9 to 1.20.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.9"
          },
          "version": "1.19.9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45287",
          "value": "CVE-2023-45287",
          "url": "https://scout.docker.com/v/CVE-2023-45287?s=golang&n=stdlib&t=golang&vr=%3C1.20.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45287?s=golang&n=stdlib&t=golang&vr=%3C1.20.0"
        }
      ]
    },
    {
      "id": "93d17889941b6a05cbdebb56d56a42cf14586e0efcc4f288e871059634cb5b22",
      "category": "container_scanning",
      "message": "CVE-2023-45288 on stdlib@1.20.6",
      "description": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames.\n\nMaintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed.\n\nThis permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send.\n\nThe fix sets a limit on the amount of excess header frames we will process before closing a connection.",
      "cve": "CVE-2023-45288",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.6 to 1.21.9",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.6"
          },
          "version": "1.20.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45288",
          "value": "CVE-2023-45288",
          "url": "https://scout.docker.com/v/CVE-2023-45288?s=golang&n=stdlib&t=golang&vr=%3C1.21.9"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45288?s=golang&n=stdlib&t=golang&vr=%3C1.21.9"
        }
      ]
    },
    {
      "id": "53c5be5e17f8825e6e17c098989a81cc09933240b363e99db704eb02f6bd3891",
      "category": "container_scanning",
      "message": "CVE-2023-45288 on stdlib@1.19.9",
      "description": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames.\n\nMaintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed.\n\nThis permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send.\n\nThe fix sets a limit on the amount of excess header frames we will process before closing a connection.",
      "cve": "CVE-2023-45288",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.9 to 1.21.9",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.9"
          },
          "version": "1.19.9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45288",
          "value": "CVE-2023-45288",
          "url": "https://scout.docker.com/v/CVE-2023-45288?s=golang&n=stdlib&t=golang&vr=%3C1.21.9"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45288?s=golang&n=stdlib&t=golang&vr=%3C1.21.9"
        }
      ]
    },
    {
      "id": "8d26a76ce4310bcea5088faf80db68674c410468b8a3d7b9ed8835fea3ff10b8",
      "category": "container_scanning",
      "message": "CVE-2023-45288 on stdlib@1.21.1",
      "description": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames.\n\nMaintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed.\n\nThis permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send.\n\nThe fix sets a limit on the amount of excess header frames we will process before closing a connection.",
      "cve": "CVE-2023-45288",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.21.1 to 1.21.9",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.21.1"
          },
          "version": "1.21.1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45288",
          "value": "CVE-2023-45288",
          "url": "https://scout.docker.com/v/CVE-2023-45288?s=golang&n=stdlib&t=golang&vr=%3C1.21.9"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45288?s=golang&n=stdlib&t=golang&vr=%3C1.21.9"
        }
      ]
    },
    {
      "id": "7a4dfd50de326a36052dcbd2807369cf0c672dfbeb15367fb8eca569cf6e6e28",
      "category": "container_scanning",
      "message": "CVE-2023-47108 on go.opentelemetry.io/contrib/instrumentation@0.40.0",
      "description": "### Summary\n\nThe grpc Unary Server Interceptor [opentelemetry-go-contrib/instrumentation/google.golang.org/grpc/otelgrpc/interceptor.go](https://github.com/open-telemetry/opentelemetry-go-contrib/blob/9d4eb7e7706038b07d33f83f76afbe13f53d171d/instrumentation/google.golang.org/grpc/otelgrpc/interceptor.go#L327)\n\n```\n// UnaryServerInterceptor returns a grpc.UnaryServerInterceptor suitable\n// for use in a grpc.NewServer call.\nfunc UnaryServerInterceptor(opts ...Option) grpc.UnaryServerInterceptor {\n```\n  \nout of the box adds labels\n\n- `net.peer.sock.addr`\n- `net.peer.sock.port`\n\nthat have unbound cardinality. It leads to the server's potential memory exhaustion when many malicious requests are sent.\n\n### Details\n\nAn attacker can easily flood the peer address and port for requests.  \n\n### PoC\n\nApply the attached patch to the example and run the client multiple times.  Observe how each request will create a unique histogram and how the memory consumption increases during it.\n### Impact\n\nIn order to be affected, the program has to configure a metrics pipeline, use  [UnaryServerInterceptor](https://github.com/open-telemetry/opentelemetry-go-contrib/blob/9d4eb7e7706038b07d33f83f76afbe13f53d171d/instrumentation/google.golang.org/grpc/otelgrpc/interceptor.go#L327), and does not filter any client IP address and ports via middleware or proxies, etc.\n\n### Others\n\nIt is similar to already reported vulnerabilities.\n\n* [GHSA-rcjv-mgp8-qvmr](https://github.com/open-telemetry/opentelemetry-go-contrib/security/advisories/GHSA-rcjv-mgp8-qvmr) ([open-telemetry/opentelemetry-go-contrib](https://github.com/open-telemetry/opentelemetry-go-contrib))\n- [GHSA-5r5m-65gx-7vrh](https://github.com/open-telemetry/opentelemetry-go-contrib/security/advisories/GHSA-5r5m-65gx-7vrh \"GHSA-5r5m-65gx-7vrh\") ([open-telemetry/opentelemetry-go-contrib](https://github.com/open-telemetry/opentelemetry-go-contrib))\n- [GHSA-cg3q-j54f-5p7p](https://github.com/advisories/GHSA-cg3q-j54f-5p7p \"GHSA-cg3q-j54f-5p7p\") ([prometheus/client_golang](https://github.com/prometheus/client_golang))\n\n### Workaround for affected versions\n\nAs a workaround to stop being affected, a view removing the attributes can be used.\n\nThe other possibility is to disable grpc metrics instrumentation by passing [`otelgrpc.WithMeterProvider`](https://github.com/open-telemetry/opentelemetry-go-contrib/blob/instrumentation/google.golang.org/grpc/otelgrpc/v0.45.0/instrumentation/google.golang.org/grpc/otelgrpc/config.go#L138) option with [`noop.NewMeterProvider`](https://pkg.go.dev/go.opentelemetry.io/otel/metric/noop#NewMeterProvider).\n\n### Solution provided by upgrading\n\nIn PR [#4322](https://github.com/open-telemetry/opentelemetry-go-contrib/pull/4322), to be released with v0.46.0, the attributes were removed.\n\n### References\n\n- [#4322](https://github.com/open-telemetry/opentelemetry-go-contrib/pull/4322)",
      "cve": "CVE-2023-47108",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade go.opentelemetry.io/contrib/instrumentation@0.40.0 to 0.46.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/go.opentelemetry.io/contrib/instrumentation@0.40.0#google.golang.org/grpc/otelgrpc"
          },
          "version": "0.40.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-47108",
          "value": "CVE-2023-47108",
          "url": "https://scout.docker.com/v/CVE-2023-47108?s=github&n=google.golang.org%2Fgrpc%2Fotelgrpc&ns=go.opentelemetry.io%2Fcontrib%2Finstrumentation&t=golang&vr=%3C0.46.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-47108?s=github&n=google.golang.org%2Fgrpc%2Fotelgrpc&ns=go.opentelemetry.io%2Fcontrib%2Finstrumentation&t=golang&vr=%3C0.46.0"
        }
      ]
    },
    {
      "id": "b71add6c4cfcad84a9fe2d798d5117892e6ea83fd02a0b3e83b8c017b0a2dac1",
      "category": "container_scanning",
      "message": "CVE-2023-5363 on alpine/openssl@3.1.3-r0",
      "cve": "CVE-2023-5363",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@3.1.3-r0 to 3.1.4-r0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@3.1.3-r0?os_name=alpine&os_version=3.18"
          },
          "version": "3.1.3-r0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-5363",
          "value": "CVE-2023-5363",
          "url": "https://scout.docker.com/v/CVE-2023-5363?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.4-r0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-5363?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.4-r0"
        }
      ]
    },
    {
      "id": "f5e407836cf253427fc7cbb39ad7ad6ba74f070b5657efeda46062bf8bd11947",
      "category": "container_scanning",
      "message": "CVE-2024-24784 on stdlib@1.20.6",
      "description": "The ParseAddressList function incorrectly handles comments (text within parentheses) within display names. Since this is a misalignment with conforming address parsers, it can result in different trust decisions being made by programs using different parsers.",
      "cve": "CVE-2024-24784",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.6 to 1.21.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.6"
          },
          "version": "1.20.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24784",
          "value": "CVE-2024-24784",
          "url": "https://scout.docker.com/v/CVE-2024-24784?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24784?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ]
    },
    {
      "id": "7140bceeb2338cfddc3e108333f9ea0ab9367964ad5738466af29004a7b3cf37",
      "category": "container_scanning",
      "message": "CVE-2024-24784 on stdlib@1.21.1",
      "description": "The ParseAddressList function incorrectly handles comments (text within parentheses) within display names. Since this is a misalignment with conforming address parsers, it can result in different trust decisions being made by programs using different parsers.",
      "cve": "CVE-2024-24784",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.21.1 to 1.21.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.21.1"
          },
          "version": "1.21.1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24784",
          "value": "CVE-2024-24784",
          "url": "https://scout.docker.com/v/CVE-2024-24784?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24784?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ]
    },
    {
      "id": "a24d25d4c02d3a591e5575827d1d4220eb87a3984a3d3268c6fa447a573fe9d4",
      "category": "container_scanning",
      "message": "CVE-2024-24784 on stdlib@1.19.9",
      "description": "The ParseAddressList function incorrectly handles comments (text within parentheses) within display names. Since this is a misalignment with conforming address parsers, it can result in different trust decisions being made by programs using different parsers.",
      "cve": "CVE-2024-24784",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.9 to 1.21.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.9"
          },
          "version": "1.19.9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24784",
          "value": "CVE-2024-24784",
          "url": "https://scout.docker.com/v/CVE-2024-24784?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24784?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ]
    },
    {
      "id": "385e6f9c0f698a63b3f9295b4bbbaf35d7be48d26aacdb665d47a761212ce773",
      "category": "container_scanning",
      "message": "CVE-2024-24791 on stdlib@1.20.6",
      "description": "The net/http HTTP/1.1 client mishandled the case where a server responds to a request with an \"Expect: 100-continue\" header with a non-informational (200 or higher) status. This mishandling could leave a client connection in an invalid state, where the next request sent on the connection will fail.\n\nAn attacker sending a request to a net/http/httputil.ReverseProxy proxy can exploit this mishandling to cause a denial of service by sending \"Expect: 100-continue\" requests which elicit a non-informational response from the backend. Each such request leaves the proxy with an invalid connection, and causes one subsequent request using that connection to fail.",
      "cve": "CVE-2024-24791",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.6 to 1.21.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.6"
          },
          "version": "1.20.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24791",
          "value": "CVE-2024-24791",
          "url": "https://scout.docker.com/v/CVE-2024-24791?s=golang&n=stdlib&t=golang&vr=%3C1.21.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24791?s=golang&n=stdlib&t=golang&vr=%3C1.21.12"
        }
      ]
    },
    {
      "id": "bab778167183de2f2dcbc8f84f702b5d72c9162a1cfd6902285352eef9e031a3",
      "category": "container_scanning",
      "message": "CVE-2024-24791 on stdlib@1.21.1",
      "description": "The net/http HTTP/1.1 client mishandled the case where a server responds to a request with an \"Expect: 100-continue\" header with a non-informational (200 or higher) status. This mishandling could leave a client connection in an invalid state, where the next request sent on the connection will fail.\n\nAn attacker sending a request to a net/http/httputil.ReverseProxy proxy can exploit this mishandling to cause a denial of service by sending \"Expect: 100-continue\" requests which elicit a non-informational response from the backend. Each such request leaves the proxy with an invalid connection, and causes one subsequent request using that connection to fail.",
      "cve": "CVE-2024-24791",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.21.1 to 1.21.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.21.1"
          },
          "version": "1.21.1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24791",
          "value": "CVE-2024-24791",
          "url": "https://scout.docker.com/v/CVE-2024-24791?s=golang&n=stdlib&t=golang&vr=%3C1.21.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24791?s=golang&n=stdlib&t=golang&vr=%3C1.21.12"
        }
      ]
    },
    {
      "id": "7b8ba54b7cbb7be033df242c19e85776d735b3c914e8946bf715a3958995ab84",
      "category": "container_scanning",
      "message": "CVE-2024-24791 on stdlib@1.19.9",
      "description": "The net/http HTTP/1.1 client mishandled the case where a server responds to a request with an \"Expect: 100-continue\" header with a non-informational (200 or higher) status. This mishandling could leave a client connection in an invalid state, where the next request sent on the connection will fail.\n\nAn attacker sending a request to a net/http/httputil.ReverseProxy proxy can exploit this mishandling to cause a denial of service by sending \"Expect: 100-continue\" requests which elicit a non-informational response from the backend. Each such request leaves the proxy with an invalid connection, and causes one subsequent request using that connection to fail.",
      "cve": "CVE-2024-24791",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.9 to 1.21.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.9"
          },
          "version": "1.19.9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24791",
          "value": "CVE-2024-24791",
          "url": "https://scout.docker.com/v/CVE-2024-24791?s=golang&n=stdlib&t=golang&vr=%3C1.21.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24791?s=golang&n=stdlib&t=golang&vr=%3C1.21.12"
        }
      ]
    },
    {
      "id": "1b926ad8f5c884804207e94ce30ebe382898c43f50e4676f7ad62f5c1ecc552b",
      "category": "container_scanning",
      "message": "CVE-2024-34156 on stdlib@1.20.6",
      "description": "Calling Decoder.Decode on a message which contains deeply nested structures can cause a panic due to stack exhaustion. This is a follow-up to CVE-2022-30635.",
      "cve": "CVE-2024-34156",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.6 to 1.22.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.6"
          },
          "version": "1.20.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-34156",
          "value": "CVE-2024-34156",
          "url": "https://scout.docker.com/v/CVE-2024-34156?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-34156?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ]
    },
    {
      "id": "4fbf6abf3b022393c97c13822687f1177d7c751a094cc58028b6931b0ebfaf45",
      "category": "container_scanning",
      "message": "CVE-2024-34156 on stdlib@1.21.1",
      "description": "Calling Decoder.Decode on a message which contains deeply nested structures can cause a panic due to stack exhaustion. This is a follow-up to CVE-2022-30635.",
      "cve": "CVE-2024-34156",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.21.1 to 1.22.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.21.1"
          },
          "version": "1.21.1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-34156",
          "value": "CVE-2024-34156",
          "url": "https://scout.docker.com/v/CVE-2024-34156?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-34156?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ]
    },
    {
      "id": "2a9ecf34a3f2bd5a12f29bd1623926992c271f7ce25497f011f8d190b3ec56ed",
      "category": "container_scanning",
      "message": "CVE-2024-34156 on stdlib@1.19.9",
      "description": "Calling Decoder.Decode on a message which contains deeply nested structures can cause a panic due to stack exhaustion. This is a follow-up to CVE-2022-30635.",
      "cve": "CVE-2024-34156",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.9 to 1.22.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.9"
          },
          "version": "1.19.9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-34156",
          "value": "CVE-2024-34156",
          "url": "https://scout.docker.com/v/CVE-2024-34156?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-34156?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ]
    },
    {
      "id": "17d44c2d397b389b5e5b281c0351a0d713d66e38741543a451becb4efc65156d",
      "category": "container_scanning",
      "message": "CVE-2024-34158 on stdlib@1.21.1",
      "description": "Calling Parse on a \"// +build\" build tag line with deeply nested expressions can cause a panic due to stack exhaustion.",
      "cve": "CVE-2024-34158",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.21.1 to 1.22.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.21.1"
          },
          "version": "1.21.1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-34158",
          "value": "CVE-2024-34158",
          "url": "https://scout.docker.com/v/CVE-2024-34158?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-34158?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ]
    },
    {
      "id": "77302c348352948df3a3d5b622e53ae865b099b110663c5022e998be627f7363",
      "category": "container_scanning",
      "message": "CVE-2024-34158 on stdlib@1.19.9",
      "description": "Calling Parse on a \"// +build\" build tag line with deeply nested expressions can cause a panic due to stack exhaustion.",
      "cve": "CVE-2024-34158",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.9 to 1.22.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.9"
          },
          "version": "1.19.9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-34158",
          "value": "CVE-2024-34158",
          "url": "https://scout.docker.com/v/CVE-2024-34158?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-34158?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ]
    },
    {
      "id": "8b3fa6b96a450765ed23b1e5e36f26b1fe7c768e3068e038a2dd70756b9f6b78",
      "category": "container_scanning",
      "message": "CVE-2024-34158 on stdlib@1.20.6",
      "description": "Calling Parse on a \"// +build\" build tag line with deeply nested expressions can cause a panic due to stack exhaustion.",
      "cve": "CVE-2024-34158",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.6 to 1.22.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.6"
          },
          "version": "1.20.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-34158",
          "value": "CVE-2024-34158",
          "url": "https://scout.docker.com/v/CVE-2024-34158?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-34158?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ]
    },
    {
      "id": "8310a7e182d62e1035158a01206ac837af648e72a0d684652df4aad98a50fa21",
      "category": "container_scanning",
      "message": "CVE-2024-37370 on alpine/krb5@1.20.1-r1",
      "cve": "CVE-2024-37370",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/krb5@1.20.1-r1 to 1.20.2-r1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/krb5@1.20.1-r1?os_name=alpine&os_version=3.18"
          },
          "version": "1.20.1-r1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-37370",
          "value": "CVE-2024-37370",
          "url": "https://scout.docker.com/v/CVE-2024-37370?s=alpine&n=krb5&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C1.20.2-r1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-37370?s=alpine&n=krb5&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C1.20.2-r1"
        }
      ]
    },
    {
      "id": "1c5a2b24c8f3ab46648e05d7525ab2ac9c2da24d08ac184f4b866e6e53f34512",
      "category": "container_scanning",
      "message": "CVE-2024-4741 on alpine/openssl@3.1.3-r0",
      "cve": "CVE-2024-4741",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@3.1.3-r0 to 3.1.6-r0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@3.1.3-r0?os_name=alpine&os_version=3.18"
          },
          "version": "3.1.3-r0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-4741",
          "value": "CVE-2024-4741",
          "url": "https://scout.docker.com/v/CVE-2024-4741?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.6-r0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-4741?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.6-r0"
        }
      ]
    },
    {
      "id": "bcf0a5edb8759f52193fa4f79fff585ce5ee68797ff502ac65c7736d775d99f3",
      "category": "container_scanning",
      "message": "CVE-2024-6119 on alpine/openssl@3.1.3-r0",
      "cve": "CVE-2024-6119",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@3.1.3-r0 to 3.1.7-r0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@3.1.3-r0?os_name=alpine&os_version=3.18"
          },
          "version": "3.1.3-r0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-6119",
          "value": "CVE-2024-6119",
          "url": "https://scout.docker.com/v/CVE-2024-6119?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.7-r0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-6119?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.7-r0"
        }
      ]
    },
    {
      "id": "eac4cc2db6c533ca5bab54efce7f2676cb0cbaf84deb7fd76830ba4e717ca74c",
      "category": "container_scanning",
      "message": "CVE-2025-22868 on golang.org/x/oauth2@0.5.0",
      "description": "An attacker can pass a malicious malformed token which causes unexpected memory to be consumed during parsing.",
      "cve": "CVE-2025-22868",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/oauth2@0.5.0 to 0.27.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/oauth2@0.5.0"
          },
          "version": "0.5.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-22868",
          "value": "CVE-2025-22868",
          "url": "https://scout.docker.com/v/CVE-2025-22868?s=github&n=oauth2&ns=golang.org%2Fx&t=golang&vr=%3C0.27.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-22868?s=github&n=oauth2&ns=golang.org%2Fx&t=golang&vr=%3C0.27.0"
        }
      ]
    },
    {
      "id": "37c0d7224d6356abb20f2b7ab7f9b29cd44adefa2f15fb25aa93ec2e9ea6e7ff",
      "category": "container_scanning",
      "message": "CVE-2025-22868 on golang.org/x/oauth2@0.10.0",
      "description": "An attacker can pass a malicious malformed token which causes unexpected memory to be consumed during parsing.",
      "cve": "CVE-2025-22868",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/oauth2@0.10.0 to 0.27.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/oauth2@0.10.0"
          },
          "version": "0.10.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-22868",
          "value": "CVE-2025-22868",
          "url": "https://scout.docker.com/v/CVE-2025-22868?s=github&n=oauth2&ns=golang.org%2Fx&t=golang&vr=%3C0.27.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-22868?s=github&n=oauth2&ns=golang.org%2Fx&t=golang&vr=%3C0.27.0"
        }
      ]
    },
    {
      "id": "16b0c49e07a9d9bbd3bfc4b57ea8c5ad8852ec646abda70869857b1161b0db0a",
      "category": "container_scanning",
      "message": "CVE-2025-22869 on golang.org/x/crypto@0.11.0",
      "description": "SSH servers which implement file transfer protocols are vulnerable to a denial of service attack from clients which complete the key exchange slowly, or not at all, causing pending content to be read into memory, but never transmitted.",
      "cve": "CVE-2025-22869",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/crypto@0.11.0 to 0.35.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/crypto@0.11.0"
          },
          "version": "0.11.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-22869",
          "value": "CVE-2025-22869",
          "url": "https://scout.docker.com/v/CVE-2025-22869?s=golang&n=crypto&ns=golang.org%2Fx&t=golang&vr=%3C0.35.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-22869?s=golang&n=crypto&ns=golang.org%2Fx&t=golang&vr=%3C0.35.0"
        }
      ]
    },
    {
      "id": "8a58f6f725a3ec90a34f1668cf39cb70897e385944d5308bbe40bc833a778725",
      "category": "container_scanning",
      "message": "CVE-2025-22869 on golang.org/x/crypto@0.2.0",
      "description": "SSH servers which implement file transfer protocols are vulnerable to a denial of service attack from clients which complete the key exchange slowly, or not at all, causing pending content to be read into memory, but never transmitted.",
      "cve": "CVE-2025-22869",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/crypto@0.2.0 to 0.35.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/crypto@0.2.0"
          },
          "version": "0.2.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-22869",
          "value": "CVE-2025-22869",
          "url": "https://scout.docker.com/v/CVE-2025-22869?s=golang&n=crypto&ns=golang.org%2Fx&t=golang&vr=%3C0.35.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-22869?s=golang&n=crypto&ns=golang.org%2Fx&t=golang&vr=%3C0.35.0"
        }
      ]
    },
    {
      "id": "65bd63186a5caa8d3f756783f1967b744c7d7b0aed4884ab09054fdeb94e095e",
      "category": "container_scanning",
      "message": "GHSA-m425-mq94-257g on google.golang.org/grpc@1.53.0",
      "description": "### Impact\nIn affected releases of gRPC-Go, it is possible for an attacker to send HTTP/2 requests, cancel them, and send subsequent requests, which is valid by the HTTP/2 protocol, but would cause the gRPC-Go server to launch more concurrent method handlers than the configured maximum stream limit.\n\n### Patches\nThis vulnerability was addressed by #6703 and has been included in patch releases: 1.56.3, 1.57.1, 1.58.3.  It is also included in the latest release, 1.59.0.\n\nAlong with applying the patch, users should also ensure they are using the `grpc.MaxConcurrentStreams` server option to apply a limit to the server's resources used for any single connection.\n\n### Workarounds\nNone.\n\n### References\n#6703\n",
      "cve": "GHSA-m425-mq94-257g",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade google.golang.org/grpc@1.53.0 to 1.56.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/google.golang.org/grpc@1.53.0"
          },
          "version": "1.53.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "GHSA-m425-mq94-257g",
          "value": "GHSA-m425-mq94-257g",
          "url": "https://scout.docker.com/v/GHSA-m425-mq94-257g?s=github&n=grpc&ns=google.golang.org&t=golang&vr=%3C1.56.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/GHSA-m425-mq94-257g?s=github&n=grpc&ns=google.golang.org&t=golang&vr=%3C1.56.3"
        }
      ]
    },
    {
      "id": "113e819b40b4820ad7fc285cfc555092d14d590b4b66e66eb63f9b731741f424",
      "category": "container_scanning",
      "message": "GHSA-m425-mq94-257g on google.golang.org/grpc@1.58.1",
      "description": "### Impact\nIn affected releases of gRPC-Go, it is possible for an attacker to send HTTP/2 requests, cancel them, and send subsequent requests, which is valid by the HTTP/2 protocol, but would cause the gRPC-Go server to launch more concurrent method handlers than the configured maximum stream limit.\n\n### Patches\nThis vulnerability was addressed by #6703 and has been included in patch releases: 1.56.3, 1.57.1, 1.58.3.  It is also included in the latest release, 1.59.0.\n\nAlong with applying the patch, users should also ensure they are using the `grpc.MaxConcurrentStreams` server option to apply a limit to the server's resources used for any single connection.\n\n### Workarounds\nNone.\n\n### References\n#6703\n",
      "cve": "GHSA-m425-mq94-257g",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade google.golang.org/grpc@1.58.1 to 1.58.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/google.golang.org/grpc@1.58.1"
          },
          "version": "1.58.1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "GHSA-m425-mq94-257g",
          "value": "GHSA-m425-mq94-257g",
          "url": "https://scout.docker.com/v/GHSA-m425-mq94-257g?s=github&n=grpc&ns=google.golang.org&t=golang&vr=%3E%3D1.58.0%2C%3C1.58.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/GHSA-m425-mq94-257g?s=github&n=grpc&ns=google.golang.org&t=golang&vr=%3E%3D1.58.0%2C%3C1.58.3"
        }
      ]
    },
    {
      "id": "b9513f1397f5f786a71ccc62f944613f9d926c0011f9d36dd12c0e224f41d7c0",
      "category": "container_scanning",
      "message": "CVE-2023-29403 on stdlib@1.19.9",
      "description": "On Unix platforms, the Go runtime does not behave differently when a binary is run with the setuid/setgid bits. This can be dangerous in certain cases, such as when dumping memory state, or assuming the status of standard i/o file descriptors.\n\nIf a setuid/setgid binary is executed with standard I/O file descriptors closed, opening any files can result in unexpected content being read or written with elevated privileges. Similarly, if a setuid/setgid program is terminated, either via panic or signal, it may leak the contents of its registers.",
      "cve": "CVE-2023-29403",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.9 to 1.19.10",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.9"
          },
          "version": "1.19.9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-29403",
          "value": "CVE-2023-29403",
          "url": "https://scout.docker.com/v/CVE-2023-29403?s=golang&n=stdlib&t=golang&vr=%3C1.19.10"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-29403?s=golang&n=stdlib&t=golang&vr=%3C1.19.10"
        }
      ]
    },
    {
      "id": "9ebbb0119bad30a3c093491bfb4d36dc3916e562f505a306ed6b6df864205bf8",
      "category": "container_scanning",
      "message": "CVE-2024-6387 on alpine/openssh@9.3_p2-r0",
      "cve": "CVE-2024-6387",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssh@9.3_p2-r0 to 9.3_p2-r2",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssh@9.3_p2-r0?os_name=alpine&os_version=3.18"
          },
          "version": "9.3_p2-r0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-6387",
          "value": "CVE-2024-6387",
          "url": "https://scout.docker.com/v/CVE-2024-6387?s=alpine&n=openssh&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C9.3_p2-r2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-6387?s=alpine&n=openssh&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C9.3_p2-r2"
        }
      ]
    },
    {
      "id": "6d2870f07bb36ab1b4f8a5488e11ec45c371e5963d2207f1164532dff1006e22",
      "category": "container_scanning",
      "message": "CVE-2025-26519 on alpine/musl@1.2.4-r1",
      "cve": "CVE-2025-26519",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/musl@1.2.4-r1 to 1.2.4-r3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/musl@1.2.4-r1?os_name=alpine&os_version=3.18"
          },
          "version": "1.2.4-r1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-26519",
          "value": "CVE-2025-26519",
          "url": "https://scout.docker.com/v/CVE-2025-26519?s=alpine&n=musl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C1.2.4-r3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-26519?s=alpine&n=musl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C1.2.4-r3"
        }
      ]
    },
    {
      "id": "160a22d5570aec484f51a83f53adfeec7610e1af767b78b4bc59409070a9d7a9",
      "category": "container_scanning",
      "message": "CVE-2024-21626 on github.com/opencontainers/runc@1.1.7",
      "description": "### Impact\n\nIn runc 1.1.11 and earlier, due to an internal file descriptor leak, an attacker could cause a newly-spawned container process (from `runc exec`) to have a working directory in the host filesystem namespace, allowing for a container escape by giving access to the host filesystem (\"attack 2\"). The same attack could be used by a malicious image to allow a container process to gain access to the host filesystem through `runc run` (\"attack 1\"). Variants of attacks 1 and 2 could be also be used to overwrite semi-arbitrary host binaries, allowing for complete container escapes (\"attack 3a\" and \"attack 3b\").\n\nStrictly speaking, while attack 3a is the most severe from a CVSS perspective, attacks 2 and 3b are arguably more dangerous in practice because they allow for a breakout from inside a container as opposed to requiring a user execute a malicious image. The reason attacks 1 and 3a are scored higher is because being able to socially engineer users is treated as a given for UI:R vectors, despite attacks 2 and 3b requiring far more minimal user interaction (just reasonable `runc exec` operations on a container the attacker has access to). In any case, all four attacks can lead to full control of the host system.\n\n#### Attack 1: `process.cwd` \"mis-configuration\"\n\nIn runc 1.1.11 and earlier, several file descriptors were inadvertently leaked internally within runc into `runc init`, including a handle to the host's `/sys/fs/cgroup` (this leak was added in v1.0.0-rc93). If the container was configured to have `process.cwd` set to `/proc/self/fd/7/` (the actual fd can change depending on file opening order in `runc`), the resulting pid1 process will have a working directory in the host mount namespace and thus the spawned process can access the entire host filesystem. This alone is not an exploit against runc, however a malicious image could make any innocuous-looking non-`/` path a symlink to `/proc/self/fd/7/` and thus trick a user into starting a container whose binary has access to the host filesystem.\n\nFurthermore, prior to runc 1.1.12, runc also did not verify that the final working directory was inside the container's mount namespace after calling `chdir(2)` (as we have already joined the container namespace, it was incorrectly assumed there would be no way to chdir outside the container after `pivot_root(2)`).\n\nThe CVSS score for this attack is CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:N (8.2, high severity).\n\nNote that this attack requires a privileged user to be tricked into running a malicious container image. It should be noted that when using higher-level runtimes (such as Docker or Kubernetes), this exploit can be considered critical as it can be done remotely by anyone with the rights to start a container image (and can be exploited from within Dockerfiles using `ONBUILD` in the case of Docker).\n\n#### Attack 2: `runc exec` container breakout\n\n(This is a modification of attack 1, constructed to allow for a process inside a container to break out.)\n\nThe same fd leak and lack of verification of the working directory in attack 1 also apply to `runc exec`. If a malicious process inside the container knows that some administrative process will call `runc exec` with the `--cwd` argument and a given path, in most cases they can replace that path with a symlink to `/proc/self/fd/7/`. Once the container process has executed the container binary, `PR_SET_DUMPABLE` protections no longer apply and the attacker can open `/proc/$exec_pid/cwd` to get access to the host filesystem.\n\n`runc exec` defaults to a cwd of `/` (which cannot be replaced with a symlink), so this attack depends on the attacker getting a user (or some administrative process) to use `--cwd` and figuring out what path the target working directory is. Note that if the target working directory is a parent of the program binary being executed, the attacker might be unable to replace the path with a symlink (the `execve` will fail in most cases, unless the host filesystem layout specifically matches the container layout in specific ways and the attacker knows which binary the `runc exec` is executing).\n\nThe CVSS score for this attack is CVSS:3.1/AV:L/AC:H/PR:L/UI:R/S:C/C:H/I:H/A:N (7.2, high severity).\n\n#### Attacks 3a and 3b: `process.args` host binary overwrite attack\n\n(These are modifications of attacks 1 and 2, constructed to overwrite a host binary by using `execve` to bring a magic-link reference into the container.)\n\nAttacks 1 and 2 can be adapted to overwrite a host binary by using a path like `/proc/self/fd/7/../../../bin/bash` as the `process.args` binary argument, causing a host binary to be executed by a container process. The `/proc/$pid/exe` handle can then be used to overwrite the host binary, as seen in CVE-2019-5736 (note that the same `#!` trick can be used to avoid detection as an attacker). As the overwritten binary could be something like `/bin/bash`, as soon as a privileged user executes the target binary on the host, the attacker can pivot to gain full access to the host.\n\nFor the purposes of CVSS scoring:\n\n* Attack 3a is attack 1 but adapted to overwrite a host binary, where a malicious image is set up to execute `/proc/self/fd/7/../../../bin/bash` and run a shell script that overwrites `/proc/self/exe`, overwriting the host copy of `/bin/bash`. The CVSS score for this attack is CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H (8.6, high severity).\n* Attack 3b is attack 2 but adapted to overwrite a host binary, where the malicious container process overwrites all of the possible `runc exec` target binaries inside the container (such as `/bin/bash`) such that a host target binary is executed and then the container process opens `/proc/$pid/exe` to get access to the host binary and overwrite it. The CVSS score for this attack is CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H (8.2, high severity).\n\nAs mentioned in attack 1, while 3b is scored lower it is more dangerous in practice as it doesn't require a user to run a malicious image.\n\n### Patches\nrunc 1.1.12 has been released, and includes patches for this issue. Note that there are four separate fixes applied:\n\n* Checking that the working directory is actually inside the container by checking whether `os.Getwd` returns `ENOENT` (Linux provides a way of detecting if cwd is outside the current namespace root). This explicitly blocks runc from executing a container process when inside a non-container path and thus eliminates attacks 1 and 2 even in the case of fd leaks.\n* Close all internal runc file descriptors in the final stage of `runc init`, right before `execve`. This ensures that internal file descriptors cannot be used as an argument to `execve` and thus eliminates attacks 3a and 3b, even in the case of fd leaks. This requires hooking into some Go runtime internals to make sure we don't close critical Go internal file descriptors.\n* Fixing the specific fd leaks that made these bug exploitable (mark `/sys/fs/cgroup` as `O_CLOEXEC` and backport a fix for some `*os.File` leaks).\n* In order to protect against future `runc init` file descriptor leaks, mark all non-stdio files as `O_CLOEXEC` before executing `runc init`.\n\n### Other Runtimes\n\nWe have discovered that several other container runtimes are either potentially vulnerable to similar attacks, or do not have sufficient protection against attacks of this nature. We recommend other container runtime authors look at [our patches](#Patches) and make sure they at least add a `getcwd() != ENOENT` check as well as consider whether `close_range(3, UINT_MAX, CLOSE_RANGE_CLOEXEC)` before executing their equivalent of `runc init` is appropriate.\n\n * crun 1.12 does not leak any useful file descriptors into the `runc init`-equivalent process (so this attack is _not exploitable_ as far as we can tell), but no care is taken to make sure all non-stdio files are `O_CLOEXEC` and there is no check after `chdir(2)` to ensure the working directory is inside the container. If a file descriptor happened to be leaked in the future, this could be exploitable. In addition, any file descriptors passed to `crun` are not closed until the container process is executed, meaning that easily-overlooked programming errors by users of `crun` can lead to these attacks becoming exploitable.\n * youki 0.3.1 does not leak any useful file descriptors into the `runc init`-equivalent process (so this attack is _not exploitable_ as far as we can tell) however this appears to be pure luck. `youki` does leak a directory file descriptor from the host mount namespace, but it just so happens that the directory is the rootfs of the container (which then gets `pivot_root`'d into and so ends up as a in-root path thanks to `chroot_fs_refs`). In addition, no care is taken to make sure all non-stdio files are `O_CLOEXEC` and there is no check after `chdir(2)` to ensure the working directory is inside the container. If a file descriptor happened to be leaked in the future, this could be exploitable. In addition, any file descriptors passed to `youki` are not closed until the container process is executed, meaning that easily-overlooked programming errors by users of `youki` can lead to these attacks becoming exploitable.\n * LXC 5.0.3 does not appear to leak any useful file descriptors, and they have comments noting the importance of not leaking file descriptors in `lxc-attach`. However, they don't seem to have any proactive protection against file descriptor leaks at the point of `chdir` such as using `close_range(...)` (they do have RAII-like `__do_fclose` closers but those don't necessarily stop all leaks in this context) nor do they have any check after `chdir(2)` to ensure the working directory is inside the container. Unfortunately it seems they cannot use `CLOSE_RANGE_CLOEXEC` because they don't need to re-exec themselves.\n\n### Workarounds\nFor attacks 1 and 2, only permit containers (and `runc exec`) to use a `process.cwd` of `/`. It is not possible for `/` to be replaced with a symlink (the path is resolved from within the container's mount namespace, and you cannot change the root of a mount namespace or an fs root to a symlink).\n\nFor attacks 1 and 3a, only permit users to run trusted images.\n\nFor attack 3b, there is no practical workaround other than never using `runc exec` because any binary you try to execute with `runc exec` could end up being a malicious binary target.\n\n### See Also\n* https://www.cve.org/CVERecord?id=CVE-2024-21626\n* https://github.com/opencontainers/runc/releases/tag/v1.1.12\n* The runc 1.1.12 merge commit https://github.com/opencontainers/runc/commit/a9833ff391a71b30069a6c3f816db113379a4346, which contains the following security patches:\n  * https://github.com/opencontainers/runc/commit/506552a88bd3455e80a9b3829568e94ec0160309\n  * https://github.com/opencontainers/runc/commit/0994249a5ec4e363bfcf9af58a87a722e9a3a31b\n  * https://github.com/opencontainers/runc/commit/fbe3eed1e568a376f371d2ced1b4ac16b7d7adde\n  * https://github.com/opencontainers/runc/commit/284ba3057e428f8d6c7afcc3b0ac752e525957df\n  * https://github.com/opencontainers/runc/commit/b6633f48a8c970433737b9be5bfe4f25d58a5aa7\n  * https://github.com/opencontainers/runc/commit/683ad2ff3b01fb142ece7a8b3829de17150cf688\n  * https://github.com/opencontainers/runc/commit/e9665f4d606b64bf9c4652ab2510da368bfbd951\n\n### Credits\n\nThanks to Rory McNamara from Snyk for discovering and disclosing the original vulnerability (attack 1) to Docker, @lifubang from acmcoder for discovering how to adapt the attack to overwrite host binaries (attack 3a), and Aleksa Sarai from SUSE for discovering how to adapt the attacks to work as container breakouts using `runc exec` (attacks 2 and 3b).",
      "cve": "CVE-2024-21626",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/opencontainers/runc@1.1.7 to 1.1.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/opencontainers/runc@1.1.7"
          },
          "version": "1.1.7"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-21626",
          "value": "CVE-2024-21626",
          "url": "https://scout.docker.com/v/CVE-2024-21626?s=github&n=runc&ns=github.com%2Fopencontainers&t=golang&vr=%3E%3D1.0.0-rc93%2C%3C%3D1.1.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-21626?s=github&n=runc&ns=github.com%2Fopencontainers&t=golang&vr=%3E%3D1.0.0-rc93%2C%3C%3D1.1.11"
        }
      ]
    },
    {
      "id": "fcee8b26cd89a2813f9dcd3fb55206e03a60a3480a4cbf41568b075141c24f5b",
      "category": "container_scanning",
      "message": "CVE-2024-23651 on github.com/moby/buildkit@0.12.1-0.20230717122532-faa0cc7da353",
      "description": "### Impact\nTwo malicious build steps running in parallel sharing the same cache mounts with subpaths could cause a race condition that can lead to files from the host system being accessible to the build container.\n\n### Patches\nThe issue has been fixed in v0.12.5\n\n### Workarounds\nAvoid using BuildKit frontend from an untrusted source or building an untrusted Dockerfile containing cache mounts with `--mount=type=cache,source=...` options.\n\n### References\nhttps://www.openwall.com/lists/oss-security/2019/05/28/1\n",
      "cve": "CVE-2024-23651",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/moby/buildkit@0.12.1-0.20230717122532-faa0cc7da353 to 0.12.5",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/moby/buildkit@0.12.1-0.20230717122532-faa0cc7da353"
          },
          "version": "0.12.1-0.20230717122532-faa0cc7da353"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-23651",
          "value": "CVE-2024-23651",
          "url": "https://scout.docker.com/v/CVE-2024-23651?s=github&n=buildkit&ns=github.com%2Fmoby&t=golang&vr=%3C0.12.5"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-23651?s=github&n=buildkit&ns=github.com%2Fmoby&t=golang&vr=%3C0.12.5"
        }
      ]
    },
    {
      "id": "0f37e87d90c48111209478e010651c66d7a2e97373ecc45c6d3e904576d598df",
      "category": "container_scanning",
      "message": "CVE-2024-23651 on github.com/moby/buildkit@0.12.2",
      "description": "### Impact\nTwo malicious build steps running in parallel sharing the same cache mounts with subpaths could cause a race condition that can lead to files from the host system being accessible to the build container.\n\n### Patches\nThe issue has been fixed in v0.12.5\n\n### Workarounds\nAvoid using BuildKit frontend from an untrusted source or building an untrusted Dockerfile containing cache mounts with `--mount=type=cache,source=...` options.\n\n### References\nhttps://www.openwall.com/lists/oss-security/2019/05/28/1\n",
      "cve": "CVE-2024-23651",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/moby/buildkit@0.12.2 to 0.12.5",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/moby/buildkit@0.12.2"
          },
          "version": "0.12.2"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-23651",
          "value": "CVE-2024-23651",
          "url": "https://scout.docker.com/v/CVE-2024-23651?s=github&n=buildkit&ns=github.com%2Fmoby&t=golang&vr=%3C0.12.5"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-23651?s=github&n=buildkit&ns=github.com%2Fmoby&t=golang&vr=%3C0.12.5"
        }
      ]
    },
    {
      "id": "778bb905afac139a36dcb4e12ab5665c5a17f20b43af57bccde979bf21f999d7",
      "category": "container_scanning",
      "message": "CVE-2025-31115 on alpine/xz@5.4.3-r0",
      "cve": "CVE-2025-31115",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/xz@5.4.3-r0 to 5.4.3-r1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/xz@5.4.3-r0?os_name=alpine&os_version=3.18"
          },
          "version": "5.4.3-r0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-31115",
          "value": "CVE-2025-31115",
          "url": "https://scout.docker.com/v/CVE-2025-31115?s=alpine&n=xz&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C5.4.3-r1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-31115?s=alpine&n=xz&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C5.4.3-r1"
        }
      ]
    },
    {
      "id": "a8cc8b626b53d08ac575db406be91882aef28960fea74ab2b45092fb221eff3a",
      "category": "container_scanning",
      "message": "CVE-2024-37371 on alpine/krb5@1.20.1-r1",
      "cve": "CVE-2024-37371",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/krb5@1.20.1-r1 to 1.20.2-r1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/krb5@1.20.1-r1?os_name=alpine&os_version=3.18"
          },
          "version": "1.20.1-r1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-37371",
          "value": "CVE-2024-37371",
          "url": "https://scout.docker.com/v/CVE-2024-37371?s=alpine&n=krb5&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C1.20.2-r1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-37371?s=alpine&n=krb5&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C1.20.2-r1"
        }
      ]
    },
    {
      "id": "613b937d5622cecb9d8383fafb291ec6a3b57968c971ee80e7f8fa583b2d5388",
      "category": "container_scanning",
      "message": "CVE-2024-45337 on golang.org/x/crypto@0.11.0",
      "description": "Applications and libraries which misuse the ServerConfig.PublicKeyCallback callback may be susceptible to an authorization bypass.\n\nThe documentation for ServerConfig.PublicKeyCallback says that \"A call to this function does not guarantee that the key offered is in fact used to authenticate.\" Specifically, the SSH protocol allows clients to inquire about whether a public key is acceptable before proving control of the corresponding private key. PublicKeyCallback may be called with multiple keys, and the order in which the keys were provided cannot be used to infer which key the client successfully authenticated with, if any. Some applications, which store the key(s) passed to PublicKeyCallback (or derived information) and make security relevant determinations based on it once the connection is established, may make incorrect assumptions.\n\nFor example, an attacker may send public keys A and B, and then authenticate with A. PublicKeyCallback would be called only twice, first with A and then with B. A vulnerable application may then make authorization decisions based on key B for which the attacker does not actually control the private key.\n\nSince this API is widely misused, as a partial mitigation golang.org/x/crypto@v0.31.0 enforces the property that, when successfully authenticating via public key, the last key passed to ServerConfig.PublicKeyCallback will be the key used to authenticate the connection. PublicKeyCallback will now be called multiple times with the same key, if necessary. Note that the client may still not control the last key passed to PublicKeyCallback if the connection is then authenticated with a different method, such as PasswordCallback, KeyboardInteractiveCallback, or NoClientAuth.\n\nUsers should be using the Extensions field of the Permissions return value from the various authentication callbacks to record data associated with the authentication attempt instead of referencing external state. Once the connection is established the state corresponding to the successful authentication attempt can be retrieved via the ServerConn.Permissions field. Note that some third-party libraries misuse the Permissions type by sharing it across authentication attempts; users of third-party libraries should refer to the relevant projects for guidance.",
      "cve": "CVE-2024-45337",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/crypto@0.11.0 to 0.31.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/crypto@0.11.0"
          },
          "version": "0.11.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-45337",
          "value": "CVE-2024-45337",
          "url": "https://scout.docker.com/v/CVE-2024-45337?s=github&n=crypto&ns=golang.org%2Fx&t=golang&vr=%3C0.31.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-45337?s=github&n=crypto&ns=golang.org%2Fx&t=golang&vr=%3C0.31.0"
        }
      ]
    },
    {
      "id": "b238177505e9c8360aa5a2472536deb4e4e48ef006cb4c9626c8f53ad6e4801b",
      "category": "container_scanning",
      "message": "CVE-2024-45337 on golang.org/x/crypto@0.2.0",
      "description": "Applications and libraries which misuse the ServerConfig.PublicKeyCallback callback may be susceptible to an authorization bypass.\n\nThe documentation for ServerConfig.PublicKeyCallback says that \"A call to this function does not guarantee that the key offered is in fact used to authenticate.\" Specifically, the SSH protocol allows clients to inquire about whether a public key is acceptable before proving control of the corresponding private key. PublicKeyCallback may be called with multiple keys, and the order in which the keys were provided cannot be used to infer which key the client successfully authenticated with, if any. Some applications, which store the key(s) passed to PublicKeyCallback (or derived information) and make security relevant determinations based on it once the connection is established, may make incorrect assumptions.\n\nFor example, an attacker may send public keys A and B, and then authenticate with A. PublicKeyCallback would be called only twice, first with A and then with B. A vulnerable application may then make authorization decisions based on key B for which the attacker does not actually control the private key.\n\nSince this API is widely misused, as a partial mitigation golang.org/x/crypto@v0.31.0 enforces the property that, when successfully authenticating via public key, the last key passed to ServerConfig.PublicKeyCallback will be the key used to authenticate the connection. PublicKeyCallback will now be called multiple times with the same key, if necessary. Note that the client may still not control the last key passed to PublicKeyCallback if the connection is then authenticated with a different method, such as PasswordCallback, KeyboardInteractiveCallback, or NoClientAuth.\n\nUsers should be using the Extensions field of the Permissions return value from the various authentication callbacks to record data associated with the authentication attempt instead of referencing external state. Once the connection is established the state corresponding to the successful authentication attempt can be retrieved via the ServerConn.Permissions field. Note that some third-party libraries misuse the Permissions type by sharing it across authentication attempts; users of third-party libraries should refer to the relevant projects for guidance.",
      "cve": "CVE-2024-45337",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/crypto@0.2.0 to 0.31.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/crypto@0.2.0"
          },
          "version": "0.2.0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-45337",
          "value": "CVE-2024-45337",
          "url": "https://scout.docker.com/v/CVE-2024-45337?s=github&n=crypto&ns=golang.org%2Fx&t=golang&vr=%3C0.31.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-45337?s=github&n=crypto&ns=golang.org%2Fx&t=golang&vr=%3C0.31.0"
        }
      ]
    },
    {
      "id": "186dceced800cdbdc2f0cff2d1f310aacdc33b63fd8bedf9658cd7fe22167590",
      "category": "container_scanning",
      "message": "CVE-2024-5535 on alpine/openssl@3.1.3-r0",
      "cve": "CVE-2024-5535",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@3.1.3-r0 to 3.1.6-r0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@3.1.3-r0?os_name=alpine&os_version=3.18"
          },
          "version": "3.1.3-r0"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-5535",
          "value": "CVE-2024-5535",
          "url": "https://scout.docker.com/v/CVE-2024-5535?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.6-r0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-5535?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.18&vr=%3C3.1.6-r0"
        }
      ]
    },
    {
      "id": "f578e15b8c87c939d4d86cc165ad3f0a0a8a7d7a70d3b6098a025104f1c9b510",
      "category": "container_scanning",
      "message": "CVE-2025-22871 on stdlib@1.21.1",
      "description": "The net/http package improperly accepts a bare LF as a line terminator in chunked data chunk-size lines. This can permit request smuggling if a net/http server is used in conjunction with a server that incorrectly accepts a bare LF as part of a chunk-ext.",
      "cve": "CVE-2025-22871",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.21.1 to 1.23.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.21.1"
          },
          "version": "1.21.1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-22871",
          "value": "CVE-2025-22871",
          "url": "https://scout.docker.com/v/CVE-2025-22871?s=golang&n=stdlib&t=golang&vr=%3C1.23.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-22871?s=golang&n=stdlib&t=golang&vr=%3C1.23.8"
        }
      ]
    },
    {
      "id": "a362c54b4540d289bd31e74de06c3979711d5cb2fd2194fd60a7f43593b47216",
      "category": "container_scanning",
      "message": "CVE-2025-22871 on stdlib@1.20.6",
      "description": "The net/http package improperly accepts a bare LF as a line terminator in chunked data chunk-size lines. This can permit request smuggling if a net/http server is used in conjunction with a server that incorrectly accepts a bare LF as part of a chunk-ext.",
      "cve": "CVE-2025-22871",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.6 to 1.23.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.6"
          },
          "version": "1.20.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-22871",
          "value": "CVE-2025-22871",
          "url": "https://scout.docker.com/v/CVE-2025-22871?s=golang&n=stdlib&t=golang&vr=%3C1.23.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-22871?s=golang&n=stdlib&t=golang&vr=%3C1.23.8"
        }
      ]
    },
    {
      "id": "7b8a89895796fb288f9179a7073f924b864d9b8ff48351869ea44dbd646c429a",
      "category": "container_scanning",
      "message": "CVE-2025-22871 on stdlib@1.19.9",
      "description": "The net/http package improperly accepts a bare LF as a line terminator in chunked data chunk-size lines. This can permit request smuggling if a net/http server is used in conjunction with a server that incorrectly accepts a bare LF as part of a chunk-ext.",
      "cve": "CVE-2025-22871",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.9 to 1.23.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.9"
          },
          "version": "1.19.9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-22871",
          "value": "CVE-2025-22871",
          "url": "https://scout.docker.com/v/CVE-2025-22871?s=golang&n=stdlib&t=golang&vr=%3C1.23.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-22871?s=golang&n=stdlib&t=golang&vr=%3C1.23.8"
        }
      ]
    },
    {
      "id": "baa5302521dba8eb7e9cc15c37f85233160707a8b40573689640715a2449f38a",
      "category": "container_scanning",
      "message": "CVE-2024-41110 on github.com/docker/docker@24.0.6+incompatible",
      "description": "A security vulnerability has been detected in certain versions of Docker Engine, which could allow an attacker to bypass [authorization plugins (AuthZ)](https://docs.docker.com/engine/extend/plugins_authorization/) under specific circumstances. The base likelihood of this being exploited is low. This advisory outlines the issue, identifies the affected versions, and provides remediation steps for impacted users.\n\n### Impact\n\nUsing a specially-crafted API request, an Engine API client could make the daemon forward the request or response to an [authorization plugin](https://docs.docker.com/engine/extend/plugins_authorization/) without the body. In certain circumstances, the authorization plugin may allow a request which it would have otherwise denied if the body had been forwarded to it.\n\n\nA security issue was discovered In 2018,  where an attacker could bypass AuthZ plugins using a specially crafted API request. This could lead to unauthorized actions, including privilege escalation. Although this issue was fixed in Docker Engine [v18.09.1](https://docs.docker.com/engine/release-notes/18.09/#security-fixes-1) in January 2019, the fix was not carried forward to later major versions, resulting in a regression. Anyone who depends on authorization plugins that introspect the request and/or response body to make access control decisions is potentially impacted.\n\nDocker EE v19.03.x and all versions of Mirantis Container Runtime **are not vulnerable.**\n\n### Vulnerability details\n\n- **AuthZ bypass and privilege escalation:** An attacker could exploit a bypass using an API request with Content-Length set to 0, causing the Docker daemon to forward the request without the body to the AuthZ plugin, which might approve the request incorrectly.\n- **Initial fix:** The issue was fixed in Docker Engine [v18.09.1](https://docs.docker.com/engine/release-notes/18.09/#security-fixes-1) January 2019..\n- **Regression:** The fix was not included in Docker Engine v19.03 or newer versions. This was identified in April 2024 and patches were released for the affected versions on July 23, 2024. The issue was assigned [CVE-2024-41110](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-41110).\n\n### Patches\n\n- docker-ce v27.1.1 containes patches to fix the vulnerability.\n- Patches have also been merged into the master, 19.0, 20.0, 23.0, 24.0, 25.0, 26.0, and 26.1 release branches.\n\n### Remediation steps\n\n- If you are running an affected version, update to the most recent patched version.\n- Mitigation if unable to update immediately:\n    - Avoid using AuthZ plugins.\n    - Restrict access to the Docker API to trusted parties, following the principle of least privilege.\n\n\n### References\n\n- https://github.com/moby/moby/commit/fc274cd2ff4cf3b48c91697fb327dd1fb95588fb\n- https://github.com/moby/moby/commit/a79fabbfe84117696a19671f4aa88b82d0f64fc1\n- https://www.docker.com/blog/docker-security-advisory-docker-engine-authz-plugin/",
      "cve": "CVE-2024-41110",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/docker/docker@24.0.6+incompatible to 25.0.6",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/docker/docker@24.0.6%2Bincompatible"
          },
          "version": "24.0.6+incompatible"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-41110",
          "value": "CVE-2024-41110",
          "url": "https://scout.docker.com/v/CVE-2024-41110?s=github&n=docker&ns=github.com%2Fdocker&t=golang&vr=%3E%3D24.0.0%2C%3C25.0.6"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-41110?s=github&n=docker&ns=github.com%2Fdocker&t=golang&vr=%3E%3D24.0.0%2C%3C25.0.6"
        }
      ]
    },
    {
      "id": "b8802c442068ddaffd07c94d43812a49f3ef50c1aecabcd3e11dd9caea1c2cf9",
      "category": "container_scanning",
      "message": "CVE-2024-23653 on github.com/moby/buildkit@0.12.2",
      "description": "### Impact\nIn addition to running containers as build steps, BuildKit also provides APIs for running interactive containers based on built images. It was possible to use these APIs to ask BuildKit to run a container with elevated privileges. Normally, running such containers is only allowed if special `security.insecure` entitlement is enabled both by buildkitd configuration and allowed by the user initializing the build request.\n\n### Patches\nThe issue has been fixed in v0.12.5 .\n\n### Workarounds\nAvoid using BuildKit frontends from untrusted sources. A frontend image is usually specified as the `#syntax` line on your Dockerfile, or with `--frontend` flag when using `buildctl build` command.\n\n### References\n\n",
      "cve": "CVE-2024-23653",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/moby/buildkit@0.12.2 to 0.12.5",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/moby/buildkit@0.12.2"
          },
          "version": "0.12.2"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-23653",
          "value": "CVE-2024-23653",
          "url": "https://scout.docker.com/v/CVE-2024-23653?s=github&n=buildkit&ns=github.com%2Fmoby&t=golang&vr=%3C0.12.5"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-23653?s=github&n=buildkit&ns=github.com%2Fmoby&t=golang&vr=%3C0.12.5"
        }
      ]
    },
    {
      "id": "582d1e2e5445e7dacfb010a8a0b6c3195a233bf02f438ea1a1ca2a6bfee8c89d",
      "category": "container_scanning",
      "message": "CVE-2024-23653 on github.com/moby/buildkit@0.12.1-0.20230717122532-faa0cc7da353",
      "description": "### Impact\nIn addition to running containers as build steps, BuildKit also provides APIs for running interactive containers based on built images. It was possible to use these APIs to ask BuildKit to run a container with elevated privileges. Normally, running such containers is only allowed if special `security.insecure` entitlement is enabled both by buildkitd configuration and allowed by the user initializing the build request.\n\n### Patches\nThe issue has been fixed in v0.12.5 .\n\n### Workarounds\nAvoid using BuildKit frontends from untrusted sources. A frontend image is usually specified as the `#syntax` line on your Dockerfile, or with `--frontend` flag when using `buildctl build` command.\n\n### References\n\n",
      "cve": "CVE-2024-23653",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/moby/buildkit@0.12.1-0.20230717122532-faa0cc7da353 to 0.12.5",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/moby/buildkit@0.12.1-0.20230717122532-faa0cc7da353"
          },
          "version": "0.12.1-0.20230717122532-faa0cc7da353"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-23653",
          "value": "CVE-2024-23653",
          "url": "https://scout.docker.com/v/CVE-2024-23653?s=github&n=buildkit&ns=github.com%2Fmoby&t=golang&vr=%3C0.12.5"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-23653?s=github&n=buildkit&ns=github.com%2Fmoby&t=golang&vr=%3C0.12.5"
        }
      ]
    },
    {
      "id": "e82fa61ddb3a84f5c99b4431e4292b277ffea79c0d7542d505e430d9006e7993",
      "category": "container_scanning",
      "message": "CVE-2024-24790 on stdlib@1.21.1",
      "description": "The various Is methods (IsPrivate, IsLoopback, etc) did not work as expected for IPv4-mapped IPv6 addresses, returning false for addresses which would return true in their traditional IPv4 forms.",
      "cve": "CVE-2024-24790",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.21.1 to 1.21.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.21.1"
          },
          "version": "1.21.1"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24790",
          "value": "CVE-2024-24790",
          "url": "https://scout.docker.com/v/CVE-2024-24790?s=golang&n=stdlib&t=golang&vr=%3C1.21.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24790?s=golang&n=stdlib&t=golang&vr=%3C1.21.11"
        }
      ]
    },
    {
      "id": "6b60b00e3be7fd5ff9270268024193787ad408970d1c91c5f760ae877a6ad410",
      "category": "container_scanning",
      "message": "CVE-2024-24790 on stdlib@1.19.9",
      "description": "The various Is methods (IsPrivate, IsLoopback, etc) did not work as expected for IPv4-mapped IPv6 addresses, returning false for addresses which would return true in their traditional IPv4 forms.",
      "cve": "CVE-2024-24790",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.19.9 to 1.21.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.19.9"
          },
          "version": "1.19.9"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24790",
          "value": "CVE-2024-24790",
          "url": "https://scout.docker.com/v/CVE-2024-24790?s=golang&n=stdlib&t=golang&vr=%3C1.21.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24790?s=golang&n=stdlib&t=golang&vr=%3C1.21.11"
        }
      ]
    },
    {
      "id": "28911de3f006581a74ba2de8b848a4933fb0f74914d6ab05d26a337fa54d569e",
      "category": "container_scanning",
      "message": "CVE-2024-24790 on stdlib@1.20.6",
      "description": "The various Is methods (IsPrivate, IsLoopback, etc) did not work as expected for IPv4-mapped IPv6 addresses, returning false for addresses which would return true in their traditional IPv4 forms.",
      "cve": "CVE-2024-24790",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.20.6 to 1.21.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.20.6"
          },
          "version": "1.20.6"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24790",
          "value": "CVE-2024-24790",
          "url": "https://scout.docker.com/v/CVE-2024-24790?s=golang&n=stdlib&t=golang&vr=%3C1.21.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24790?s=golang&n=stdlib&t=golang&vr=%3C1.21.11"
        }
      ]
    },
    {
      "id": "07e52fda888df8ccbcdbc7c12f6c988f939d83c727e2689bb728d459915fdef6",
      "category": "container_scanning",
      "message": "CVE-2024-23652 on github.com/moby/buildkit@0.12.1-0.20230717122532-faa0cc7da353",
      "description": "### Impact\nA malicious BuildKit frontend or Dockerfile using `RUN --mount` could trick the feature that removes empty files created for the mountpoints into removing a file outside the container, from the host system.\n\n### Patches\nThe issue has been fixed in v0.12.5\n\n### Workarounds\nAvoid using BuildKit frontend from an untrusted source or building an untrusted Dockerfile containing `RUN --mount` feature.\n\n### References\n\n",
      "cve": "CVE-2024-23652",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/moby/buildkit@0.12.1-0.20230717122532-faa0cc7da353 to 0.12.5",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/moby/buildkit@0.12.1-0.20230717122532-faa0cc7da353"
          },
          "version": "0.12.1-0.20230717122532-faa0cc7da353"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-23652",
          "value": "CVE-2024-23652",
          "url": "https://scout.docker.com/v/CVE-2024-23652?s=github&n=buildkit&ns=github.com%2Fmoby&t=golang&vr=%3C0.12.5"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-23652?s=github&n=buildkit&ns=github.com%2Fmoby&t=golang&vr=%3C0.12.5"
        }
      ]
    },
    {
      "id": "af71d3e80f65cb56f084e0619ec7cc3dbbbd7d5dc84cd5bba60cd414f366fac8",
      "category": "container_scanning",
      "message": "CVE-2024-23652 on github.com/moby/buildkit@0.12.2",
      "description": "### Impact\nA malicious BuildKit frontend or Dockerfile using `RUN --mount` could trick the feature that removes empty files created for the mountpoints into removing a file outside the container, from the host system.\n\n### Patches\nThe issue has been fixed in v0.12.5\n\n### Workarounds\nAvoid using BuildKit frontend from an untrusted source or building an untrusted Dockerfile containing `RUN --mount` feature.\n\n### References\n\n",
      "cve": "CVE-2024-23652",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/moby/buildkit@0.12.2 to 0.12.5",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/moby/buildkit@0.12.2"
          },
          "version": "0.12.2"
        },
        "operating_system": "alpine 3.18",
        "image": "docker:23.0-dind"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-23652",
          "value": "CVE-2024-23652",
          "url": "https://scout.docker.com/v/CVE-2024-23652?s=github&n=buildkit&ns=github.com%2Fmoby&t=golang&vr=%3C0.12.5"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-23652?s=github&n=buildkit&ns=github.com%2Fmoby&t=golang&vr=%3C0.12.5"
        }
      ]
    }
  ],
  "remediations": [],
  "scan": {
    "start_time": "2025-10-16T19:09:57",
    "end_time": "2025-10-16T19:09:57",
    "status": "success",
    "type": "container_scanning",
    "scanner": {
      "id": "docker-scout",
      "name": "Docker Scout",
      "version": "1.18.3",
      "vendor": {
        "name": "Docker"
      }
    },
    "analyzer": {
      "id": "docker-scout",
      "name": "Docker Scout",
      "version": "1.18.3",
      "vendor": {
        "name": "Docker"
      }
    }
  }
}
