{
  "version": "15.0.6",
  "vulnerabilities": [
    {
      "id": "454763090f062fb2841a30b00175a123bc4b3b8bfd307a39ecbbf8a1cc0af689",
      "category": "container_scanning",
      "message": "CVE-2023-26049 on org.eclipse.jetty/jetty-server@9.4.42.v20210604",
      "description": "Nonstandard cookie parsing in Jetty may allow an attacker to smuggle cookies within other cookies, or otherwise perform unintended behavior by tampering with the cookie parsing mechanism.\n\nIf Jetty sees a cookie VALUE that starts with `\"` (double quote), it will continue to read the cookie string until it sees a closing quote -- even if a semicolon is encountered.\n\nSo, a cookie header such as:\n\n`DISPLAY_LANGUAGE=\"b; JSESSIONID=1337; c=d\"` will be parsed as one cookie, with the name `DISPLAY_LANGUAGE` and a value of `b; JSESSIONID=1337; c=d`\n\ninstead of 3 separate cookies.\n\n### Impact\nThis has security implications because if, say, `JSESSIONID` is an `HttpOnly` cookie, and the `DISPLAY_LANGUAGE` cookie value is rendered on the page, an attacker can smuggle the `JSESSIONID` cookie into the `DISPLAY_LANGUAGE` cookie and thereby exfiltrate it. This is significant when an intermediary is enacting some policy based on cookies, so a smuggled cookie can bypass that policy yet still be seen by the Jetty server.\n\n### Patches\n* 9.4.51.v20230217 - via PR #9352\n* 10.0.15 - via PR #9339\n* 11.0.15 - via PR #9339\n\n### Workarounds\nNo workarounds\n\n### References\n* https://www.rfc-editor.org/rfc/rfc2965\n* https://www.rfc-editor.org/rfc/rfc6265\n",
      "cve": "CVE-2023-26049",
      "severity": "Low",
      "confidence": "Unknown",
      "solution": "Upgrade org.eclipse.jetty/jetty-server@9.4.42.v20210604 to 9.4.51.v20230217",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:maven/org.eclipse.jetty/jetty-server@9.4.42.v20210604"
          },
          "version": "9.4.42.v20210604"
        },
        "operating_system": "debian 10",
        "image": "jetty:9.4.42-jdk11"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-26049",
          "value": "CVE-2023-26049",
          "url": "https://scout.docker.com/v/CVE-2023-26049?s=github&n=jetty-server&ns=org.eclipse.jetty&t=maven&vr=%3C9.4.51.v20230217"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-26049?s=github&n=jetty-server&ns=org.eclipse.jetty&t=maven&vr=%3C9.4.51.v20230217"
        }
      ]
    },
    {
      "id": "f97270cadafb429bbaa05e40be10bd23db2a21522ed3d8f7bd09f7b7288e293c",
      "category": "container_scanning",
      "message": "CVE-2022-2047 on org.eclipse.jetty/jetty-http@9.4.42.v20210604",
      "description": "### Description\nURI use within Jetty's `HttpURI` class can parse invalid URIs such as `http://localhost;/path` as having an authority with a host of `localhost;`.\n\nA URIs of the type `http://localhost;/path` should be interpreted to be either invalid or as `localhost;` to be the userinfo and no host.\nHowever, `HttpURI.host` returns `localhost;` which is definitely wrong.\n\n### Impact\nThis can lead to errors with Jetty's `HttpClient`, and Jetty's `ProxyServlet` / `AsyncProxyServlet` / `AsyncMiddleManServlet` wrongly interpreting an authority with no host as one with a host.\n\n### Patches\nPatched in PR [#8146](https://github.com/eclipse/jetty.project/pull/8146) for Jetty version 9.4.47.\nPatched in PR [#8014](https://github.com/eclipse/jetty.project/pull/8015) for Jetty versions 10.0.10, and 11.0.10\n\n### Workarounds\nNone.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Email us at security@webtide.com.",
      "cve": "CVE-2022-2047",
      "severity": "Low",
      "confidence": "Unknown",
      "solution": "Upgrade org.eclipse.jetty/jetty-http@9.4.42.v20210604 to 9.4.47",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:maven/org.eclipse.jetty/jetty-http@9.4.42.v20210604"
          },
          "version": "9.4.42.v20210604"
        },
        "operating_system": "debian 10",
        "image": "jetty:9.4.42-jdk11"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-2047",
          "value": "CVE-2022-2047",
          "url": "https://scout.docker.com/v/CVE-2022-2047?s=github&n=jetty-http&ns=org.eclipse.jetty&t=maven&vr=%3C9.4.47"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-2047?s=github&n=jetty-http&ns=org.eclipse.jetty&t=maven&vr=%3C9.4.47"
        }
      ]
    },
    {
      "id": "4b68ccc8c2e7e938b828231fa49271aa67f6d57a66c3d9b8f2dd7eca31cb6dee",
      "category": "container_scanning",
      "message": "CVE-2023-36479 on org.eclipse.jetty/jetty-servlets@9.4.42.v20210604",
      "description": "If a user sends a request to a `org.eclipse.jetty.servlets.CGI` Servlet for a binary with a space in its name, the servlet will escape the command by wrapping it in quotation marks. This wrapped command, plus an optional command prefix, will then be executed through a call to Runtime.exec. If the original binary name provided by the user contains a quotation mark followed by a space, the resulting command line will contain multiple tokens instead of one. For example, if a request references a binary called file” name “here, the escaping algorithm will generate the command line string “file” name “here”, which will invoke the binary named file, not the one that the user requested.\n\n```java\nif (execCmd.length() > 0 && execCmd.charAt(0) != '\"' && execCmd.contains(\" \"))\nexecCmd = \"\\\"\" + execCmd + \"\\\"\";\n```\n\n### Exploit Scenario\nThe cgi-bin directory contains a binary named exec and a subdirectory named exec” commands, which contains a file called bin1. The user sends to the CGI servlet a request for the filename exec” commands/bin1. This request will pass the file existence check on lines 194 through 205. The servlet will add quotation marks around this filename, resulting in the command line string “exec” commands/bin1”. When this string is passed to Runtime.exec, instead of executing the bin1 binary, the server will execute the exec\nbinary with the argument commands/file1”. In addition to being incorrect, this behavior may bypass alias checks, and it may cause other unintended behaviors if a command prefix is configured.\n\nIf the useFullPath configuration setting is off, the command need not pass the existence check. The attack would not rely on a binary and subdirectory having similar names, and the attack will succeed on a much wider variety of directory structures.\n\n### Impact\nUsers of the `org.eclipse.jetty.servlets.CGI` Servlet with a very specific command structure may have the wrong command executed.\n\n### Patches\nNo patch.\nIn Jetty 9.x, 10.x, and 11.x the `org.eclipse.jetty.servlets.CGI` has been deprecated.\nIn Jetty 12 (all environments) the `org.eclipse.jetty.servlets.CGI` has been entirely removed.\n\n### Workarounds\nThe `org.eclipse.jetty.servlets.CGI` Servlet should not be used. Fast CGI support is available instead.\n\n### References\n* https://github.com/eclipse/jetty.project/pull/9516\n* https://github.com/eclipse/jetty.project/pull/9889\n* https://github.com/eclipse/jetty.project/pull/9888",
      "cve": "CVE-2023-36479",
      "severity": "Low",
      "confidence": "Unknown",
      "solution": "Upgrade org.eclipse.jetty/jetty-servlets@9.4.42.v20210604 to 9.4.52",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:maven/org.eclipse.jetty/jetty-servlets@9.4.42.v20210604"
          },
          "version": "9.4.42.v20210604"
        },
        "operating_system": "debian 10",
        "image": "jetty:9.4.42-jdk11"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-36479",
          "value": "CVE-2023-36479",
          "url": "https://scout.docker.com/v/CVE-2023-36479?s=github&n=jetty-servlets&ns=org.eclipse.jetty&t=maven&vr=%3E%3D9.0.0%2C%3C%3D9.4.51"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-36479?s=github&n=jetty-servlets&ns=org.eclipse.jetty&t=maven&vr=%3E%3D9.0.0%2C%3C%3D9.4.51"
        }
      ]
    },
    {
      "id": "2481366ca549a006968513416f1aa2065263c44d8053480b119aeca5c8333b8b",
      "category": "container_scanning",
      "message": "CVE-2023-36479 on org.eclipse.jetty/jetty-webapp@9.4.42.v20210604",
      "description": "If a user sends a request to a `org.eclipse.jetty.servlets.CGI` Servlet for a binary with a space in its name, the servlet will escape the command by wrapping it in quotation marks. This wrapped command, plus an optional command prefix, will then be executed through a call to Runtime.exec. If the original binary name provided by the user contains a quotation mark followed by a space, the resulting command line will contain multiple tokens instead of one. For example, if a request references a binary called file” name “here, the escaping algorithm will generate the command line string “file” name “here”, which will invoke the binary named file, not the one that the user requested.\n\n```java\nif (execCmd.length() > 0 && execCmd.charAt(0) != '\"' && execCmd.contains(\" \"))\nexecCmd = \"\\\"\" + execCmd + \"\\\"\";\n```",
      "cve": "CVE-2023-36479",
      "severity": "Low",
      "confidence": "Unknown",
      "solution": "Upgrade org.eclipse.jetty/jetty-webapp@9.4.42.v20210604 to 9.4.52.v20230823, 10.0.16, 11.0.16",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:maven/org.eclipse.jetty/jetty-webapp@9.4.42.v20210604"
          },
          "version": "9.4.42.v20210604"
        },
        "operating_system": "debian 10",
        "image": "jetty:9.4.42-jdk11"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-36479",
          "value": "CVE-2023-36479",
          "url": "https://scout.docker.com/v/CVE-2023-36479?s=gitlab&n=jetty-webapp&ns=org.eclipse.jetty&t=maven&vr=%3E%3D9.0.0%2C%3C9.4.52"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-36479?s=gitlab&n=jetty-webapp&ns=org.eclipse.jetty&t=maven&vr=%3E%3D9.0.0%2C%3C9.4.52"
        }
      ]
    },
    {
      "id": "5c09a274f568d77badfdbf603a5788083c9651686ddc96ca2a4a13e9e69fc073",
      "category": "container_scanning",
      "message": "CVE-2023-41900 on org.eclipse.jetty/jetty-openid@9.4.42.v20210604",
      "description": "If a Jetty `OpenIdAuthenticator` uses the optional nested `LoginService`, and that `LoginService` decides to revoke an already authenticated user, then the current request will still treat the user as authenticated. The authentication is then cleared from the session and subsequent requests will not be treated as authenticated. \n\nSo a request on a previously authenticated session could be allowed to bypass authentication after it had been rejected by the `LoginService`.\n\n### Impact\nThis impacts usages of the jetty-openid which have configured a nested `LoginService` and where that `LoginService` will is capable of rejecting previously authenticated users.\n\n### Original Report\n> working on a custom OpenIdAuthenticator, I discovered the following:\n> \n> https://github.com/eclipse/jetty.project/blob/jetty-10.0.14/jetty-openid/src/main/java/org/eclipse/jetty/security/openid/OpenIdAuthenticator.java#L505\n> \n> In the case where the LoginService does return that the authentication has been revoked (from the validate() call on line 463), the OpenIdAuthenticator removes the authentication from the session; however the current request still proceeds as if authenticated, since it falls through to \"return authentication\" on line 505.\n> \n> This is fixed by moving the line 505 (and associated debug log) inside the else block that ends on line 502, instead of outside it. Then the revocation case will run through to line 517 and will trigger a new OpenId authentication which I think is correct.\n> \n> I think this revocation can only occur if you do attach a separate LoginService to the OpenIdLoginService, but in that case the revoked authentication will still let the next request through (and possibly more than one if they are very close to simultaneous).\n> \n> Technically I think this is a security vulnerability, if a very minor one, so I'm sending this off-list.\n\n### Patched Versions\n\nFixed in Jetty Versions:\n* 9.4.52 - fixed in PR https://github.com/eclipse/jetty.project/pull/9660\n* 10.0.16 - fixed in PR https://github.com/eclipse/jetty.project/pull/9528\n* 11.0.16 - fixed in PR https://github.com/eclipse/jetty.project/pull/9528\n* 12.0.0 - not impacted (already has fix)\n\n### Workaround\nUpgrade your version of Jetty.\n\n### References\n* https://github.com/eclipse/jetty.project/pull/9528\n* https://github.com/eclipse/jetty.project/pull/9660",
      "cve": "CVE-2023-41900",
      "severity": "Low",
      "confidence": "Unknown",
      "solution": "Upgrade org.eclipse.jetty/jetty-openid@9.4.42.v20210604 to 9.4.52.v20230823",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:maven/org.eclipse.jetty/jetty-openid@9.4.42.v20210604"
          },
          "version": "9.4.42.v20210604"
        },
        "operating_system": "debian 10",
        "image": "jetty:9.4.42-jdk11"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-41900",
          "value": "CVE-2023-41900",
          "url": "https://scout.docker.com/v/CVE-2023-41900?s=github&n=jetty-openid&ns=org.eclipse.jetty&t=maven&vr=%3E%3D9.4.21%2C%3C%3D9.4.51"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-41900?s=github&n=jetty-openid&ns=org.eclipse.jetty&t=maven&vr=%3E%3D9.4.21%2C%3C%3D9.4.51"
        }
      ]
    },
    {
      "id": "ab5f2a01668fb8d7153cb28b9a902b80e67a5fc4ac30884a5271d87a40b6ae54",
      "category": "container_scanning",
      "message": "GHSA-58qw-p7qm-5rvh on org.eclipse.jetty/jetty-xml@9.4.42.v20210604",
      "description": "### From the reporter\n\n> `XmlParser` is vulnerable to XML external entity (XXE) vulnerability.\n>  XmlParser is being used when parsing Jetty’s xml configuration files. An attacker might exploit\n> this vulnerability in order to achieve SSRF or cause a denial of service.\n> One possible scenario is importing a (remote) malicious WAR into a Jetty’s server, while the\n> WAR includes a malicious web.xml.\n\n### Impact\nThere are no circumstances in a normally deployed Jetty server where potentially hostile XML is given to the XmlParser class without the attacker already having arbitrary access to the server. I.e. in order to exploit `XmlParser` the attacker would already have the ability to deploy and execute hostile code.  Specifically, Jetty has no protection against malicious web application and potentially hostile web applications should only be run on an isolated virtualisation.  \n\nThus this is not considered a vulnerability of the Jetty server itself, as any such usage of the jetty XmlParser is equally vulnerable as a direct usage of the JVM supplied SAX parser.  No CVE will be allocated to this advisory.\n\nHowever, any direct usage of the `XmlParser` class by an application may be vulnerable.  The impact would greatly depend on how the application uses `XmlParser`, but it could be a denial of service due to large entity expansion, or possibly the revealing local files if the XML results are accessible remotely.\n\n### Patches\nAbility to configure the SAXParserFactory to fit the needs of your particular XML parser implementation have been merged as part of PR #10067\n\n### Workarounds\nDon't use `XmlParser` to parse data from users.\n\n\n",
      "cve": "GHSA-58qw-p7qm-5rvh",
      "severity": "Low",
      "confidence": "Unknown",
      "solution": "Upgrade org.eclipse.jetty/jetty-xml@9.4.42.v20210604 to 9.4.52.v20230823",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:maven/org.eclipse.jetty/jetty-xml@9.4.42.v20210604"
          },
          "version": "9.4.42.v20210604"
        },
        "operating_system": "debian 10",
        "image": "jetty:9.4.42-jdk11"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "GHSA-58qw-p7qm-5rvh",
          "value": "GHSA-58qw-p7qm-5rvh",
          "url": "https://scout.docker.com/v/GHSA-58qw-p7qm-5rvh?s=github&n=jetty-xml&ns=org.eclipse.jetty&t=maven&vr=%3C%3D9.4.51"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/GHSA-58qw-p7qm-5rvh?s=github&n=jetty-xml&ns=org.eclipse.jetty&t=maven&vr=%3C%3D9.4.51"
        }
      ]
    },
    {
      "id": "1cbf8c08c250fc9395c8878fb6a1f23e54720b975ab4ba37c2a8bdfe7d946ffa",
      "category": "container_scanning",
      "message": "CVE-2023-41900 on org.eclipse.jetty/jetty-webapp@9.4.42.v20210604",
      "description": "If a Jetty `OpenIdAuthenticator` uses the optional nested `LoginService`, and that `LoginService` decides to revoke an already authenticated user, then the current request will still treat the user as authenticated. The authentication is then cleared from the session and subsequent requests will not be treated as authenticated.\n\nSo a request on a previously authenticated session could be allowed to bypass authentication after it had been rejected by the `LoginService`.",
      "cve": "CVE-2023-41900",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade org.eclipse.jetty/jetty-webapp@9.4.42.v20210604 to 9.4.52.v20230823, 10.0.16, 11.0.16",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:maven/org.eclipse.jetty/jetty-webapp@9.4.42.v20210604"
          },
          "version": "9.4.42.v20210604"
        },
        "operating_system": "debian 10",
        "image": "jetty:9.4.42-jdk11"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-41900",
          "value": "CVE-2023-41900",
          "url": "https://scout.docker.com/v/CVE-2023-41900?s=gitlab&n=jetty-webapp&ns=org.eclipse.jetty&t=maven&vr=%3E%3D9.4.21%2C%3C9.4.52"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-41900?s=gitlab&n=jetty-webapp&ns=org.eclipse.jetty&t=maven&vr=%3E%3D9.4.21%2C%3C9.4.52"
        }
      ]
    },
    {
      "id": "9671f51b927bd1f02eec19012205e19c3d4ff7e868c3059b471676d2b9e19214",
      "category": "container_scanning",
      "message": "CVE-2023-41900 on org.eclipse.jetty/jetty-servlets@9.4.42.v20210604",
      "description": "If a Jetty `OpenIdAuthenticator` uses the optional nested `LoginService`, and that `LoginService` decides to revoke an already authenticated user, then the current request will still treat the user as authenticated. The authentication is then cleared from the session and subsequent requests will not be treated as authenticated.\n\nSo a request on a previously authenticated session could be allowed to bypass authentication after it had been rejected by the `LoginService`.",
      "cve": "CVE-2023-41900",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade org.eclipse.jetty/jetty-servlets@9.4.42.v20210604 to 9.4.52.v20230823, 10.0.16, 11.0.16",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:maven/org.eclipse.jetty/jetty-servlets@9.4.42.v20210604"
          },
          "version": "9.4.42.v20210604"
        },
        "operating_system": "debian 10",
        "image": "jetty:9.4.42-jdk11"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-41900",
          "value": "CVE-2023-41900",
          "url": "https://scout.docker.com/v/CVE-2023-41900?s=gitlab&n=jetty-servlets&ns=org.eclipse.jetty&t=maven&vr=%3E%3D9.4.21%2C%3C9.4.52"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-41900?s=gitlab&n=jetty-servlets&ns=org.eclipse.jetty&t=maven&vr=%3E%3D9.4.21%2C%3C9.4.52"
        }
      ]
    },
    {
      "id": "ae75adfcec44960fb8fbd30fab20d258486f46d7b2f7e6b8d247d902fd9500c7",
      "category": "container_scanning",
      "message": "CVE-2021-34429 on org.eclipse.jetty/jetty-webapp@9.4.42.v20210604",
      "description": "### Description\nURIs can be crafted using some encoded characters to access the content of the `WEB-INF` directory and/or bypass some security constraints.\nThis is a variation of the vulnerability reported in [CVE-2021-28164](https://nvd.nist.gov/vuln/detail/CVE-2021-28164)/[GHSA-v7ff-8wcx-gmc5](https://github.com/eclipse/jetty.project/security/advisories/GHSA-v7ff-8wcx-gmc5).\n\n### Impact\nThe default compliance mode allows requests with URIs that contain a %u002e segment to access protected resources within the WEB-INF directory. For example, a request to `/%u002e/WEB-INF/web.xml` can retrieve the web.xml file. This can reveal sensitive information regarding the implementation of a web application.  Similarly, an encoded null character can prevent correct normalization so that /.%00/WEB-INF/web.xml cal also retrieve the web.xml file.\n\n### Workarounds\nSome Jetty [rewrite rules](https://www.eclipse.org/jetty/documentation/jetty-9/index.html#rewrite-handler) can be deployed to rewrite any request containing encoded dot segments or null characters in the raw request URI, to a known not found resource:\n```xml\n<Call name=\"addRule\">\n  <Arg>\n    <New class=\"org.eclipse.jetty.rewrite.handler.RewriteRegexRule\">\n      <Set name=\"regex\">.*/(?:\\.+/)+.*</Set>\n      <Set name=\"replacement\">/WEB-INF/Not-Found</Set>\n    </New>\n  </Arg>\n</Call>\n<Call name=\"addRule\">\n  <Arg>\n    <New class=\"org.eclipse.jetty.rewrite.handler.ValidUrlRule\"/>\n  </Arg>\n</Call>\n```\n\n### Analysis\nPrior to 9.4.37, Jetty was protected from this style of attack by two lines of defense:\n + URIs were decoded first and then normalized for `.` and `..` sequences. Whilst this is not according to the RFC, it did remove relative segments that were encoded or parameterized and made the resulting URI paths safe from any repeated normalization (often done by URI manipulation and file system mapping).\n + The `FileResource` class treated any difference between absolute path and canonical path of a resource as an alias, and thus the resource would not be served by default.\n\nPrior to 9.4.37, the `FileResource` class was replaced by the `PathResource` class that did not treat normalization differences as aliases.  Then release 9.4.37 updated the URI parsing to be compliant with the RFC, in that normalization is done before decoding.   This allowed various encodings or adornments to relative path segments that would not be normalized by the pure RFC URI normalization, but were normalized by the file system, thus allowing protected resources to be accessed via an alias.  Specifically by decoding URIs after normalization, it left them vulnerable to any subsequent normalization (potentially after checking security constraints) changing the URI singificantly.  Such extra normalization is often down by URI manipulation code and file systems.\n\nWith Jetty releases 9.4.43, 10.0.6, 11.0.6, we have restored several lines of defense:\n + URIs are first decoded and then normalized which is not strictly according to the current RFC.  Since the normalization is done after decoding, the URI paths produced are safe from further normalisation and the referenced resource cannot easily be so changed after passing security constraints.\n + During URI parsing checks are made for some specific segments/characters that are possible to be seen ambiguously by an application (e.g. encode dot segments, encoded separators, empty segments, parameterized dot segments and/or null characters). So even though Jetty code handles these URIs correctly, there is a risk that an application may not do so, thus such requests are rejected with a 400 Bad Request unless a specific compliance mode is set.\n + Once decoded and normalized by initial URI processing, Jetty will not decode or normalize a received URI again within its own resource handling. This avoids to possibility of double decode attacks.\n + The `ContextHandler.getResource(String path)` method always checks that the passed path is normalized, only accepting a non normal path if approved by an AliasChecker.  This is the method that is directly used by Jetty resource serving.\n + The API methods like `ServletContext.getResource(String path)` will normalize the  prior to calling `ContextHandler.getResource(String path)`. This allows applications to use non normal paths.\n + The `PathResource` class now considers any difference in normal/canonical name between a request resource name and the found resource name  to be an alias, which will only be served if approved by an explicit `AliasChecker`\n\nIn summary, the defense is a front line of detection of specific known URI alias attacks, with the last line defense of not allowing any aliasing of resources.\n\nMany thanks to @cangqingzhe from @CloverSecLabs for reporting this issue. ",
      "cve": "CVE-2021-34429",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade org.eclipse.jetty/jetty-webapp@9.4.42.v20210604 to 9.4.43",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:maven/org.eclipse.jetty/jetty-webapp@9.4.42.v20210604"
          },
          "version": "9.4.42.v20210604"
        },
        "operating_system": "debian 10",
        "image": "jetty:9.4.42-jdk11"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-34429",
          "value": "CVE-2021-34429",
          "url": "https://scout.docker.com/v/CVE-2021-34429?s=github&n=jetty-webapp&ns=org.eclipse.jetty&t=maven&vr=%3E%3D9.4.37%2C%3C9.4.43"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-34429?s=github&n=jetty-webapp&ns=org.eclipse.jetty&t=maven&vr=%3E%3D9.4.37%2C%3C9.4.43"
        }
      ]
    },
    {
      "id": "9ffd9a405a4f0bd5aa943e39f243371d73c888e478c922fb46d99838a56a7d0c",
      "category": "container_scanning",
      "message": "CVE-2023-26048 on org.eclipse.jetty/jetty-server@9.4.42.v20210604",
      "description": "### Impact\nServlets with multipart support (e.g. annotated with `@MultipartConfig`) that call `HttpServletRequest.getParameter()` or `HttpServletRequest.getParts()` may cause `OutOfMemoryError` when the client sends a multipart request with a part that has a name but no filename and a very large content.\n\nThis happens even with the default settings of `fileSizeThreshold=0` which should stream the whole part content to disk.\n\nAn attacker client may send a large multipart request and cause the server to throw `OutOfMemoryError`.\nHowever, the server may be able to recover after the `OutOfMemoryError` and continue its service -- although it may take some time.\n\nA very large number of parts may cause the same problem.\n\n### Patches\nPatched in Jetty versions\n\n* 9.4.51.v20230217 - via PR #9345\n* 10.0.14 - via PR #9344\n* 11.0.14 - via PR #9344\n\n### Workarounds\nMultipart parameter `maxRequestSize` must be set to a non-negative value, so the whole multipart content is limited (although still read into memory).\nLimiting multipart parameter `maxFileSize` won't be enough because an attacker can send a large number of parts that summed up will cause memory issues.\n\n### References\n* https://github.com/eclipse/jetty.project/issues/9076\n* https://github.com/jakartaee/servlet/blob/6.0.0/spec/src/main/asciidoc/servlet-spec-body.adoc#32-file-upload\n",
      "cve": "CVE-2023-26048",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade org.eclipse.jetty/jetty-server@9.4.42.v20210604 to 9.4.51.v20230217",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:maven/org.eclipse.jetty/jetty-server@9.4.42.v20210604"
          },
          "version": "9.4.42.v20210604"
        },
        "operating_system": "debian 10",
        "image": "jetty:9.4.42-jdk11"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-26048",
          "value": "CVE-2023-26048",
          "url": "https://scout.docker.com/v/CVE-2023-26048?s=github&n=jetty-server&ns=org.eclipse.jetty&t=maven&vr=%3C9.4.51.v20230217"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-26048?s=github&n=jetty-server&ns=org.eclipse.jetty&t=maven&vr=%3C9.4.51.v20230217"
        }
      ]
    },
    {
      "id": "239ac88f260450a0a0804d9c96a441047038dde0b67569288b3af3942f1a62f9",
      "category": "container_scanning",
      "message": "CVE-2023-26049 on org.eclipse.jetty/jetty-webapp@9.4.42.v20210604",
      "description": "Jetty is a java based web server and servlet engine. Nonstandard cookie parsing in Jetty may allow an attacker to smuggle cookies within other cookies, or otherwise perform unintended behavior by tampering with the cookie parsing mechanism. If Jetty sees a cookie VALUE that starts with `\"` (double quote), it will continue to read the cookie string until it sees a closing quote -- even if a semicolon is encountered. So, a cookie header such as: `DISPLAY_LANGUAGE=\"b; JSESSIONID=1337; c=d\"` will be parsed as one cookie, with the name DISPLAY_LANGUAGE and a value of b; JSESSIONID=1337; c=d instead of 3 separate cookies. This has security implications because if, say, JSESSIONID is an HttpOnly cookie, and the DISPLAY_LANGUAGE cookie value is rendered on the page, an attacker can smuggle the JSESSIONID cookie into the DISPLAY_LANGUAGE cookie and thereby exfiltrate it. This is significant when an intermediary is enacting some policy based on cookies, so a smuggled cookie can bypass that policy yet still be seen by the Jetty server or its logging system. This issue has been addressed in versions 9.4.51, 10.0.14, 11.0.14, and 12.0.0.beta0 and users are advised to upgrade. There are no known workarounds for this issue.",
      "cve": "CVE-2023-26049",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade org.eclipse.jetty/jetty-webapp@9.4.42.v20210604 to 9.4.51.v20230217, 10.0.14, 11.0.14",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:maven/org.eclipse.jetty/jetty-webapp@9.4.42.v20210604"
          },
          "version": "9.4.42.v20210604"
        },
        "operating_system": "debian 10",
        "image": "jetty:9.4.42-jdk11"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-26049",
          "value": "CVE-2023-26049",
          "url": "https://scout.docker.com/v/CVE-2023-26049?s=gitlab&n=jetty-webapp&ns=org.eclipse.jetty&t=maven&vr=%3C9.4.51"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-26049?s=gitlab&n=jetty-webapp&ns=org.eclipse.jetty&t=maven&vr=%3C9.4.51"
        }
      ]
    },
    {
      "id": "8cc77a50bb5cff5f215c456b922d0d41ec5b81f76ed8c55b3f371f9f7fd8a298",
      "category": "container_scanning",
      "message": "CVE-2023-26049 on org.eclipse.jetty/jetty-deploy@9.4.42.v20210604",
      "description": "Jetty is a java based web server and servlet engine. Nonstandard cookie parsing in Jetty may allow an attacker to smuggle cookies within other cookies, or otherwise perform unintended behavior by tampering with the cookie parsing mechanism. If Jetty sees a cookie VALUE that starts with `\"` (double quote), it will continue to read the cookie string until it sees a closing quote -- even if a semicolon is encountered. So, a cookie header such as: `DISPLAY_LANGUAGE=\"b; JSESSIONID=1337; c=d\"` will be parsed as one cookie, with the name DISPLAY_LANGUAGE and a value of b; JSESSIONID=1337; c=d instead of 3 separate cookies. This has security implications because if, say, JSESSIONID is an HttpOnly cookie, and the DISPLAY_LANGUAGE cookie value is rendered on the page, an attacker can smuggle the JSESSIONID cookie into the DISPLAY_LANGUAGE cookie and thereby exfiltrate it. This is significant when an intermediary is enacting some policy based on cookies, so a smuggled cookie can bypass that policy yet still be seen by the Jetty server or its logging system. This issue has been addressed in versions 9.4.51, 10.0.14, 11.0.14, and 12.0.0.beta0 and users are advised to upgrade. There are no known workarounds for this issue.",
      "cve": "CVE-2023-26049",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade org.eclipse.jetty/jetty-deploy@9.4.42.v20210604 to 9.4.51.v20230217, 10.0.14, 11.0.14, 12.0.1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:maven/org.eclipse.jetty/jetty-deploy@9.4.42.v20210604"
          },
          "version": "9.4.42.v20210604"
        },
        "operating_system": "debian 10",
        "image": "jetty:9.4.42-jdk11"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-26049",
          "value": "CVE-2023-26049",
          "url": "https://scout.docker.com/v/CVE-2023-26049?s=gitlab&n=jetty-deploy&ns=org.eclipse.jetty&t=maven&vr=%3C9.4.51"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-26049?s=gitlab&n=jetty-deploy&ns=org.eclipse.jetty&t=maven&vr=%3C9.4.51"
        }
      ]
    },
    {
      "id": "a12e872eeced7f9aa68bd0047607190ca8df7a464b3677875f95570ce7703264",
      "category": "container_scanning",
      "message": "CVE-2023-26049 on org.eclipse.jetty/jetty-servlets@9.4.42.v20210604",
      "description": "Jetty is a java based web server and servlet engine. Nonstandard cookie parsing in Jetty may allow an attacker to smuggle cookies within other cookies, or otherwise perform unintended behavior by tampering with the cookie parsing mechanism. If Jetty sees a cookie VALUE that starts with `\"` (double quote), it will continue to read the cookie string until it sees a closing quote -- even if a semicolon is encountered. So, a cookie header such as: `DISPLAY_LANGUAGE=\"b; JSESSIONID=1337; c=d\"` will be parsed as one cookie, with the name DISPLAY_LANGUAGE and a value of b; JSESSIONID=1337; c=d instead of 3 separate cookies. This has security implications because if, say, JSESSIONID is an HttpOnly cookie, and the DISPLAY_LANGUAGE cookie value is rendered on the page, an attacker can smuggle the JSESSIONID cookie into the DISPLAY_LANGUAGE cookie and thereby exfiltrate it. This is significant when an intermediary is enacting some policy based on cookies, so a smuggled cookie can bypass that policy yet still be seen by the Jetty server or its logging system. This issue has been addressed in versions 9.4.51, 10.0.14, 11.0.14, and 12.0.0.beta0 and users are advised to upgrade. There are no known workarounds for this issue.",
      "cve": "CVE-2023-26049",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade org.eclipse.jetty/jetty-servlets@9.4.42.v20210604 to 9.4.51.v20230217, 10.0.14, 11.0.14",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:maven/org.eclipse.jetty/jetty-servlets@9.4.42.v20210604"
          },
          "version": "9.4.42.v20210604"
        },
        "operating_system": "debian 10",
        "image": "jetty:9.4.42-jdk11"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-26049",
          "value": "CVE-2023-26049",
          "url": "https://scout.docker.com/v/CVE-2023-26049?s=gitlab&n=jetty-servlets&ns=org.eclipse.jetty&t=maven&vr=%3C9.4.51"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-26049?s=gitlab&n=jetty-servlets&ns=org.eclipse.jetty&t=maven&vr=%3C9.4.51"
        }
      ]
    },
    {
      "id": "1ff03b68b9bcd5d792635c6f901d360483dee89cb41b91c83b6d21c12afc7cd4",
      "category": "container_scanning",
      "message": "CVE-2023-26049 on org.eclipse.jetty/jetty-client@9.4.42.v20210604",
      "description": "Jetty is a java based web server and servlet engine. Nonstandard cookie parsing in Jetty may allow an attacker to smuggle cookies within other cookies, or otherwise perform unintended behavior by tampering with the cookie parsing mechanism. If Jetty sees a cookie VALUE that starts with `\"` (double quote), it will continue to read the cookie string until it sees a closing quote -- even if a semicolon is encountered. So, a cookie header such as: `DISPLAY_LANGUAGE=\"b; JSESSIONID=1337; c=d\"` will be parsed as one cookie, with the name DISPLAY_LANGUAGE and a value of b; JSESSIONID=1337; c=d instead of 3 separate cookies. This has security implications because if, say, JSESSIONID is an HttpOnly cookie, and the DISPLAY_LANGUAGE cookie value is rendered on the page, an attacker can smuggle the JSESSIONID cookie into the DISPLAY_LANGUAGE cookie and thereby exfiltrate it. This is significant when an intermediary is enacting some policy based on cookies, so a smuggled cookie can bypass that policy yet still be seen by the Jetty server or its logging system. This issue has been addressed in versions 9.4.51, 10.0.14, 11.0.14, and 12.0.0.beta0 and users are advised to upgrade. There are no known workarounds for this issue.",
      "cve": "CVE-2023-26049",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade org.eclipse.jetty/jetty-client@9.4.42.v20210604 to 9.4.51.v20230217, 10.0.14, 11.0.14, 12.0.1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:maven/org.eclipse.jetty/jetty-client@9.4.42.v20210604"
          },
          "version": "9.4.42.v20210604"
        },
        "operating_system": "debian 10",
        "image": "jetty:9.4.42-jdk11"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-26049",
          "value": "CVE-2023-26049",
          "url": "https://scout.docker.com/v/CVE-2023-26049?s=gitlab&n=jetty-client&ns=org.eclipse.jetty&t=maven&vr=%3C9.4.51"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-26049?s=gitlab&n=jetty-client&ns=org.eclipse.jetty&t=maven&vr=%3C9.4.51"
        }
      ]
    },
    {
      "id": "4ac3fbe3ea4c2898d6304e3cb6ac1cb413069ef4ff223f71eb65056d29c7748d",
      "category": "container_scanning",
      "message": "CVE-2023-40167 on org.eclipse.jetty/jetty-servlets@9.4.42.v20210604",
      "description": "### Impact\n\nJetty accepts the '+' character proceeding the content-length value in a HTTP/1 header field. This is more permissive than allowed by the RFC and other servers routinely reject such requests with 400 responses. There is no known exploit scenario, but it is conceivable that request smuggling could result if jetty is used in combination with a server that does not close the connection after sending such a 400 response.\n\n### Workarounds\n\nThere is no workaround as there is no known exploit scenario. \n\n### Original Report \n\n[RFC 9110 Secion 8.6](https://www.rfc-editor.org/rfc/rfc9110#section-8.6) defined the value of Content-Length header should be a string of 0-9 digits. However we found that Jetty accepts \"+\" prefixed Content-Length, which could lead to potential HTTP request smuggling.\n\nPayload:\n\n```\n POST / HTTP/1.1\n Host: a.com\n Content-Length: +16\n Connection: close\n ​\n 0123456789abcdef\n```\n\nWhen sending this payload to Jetty, it can successfully parse and identify the length.\n\nWhen sending this payload to NGINX, Apache HTTPd or other HTTP servers/parsers, they will return 400 bad request.\n\nThis behavior can lead to HTTP request smuggling and can be leveraged to bypass WAF or IDS.",
      "cve": "CVE-2023-40167",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade org.eclipse.jetty/jetty-servlets@9.4.42.v20210604 to 9.4.52.v20230823, 10.0.16, 11.0.16",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:maven/org.eclipse.jetty/jetty-servlets@9.4.42.v20210604"
          },
          "version": "9.4.42.v20210604"
        },
        "operating_system": "debian 10",
        "image": "jetty:9.4.42-jdk11"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-40167",
          "value": "CVE-2023-40167",
          "url": "https://scout.docker.com/v/CVE-2023-40167?s=gitlab&n=jetty-servlets&ns=org.eclipse.jetty&t=maven&vr=%3E%3D9.0.0%2C%3C9.4.52"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-40167?s=gitlab&n=jetty-servlets&ns=org.eclipse.jetty&t=maven&vr=%3E%3D9.0.0%2C%3C9.4.52"
        }
      ]
    },
    {
      "id": "22cc1912ed54e83175d1af934f039a87bd2b09325d1b0219ba0b4ff789a05ce0",
      "category": "container_scanning",
      "message": "CVE-2023-40167 on org.eclipse.jetty/jetty-webapp@9.4.42.v20210604",
      "description": "### Impact\n\nJetty accepts the '+' character proceeding the content-length value in a HTTP/1 header field. This is more permissive than allowed by the RFC and other servers routinely reject such requests with 400 responses. There is no known exploit scenario, but it is conceivable that request smuggling could result if jetty is used in combination with a server that does not close the connection after sending such a 400 response.\n\n### Workarounds\n\nThere is no workaround as there is no known exploit scenario. \n\n### Original Report \n\n[RFC 9110 Secion 8.6](https://www.rfc-editor.org/rfc/rfc9110#section-8.6) defined the value of Content-Length header should be a string of 0-9 digits. However we found that Jetty accepts \"+\" prefixed Content-Length, which could lead to potential HTTP request smuggling.\n\nPayload:\n\n```\n POST / HTTP/1.1\n Host: a.com\n Content-Length: +16\n Connection: close\n ​\n 0123456789abcdef\n```\n\nWhen sending this payload to Jetty, it can successfully parse and identify the length.\n\nWhen sending this payload to NGINX, Apache HTTPd or other HTTP servers/parsers, they will return 400 bad request.\n\nThis behavior can lead to HTTP request smuggling and can be leveraged to bypass WAF or IDS.",
      "cve": "CVE-2023-40167",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade org.eclipse.jetty/jetty-webapp@9.4.42.v20210604 to 9.4.52.v20230823, 10.0.16, 11.0.16",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:maven/org.eclipse.jetty/jetty-webapp@9.4.42.v20210604"
          },
          "version": "9.4.42.v20210604"
        },
        "operating_system": "debian 10",
        "image": "jetty:9.4.42-jdk11"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-40167",
          "value": "CVE-2023-40167",
          "url": "https://scout.docker.com/v/CVE-2023-40167?s=gitlab&n=jetty-webapp&ns=org.eclipse.jetty&t=maven&vr=%3E%3D9.0.0%2C%3C9.4.52"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-40167?s=gitlab&n=jetty-webapp&ns=org.eclipse.jetty&t=maven&vr=%3E%3D9.0.0%2C%3C9.4.52"
        }
      ]
    },
    {
      "id": "8dba3648ffe77e1fdd350e68c2e044d536d00e2ffcef8d42a5118a75b14056ea",
      "category": "container_scanning",
      "message": "CVE-2023-40167 on org.eclipse.jetty/jetty-server@9.4.42.v20210604",
      "description": "### Impact\n\nJetty accepts the '+' character proceeding the content-length value in a HTTP/1 header field. This is more permissive than allowed by the RFC and other servers routinely reject such requests with 400 responses. There is no known exploit scenario, but it is conceivable that request smuggling could result if jetty is used in combination with a server that does not close the connection after sending such a 400 response.\n\n### Workarounds\n\nThere is no workaround as there is no known exploit scenario. \n\n### Original Report \n\n[RFC 9110 Secion 8.6](https://www.rfc-editor.org/rfc/rfc9110#section-8.6) defined the value of Content-Length header should be a string of 0-9 digits. However we found that Jetty accepts \"+\" prefixed Content-Length, which could lead to potential HTTP request smuggling.\n\nPayload:\n\n```\n POST / HTTP/1.1\n Host: a.com\n Content-Length: +16\n Connection: close\n ​\n 0123456789abcdef\n```\n\nWhen sending this payload to Jetty, it can successfully parse and identify the length.\n\nWhen sending this payload to NGINX, Apache HTTPd or other HTTP servers/parsers, they will return 400 bad request.\n\nThis behavior can lead to HTTP request smuggling and can be leveraged to bypass WAF or IDS.",
      "cve": "CVE-2023-40167",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade org.eclipse.jetty/jetty-server@9.4.42.v20210604 to 9.4.52.v20230823, 10.0.16, 11.0.16, 12.0.1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:maven/org.eclipse.jetty/jetty-server@9.4.42.v20210604"
          },
          "version": "9.4.42.v20210604"
        },
        "operating_system": "debian 10",
        "image": "jetty:9.4.42-jdk11"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-40167",
          "value": "CVE-2023-40167",
          "url": "https://scout.docker.com/v/CVE-2023-40167?s=gitlab&n=jetty-server&ns=org.eclipse.jetty&t=maven&vr=%3E%3D9.0.0%2C%3C9.4.52"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-40167?s=gitlab&n=jetty-server&ns=org.eclipse.jetty&t=maven&vr=%3E%3D9.0.0%2C%3C9.4.52"
        }
      ]
    },
    {
      "id": "7c04130964ea4afdab78de0204278a95e5d1b7ca1b4c2388ed37f3e55e015b54",
      "category": "container_scanning",
      "message": "CVE-2023-40167 on org.eclipse.jetty/jetty-http@9.4.42.v20210604",
      "description": "### Impact\n\nJetty accepts the '+' character proceeding the content-length value in a HTTP/1 header field.  This is more permissive than allowed by the RFC and other servers routinely reject such requests with 400 responses.  There is no known exploit scenario, but it is conceivable that request smuggling could result if jetty is used in combination with a server that does not close the connection after sending such a 400 response.\n\n### Workarounds\n\nThere is no workaround as there is no known exploit scenario.   \n\n### Original Report \n\n[RFC 9110 Secion 8.6](https://www.rfc-editor.org/rfc/rfc9110#section-8.6) defined the value of Content-Length header should be a string of 0-9 digits. However we found that Jetty accepts \"+\" prefixed Content-Length, which could lead to potential HTTP request smuggling.\n\nPayload:\n\n```\n POST / HTTP/1.1\n Host: a.com\n Content-Length: +16\n Connection: close\n ​\n 0123456789abcdef\n```\n\nWhen sending this payload to Jetty, it can successfully parse and identify the length.\n\nWhen sending this payload to NGINX, Apache HTTPd or other HTTP servers/parsers, they will return 400 bad request.\n\nThis behavior can lead to HTTP request smuggling and can be leveraged to bypass WAF or IDS.",
      "cve": "CVE-2023-40167",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade org.eclipse.jetty/jetty-http@9.4.42.v20210604 to 9.4.52",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:maven/org.eclipse.jetty/jetty-http@9.4.42.v20210604"
          },
          "version": "9.4.42.v20210604"
        },
        "operating_system": "debian 10",
        "image": "jetty:9.4.42-jdk11"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-40167",
          "value": "CVE-2023-40167",
          "url": "https://scout.docker.com/v/CVE-2023-40167?s=github&n=jetty-http&ns=org.eclipse.jetty&t=maven&vr=%3E%3D9.0.0%2C%3C%3D9.4.51"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-40167?s=github&n=jetty-http&ns=org.eclipse.jetty&t=maven&vr=%3E%3D9.0.0%2C%3C%3D9.4.51"
        }
      ]
    },
    {
      "id": "d01b9c5d3b7c34f9c95bd7187c4e7d5dda3cad0f7929f70d4bc04aab4f991845",
      "category": "container_scanning",
      "message": "CVE-2024-9823 on org.eclipse.jetty/jetty-servlets@9.4.42.v20210604",
      "description": "Description\nThere exists a security vulnerability in Jetty's DosFilter which can be exploited by unauthorized users to cause remote denial-of-service (DoS) attack on the server using DosFilter. By repeatedly sending crafted requests, attackers can trigger OutofMemory errors and exhaust the server's memory finally.\n\n\nVulnerability details\nThe Jetty DoSFilter (Denial of Service Filter) is a security filter designed to protect web applications against certain types of Denial of Service (DoS) attacks and other abusive behavior. It helps to mitigate excessive resource consumption by limiting the rate at which clients can make requests to the server.  The DoSFilter monitors and tracks client request patterns, including request rates, and can take actions such as blocking or delaying requests from clients that exceed predefined thresholds.  The internal tracking of requests in DoSFilter is the source of this OutOfMemory condition.\n\n\nImpact\nUsers of the DoSFilter may be subject to DoS attacks that will ultimately exhaust the memory of the server if they have not configured session passivation or an aggressive session inactivation timeout.\n\n\nPatches\nThe DoSFilter has been patched in all active releases to no longer support the session tracking mode, even if configured.\n\n\nPatched releases:\n\n  *  9.4.54\n  *  10.0.18\n  *  11.0.18\n  *  12.0.3",
      "cve": "CVE-2024-9823",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade org.eclipse.jetty/jetty-servlets@9.4.42.v20210604 to 9.4.54",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:maven/org.eclipse.jetty/jetty-servlets@9.4.42.v20210604"
          },
          "version": "9.4.42.v20210604"
        },
        "operating_system": "debian 10",
        "image": "jetty:9.4.42-jdk11"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-9823",
          "value": "CVE-2024-9823",
          "url": "https://scout.docker.com/v/CVE-2024-9823?s=github&n=jetty-servlets&ns=org.eclipse.jetty&t=maven&vr=%3E%3D9.0.0%2C%3C9.4.54"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-9823?s=github&n=jetty-servlets&ns=org.eclipse.jetty&t=maven&vr=%3E%3D9.0.0%2C%3C9.4.54"
        }
      ]
    },
    {
      "id": "0c6a568444f0a851ec27e0cd9b89f4cb7fadfbef6a80ba5d11f85eb6d1bd5961",
      "category": "container_scanning",
      "message": "CVE-2019-3902 on mercurial@4.8.2",
      "description": "A flaw was found in Mercurial before 4.9. It was possible to use symlinks and subrepositories to defeat Mercurial's path-checking logic and write files outside a repository.",
      "cve": "CVE-2019-3902",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade mercurial@4.8.2 to 4.9",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:pypi/mercurial@4.8.2"
          },
          "version": "4.8.2"
        },
        "operating_system": "debian 10",
        "image": "jetty:9.4.42-jdk11"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2019-3902",
          "value": "CVE-2019-3902",
          "url": "https://scout.docker.com/v/CVE-2019-3902?s=github&n=mercurial&t=pypi&vr=%3C4.9"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2019-3902?s=github&n=mercurial&t=pypi&vr=%3C4.9"
        }
      ]
    },
    {
      "id": "04d2cc44d079d1b807736eeafe502e46910a0992e48d968d28d1ea5d6bdac864",
      "category": "container_scanning",
      "message": "CVE-2024-8184 on org.eclipse.jetty/jetty-server@9.4.42.v20210604",
      "description": "### Impact\nRemote DOS attack can cause out of memory \n\n### Description\nThere exists a security vulnerability in Jetty's `ThreadLimitHandler.getRemote()` which\ncan be exploited by unauthorized users to cause remote denial-of-service (DoS) attack.  By\nrepeatedly sending crafted requests, attackers can trigger OutofMemory errors and exhaust the\nserver's memory.\n\n### Affected Versions\n\n* Jetty 12.0.0-12.0.8 (Supported)\n* Jetty 11.0.0-11.0.23 (EOL)\n* Jetty 10.0.0-10.0.23 (EOL)\n* Jetty 9.3.12-9.4.55 (EOL)\n\n### Patched Versions\n\n* Jetty 12.0.9\n* Jetty 11.0.24\n* Jetty 10.0.24\n* Jetty 9.4.56\n\n### Workarounds\n\nDo not use `ThreadLimitHandler`.  \nConsider use of `QoSHandler` instead to artificially limit resource utilization.\n\n### References\n\nJetty 12 - https://github.com/jetty/jetty.project/pull/11723",
      "cve": "CVE-2024-8184",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade org.eclipse.jetty/jetty-server@9.4.42.v20210604 to 9.4.56",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:maven/org.eclipse.jetty/jetty-server@9.4.42.v20210604"
          },
          "version": "9.4.42.v20210604"
        },
        "operating_system": "debian 10",
        "image": "jetty:9.4.42-jdk11"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-8184",
          "value": "CVE-2024-8184",
          "url": "https://scout.docker.com/v/CVE-2024-8184?s=github&n=jetty-server&ns=org.eclipse.jetty&t=maven&vr=%3E%3D9.3.12%2C%3C%3D9.4.55"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-8184?s=github&n=jetty-server&ns=org.eclipse.jetty&t=maven&vr=%3E%3D9.3.12%2C%3C%3D9.4.55"
        }
      ]
    },
    {
      "id": "5963ffcd0b7530f708c907ea82c67fb4c7749dff65bb761228d1d79a55afc61b",
      "category": "container_scanning",
      "message": "CVE-2024-6763 on org.eclipse.jetty/jetty-http@9.4.42.v20210604",
      "description": "## Summary\n\nEclipse Jetty is a lightweight, highly scalable, Java-based web server and Servlet engine . It includes a utility class, `HttpURI`, for URI/URL parsing.\n\nThe `HttpURI` class does insufficient validation on the authority segment of a URI.  However the behaviour of `HttpURI` differs from the common browsers in how it handles a URI that would be considered invalid if fully validated against the RRC.  Specifically `HttpURI` and the browser may differ on the value of the host extracted from an invalid URI and thus a combination of Jetty and a vulnerable browser may be vulnerable to a open redirect attack or to a SSRF attack if the URI is used after passing validation checks.\n\n## Details\n\n### Affected components\n\nThe vulnerable component is the `HttpURI` class when used as a utility class in an application.  The Jetty usage of the class is not vulnerable.\n\n### Attack overview\n\nThe `HttpURI` class does not well validate the authority section of a URI. When presented with an illegal authority that may contain user info (eg username:password#@hostname:port), then the parsing of the URI is not failed.  Moreover, the interpretation of what part of the authority is the host name differs from a common browser in  that they also do not fail, but they select a different host name from the illegal URI.\n\n### Attack scenario\n\nA typical attack scenario is illustrated in the diagram below. The Validator checks whether the attacker-supplied URL is on the blocklist. If not, the URI is passed to the Requester for redirection. The Requester is responsible for sending requests to the hostname specified by the URI.\n\nThis attack occurs when the Validator is the `org.eclipse.jetty.http.HttpURI` class and the Requester is the `Browser` (include chrome, firefox and Safari). An attacker can send a malformed URI to the Validator (e.g., `http://browser.check%23%40vulndetector.com/` ). After validation, the Validator finds that the hostname is not on the blocklist. However, the Requester can still send requests to the domain with the hostname `vulndetector.com`.\n\n## PoC\n\npayloads:\n\n```\nhttp://browser.check &@vulndetector.com/\nhttp://browser.check #@vulndetector.com/\nhttp://browser.check?@vulndetector.com/\nhttp://browser.check#@vulndetector.com/\nhttp://vulndetector.com\\\\/\n```\n\nThe problem of 302 redirect parsing in HTML tag scenarios. Below is a poc example. After clicking the button, the browser will open \"browser.check\", and jetty will parse this URL as \"vulndetector.com\".\n\n```\n<a href=\"http://browser.check#@vulndetector.com/\"></a>\n```\nA comparison of the parsing differences between Jetty and chrome is shown in the table below (note that neither should accept the URI as valid).\n\n| Invalid URI                                       | Jetty            | Chrome        |\n| ---------------------------------------------- | ---------------- | ------------- |\n| http://browser.check &@vulndetector.com/ | vulndetector.com | browser.check |\n| http://browser.check #@vulndetector.com/ | vulndetector.com | browser.check |\n| http://browser.check?@vulndetector.com/    | vulndetector.com | browser.check |\n| http://browser.check#@vulndetector.com/    | vulndetector.com | browser.check |\n\nThe problem of 302 redirect parsing in HTTP 302 Location\n\n| Input                    | Jetty          | Chrome        |\n| ------------------------ | -------------- | ------------- |\n| http://browser.check%5c/ | browser.check\\ | browser.check |\n\nIt is noteworthy that Spring Web also faced similar security vulnerabilities, being affected by the aforementioned four types of payloads. These issues have since been resolved and have been assigned three CVE numbers [3-5].\n\n## Impact\n\nThe impact of this vulnerability is limited to developers that use the Jetty HttpURI directly.  Example: your project implemented a blocklist to block on some hosts based on HttpURI's handling of authority section.  The vulnerability will help attackers bypass the protections that developers have set up for hosts. The vulnerability will lead to **SSRF**[1] and **URL Redirection**[2] vulnerabilities in several cases. \n\n## Mitigation\n\nThe attacks outlined above rely on decoded user data being passed to the `HttpURI` class. Application should not pass decoded user data as an encoded URI to any URI class/method, including `HttpURI`.  Such applications are likely to be vulnerable in other ways. \nThe immediate solution is to upgrade to a version of the class that will fully validate the characters of the URI authority.  Ultimately, Jetty will deprecate and remove support for user info in the authority per [RFC9110 Section 4.2.4](https://datatracker.ietf.org/doc/html/rfc9110#section-4.2.4). \n\nNote that the Chrome (and other browsers) parse the invalid user info section improperly as well (due to flawed WhatWG URL parsing rules that do not apply outside of a Web Browser).\n\n## Reference\n\n[1] https://cwe.mitre.org/data/definitions/918.html\n[2] https://cwe.mitre.org/data/definitions/601.html",
      "cve": "CVE-2024-6763",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade org.eclipse.jetty/jetty-http@9.4.42.v20210604 to 12.0.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:maven/org.eclipse.jetty/jetty-http@9.4.42.v20210604"
          },
          "version": "9.4.42.v20210604"
        },
        "operating_system": "debian 10",
        "image": "jetty:9.4.42-jdk11"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-6763",
          "value": "CVE-2024-6763",
          "url": "https://scout.docker.com/v/CVE-2024-6763?s=github&n=jetty-http&ns=org.eclipse.jetty&t=maven&vr=%3E%3D7.0.0%2C%3C%3D12.0.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-6763?s=github&n=jetty-http&ns=org.eclipse.jetty&t=maven&vr=%3E%3D7.0.0%2C%3C%3D12.0.11"
        }
      ]
    },
    {
      "id": "341762aea1c30b627dd39cbdfc4ae0ae496675eb6869a063928d4c218e5034a3",
      "category": "container_scanning",
      "message": "CVE-2023-44487 on org.eclipse.jetty.http2/http2-common@9.4.42.v20210604",
      "description": "## HTTP/2 Rapid reset attack\nThe HTTP/2 protocol allows clients to indicate to the server that a previous stream should be canceled by sending a RST_STREAM frame. The protocol does not require the client and server to coordinate the cancellation in any way, the client may do it unilaterally. The client may also assume that the cancellation will take effect immediately when the server receives the RST_STREAM frame, before any other data from that TCP connection is processed.\n\nAbuse of this feature is called a Rapid Reset attack because it relies on the ability for an endpoint to send a RST_STREAM frame immediately after sending a request frame, which makes the other endpoint start working and then rapidly resets the request. The request is canceled, but leaves the HTTP/2 connection open. \n\nThe HTTP/2 Rapid Reset attack built on this capability is simple: The client opens a large number of streams at once as in the standard HTTP/2 attack, but rather than waiting for a response to each request stream from the server or proxy, the client cancels each request immediately.\n\nThe ability to reset streams immediately allows each connection to have an indefinite number of requests in flight. By explicitly canceling the requests, the attacker never exceeds the limit on the number of concurrent open streams. The number of in-flight requests is no longer dependent on the round-trip time (RTT), but only on the available network bandwidth.\n\nIn a typical HTTP/2 server implementation, the server will still have to do significant amounts of work for canceled requests, such as allocating new stream data structures, parsing the query and doing header decompression, and mapping the URL to a resource. For reverse proxy implementations, the request may be proxied to the backend server before the RST_STREAM frame is processed. The client on the other hand paid almost no costs for sending the requests. This creates an exploitable cost asymmetry between the server and the client.\n\nMultiple software artifacts implementing HTTP/2 are affected. This advisory was originally ingested from the `swift-nio-http2` repo advisory and their original conent follows.\n\n## swift-nio-http2 specific advisory\nswift-nio-http2 is vulnerable to a denial-of-service vulnerability in which a malicious client can create and then reset a large number of HTTP/2 streams in a short period of time. This causes swift-nio-http2 to commit to a large amount of expensive work which it then throws away, including creating entirely new `Channel`s to serve the traffic. This can easily overwhelm an `EventLoop` and prevent it from making forward progress.\n\nswift-nio-http2 1.28 contains a remediation for this issue that applies reset counter using a sliding window. This constrains the number of stream resets that may occur in a given window of time. Clients violating this limit will have their connections torn down. This allows clients to continue to cancel streams for legitimate reasons, while constraining malicious actors.",
      "cve": "CVE-2023-44487",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade org.eclipse.jetty.http2/http2-common@9.4.42.v20210604 to 9.4.53",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:maven/org.eclipse.jetty.http2/http2-common@9.4.42.v20210604"
          },
          "version": "9.4.42.v20210604"
        },
        "operating_system": "debian 10",
        "image": "jetty:9.4.42-jdk11"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-44487",
          "value": "CVE-2023-44487",
          "url": "https://scout.docker.com/v/CVE-2023-44487?s=github&n=http2-common&ns=org.eclipse.jetty.http2&t=maven&vr=%3E%3D9.3.0%2C%3C9.4.53"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-44487?s=github&n=http2-common&ns=org.eclipse.jetty.http2&t=maven&vr=%3E%3D9.3.0%2C%3C9.4.53"
        }
      ]
    },
    {
      "id": "3ceff27fc51630c17ea987c858f1ef46c9aa09fe5babe6d7da43c2d68e5e1c3e",
      "category": "container_scanning",
      "message": "CVE-2023-44487 on org.eclipse.jetty.http2/http2-server@9.4.42.v20210604",
      "description": "## HTTP/2 Rapid reset attack\nThe HTTP/2 protocol allows clients to indicate to the server that a previous stream should be canceled by sending a RST_STREAM frame. The protocol does not require the client and server to coordinate the cancellation in any way, the client may do it unilaterally. The client may also assume that the cancellation will take effect immediately when the server receives the RST_STREAM frame, before any other data from that TCP connection is processed.\n\nAbuse of this feature is called a Rapid Reset attack because it relies on the ability for an endpoint to send a RST_STREAM frame immediately after sending a request frame, which makes the other endpoint start working and then rapidly resets the request. The request is canceled, but leaves the HTTP/2 connection open. \n\nThe HTTP/2 Rapid Reset attack built on this capability is simple: The client opens a large number of streams at once as in the standard HTTP/2 attack, but rather than waiting for a response to each request stream from the server or proxy, the client cancels each request immediately.\n\nThe ability to reset streams immediately allows each connection to have an indefinite number of requests in flight. By explicitly canceling the requests, the attacker never exceeds the limit on the number of concurrent open streams. The number of in-flight requests is no longer dependent on the round-trip time (RTT), but only on the available network bandwidth.\n\nIn a typical HTTP/2 server implementation, the server will still have to do significant amounts of work for canceled requests, such as allocating new stream data structures, parsing the query and doing header decompression, and mapping the URL to a resource. For reverse proxy implementations, the request may be proxied to the backend server before the RST_STREAM frame is processed. The client on the other hand paid almost no costs for sending the requests. This creates an exploitable cost asymmetry between the server and the client.\n\nMultiple software artifacts implementing HTTP/2 are affected. This advisory was originally ingested from the `swift-nio-http2` repo advisory and their original conent follows.\n\n## swift-nio-http2 specific advisory\nswift-nio-http2 is vulnerable to a denial-of-service vulnerability in which a malicious client can create and then reset a large number of HTTP/2 streams in a short period of time. This causes swift-nio-http2 to commit to a large amount of expensive work which it then throws away, including creating entirely new `Channel`s to serve the traffic. This can easily overwhelm an `EventLoop` and prevent it from making forward progress.\n\nswift-nio-http2 1.28 contains a remediation for this issue that applies reset counter using a sliding window. This constrains the number of stream resets that may occur in a given window of time. Clients violating this limit will have their connections torn down. This allows clients to continue to cancel streams for legitimate reasons, while constraining malicious actors.",
      "cve": "CVE-2023-44487",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade org.eclipse.jetty.http2/http2-server@9.4.42.v20210604 to 9.4.53",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:maven/org.eclipse.jetty.http2/http2-server@9.4.42.v20210604"
          },
          "version": "9.4.42.v20210604"
        },
        "operating_system": "debian 10",
        "image": "jetty:9.4.42-jdk11"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-44487",
          "value": "CVE-2023-44487",
          "url": "https://scout.docker.com/v/CVE-2023-44487?s=github&n=http2-server&ns=org.eclipse.jetty.http2&t=maven&vr=%3E%3D9.3.0%2C%3C9.4.53"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-44487?s=github&n=http2-server&ns=org.eclipse.jetty.http2&t=maven&vr=%3E%3D9.3.0%2C%3C9.4.53"
        }
      ]
    },
    {
      "id": "702955421a3d054b6e0c2bc551704201aba015b4710367d4447d4ab9a4b79ab3",
      "category": "container_scanning",
      "message": "CVE-2024-13009 on org.eclipse.jetty/jetty-server@9.4.42.v20210604",
      "description": "In Eclipse Jetty versions 9.4.0 to 9.4.56 a buffer can be incorrectly released when confronted with a gzip error when inflating a request body. This can result in corrupted and/or inadvertent sharing of data between requests.",
      "cve": "CVE-2024-13009",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade org.eclipse.jetty/jetty-server@9.4.42.v20210604 to 9.4.57.v20241219",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:maven/org.eclipse.jetty/jetty-server@9.4.42.v20210604"
          },
          "version": "9.4.42.v20210604"
        },
        "operating_system": "debian 10",
        "image": "jetty:9.4.42-jdk11"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-13009",
          "value": "CVE-2024-13009",
          "url": "https://scout.docker.com/v/CVE-2024-13009?s=github&n=jetty-server&ns=org.eclipse.jetty&t=maven&vr=%3E%3D9.4.0%2C%3C%3D9.4.56"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-13009?s=github&n=jetty-server&ns=org.eclipse.jetty&t=maven&vr=%3E%3D9.4.0%2C%3C%3D9.4.56"
        }
      ]
    },
    {
      "id": "33a4faaaf1332e37071f06ca5ff8ef07c8325d0d59874f672601d35c69f5aa72",
      "category": "container_scanning",
      "message": "CVE-2022-2048 on org.eclipse.jetty.http2/http2-server@9.4.42.v20210604",
      "description": "### Description\nInvalid HTTP/2 requests (for example, invalid URIs) are incorrectly handled by writing a blocking error response directly from the selector thread.\nIf the client manages to exhaust the HTTP/2 flow control window, or TCP congest the connection, the selector thread will be blocked trying to write the error response.\nIf this is repeated for all the selector threads, the server becomes unresponsive, causing the denial of service.\n\n### Impact\nA malicious client may render the server unresponsive.\n\n### Patches\nThe fix is available in Jetty versions 9.4.47. 10.0.10, 11.0.10.\n\n### Workarounds\nNo workaround available within Jetty itself.\nOne possible workaround is to filter the requests before sending them to Jetty (for example in a proxy)\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Email us at security@webtide.com.\n",
      "cve": "CVE-2022-2048",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade org.eclipse.jetty.http2/http2-server@9.4.42.v20210604 to 9.4.47",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:maven/org.eclipse.jetty.http2/http2-server@9.4.42.v20210604"
          },
          "version": "9.4.42.v20210604"
        },
        "operating_system": "debian 10",
        "image": "jetty:9.4.42-jdk11"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-2048",
          "value": "CVE-2022-2048",
          "url": "https://scout.docker.com/v/CVE-2022-2048?s=github&n=http2-server&ns=org.eclipse.jetty.http2&t=maven&vr=%3C9.4.47"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-2048?s=github&n=http2-server&ns=org.eclipse.jetty.http2&t=maven&vr=%3C9.4.47"
        }
      ]
    },
    {
      "id": "9d21927156e672c61396663d5d7c9d5745393b9889f10fc2cbace30e224c0e05",
      "category": "container_scanning",
      "message": "CVE-2023-36478 on org.eclipse.jetty.http2/http2-hpack@9.4.42.v20210604",
      "description": "An integer overflow in `MetaDataBuilder.checkSize` allows for HTTP/2 HPACK header values to\nexceed their size limit. \n\nIn `MetaDataBuilder.java`, the following code determines if a header name or value\nexceeds the size limit, and throws an exception if the limit is exceeded:\n\n```java\n291 public void checkSize(int length, boolean huffman) throws SessionException\n292 {\n293 // Apply a huffman fudge factor\n294 if (huffman)\n295 length = (length * 4) / 3;\n296 if ((_size + length) > _maxSize)\n297 throw new HpackException.SessionException(\"Header too large %d > %d\",\n_size + length, _maxSize);\n298 }\n```\n\nHowever, when length is very large and huffman is true, the multiplication by 4 in line 295\nwill overflow, and length will become negative. (_size+length) will now be negative, and\nthe check on line 296 will not be triggered.\n\nFurthermore, `MetaDataBuilder.checkSize` allows for user-entered HPACK header value sizes to be\nnegative, potentially leading to a very large buffer allocation later on when the\nuser-entered size is multiplied by 2.\n\nIn `MetaDataBuilder.java`, the following code determines if a header name or value\nexceeds the size limit, and throws an exception if the limit is exceeded:\n\n```java\npublic void checkSize(int length, boolean huffman) throws SessionException\n{\n// Apply a huffman fudge factor\nif (huffman)\nlength = (length * 4) / 3;\nif ((_size + length) > _maxSize)\nthrow new HpackException.SessionException(\"Header too large %d > %d\", _size\n+ length, _maxSize);\n}\n```\n\nHowever, no exception is thrown in the case of a negative size.\nLater, in `Huffman.decode`, the user-entered length is multiplied by 2 before allocating a buffer:\n\n```java\npublic static String decode(ByteBuffer buffer, int length) throws\nHpackException.CompressionException\n{\nUtf8StringBuilder utf8 = new Utf8StringBuilder(length * 2);\n// ...\n```\n\nThis means that if a user provides a negative length value (or, more precisely, a length\nvalue which, when multiplied by the 4/3 fudge factor, is negative), and this length value is a\nvery large positive number when multiplied by 2, then the user can cause a very large\nbuffer to be allocated on the server.\n\n\n### Exploit Scenario 1\nAn attacker repeatedly sends HTTP messages with the HPACK header 0x00ffffffffff02.\nEach time this header is decoded:\n+ `HpackDecode.decode` will determine that a Huffman-coded value of length\n805306494 needs to be decoded.\n+ `MetaDataBuilder.checkSize` will approve this length.\n+ Huffman.decode will allocate a 1.6 GB string array.\n+ Huffman.decode will have a buffer overflow error, and the array will be deallocated\nthe next time garbage collection happens. (Note: this can be delayed by appending\nvalid huffman-coded characters to the end of the header.)\n\nDepending on the timing of garbage collection, the number of threads, and the amount of\nmemory available on the server, this may cause the server to run out of memory.\n\n\n### Exploit Scenario 2\nAn attacker repeatedly sends HTTP messages with the HPACK header 0x00ff8080ffff0b. Each\ntime this header is decoded:\n + HpackDecode.decode will determine that a Huffman-coded value of length\n-1073758081 needs to be decoded\n +  MetaDataBuilder.checkSize will approve this length\n + The number will be multiplied by 2 to get 2147451134, and Huffman.decode will\nallocate a 2.1 GB string array\n + Huffman.decode will have a buffer overflow error, and the array will be deallocated\nthe next time garbage collection happens (Note that this deallocation can be\ndelayed by adding valid Huffman-coded characters to the end of the header)\n\nDepending on the timing of garbage collection, the number of threads, and the amount of\nmemory available on the server, this may cause the server to run out of memory.\n\n### Impact\nUsers of HTTP/2 can be impacted by a remote denial of service attack.\n\n### Patches\nFixed in Jetty 10.0.16 and Jetty 11.0.16\nFixed in Jetty 9.4.53\nJetty 12.x is unaffected.\n\n### Workarounds\nNo workarounds possible, only patched versions of Jetty.\n\n### References\n* https://github.com/eclipse/jetty.project/pull/9634",
      "cve": "CVE-2023-36478",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade org.eclipse.jetty.http2/http2-hpack@9.4.42.v20210604 to 9.4.53",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:maven/org.eclipse.jetty.http2/http2-hpack@9.4.42.v20210604"
          },
          "version": "9.4.42.v20210604"
        },
        "operating_system": "debian 10",
        "image": "jetty:9.4.42-jdk11"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-36478",
          "value": "CVE-2023-36478",
          "url": "https://scout.docker.com/v/CVE-2023-36478?s=github&n=http2-hpack&ns=org.eclipse.jetty.http2&t=maven&vr=%3E%3D9.3.0%2C%3C%3D9.4.52"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-36478?s=github&n=http2-hpack&ns=org.eclipse.jetty.http2&t=maven&vr=%3E%3D9.3.0%2C%3C%3D9.4.52"
        }
      ]
    },
    {
      "id": "7e9be13a293ea9e8f75c0f43ef1b3fbf35249ceb294fe30fba56b4c1ed8e7098",
      "category": "container_scanning",
      "message": "CVE-2024-22201 on org.eclipse.jetty.http2/http2-common@9.4.42.v20210604",
      "description": "### Impact\nIf an HTTP/2 connection gets TCP congested, when an idle timeout occurs the HTTP/2 session is marked as closed, and then a GOAWAY frame is queued to be written.\nHowever it is not written because the connection is TCP congested.\nWhen another idle timeout period elapses, it is then supposed to hard close the connection, but it delegates to the HTTP/2 session which reports that it has already been closed so it does not attempt to hard close the connection.\n\nThis leaves the connection in ESTABLISHED state (i.e. not closed), TCP congested, and idle.\n\nAn attacker can cause many connections to end up in this state, and the server may run out of file descriptors, eventually causing the server to stop accepting new connections from valid clients.\n\nThe client may also be impacted (if the server does not read causing a TCP congestion), but the issue is more severe for servers.\n\n### Patches\nPatched versions:\n* 9.4.54\n* 10.0.20\n* 11.0.20\n* 12.0.6\n\n### Workarounds\nDisable HTTP/2 and HTTP/3 support until you can upgrade to a patched version of Jetty.\nHTTP/1.x is not affected.\n\n### References\n* https://github.com/jetty/jetty.project/issues/11256.",
      "cve": "CVE-2024-22201",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade org.eclipse.jetty.http2/http2-common@9.4.42.v20210604 to 9.4.54",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:maven/org.eclipse.jetty.http2/http2-common@9.4.42.v20210604"
          },
          "version": "9.4.42.v20210604"
        },
        "operating_system": "debian 10",
        "image": "jetty:9.4.42-jdk11"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-22201",
          "value": "CVE-2024-22201",
          "url": "https://scout.docker.com/v/CVE-2024-22201?s=github&n=http2-common&ns=org.eclipse.jetty.http2&t=maven&vr=%3E%3D9.3.0%2C%3C%3D9.4.53"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-22201?s=github&n=http2-common&ns=org.eclipse.jetty.http2&t=maven&vr=%3E%3D9.3.0%2C%3C%3D9.4.53"
        }
      ]
    },
    {
      "id": "f14e726069924e1d3be0701fd64e1e541aa0eea943dd0a041a4783ef637a326a",
      "category": "container_scanning",
      "message": "CVE-2025-5115 on org.eclipse.jetty.http2/http2-common@9.4.42.v20210604",
      "description": "## Technical Details \nBelow is a technical explanation of a newly discovered vulnerability in HTTP/2, which we refer to as “MadeYouReset.”\n\n### MadeYouReset Vulnerability Summary\nThe MadeYouReset DDoS vulnerability is a logical vulnerability in the HTTP/2 protocol, that uses malformed HTTP/2 control frames in order to break the max concurrent streams limit - which results in resource exhaustion and distributed denial of service.\n\n### Mechanism\nThe vulnerability uses malformed HTTP/2 control frames, or malformed flow, in order to make the server reset streams created by the client (using the RST_STREAM frame). \nThe vulnerability could be triggered by several primitives, defined by the RFC of HTTP/2 (RFC 9113). The Primitives are:\n1. WINDOW_UPDATE frame with an increment of 0 or an increment that makes the window exceed 2^31 - 1. (section 6.9 + 6.9.1)\n2. HEADERS or DATA frames sent on a half-closed (remote) stream (which was closed using the END_STREAM flag). (note that for some implementations it's possible a CONTINUATION frame to trigger that as well - but it's very rare). (Section 5.1)\n3. PRIORITY frame with a length other than 5. (section 6.3)\nFrom our experience, the primitives are likely to exist in the decreasing order listed above.\nNote that based on the implementation of the library, other primitives (which are not defined by the RFC) might exist - meaning scenarios in which RST_STREAM is not supposed to be sent, but in the implementation it does. On the other hand - some RFC-defined primitives might not work, even though they are defined by the RFC (as some implementations are not fully complying with RFC). For example, some implementations we’ve seen discard the PRIORITY frame - and thus does not return RST_STREAM, and some implementations send GO_AWAY when receiving a WINDOW_UPDATE frame with increment of 0.\n\nThe vulnerability takes advantage of a design flaw in the HTTP/2 protocol - While HTTP/2 has a limit on the number of concurrently active streams per connection (which is usually 100, and is set by the parameter SETTINGS_MAX_CONCURRENT_STREAMS), the number of active streams is not counted correctly - when a stream is reset, it is immediately considered not active, and thus unaccounted for in the active streams counter. \nWhile the protocol does not count those streams as active, the server’s backend logic still processes and handles the requests that were canceled.\n\nThus, the attacker can exploit this vulnerability to cause the server to handle an unbounded number of concurrent streams from a client on the same connection. The exploitation is very simple: the client issues a request in a stream, and then sends the control frame that causes the server to send a RST_STREAM.\n\n### Attack Flow\nFor example, a possible attack scenario can be: \n1. Attacker opens an HTTP/2 connection to the server.\n2. Attacker sends HEADERS frame with END_STREAM flag on a new stream X.  \n3. Attacker sends WINDOW_UPDATE for stream X with flow-control window of 0.\n4. The server receives the WINDOW_UPDATE and immediately sends RST_STREAM for stream X to the client (+ decreases the active streams counter by 1).\n\nThe attacker can repeat steps 2+3 as rapidly as it is capable, since the active streams counter never exceeds 1 and the attacker does not need to wait for the response from the server.\nThis leads to resource exhaustion and distributed denial of service vulnerabilities with an impact of: CPU overload and/or memory exhaustion (implementation dependant)\n\n### Comparison to Rapid Reset\nThe vulnerability takes advantage of a design flow in the HTTP/2 protocol that was also used in the Rapid Reset vulnerability (CVE-2023-44487) which was exploited as a zero-day in the wild in August 2023 to October 2023, against multiple services and vendors.\nThe Rapid Reset vulnerability uses RST_STREAM frames sent from the client, in order to create an unbounded amount of concurrent streams - it was given a CVSS score of 7.5.\nRapid Reset was mostly mitigated by limiting the number/rate of RST_STREAM sent from the client, which does not mitigate the MadeYouReset attack - since it triggers the server to send a RST_STREAM.\n\n### Suggested Mitigations for MadeYouReset\nA quick and easy mitigation will be to limit the number/rate of RST_STREAMs sent from the server.\nIt is also possible to limit the number/rate of control frames sent by the client (e.g. WINDOW_UPDATE and PRIORITY), and treat protocol flow errors as a connection error.\n\nAs mentioned in our previous message, this is a protocol-level vulnerability that affects multiple vendors and implementations. Given its broad impact, it is the shared responsibility of all parties involved to handle the disclosure process carefully and coordinate mitigations effectively.\n\n\nIf you have any questions, we will be happy to clarify or schedule a Zoom call.\n\nGal, Anat and Yaniv.\n\n\n\n## Jetty's Team Notes\n\n### Impact\nA denial of service vulnerability similar to [Rapid Reset](https://github.com/jetty/jetty.project/security/advisories/GHSA-c745-7wm4-7738), but where the client triggers a reset from the server by sending a malformed or invalid frame.\nIn particular, this may be triggered by WINDOW_UPDATE frames that are invalid (e.g. with `delta==0` or when the delta makes the window exceed `2^31-1`).\n\n### Patches\nPatch has been merged into 12.0.x mainline via https://github.com/jetty/jetty.project/pull/13449.\n\n### Workarounds\nNo workarounds apart disabling HTTP/2.",
      "cve": "CVE-2025-5115",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade org.eclipse.jetty.http2/http2-common@9.4.42.v20210604 to 9.4.58",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:maven/org.eclipse.jetty.http2/http2-common@9.4.42.v20210604"
          },
          "version": "9.4.42.v20210604"
        },
        "operating_system": "debian 10",
        "image": "jetty:9.4.42-jdk11"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-5115",
          "value": "CVE-2025-5115",
          "url": "https://scout.docker.com/v/CVE-2025-5115?s=github&n=http2-common&ns=org.eclipse.jetty.http2&t=maven&vr=%3E%3D9.3.0%2C%3C%3D9.4.57"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-5115?s=github&n=http2-common&ns=org.eclipse.jetty.http2&t=maven&vr=%3E%3D9.3.0%2C%3C%3D9.4.57"
        }
      ]
    }
  ],
  "remediations": [],
  "scan": {
    "start_time": "2025-10-16T19:46:35",
    "end_time": "2025-10-16T19:46:35",
    "status": "success",
    "type": "container_scanning",
    "scanner": {
      "id": "docker-scout",
      "name": "Docker Scout",
      "version": "1.18.3",
      "vendor": {
        "name": "Docker"
      }
    },
    "analyzer": {
      "id": "docker-scout",
      "name": "Docker Scout",
      "version": "1.18.3",
      "vendor": {
        "name": "Docker"
      }
    }
  }
}
