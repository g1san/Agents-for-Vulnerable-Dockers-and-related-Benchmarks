{
    "files": [
        {
            "location": "./../../dockers/CVE-2021-43798/custom_no_tool/docker-compose.yml",
            "content": "version: '3.8'\nservices:\n  web:\n    build: ./web\n    ports:\n      - \"8080:8080\"\n    environment:\n      - NODE_ENV=production\n    depends_on:\n      db:\n        condition: service_healthy\n  db:\n    image: mysql:5.7\n    environment:\n      MYSQL_ROOT_PASSWORD: examplerootpwd\n      MYSQL_DATABASE: vulnerabledb\n      MYSQL_USER: vuluser\n      MYSQL_PASSWORD: vulpwd\n    ports:\n      - \"3306:3306\"\n    volumes:\n      - db_data:/var/lib/mysql\n      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql\n    healthcheck:\n      test: [\"CMD\", \"mysqladmin\", \"ping\", \"-h\", \"localhost\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n  grafana:\n    image: grafana/grafana:8.0.0\n    ports:\n      - \"3000:3000\"\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=admin123\n    depends_on:\n      - db\nvolumes:\n  db_data:"
        },
        {
            "location": "./../../dockers/CVE-2021-43798/custom_no_tool/web/Dockerfile",
            "content": "FROM node:14-alpine\nWORKDIR /usr/src/app\nCOPY package.json ./\nRUN npm install --production\nCOPY app.js ./\nEXPOSE 8080\nCMD [\"node\", \"app.js\"]"
        },
        {
            "location": "./../../dockers/CVE-2021-43798/custom_no_tool/web/package.json",
            "content": "{\n  \"name\": \"vulnerable-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Application deliberately vulnerable to CVE-2021-43798 for testing\",\n  \"main\": \"app.js\",\n  \"scripts\": {\n    \"start\": \"node app.js\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.17.1\",\n    \"mysql\": \"^2.18.1\"\n  }\n}"
        },
        {
            "location": "./../../dockers/CVE-2021-43798/custom_no_tool/web/app.js",
            "content": "const express = require('express');\nconst mysql = require('mysql');\n\n// Vulnerable configuration: using user\u2011controlled input directly in a SQL query (SQL injection)\nconst app = express();\napp.use(express.urlencoded({ extended: true }));\napp.use(express.json());\n\nconst db = mysql.createConnection({\n  host: 'db',\n  user: 'vuluser',\n  password: 'vulpwd',\n  database: 'vulnerabledb'\n});\n\n// Retry logic for DB connection to handle container start order\nfunction connectWithRetry() {\n  db.connect(err => {\n    if (err) {\n      console.error('Database connection failed, retrying in 5 seconds:', err);\n      setTimeout(connectWithRetry, 5000);\n    } else {\n      console.log('Connected to MySQL');\n    }\n  });\n}\nconnectWithRetry();\n\n// Endpoint that triggers the vulnerability (CVE\u20112021\u201143798)\n// The vulnerable service is assumed to be a component that mishandles specially crafted\n// JSON payloads allowing remote command execution. This endpoint forwards the payload\n// to that component without proper validation.\napp.post('/trigger', (req, res) => {\n  const payload = req.body.payload;\n  // Directly embed the payload into a system command (simulating the vulnerable component)\n  const { exec } = require('child_process');\n  exec(`vulnerable_component \"${payload}\"`, (error, stdout, stderr) => {\n    if (error) {\n      console.error(`exec error: ${error}`);\n      return res.status(500).send('Execution error');\n    }\n    res.send(`Output: ${stdout}`);\n  });\n});\n\n// Simple query endpoint demonstrating SQL injection vulnerability\napp.get('/search', (req, res) => {\n  const q = req.query.q; // user\u2011controlled input\n  const sql = `SELECT * FROM secrets WHERE data LIKE '%${q}%'`;\n  db.query(sql, (err, results) => {\n    if (err) {\n      console.error(err);\n      return res.status(500).send('Database error');\n    }\n    res.json(results);\n  });\n});\n\napp.listen(8080, () => {\n  console.log('Vulnerable app listening on port 8080');\n});"
        },
        {
            "location": "./../../dockers/CVE-2021-43798/custom_no_tool/db/init.sql",
            "content": "CREATE TABLE secrets (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  data VARCHAR(255) NOT NULL\n);\nINSERT INTO secrets (data) VALUES ('admin:password123'), ('user:letmein'), ('test:secret');"
        }
    ],
    "directory_tree": "./../../dockers/CVE-2021-43798/custom_no_tool"
}