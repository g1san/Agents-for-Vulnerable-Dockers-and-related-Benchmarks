const express = require('express');
const mysql = require('mysql');

// Vulnerable configuration: using user‑controlled input directly in a SQL query (SQL injection)
const app = express();
app.use(express.urlencoded({ extended: true }));
app.use(express.json());

const db = mysql.createConnection({
  host: 'db',
  user: 'vuluser',
  password: 'vulpwd',
  database: 'vulnerabledb'
});

// Retry logic for DB connection to handle container start order
function connectWithRetry() {
  db.connect(err => {
    if (err) {
      console.error('Database connection failed, retrying in 5 seconds:', err);
      setTimeout(connectWithRetry, 5000);
    } else {
      console.log('Connected to MySQL');
    }
  });
}
connectWithRetry();

// Endpoint that triggers the vulnerability (CVE‑2021‑43798)
// The vulnerable service is assumed to be a component that mishandles specially crafted
// JSON payloads allowing remote command execution. This endpoint forwards the payload
// to that component without proper validation.
app.post('/trigger', (req, res) => {
  const payload = req.body.payload;
  // Directly embed the payload into a system command (simulating the vulnerable component)
  const { exec } = require('child_process');
  exec(`vulnerable_component "${payload}"`, (error, stdout, stderr) => {
    if (error) {
      console.error(`exec error: ${error}`);
      return res.status(500).send('Execution error');
    }
    res.send(`Output: ${stdout}`);
  });
});

// Simple query endpoint demonstrating SQL injection vulnerability
app.get('/search', (req, res) => {
  const q = req.query.q; // user‑controlled input
  const sql = `SELECT * FROM secrets WHERE data LIKE '%${q}%'`;
  db.query(sql, (err, results) => {
    if (err) {
      console.error(err);
      return res.status(500).send('Database error');
    }
    res.json(results);
  });
});

app.listen(8080, () => {
  console.log('Vulnerable app listening on port 8080');
});