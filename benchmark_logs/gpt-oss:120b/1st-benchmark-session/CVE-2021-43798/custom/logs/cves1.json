{
  "version": "15.0.6",
  "vulnerabilities": [
    {
      "id": "9e1f3b15721ca5545230a9ce94bd8ca6d0c6f46e4890efe9172c453649ac55d3",
      "category": "container_scanning",
      "message": "ALPINE-13661 on alpine/busybox@1.33.1-r3",
      "cve": "ALPINE-13661",
      "severity": "Unknown",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/busybox@1.33.1-r3 to 1.33.1-r7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/busybox@1.33.1-r3?os_name=alpine&os_version=3.14"
          },
          "version": "1.33.1-r3"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "ALPINE-13661",
          "value": "ALPINE-13661",
          "url": "https://scout.docker.com/v/ALPINE-13661?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.33.1-r7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/ALPINE-13661?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.33.1-r7"
        }
      ]
    },
    {
      "id": "df85aa64882c0ef9f95d19e11649bfafdda9a795d294188eaf40b0e42d6c0b3f",
      "category": "container_scanning",
      "message": "GHSA-gq5r-cc4w-g8xf on github.com/russellhaering/goxmldsig@1.1.0",
      "description": "This affects all versions less than 0.7.0 of package github.com/russellhaering/gosaml2. There is a crash on null pointer dereference caused by sending malformed XML signatures.",
      "cve": "GHSA-gq5r-cc4w-g8xf",
      "severity": "Unknown",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/russellhaering/goxmldsig@1.1.0 to v1.1.1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/russellhaering/goxmldsig@1.1.0"
          },
          "version": "1.1.0"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "GHSA-gq5r-cc4w-g8xf",
          "value": "GHSA-gq5r-cc4w-g8xf",
          "url": "https://scout.docker.com/v/GHSA-gq5r-cc4w-g8xf?s=gitlab&n=goxmldsig&ns=github.com%2Frussellhaering&t=golang&vr=%3Cv1.1.1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/GHSA-gq5r-cc4w-g8xf?s=gitlab&n=goxmldsig&ns=github.com%2Frussellhaering&t=golang&vr=%3Cv1.1.1"
        }
      ]
    },
    {
      "id": "f31357a716792f03bf0bc3c3042607d1ea7f267ea432010ed179cf59d44dbd45",
      "category": "container_scanning",
      "message": "CVE-2020-8912 on github.com/aws/aws-sdk-go@1.40.11",
      "description": "A vulnerability in the in-band key negotiation exists in the AWS S3 Crypto SDK for GoLang versions prior to V2. An attacker with write access to the targeted bucket can change the encryption algorithm of an object in the bucket, which can then allow them to change AES-GCM to AES-CTR. Using this in combination with a decryption oracle can reveal the authentication key used by AES-GCM as decrypting the GMAC tag leaves the authentication key recoverable as an algebraic equation. It is recommended to update your SDK to V2 or later, and re-encrypt your files.",
      "cve": "CVE-2020-8912",
      "severity": "Low",
      "confidence": "Unknown",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/aws/aws-sdk-go@1.40.11"
          },
          "version": "1.40.11"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2020-8912",
          "value": "CVE-2020-8912",
          "url": "https://scout.docker.com/v/CVE-2020-8912?s=golang&n=aws-sdk-go&ns=github.com%2Faws&t=golang&vr=%3E%3D0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2020-8912?s=golang&n=aws-sdk-go&ns=github.com%2Faws&t=golang&vr=%3E%3D0"
        }
      ]
    },
    {
      "id": "74ebff3ea19bee24b64a80987e9ee1f61759f579ed0470e8f29a3672d91bc771",
      "category": "container_scanning",
      "message": "CVE-2022-30629 on stdlib@1.17",
      "description": "An attacker can correlate a resumed TLS session with a previous connection.\n\nSession tickets generated by crypto/tls do not contain a randomly generated ticket_age_add, which allows an attacker that can observe TLS handshakes to correlate successive connections by comparing ticket ages during session resumption.",
      "cve": "CVE-2022-30629",
      "severity": "Low",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.17.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-30629",
          "value": "CVE-2022-30629",
          "url": "https://scout.docker.com/v/CVE-2022-30629?s=golang&n=stdlib&t=golang&vr=%3C1.17.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-30629?s=golang&n=stdlib&t=golang&vr=%3C1.17.11"
        }
      ]
    },
    {
      "id": "2859f2c7f378992f1e04d3f459862a2d58646fd58920a1890daa4f8596fb6ca8",
      "category": "container_scanning",
      "message": "CVE-2021-36157 on github.com/cortexproject/cortex@1.8.2-0.20210428155238-d382e1d80eaf",
      "description": "An issue was discovered in Grafana Cortex through 1.9.0. The header value X-Scope-OrgID is used to construct file paths for rules files, and if crafted to conduct directory traversal such as ae ../../sensitive/path/in/deployment pathname, then Cortex will attempt to parse a rules file at that location and include some of the contents in the error message. (Other Cortex API requests can also be sent a malicious OrgID header, e.g., tricking the ingester into writing metrics to a different location, but the effect is nuisance rather than information disclosure.)",
      "cve": "CVE-2021-36157",
      "severity": "Medium",
      "confidence": "Unknown",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/cortexproject/cortex@1.8.2-0.20210428155238-d382e1d80eaf"
          },
          "version": "1.8.2-0.20210428155238-d382e1d80eaf"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-36157",
          "value": "CVE-2021-36157",
          "url": "https://scout.docker.com/v/CVE-2021-36157?s=github&n=cortex&ns=github.com%2Fcortexproject&t=golang&vr=%3C%3D1.9.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-36157?s=github&n=cortex&ns=github.com%2Fcortexproject&t=golang&vr=%3C%3D1.9.0"
        }
      ]
    },
    {
      "id": "49e417ca2a27c112821ac982a2f0a8981c03c49d10dad9f79ee523c8fda31897",
      "category": "container_scanning",
      "message": "CVE-2022-4304 on alpine/openssl@1.1.1l-r0",
      "description": "A timing based side channel exists in the OpenSSL RSA Decryption implementation\r\nwhich could be sufficient to recover a plaintext across a network in a\r\nBleichenbacher style attack. To achieve a successful decryption an attacker\r\nwould have to be able to send a very large number of trial messages for\r\ndecryption. The vulnerability affects all RSA padding modes: PKCS#1 v1.5,\r\nRSA-OEAP and RSASVE.\r\n\r\nFor example, in a TLS connection, RSA is commonly used by a client to send an\r\nencrypted pre-master secret to the server. An attacker that had observed a\r\ngenuine connection between a client and a server could use this flaw to send\r\ntrial messages to the server and record the time taken to process them. After a\r\nsufficiently large number of messages the attacker could recover the pre-master\r\nsecret used for the original connection and thus be able to decrypt the\r\napplication data sent over that connection.\r\n\r\nOpenSSL 3.0, 1.1.1 and 1.0.2 are vulnerable to this issue.\r\n\r\nOpenSSL 3.0 users should upgrade to OpenSSL 3.0.8.\r\nOpenSSL 1.1.1 users should upgrade to OpenSSL 1.1.1t.\r\nOpenSSL 1.0.2 users should upgrade to OpenSSL 1.0.2zg (premium support customers\r\nonly).\r\n\r\nAn initial report of a possible timing side channel was made on 14th July 2020\r\nby Hubert Kario (Red Hat). A refined report identifying a specific timing side\r\nchannel was made on 15th July 2022 by Hubert Kario.\r\nThe fix was developed by Dmitry Belyavsky (Red Hat) and Hubert Kario.",
      "cve": "CVE-2022-4304",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@1.1.1l-r0 to 1.1.1t-r0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@1.1.1l-r0?os_name=alpine&os_version=3.14"
          },
          "version": "1.1.1l-r0"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-4304",
          "value": "CVE-2022-4304",
          "url": "https://scout.docker.com/v/CVE-2022-4304?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.1.1t-r0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-4304?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.1.1t-r0"
        }
      ]
    },
    {
      "id": "3c86f629456b69716d6d4c2cb73d7476d8cd55b984e9d880a86b06a6103d43ed",
      "category": "container_scanning",
      "message": "CVE-2022-4450 on alpine/openssl@1.1.1l-r0",
      "description": "The function PEM_read_bio_ex() reads a PEM file from a BIO and parses and\r\ndecodes the \"name\" (e.g. \"CERTIFICATE\"), any header data and the payload data.\r\nIf the function succeeds then the \"name_out\", \"header\" and \"data\" arguments are\r\npopulated with pointers to buffers containing the relevant decoded data. The\r\ncaller is responsible for freeing those buffers. It is possible to construct a\r\nPEM file that results in 0 bytes of payload data. In this case PEM_read_bio_ex()\r\nwill return a failure code but will populate the header argument with a pointer\r\nto a buffer that has already been freed. If the caller also frees this buffer\r\nthen a double free will occur. This will most likely lead to a crash. This\r\ncould be exploited by an attacker who has the ability to supply malicious PEM\r\nfiles for parsing to achieve a denial of service attack.\r\n\r\nThe functions PEM_read_bio() and PEM_read() are simple wrappers around\r\nPEM_read_bio_ex() and therefore these functions are also directly affected.\r\n\r\nThese functions are also called indirectly by a number of other OpenSSL\r\nfunctions including PEM_X509_INFO_read_bio_ex() and\r\nSSL_CTX_use_serverinfo_file() which are also vulnerable. Some OpenSSL internal\r\nuses of these functions are not vulnerable because the caller does not free the\r\nheader argument if PEM_read_bio_ex() returns a failure code. These locations\r\ninclude the PEM_read_bio_TYPE() functions as well as the decoders introduced in\r\nOpenSSL 3.0.\r\n\r\nThe OpenSSL asn1parse command line application is also impacted by this issue.\r\n\r\nOpenSSL 3.0 and 1.1.1 are vulnerable to this issue.\r\n\r\nOpenSSL 3.0 users should upgrade to OpenSSL 3.0.8.\r\nOpenSSL 1.1.1 users should upgrade to OpenSSL 1.1.1t.\r\n\r\nOpenSSL 1.0.2 is not affected by this issue.\r\n\r\nThis issue was discovered by CarpetFuzz and reported on 8th December 2022 by\r\nDawei Wang. The fix was developed by Kurt Roeckx and Matt Caswell.",
      "cve": "CVE-2022-4450",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@1.1.1l-r0 to 1.1.1t-r0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@1.1.1l-r0?os_name=alpine&os_version=3.14"
          },
          "version": "1.1.1l-r0"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-4450",
          "value": "CVE-2022-4450",
          "url": "https://scout.docker.com/v/CVE-2022-4450?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.1.1t-r0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-4450?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.1.1t-r0"
        }
      ]
    },
    {
      "id": "b24b264f1d5b065cd2067c887bb1fcd464a9bc5521d53b99f09b61cefe9099cc",
      "category": "container_scanning",
      "message": "CVE-2023-0215 on alpine/openssl@1.1.1l-r0",
      "description": "The public API function BIO_new_NDEF is a helper function used for streaming\r\nASN.1 data via a BIO. It is primarily used internally to OpenSSL to support the\r\nSMIME, CMS and PKCS7 streaming capabilities, but may also be called directly by\r\nend user applications.\r\n\r\nThe function receives a BIO from the caller, prepends a new BIO_f_asn1 filter\r\nBIO onto the front of it to form a BIO chain, and then returns the new head of\r\nthe BIO chain to the caller. Under certain conditions, for example if a CMS\r\nrecipient public key is invalid, the new filter BIO is freed and the function\r\nreturns a NULL result indicating a failure. However, in this case, the BIO chain\r\nis not properly cleaned up and the BIO passed by the caller still retains\r\ninternal pointers to the previously freed filter BIO. If the caller then goes on\r\nto call BIO_pop() on the BIO then a use-after-free will occur. This will most\r\nlikely result in a crash.\r\n\r\nThis scenario occurs directly in the internal function B64_write_ASN1() which\r\nmay cause BIO_new_NDEF() to be called and will subsequently call BIO_pop() on\r\nthe BIO. This internal function is in turn called by the public API functions\r\nPEM_write_bio_ASN1_stream, PEM_write_bio_CMS_stream, PEM_write_bio_PKCS7_stream,\r\nSMIME_write_ASN1, SMIME_write_CMS and SMIME_write_PKCS7.\r\n\r\nOther public API functions that may be impacted by this include\r\ni2d_ASN1_bio_stream, BIO_new_CMS, BIO_new_PKCS7, i2d_CMS_bio_stream and\r\ni2d_PKCS7_bio_stream.\r\n\r\nThe OpenSSL cms and smime command line applications are similarly affected.\r\n\r\nOpenSSL 3.0, 1.1.1 and 1.0.2 are vulnerable to this issue.\r\n\r\nOpenSSL 3.0 users should upgrade to OpenSSL 3.0.8.\r\nOpenSSL 1.1.1 users should upgrade to OpenSSL 1.1.1t.\r\nOpenSSL 1.0.2 users should upgrade to OpenSSL 1.0.2zg (premium support customers\r\nonly).\r\n\r\nThis issue was reported on 29th November 2022 by Octavio Galland and\r\nMarcel Böhme (Max Planck Institute for Security and Privacy). The fix was\r\ndeveloped by Viktor Dukhovni and Matt Caswell.",
      "cve": "CVE-2023-0215",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@1.1.1l-r0 to 1.1.1t-r0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@1.1.1l-r0?os_name=alpine&os_version=3.14"
          },
          "version": "1.1.1l-r0"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-0215",
          "value": "CVE-2023-0215",
          "url": "https://scout.docker.com/v/CVE-2023-0215?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.1.1t-r0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-0215?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.1.1t-r0"
        }
      ]
    },
    {
      "id": "d8d60b264ccf60c385af32258f9d4510cb9ab59fb33b3601b36ee1c68c6300e8",
      "category": "container_scanning",
      "message": "CVE-2025-22866 on stdlib@1.17",
      "description": "Due to the usage of a variable time instruction in the assembly implementation of an internal function, a small number of bits of secret scalars are leaked on the ppc64le architecture. Due to the way this function is used, we do not believe this leakage is enough to allow recovery of the private key when P-256 is used in any well known protocols.",
      "cve": "CVE-2025-22866",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.22.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-22866",
          "value": "CVE-2025-22866",
          "url": "https://scout.docker.com/v/CVE-2025-22866?s=golang&n=stdlib&t=golang&vr=%3C1.22.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-22866?s=golang&n=stdlib&t=golang&vr=%3C1.22.12"
        }
      ]
    },
    {
      "id": "88601285351d90df0fbe516385488f6afd03e307541123f4d92cb110a4ebc75b",
      "category": "container_scanning",
      "message": "CVE-2023-45289 on stdlib@1.17",
      "description": "When following an HTTP redirect to a domain which is not a subdomain match or exact match of the initial domain, an http.Client does not forward sensitive headers such as \"Authorization\" or \"Cookie\". For example, a redirect from foo.com to www.foo.com will forward the Authorization header, but a redirect to bar.com will not.\n\nA maliciously crafted HTTP redirect could cause sensitive headers to be unexpectedly forwarded.",
      "cve": "CVE-2023-45289",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.21.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45289",
          "value": "CVE-2023-45289",
          "url": "https://scout.docker.com/v/CVE-2023-45289?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45289?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ]
    },
    {
      "id": "12536128c1a2afd7750b63ba3d5b2119ae2ddb52a3690d9cb0de31c8b44d1657",
      "category": "container_scanning",
      "message": "CVE-2024-28180 on gopkg.in/square/go-jose.v2@2.5.1",
      "description": "### Impact\nAn attacker could send a JWE containing compressed data that used large amounts of memory and CPU when decompressed by Decrypt or DecryptMulti. Those functions now return an error if the decompressed data would exceed 250kB or 10x the compressed size (whichever is larger). Thanks to Enze Wang@Alioth and Jianjun Chen@Zhongguancun Lab (@zer0yu and @chenjj) for reporting.\n\n### Patches\nThe problem is fixed in the following packages and versions:\n- github.com/go-jose/go-jose/v4 version 4.0.1\n- github.com/go-jose/go-jose/v3 version 3.0.3\n- gopkg.in/go-jose/go-jose.v2 version 2.6.3\n\nThe problem will not be fixed in the following package because the package is archived:\n- gopkg.in/square/go-jose.v2",
      "cve": "CVE-2024-28180",
      "severity": "Medium",
      "confidence": "Unknown",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/gopkg.in/square/go-jose.v2@2.5.1"
          },
          "version": "2.5.1"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-28180",
          "value": "CVE-2024-28180",
          "url": "https://scout.docker.com/v/CVE-2024-28180?s=github&n=go-jose.v2&ns=gopkg.in%2Fsquare&t=golang&vr=%3C%3D2.6.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-28180?s=github&n=go-jose.v2&ns=gopkg.in%2Fsquare&t=golang&vr=%3C%3D2.6.0"
        }
      ]
    },
    {
      "id": "c5464c91678ff565b2cc7a4066e9c55a7965dd20e37bda1788e2b5a544e6fdbe",
      "category": "container_scanning",
      "message": "CVE-2024-34155 on stdlib@1.17",
      "description": "Calling any of the Parse functions on Go source code which contains deeply nested literals can cause a panic due to stack exhaustion.",
      "cve": "CVE-2024-34155",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.22.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-34155",
          "value": "CVE-2024-34155",
          "url": "https://scout.docker.com/v/CVE-2024-34155?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-34155?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ]
    },
    {
      "id": "5729857aaa1d1e3b699a173d0c03ce65c90937ef6e5d69558541dffdf06264a1",
      "category": "container_scanning",
      "message": "CVE-2021-44717 on stdlib@1.17",
      "description": "When a Go program running on a Unix system is out of file descriptors and calls syscall.ForkExec (including indirectly by using the os/exec package), syscall.ForkExec can close file descriptor 0 as it fails. If this happens (or can be provoked) repeatedly, it can result in misdirected I/O such as writing network traffic intended for one connection to a different connection, or content intended for one file to a different one.\n\nFor users who cannot immediately update to the new release, the bug can be mitigated by raising the per-process file descriptor limit.",
      "cve": "CVE-2021-44717",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.17.5",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-44717",
          "value": "CVE-2021-44717",
          "url": "https://scout.docker.com/v/CVE-2021-44717?s=golang&n=stdlib&t=golang&vr=%3E%3D1.17.0-0%2C%3C1.17.5"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-44717?s=golang&n=stdlib&t=golang&vr=%3E%3D1.17.0-0%2C%3C1.17.5"
        }
      ]
    },
    {
      "id": "06b2550674d217e3908459cf32ce99ba91e5fd347d787ca2c4615e110efddb4d",
      "category": "container_scanning",
      "message": "CVE-2021-36156 on github.com/grafana/loki@1.6.2-0.20210520072447-15d417efe103",
      "description": "An issue was discovered in Grafana Loki through 2.2.1. The header value X-Scope-OrgID is used to construct file paths for rules files, and if crafted to conduct directory traversal such as ae ../../sensitive/path/in/deployment pathname, then Loki will attempt to parse a rules file at that location and include some of the contents in the error message.",
      "cve": "CVE-2021-36156",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/grafana/loki@1.6.2-0.20210520072447-15d417efe103 to 2.3.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/grafana/loki@1.6.2-0.20210520072447-15d417efe103"
          },
          "version": "1.6.2-0.20210520072447-15d417efe103"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-36156",
          "value": "CVE-2021-36156",
          "url": "https://scout.docker.com/v/CVE-2021-36156?s=github&n=loki&ns=github.com%2Fgrafana&t=golang&vr=%3C2.3.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-36156?s=github&n=loki&ns=github.com%2Fgrafana&t=golang&vr=%3C2.3.0"
        }
      ]
    },
    {
      "id": "58de229bfb6f02c333c74fb8c82210e9795a502f50c0490c69b7e1c8d0cb9bfd",
      "category": "container_scanning",
      "message": "CVE-2021-42374 on alpine/busybox@1.33.1-r3",
      "cve": "CVE-2021-42374",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/busybox@1.33.1-r3 to 1.33.1-r4",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/busybox@1.33.1-r3?os_name=alpine&os_version=3.14"
          },
          "version": "1.33.1-r3"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-42374",
          "value": "CVE-2021-42374",
          "url": "https://scout.docker.com/v/CVE-2021-42374?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.33.1-r4"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-42374?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.33.1-r4"
        }
      ]
    },
    {
      "id": "1318f93831f3b7060facb76ed073b7ceb7538bacffb3af69e6d847abb1c28f48",
      "category": "container_scanning",
      "message": "CVE-2022-2097 on alpine/openssl@1.1.1l-r0",
      "cve": "CVE-2022-2097",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@1.1.1l-r0 to 1.1.1q-r0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@1.1.1l-r0?os_name=alpine&os_version=3.14"
          },
          "version": "1.1.1l-r0"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-2097",
          "value": "CVE-2022-2097",
          "url": "https://scout.docker.com/v/CVE-2022-2097?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.1.1q-r0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-2097?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.1.1q-r0"
        }
      ]
    },
    {
      "id": "616a6f32329fd79ef1d74ba6423019142942d013daa1e0a600625d5def4284ec",
      "category": "container_scanning",
      "message": "CVE-2022-29526 on stdlib@1.17",
      "description": "When called with a non-zero flags parameter, the Faccessat function can incorrectly report that a file is accessible.",
      "cve": "CVE-2022-29526",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.17.10",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-29526",
          "value": "CVE-2022-29526",
          "url": "https://scout.docker.com/v/CVE-2022-29526?s=golang&n=stdlib&t=golang&vr=%3C1.17.10"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-29526?s=golang&n=stdlib&t=golang&vr=%3C1.17.10"
        }
      ]
    },
    {
      "id": "dd200a7f3d3b79023904550cd12fa9eb39de7a222c70e42c2768bbc1d3fb995b",
      "category": "container_scanning",
      "message": "CVE-2022-29526 on golang.org/x/sys@0.0.0-20210806184541-e5e7981a1069",
      "description": "Go before 1.17.10 and 1.18.x before 1.18.2 has Incorrect Privilege Reporting in syscall. When called with a non-zero flags parameter, the Faccessat function could incorrectly report that a file is accessible.\n\n### Specific Go Packages Affected\ngolang.org/x/sys/unix",
      "cve": "CVE-2022-29526",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/sys@0.0.0-20210806184541-e5e7981a1069 to 0.0.0-20220412211240-33da011f77ad",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/sys@0.0.0-20210806184541-e5e7981a1069"
          },
          "version": "0.0.0-20210806184541-e5e7981a1069"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-29526",
          "value": "CVE-2022-29526",
          "url": "https://scout.docker.com/v/CVE-2022-29526?s=github&n=sys&ns=golang.org%2Fx&t=golang&vr=%3C0.0.0-20220412211240-33da011f77ad"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-29526?s=github&n=sys&ns=golang.org%2Fx&t=golang&vr=%3C0.0.0-20220412211240-33da011f77ad"
        }
      ]
    },
    {
      "id": "2d2390eb244b3e9f2c61dbc348e275371bd17c434481c90708e761f245a25bb2",
      "category": "container_scanning",
      "message": "CVE-2022-41717 on stdlib@1.17",
      "description": "An attacker can cause excessive memory growth in a Go server accepting HTTP/2 requests.\n\nHTTP/2 server connections contain a cache of HTTP header keys sent by the client. While the total number of entries in this cache is capped, an attacker sending very large keys can cause the server to allocate approximately 64 MiB per open connection.",
      "cve": "CVE-2022-41717",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.18.9",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-41717",
          "value": "CVE-2022-41717",
          "url": "https://scout.docker.com/v/CVE-2022-41717?s=golang&n=stdlib&t=golang&vr=%3C1.18.9"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-41717?s=golang&n=stdlib&t=golang&vr=%3C1.18.9"
        }
      ]
    },
    {
      "id": "81309378834d8392b8864b69a7bcdd62d067053827007fb957fd92dbb2a906d5",
      "category": "container_scanning",
      "message": "CVE-2023-0465 on alpine/openssl@1.1.1l-r0",
      "cve": "CVE-2023-0465",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@1.1.1l-r0 to 1.1.1t-r2",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@1.1.1l-r0?os_name=alpine&os_version=3.14"
          },
          "version": "1.1.1l-r0"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-0465",
          "value": "CVE-2023-0465",
          "url": "https://scout.docker.com/v/CVE-2023-0465?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.1.1t-r2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-0465?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.1.1t-r2"
        }
      ]
    },
    {
      "id": "a6dbf1ed017c588674812eac9dcbbb93e898075ed795f5655648e037086f87ee",
      "category": "container_scanning",
      "message": "CVE-2023-24532 on stdlib@1.17",
      "description": "The ScalarMult and ScalarBaseMult methods of the P256 Curve may return an incorrect result if called with some specific unreduced scalars (a scalar larger than the order of the curve).\n\nThis does not impact usages of crypto/ecdsa or crypto/ecdh.",
      "cve": "CVE-2023-24532",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.19.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-24532",
          "value": "CVE-2023-24532",
          "url": "https://scout.docker.com/v/CVE-2023-24532?s=golang&n=stdlib&t=golang&vr=%3C1.19.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-24532?s=golang&n=stdlib&t=golang&vr=%3C1.19.7"
        }
      ]
    },
    {
      "id": "7c1fadc9b6b98c32df3853ba2883cb83476fd941b966cae4edf00f4bea858778",
      "category": "container_scanning",
      "message": "CVE-2023-29409 on stdlib@1.17",
      "description": "Extremely large RSA keys in certificate chains can cause a client/server to expend significant CPU time verifying signatures.\n\nWith fix, the size of RSA keys transmitted during handshakes is restricted to <= 8192 bits.\n\nBased on a survey of publicly trusted RSA keys, there are currently only three certificates in circulation with keys larger than this, and all three appear to be test certificates that are not actively deployed. It is possible there are larger keys in use in private PKIs, but we target the web PKI, so causing breakage here in the interests of increasing the default safety of users of crypto/tls seems reasonable.",
      "cve": "CVE-2023-29409",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.19.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-29409",
          "value": "CVE-2023-29409",
          "url": "https://scout.docker.com/v/CVE-2023-29409?s=golang&n=stdlib&t=golang&vr=%3C1.19.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-29409?s=golang&n=stdlib&t=golang&vr=%3C1.19.12"
        }
      ]
    },
    {
      "id": "b774b768e2d38648e1322faf8d96215e9097bd700b35c93f75f9b5f338e33225",
      "category": "container_scanning",
      "message": "CVE-2023-39326 on stdlib@1.17",
      "description": "A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body.\n\nA malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request.\n\nChunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small.",
      "cve": "CVE-2023-39326",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.20.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-39326",
          "value": "CVE-2023-39326",
          "url": "https://scout.docker.com/v/CVE-2023-39326?s=golang&n=stdlib&t=golang&vr=%3C1.20.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-39326?s=golang&n=stdlib&t=golang&vr=%3C1.20.12"
        }
      ]
    },
    {
      "id": "1a5db7bbe844f306defee9773ce6bb01474735b597ec89b7f6999a1c988cf995",
      "category": "container_scanning",
      "message": "CVE-2023-45284 on stdlib@1.17",
      "description": "On Windows, The IsLocal function does not correctly detect reserved device names in some cases.\n\nReserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local.\n\nWith fix, IsLocal now correctly reports these names as non-local.",
      "cve": "CVE-2023-45284",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.20.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45284",
          "value": "CVE-2023-45284",
          "url": "https://scout.docker.com/v/CVE-2023-45284?s=golang&n=stdlib&t=golang&vr=%3C1.20.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45284?s=golang&n=stdlib&t=golang&vr=%3C1.20.11"
        }
      ]
    },
    {
      "id": "69d2852aa4dbf80627e16de2a92ffdecb016019047864b3426257d660c2bc194",
      "category": "container_scanning",
      "message": "CVE-2024-24785 on stdlib@1.17",
      "description": "If errors returned from MarshalJSON methods contain user controlled data, they may be used to break the contextual auto-escaping behavior of the html/template package, allowing for subsequent actions to inject unexpected content into templates.",
      "cve": "CVE-2024-24785",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.21.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24785",
          "value": "CVE-2024-24785",
          "url": "https://scout.docker.com/v/CVE-2024-24785?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24785?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ]
    },
    {
      "id": "8a11ff95a04d8250cb5d7f2bf0e8ead20e5f30732e2b916d14d16fd3386cccec",
      "category": "container_scanning",
      "message": "CVE-2021-42375 on alpine/busybox@1.33.1-r3",
      "cve": "CVE-2021-42375",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/busybox@1.33.1-r3 to 1.33.1-r5",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/busybox@1.33.1-r3?os_name=alpine&os_version=3.14"
          },
          "version": "1.33.1-r3"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-42375",
          "value": "CVE-2021-42375",
          "url": "https://scout.docker.com/v/CVE-2021-42375?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.33.1-r5"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-42375?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.33.1-r5"
        }
      ]
    },
    {
      "id": "5eaa9668b1675f127b6ca4ae45429eb7ccdebb13f8323c567efc64e7d66d91c7",
      "category": "container_scanning",
      "message": "CVE-2022-1962 on stdlib@1.17",
      "description": "Calling any of the Parse functions on Go source code which contains deeply nested types or declarations can cause a panic due to stack exhaustion.",
      "cve": "CVE-2022-1962",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.17.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-1962",
          "value": "CVE-2022-1962",
          "url": "https://scout.docker.com/v/CVE-2022-1962?s=golang&n=stdlib&t=golang&vr=%3C1.17.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-1962?s=golang&n=stdlib&t=golang&vr=%3C1.17.12"
        }
      ]
    },
    {
      "id": "d0e67517dd9f7283bc69ee1c604804808a788f7c79b73072e4eab2ba73cda77d",
      "category": "container_scanning",
      "message": "CVE-2024-24789 on stdlib@1.17",
      "description": "The archive/zip package's handling of certain types of invalid zip files differs from the behavior of most zip implementations. This misalignment could be exploited to create an zip file with contents that vary depending on the implementation reading the file. The archive/zip package now rejects files containing these errors.",
      "cve": "CVE-2024-24789",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.21.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24789",
          "value": "CVE-2024-24789",
          "url": "https://scout.docker.com/v/CVE-2024-24789?s=golang&n=stdlib&t=golang&vr=%3C1.21.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24789?s=golang&n=stdlib&t=golang&vr=%3C1.21.11"
        }
      ]
    },
    {
      "id": "3f21b32fce97072753672cd3ec152c90c5ae3618f3e34c4cfa06fc4e6a620d4f",
      "category": "container_scanning",
      "message": "CVE-2025-0913 on stdlib@1.17",
      "description": "os.OpenFile(path, os.O_CREATE|O_EXCL) behaved differently on Unix and Windows systems when the target path was a dangling symlink. On Unix systems, OpenFile with O_CREATE and O_EXCL flags never follows symlinks. On Windows, when the target path was a symlink to a nonexistent location, OpenFile would create a file in that location. OpenFile now always returns an error when the O_CREATE and O_EXCL flags are both set and the target path is a symlink.",
      "cve": "CVE-2025-0913",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.23.10",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-0913",
          "value": "CVE-2025-0913",
          "url": "https://scout.docker.com/v/CVE-2025-0913?s=golang&n=stdlib&t=golang&vr=%3C1.23.10"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-0913?s=golang&n=stdlib&t=golang&vr=%3C1.23.10"
        }
      ]
    },
    {
      "id": "d1f047ae46016c3494773e85ff7cb271e0d986cc16c9adfafe214a6cae1d08a9",
      "category": "container_scanning",
      "message": "CVE-2020-8911 on github.com/aws/aws-sdk-go@1.40.11",
      "description": "A padding oracle vulnerability exists in the AWS S3 Crypto SDK for GoLang versions prior to V2. The SDK allows users to encrypt files with AES-CBC without computing a Message Authentication Code (MAC), which then allows an attacker who has write access to the target's S3 bucket and can observe whether or not an endpoint with access to the key can decrypt a file, they can reconstruct the plaintext with (on average) 128*length (plaintext) queries to the endpoint, by exploiting CBC's ability to manipulate the bytes of the next block and PKCS5 padding errors. It is recommended to update your SDK to V2 or later, and re-encrypt your files.",
      "cve": "CVE-2020-8911",
      "severity": "Medium",
      "confidence": "Unknown",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/aws/aws-sdk-go@1.40.11"
          },
          "version": "1.40.11"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2020-8911",
          "value": "CVE-2020-8911",
          "url": "https://scout.docker.com/v/CVE-2020-8911?s=golang&n=aws-sdk-go&ns=github.com%2Faws&t=golang&vr=%3E%3D0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2020-8911?s=golang&n=aws-sdk-go&ns=github.com%2Faws&t=golang&vr=%3E%3D0"
        }
      ]
    },
    {
      "id": "f28ef5447bfdc399f6256bdbf464324dc60d400430c6c292e68b9196d0b9e45c",
      "category": "container_scanning",
      "message": "CVE-2023-48795 on golang.org/x/crypto@0.0.0-20210616213533-5ff15b29337e",
      "description": "### Summary\n\nTerrapin is a prefix truncation attack targeting the SSH protocol. More precisely, Terrapin breaks the integrity of SSH's secure channel. By carefully adjusting the sequence numbers during the handshake, an attacker can remove an arbitrary amount of messages sent by the client or server at the beginning of the secure channel without the client or server noticing it.\n\n### Mitigations\n\nTo mitigate this protocol vulnerability, OpenSSH suggested a so-called \"strict kex\" which alters the SSH handshake to ensure a Man-in-the-Middle attacker cannot introduce unauthenticated messages as well as convey sequence number manipulation across handshakes.\n\n**Warning: To take effect, both the client and server must support this countermeasure.** \n\nAs a stop-gap measure, peers may also (temporarily) disable the affected algorithms and use unaffected alternatives like AES-GCM instead until patches are available.\n\n### Details\n\nThe SSH specifications of ChaCha20-Poly1305 (chacha20-poly1305@openssh.com) and Encrypt-then-MAC (*-etm@openssh.com MACs) are vulnerable against an arbitrary prefix truncation attack (a.k.a. Terrapin attack). This allows for an extension negotiation downgrade by stripping the SSH_MSG_EXT_INFO sent after the first message after SSH_MSG_NEWKEYS, downgrading security, and disabling attack countermeasures in some versions of OpenSSH. When targeting Encrypt-then-MAC, this attack requires the use of a CBC cipher to be practically exploitable due to the internal workings of the cipher mode. Additionally, this novel attack technique can be used to exploit previously unexploitable implementation flaws in a Man-in-the-Middle scenario.\n\nThe attack works by an attacker injecting an arbitrary number of SSH_MSG_IGNORE messages during the initial key exchange and consequently removing the same number of messages just after the initial key exchange has concluded. This is possible due to missing authentication of the excess SSH_MSG_IGNORE messages and the fact that the implicit sequence numbers used within the SSH protocol are only checked after the initial key exchange.\n\nIn the case of ChaCha20-Poly1305, the attack is guaranteed to work on every connection as this cipher does not maintain an internal state other than the message's sequence number. In the case of Encrypt-Then-MAC, practical exploitation requires the use of a CBC cipher; while theoretical integrity is broken for all ciphers when using this mode, message processing will fail at the application layer for CTR and stream ciphers.\n\nFor more details see [https://terrapin-attack.com](https://terrapin-attack.com). \n\n### Impact\n\nThis attack targets the specification of ChaCha20-Poly1305 (chacha20-poly1305@openssh.com) and Encrypt-then-MAC (*-etm@openssh.com), which are widely adopted by well-known SSH implementations and can be considered de-facto standard. These algorithms can be practically exploited; however, in the case of Encrypt-Then-MAC, we additionally require the use of a CBC cipher. As a consequence, this attack works against all well-behaving SSH implementations supporting either of those algorithms and can be used to downgrade (but not fully strip) connection security in case SSH extension negotiation (RFC8308) is supported. The attack may also enable attackers to exploit certain implementation flaws in a man-in-the-middle (MitM) scenario.",
      "cve": "CVE-2023-48795",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/crypto@0.0.0-20210616213533-5ff15b29337e to 0.0.0-20231218163308-9d2ee975ef9f",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/crypto@0.0.0-20210616213533-5ff15b29337e"
          },
          "version": "0.0.0-20210616213533-5ff15b29337e"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-48795",
          "value": "CVE-2023-48795",
          "url": "https://scout.docker.com/v/CVE-2023-48795?s=github&n=crypto&ns=golang.org%2Fx&t=golang&vr=%3C0.0.0-20231218163308-9d2ee975ef9f"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-48795?s=github&n=crypto&ns=golang.org%2Fx&t=golang&vr=%3C0.0.0-20231218163308-9d2ee975ef9f"
        }
      ]
    },
    {
      "id": "a6497305d05ac96ff14e148522425abe17c93b87adca5ed2fe2fea61417b6f2a",
      "category": "container_scanning",
      "message": "CVE-2024-24783 on stdlib@1.17",
      "description": "Verifying a certificate chain which contains a certificate with an unknown public key algorithm will cause Certificate.Verify to panic.\n\nThis affects all crypto/tls clients, and servers that set Config.ClientAuth to VerifyClientCertIfGiven or RequireAndVerifyClientCert. The default behavior is for TLS servers to not verify client certificates.",
      "cve": "CVE-2024-24783",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.21.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24783",
          "value": "CVE-2024-24783",
          "url": "https://scout.docker.com/v/CVE-2024-24783?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24783?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ]
    },
    {
      "id": "86d3975e14c8e0fa005000da4648aec9cc587b56a7cba8c910420b9c0d5ef6ee",
      "category": "container_scanning",
      "message": "CVE-2023-39318 on stdlib@1.17",
      "description": "The html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in <script> contexts. This may cause the template parser to improperly interpret the contents of <script> contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack.",
      "cve": "CVE-2023-39318",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.20.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-39318",
          "value": "CVE-2023-39318",
          "url": "https://scout.docker.com/v/CVE-2023-39318?s=golang&n=stdlib&t=golang&vr=%3C1.20.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-39318?s=golang&n=stdlib&t=golang&vr=%3C1.20.8"
        }
      ]
    },
    {
      "id": "a000c9f9fd1cedb518b8c38d5a72f34024276f0115fe344cba55a90a2df82413",
      "category": "container_scanning",
      "message": "CVE-2023-39319 on stdlib@1.17",
      "description": "The html/template package does not apply the proper rules for handling occurrences of \"<script\", \"<!--\", and \"</script\" within JS literals in <script> contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack.",
      "cve": "CVE-2023-39319",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.20.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-39319",
          "value": "CVE-2023-39319",
          "url": "https://scout.docker.com/v/CVE-2023-39319?s=golang&n=stdlib&t=golang&vr=%3C1.20.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-39319?s=golang&n=stdlib&t=golang&vr=%3C1.20.8"
        }
      ]
    },
    {
      "id": "7a11cfe4be630d63658effa9b6c7af1f0e43db3b452b26606da4f7ed1cdc3f97",
      "category": "container_scanning",
      "message": "CVE-2024-45336 on stdlib@1.17",
      "description": "The HTTP client drops sensitive headers after following a cross-domain redirect. For example, a request to a.com/ containing an Authorization header which is redirected to b.com/ will not send that header to b.com.\n\nIn the event that the client received a subsequent same-domain redirect, however, the sensitive headers would be restored. For example, a chain of redirects from a.com/, to b.com/1, and finally to b.com/2 would incorrectly send the Authorization header to b.com/2.",
      "cve": "CVE-2024-45336",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.22.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-45336",
          "value": "CVE-2024-45336",
          "url": "https://scout.docker.com/v/CVE-2024-45336?s=golang&n=stdlib&t=golang&vr=%3C1.22.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-45336?s=golang&n=stdlib&t=golang&vr=%3C1.22.11"
        }
      ]
    },
    {
      "id": "a84abfbf2c271eff8b08e5d0c3b0593684c51c3b8988a3b95ed8284df4b33045",
      "category": "container_scanning",
      "message": "CVE-2024-45341 on stdlib@1.17",
      "description": "A certificate with a URI which has a IPv6 address with a zone ID may incorrectly satisfy a URI name constraint that applies to the certificate chain.\n\nCertificates containing URIs are not permitted in the web PKI, so this only affects users of private PKIs which make use of URIs.",
      "cve": "CVE-2024-45341",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.22.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-45341",
          "value": "CVE-2024-45341",
          "url": "https://scout.docker.com/v/CVE-2024-45341?s=golang&n=stdlib&t=golang&vr=%3C1.22.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-45341?s=golang&n=stdlib&t=golang&vr=%3C1.22.11"
        }
      ]
    },
    {
      "id": "99e3b6e909b50e2e8369fb0687c8ab5f8854f7560d373f64f93fb624df76200f",
      "category": "container_scanning",
      "message": "CVE-2022-46146 on github.com/prometheus/exporter-toolkit@0.6.1",
      "description": "### Impact\n\nPrometheus and its exporters can be secured by a web.yml file that specifies usernames and hashed passwords for basic authentication.\n\nPasswords are hashed with bcrypt, which means that even if you have access to the hash, it is very hard to find the original password back.\n\nHowever, a flaw in the way this mechanism was implemented in the exporter toolkit makes it possible with people who know the hashed password to authenticate against Prometheus.\n\nA request can be forged by an attacker to poison the internal cache used to cache the computation of hashes and make subsequent requests successful. This cache is used in both happy and unhappy scenarios in order to limit side channel attacks that could tell an attacker if a user is present in the file or not.\n\n### Patches\n\nThe exporter-toolkit v0.7.3 and v0.8.2 have been released to address this issue.\n\n### Workarounds\n\nThere is no workaround but attacker must have access to the hashed password, stored in disk, to bypass the authentication.\n\n### Credit\n\nWe want to thank Lei Wan reporting this security issue.\n",
      "cve": "CVE-2022-46146",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/prometheus/exporter-toolkit@0.6.1 to 0.7.2",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/prometheus/exporter-toolkit@0.6.1"
          },
          "version": "0.6.1"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-46146",
          "value": "CVE-2022-46146",
          "url": "https://scout.docker.com/v/CVE-2022-46146?s=github&n=exporter-toolkit&ns=github.com%2Fprometheus&t=golang&vr=%3C0.7.2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-46146?s=github&n=exporter-toolkit&ns=github.com%2Fprometheus&t=golang&vr=%3C0.7.2"
        }
      ]
    },
    {
      "id": "dc47c3a887f7be540a74df1a244eb7c8e44c0f5d7cf03ec07093a70ab8c54255",
      "category": "container_scanning",
      "message": "CVE-2021-37750 on alpine/krb5@1.18.4-r0",
      "cve": "CVE-2021-37750",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/krb5@1.18.4-r0 to 1.18.5-r0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/krb5@1.18.4-r0?os_name=alpine&os_version=3.14"
          },
          "version": "1.18.4-r0"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-37750",
          "value": "CVE-2021-37750",
          "url": "https://scout.docker.com/v/CVE-2021-37750?s=alpine&n=krb5&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.18.5-r0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-37750?s=alpine&n=krb5&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.18.5-r0"
        }
      ]
    },
    {
      "id": "275cd7beebb7dd3378691606a74f58e485e734f1770e51681fbf372664b641ea",
      "category": "container_scanning",
      "message": "CVE-2022-1705 on stdlib@1.17",
      "description": "The HTTP/1 client accepted some invalid Transfer-Encoding headers as indicating a \"chunked\" encoding. This could potentially allow for request smuggling, but only if combined with an intermediate server that also improperly failed to reject the header as invalid.",
      "cve": "CVE-2022-1705",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.17.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-1705",
          "value": "CVE-2022-1705",
          "url": "https://scout.docker.com/v/CVE-2022-1705?s=golang&n=stdlib&t=golang&vr=%3C1.17.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-1705?s=golang&n=stdlib&t=golang&vr=%3C1.17.12"
        }
      ]
    },
    {
      "id": "6da78080c0cf4747f6a3a8f0f110ef6db804599db76ab4f59bbbec6c433142de",
      "category": "container_scanning",
      "message": "CVE-2022-32148 on stdlib@1.17",
      "description": "Client IP adresses may be unintentionally exposed via X-Forwarded-For headers.\n\nWhen httputil.ReverseProxy.ServeHTTP is called with a Request.Header map containing a nil value for the X-Forwarded-For header, ReverseProxy sets the client IP as the value of the X-Forwarded-For header, contrary to its documentation.\n\nIn the more usual case where a Director function sets the X-Forwarded-For header value to nil, ReverseProxy leaves the header unmodified as expected.",
      "cve": "CVE-2022-32148",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.17.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-32148",
          "value": "CVE-2022-32148",
          "url": "https://scout.docker.com/v/CVE-2022-32148?s=golang&n=stdlib&t=golang&vr=%3C1.17.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-32148?s=golang&n=stdlib&t=golang&vr=%3C1.17.12"
        }
      ]
    },
    {
      "id": "8fc0000d8e217259c0f5a84cb8bce2084204c1883dde09586c06bed19a1d6e67",
      "category": "container_scanning",
      "message": "CVE-2023-29406 on stdlib@1.17",
      "description": "The HTTP/1 client does not fully validate the contents of the Host header. A maliciously crafted Host header can inject additional headers or entire requests.\n\nWith fix, the HTTP/1 client now refuses to send requests containing an invalid Request.Host or Request.URL.Host value.",
      "cve": "CVE-2023-29406",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.19.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-29406",
          "value": "CVE-2023-29406",
          "url": "https://scout.docker.com/v/CVE-2023-29406?s=golang&n=stdlib&t=golang&vr=%3C1.19.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-29406?s=golang&n=stdlib&t=golang&vr=%3C1.19.11"
        }
      ]
    },
    {
      "id": "4ce1b4081eb1cfd98c228972c0f665cee0036e51ad1b40cb013bf2c7e37543d8",
      "category": "container_scanning",
      "message": "CVE-2023-45290 on stdlib@1.17",
      "description": "When parsing a multipart form (either explicitly with Request.ParseMultipartForm or implicitly with Request.FormValue, Request.PostFormValue, or Request.FormFile), limits on the total size of the parsed form were not applied to the memory consumed while reading a single form line. This permits a maliciously crafted input containing very long lines to cause allocation of arbitrarily large amounts of memory, potentially leading to memory exhaustion.\n\nWith fix, the ParseMultipartForm function now correctly limits the maximum size of form lines.",
      "cve": "CVE-2023-45290",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.21.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45290",
          "value": "CVE-2023-45290",
          "url": "https://scout.docker.com/v/CVE-2023-45290?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45290?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ]
    },
    {
      "id": "626175b3e63f4696fcdaa9cb651cc830e313201ea065992d72a181fed89b63eb",
      "category": "container_scanning",
      "message": "CVE-2025-47906 on stdlib@1.17",
      "description": "If the PATH environment variable contains paths which are executables (rather than just directories), passing certain strings to LookPath (\"\", \".\", and \"..\"), can result in the binaries listed in the PATH being unexpectedly returned.",
      "cve": "CVE-2025-47906",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.23.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-47906",
          "value": "CVE-2025-47906",
          "url": "https://scout.docker.com/v/CVE-2025-47906?s=golang&n=stdlib&t=golang&vr=%3C1.23.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-47906?s=golang&n=stdlib&t=golang&vr=%3C1.23.12"
        }
      ]
    },
    {
      "id": "4d06731782e4904a36ff731b72f919fb9cab2a4398634b2911fe5476d70af1c4",
      "category": "container_scanning",
      "message": "CVE-2024-24786 on google.golang.org/protobuf@1.27.1",
      "description": "The protojson.Unmarshal function can enter an infinite loop when unmarshaling certain forms of invalid JSON. This condition can occur when unmarshaling into a message which contains a google.protobuf.Any value, or when the UnmarshalOptions.DiscardUnknown option is set.",
      "cve": "CVE-2024-24786",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade google.golang.org/protobuf@1.27.1 to 1.33.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/google.golang.org/protobuf@1.27.1"
          },
          "version": "1.27.1"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24786",
          "value": "CVE-2024-24786",
          "url": "https://scout.docker.com/v/CVE-2024-24786?s=github&n=protobuf&ns=google.golang.org&t=golang&vr=%3C1.33.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24786?s=github&n=protobuf&ns=google.golang.org&t=golang&vr=%3C1.33.0"
        }
      ]
    },
    {
      "id": "ca8fcd2109535d93cf01e40cc82ad1d64788f07fc98359a4734c6d2b23c44205",
      "category": "container_scanning",
      "message": "CVE-2024-35255 on github.com/azure/azure-sdk-for-go@0.10.0",
      "description": "Azure Identity Libraries and Microsoft Authentication Library Elevation of Privilege Vulnerability.",
      "cve": "CVE-2024-35255",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/azure/azure-sdk-for-go@0.10.0 to 1.6.0-beta.4.0.20240610221955-50774cd97099",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/azure/azure-sdk-for-go@0.10.0#sdk/azidentity"
          },
          "version": "0.10.0"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-35255",
          "value": "CVE-2024-35255",
          "url": "https://scout.docker.com/v/CVE-2024-35255?s=github&n=sdk%2Fazidentity&ns=github.com%2Fazure%2Fazure-sdk-for-go&t=golang&vr=%3C1.6.0-beta.4.0.20240610221955-50774cd97099"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-35255?s=github&n=sdk%2Fazidentity&ns=github.com%2Fazure%2Fazure-sdk-for-go&t=golang&vr=%3C1.6.0-beta.4.0.20240610221955-50774cd97099"
        }
      ]
    },
    {
      "id": "eb587af0e5716252391101cbd22831e3e18925c8f1cef1487c275c8b093a5a04",
      "category": "container_scanning",
      "message": "CVE-2025-4673 on stdlib@1.17",
      "description": "Proxy-Authorization and Proxy-Authenticate headers persisted on cross-origin redirects potentially leaking sensitive information.",
      "cve": "CVE-2025-4673",
      "severity": "Medium",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.23.10",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-4673",
          "value": "CVE-2025-4673",
          "url": "https://scout.docker.com/v/CVE-2025-4673?s=golang&n=stdlib&t=golang&vr=%3C1.23.10"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-4673?s=golang&n=stdlib&t=golang&vr=%3C1.23.10"
        }
      ]
    },
    {
      "id": "baaee2d24c2a5bf9e14c98bd3bc21b594e64e01bacec550fa64d1ffaf6c831fe",
      "category": "container_scanning",
      "message": "CVE-2023-0286 on alpine/openssl@1.1.1l-r0",
      "description": "There is a type confusion vulnerability relating to X.400 address processing\r\ninside an X.509 GeneralName. X.400 addresses were parsed as an ASN1_STRING but\r\nthe public structure definition for GENERAL_NAME incorrectly specified the type\r\nof the x400Address field as ASN1_TYPE. This field is subsequently interpreted by\r\nthe OpenSSL function GENERAL_NAME_cmp as an ASN1_TYPE rather than an\r\nASN1_STRING.\r\n\r\nWhen CRL checking is enabled (i.e. the application sets the\r\nX509_V_FLAG_CRL_CHECK flag), this vulnerability may allow an attacker to pass\r\narbitrary pointers to a memcmp call, enabling them to read memory contents or\r\nenact a denial of service. In most cases, the attack requires the attacker to\r\nprovide both the certificate chain and CRL, neither of which need to have a\r\nvalid signature. If the attacker only controls one of these inputs, the other\r\ninput must already contain an X.400 address as a CRL distribution point, which\r\nis uncommon. As such, this vulnerability is most likely to only affect\r\napplications which have implemented their own functionality for retrieving CRLs\r\nover a network.\r\n\r\nOpenSSL versions 3.0, 1.1.1 and 1.0.2 are vulnerable to this issue.\r\n\r\nOpenSSL 3.0 users should upgrade to OpenSSL 3.0.8.\r\nOpenSSL 1.1.1 users should upgrade to OpenSSL 1.1.1t.\r\nOpenSSL 1.0.2 users should upgrade to OpenSSL 1.0.2zg (premium support customers\r\nonly).\r\n\r\nThis issue was reported on 11th January 2023 by David Benjamin (Google).\r\nThe fix was developed by Hugo Landau.",
      "cve": "CVE-2023-0286",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@1.1.1l-r0 to 1.1.1t-r0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@1.1.1l-r0?os_name=alpine&os_version=3.14"
          },
          "version": "1.1.1l-r0"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-0286",
          "value": "CVE-2023-0286",
          "url": "https://scout.docker.com/v/CVE-2023-0286?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.1.1t-r0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-0286?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.1.1t-r0"
        }
      ]
    },
    {
      "id": "e371a34773745dbd3dd96211fd1164112ef996bb8522331a2a683d7debc2095b",
      "category": "container_scanning",
      "message": "CVE-2022-29458 on alpine/ncurses@6.2_p20210612-r0",
      "cve": "CVE-2022-29458",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/ncurses@6.2_p20210612-r0 to 6.2_p20210612-r1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/ncurses@6.2_p20210612-r0?os_name=alpine&os_version=3.14"
          },
          "version": "6.2_p20210612-r0"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-29458",
          "value": "CVE-2022-29458",
          "url": "https://scout.docker.com/v/CVE-2022-29458?s=alpine&n=ncurses&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C6.2_p20210612-r1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-29458?s=alpine&n=ncurses&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C6.2_p20210612-r1"
        }
      ]
    },
    {
      "id": "e1da814282a8942803e4a8595935ff018fd4b839bdfee34523b7e4a13b5eb4af",
      "category": "container_scanning",
      "message": "CVE-2023-45683 on github.com/crewjam/saml@0.4.6-0.20201227203850-bca570abb2ce",
      "description": "### Impact\n\nThe package does not validate the ACS Location URI according to the SAML binding being parsed.\n\nIf abused, this flaw allows attackers to register malicious Service Providers at the IdP and inject Javascript in the ACS endpoint definition, achieving Cross-Site-Scripting (XSS) in the IdP context during the redirection at the end of a SAML SSO Flow.\n\nConsequently, an attacker may perform any authenticated action as the victim once the victim’s browser loaded the SAML IdP initiated SSO link for the malicious service provider.\n\nNote: The severity is considered “High” because the SP registration is commonly an unrestricted operation in IdPs, hence not requiring particular permissions or publicly accessible to ease the IdP interoperability.\n\n### Patches\n\nThis issue is fixed in 0.4.14\n\n### Workarounds\n\nUsers of the package can perform external validation of URLs provided in SAML metadata, or restrict the ability for end-users to upload arbitrary metadata. \n\n### References\n\nThis issue was reported by Francesco Lacerenza from Doyensec.\n",
      "cve": "CVE-2023-45683",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/crewjam/saml@0.4.6-0.20201227203850-bca570abb2ce to 0.4.14",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/crewjam/saml@0.4.6-0.20201227203850-bca570abb2ce"
          },
          "version": "0.4.6-0.20201227203850-bca570abb2ce"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45683",
          "value": "CVE-2023-45683",
          "url": "https://scout.docker.com/v/CVE-2023-45683?s=github&n=saml&ns=github.com%2Fcrewjam&t=golang&vr=%3C0.4.14"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45683?s=github&n=saml&ns=github.com%2Fcrewjam&t=golang&vr=%3C0.4.14"
        }
      ]
    },
    {
      "id": "d0648f73ba66a0646aabda2cbe462b9b546c17277d80d31bcc58b824a9e368f7",
      "category": "container_scanning",
      "message": "CVE-2021-42378 on alpine/busybox@1.33.1-r3",
      "cve": "CVE-2021-42378",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/busybox@1.33.1-r3 to 1.33.1-r6",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/busybox@1.33.1-r3?os_name=alpine&os_version=3.14"
          },
          "version": "1.33.1-r3"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-42378",
          "value": "CVE-2021-42378",
          "url": "https://scout.docker.com/v/CVE-2021-42378?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.33.1-r6"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-42378?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.33.1-r6"
        }
      ]
    },
    {
      "id": "2e5cd59ea56f8339690e978a2d3d4b96ad465321b7c0e5cde4651719f27de828",
      "category": "container_scanning",
      "message": "CVE-2021-42379 on alpine/busybox@1.33.1-r3",
      "cve": "CVE-2021-42379",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/busybox@1.33.1-r3 to 1.33.1-r6",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/busybox@1.33.1-r3?os_name=alpine&os_version=3.14"
          },
          "version": "1.33.1-r3"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-42379",
          "value": "CVE-2021-42379",
          "url": "https://scout.docker.com/v/CVE-2021-42379?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.33.1-r6"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-42379?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.33.1-r6"
        }
      ]
    },
    {
      "id": "42e89b10bf73497730a16f2034d5081cce1ede1e5012d83e79ff8eec8174a6ff",
      "category": "container_scanning",
      "message": "CVE-2021-42380 on alpine/busybox@1.33.1-r3",
      "cve": "CVE-2021-42380",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/busybox@1.33.1-r3 to 1.33.1-r6",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/busybox@1.33.1-r3?os_name=alpine&os_version=3.14"
          },
          "version": "1.33.1-r3"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-42380",
          "value": "CVE-2021-42380",
          "url": "https://scout.docker.com/v/CVE-2021-42380?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.33.1-r6"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-42380?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.33.1-r6"
        }
      ]
    },
    {
      "id": "22fc8349320b017538db100b23af67ec3ce7458a9c02b3ea0f677484fe38e6f7",
      "category": "container_scanning",
      "message": "CVE-2021-42381 on alpine/busybox@1.33.1-r3",
      "cve": "CVE-2021-42381",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/busybox@1.33.1-r3 to 1.33.1-r6",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/busybox@1.33.1-r3?os_name=alpine&os_version=3.14"
          },
          "version": "1.33.1-r3"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-42381",
          "value": "CVE-2021-42381",
          "url": "https://scout.docker.com/v/CVE-2021-42381?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.33.1-r6"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-42381?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.33.1-r6"
        }
      ]
    },
    {
      "id": "8716b398e759be7159b3b38aba2fe2913c3871a80701f75ab53f0661a62340cb",
      "category": "container_scanning",
      "message": "CVE-2021-42382 on alpine/busybox@1.33.1-r3",
      "cve": "CVE-2021-42382",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/busybox@1.33.1-r3 to 1.33.1-r6",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/busybox@1.33.1-r3?os_name=alpine&os_version=3.14"
          },
          "version": "1.33.1-r3"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-42382",
          "value": "CVE-2021-42382",
          "url": "https://scout.docker.com/v/CVE-2021-42382?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.33.1-r6"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-42382?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.33.1-r6"
        }
      ]
    },
    {
      "id": "9ea96e2dc6acf83dc611780d203175e55ecd1f7f17bab7a7661999f5d6ad3e7a",
      "category": "container_scanning",
      "message": "CVE-2021-42383 on alpine/busybox@1.33.1-r3",
      "cve": "CVE-2021-42383",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/busybox@1.33.1-r3 to 1.33.1-r6",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/busybox@1.33.1-r3?os_name=alpine&os_version=3.14"
          },
          "version": "1.33.1-r3"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-42383",
          "value": "CVE-2021-42383",
          "url": "https://scout.docker.com/v/CVE-2021-42383?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.33.1-r6"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-42383?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.33.1-r6"
        }
      ]
    },
    {
      "id": "a9571c4f6617fd307bb65baa9fcd572211dcd043ff047e28fc31e39691a47477",
      "category": "container_scanning",
      "message": "CVE-2021-42384 on alpine/busybox@1.33.1-r3",
      "cve": "CVE-2021-42384",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/busybox@1.33.1-r3 to 1.33.1-r6",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/busybox@1.33.1-r3?os_name=alpine&os_version=3.14"
          },
          "version": "1.33.1-r3"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-42384",
          "value": "CVE-2021-42384",
          "url": "https://scout.docker.com/v/CVE-2021-42384?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.33.1-r6"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-42384?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.33.1-r6"
        }
      ]
    },
    {
      "id": "5e70b7e4a016e4d0e8541e9fec908f681cc8458c3eae201b3a4f16a203e10b21",
      "category": "container_scanning",
      "message": "CVE-2021-42385 on alpine/busybox@1.33.1-r3",
      "cve": "CVE-2021-42385",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/busybox@1.33.1-r3 to 1.33.1-r6",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/busybox@1.33.1-r3?os_name=alpine&os_version=3.14"
          },
          "version": "1.33.1-r3"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-42385",
          "value": "CVE-2021-42385",
          "url": "https://scout.docker.com/v/CVE-2021-42385?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.33.1-r6"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-42385?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.33.1-r6"
        }
      ]
    },
    {
      "id": "e8a74a8d54394c4353e5d133ba4ed7adb1d535dd7dcc5ffda76a8d522179642d",
      "category": "container_scanning",
      "message": "CVE-2021-42386 on alpine/busybox@1.33.1-r3",
      "cve": "CVE-2021-42386",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/busybox@1.33.1-r3 to 1.33.1-r6",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/busybox@1.33.1-r3?os_name=alpine&os_version=3.14"
          },
          "version": "1.33.1-r3"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-42386",
          "value": "CVE-2021-42386",
          "url": "https://scout.docker.com/v/CVE-2021-42386?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.33.1-r6"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-42386?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.33.1-r6"
        }
      ]
    },
    {
      "id": "a2c4738b75ca19ef78599da7e8c35835837b34d6b37799c3ce784ae88f83fcea",
      "category": "container_scanning",
      "message": "CVE-2023-24539 on stdlib@1.17",
      "description": "Angle brackets (<>) are not considered dangerous characters when inserted into CSS contexts. Templates containing multiple actions separated by a '/' character can result in unexpectedly closing the CSS context and allowing for injection of unexpected HTML, if executed with untrusted input.",
      "cve": "CVE-2023-24539",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.19.9",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-24539",
          "value": "CVE-2023-24539",
          "url": "https://scout.docker.com/v/CVE-2023-24539?s=golang&n=stdlib&t=golang&vr=%3C1.19.9"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-24539?s=golang&n=stdlib&t=golang&vr=%3C1.19.9"
        }
      ]
    },
    {
      "id": "3c58b4a829d2e0f7214336a56408dd10231212c7d84c7be2f23f194ef2a77973",
      "category": "container_scanning",
      "message": "CVE-2023-29400 on stdlib@1.17",
      "description": "Templates containing actions in unquoted HTML attributes (e.g. \"attr={{.}}\") executed with empty input can result in output with unexpected results when parsed due to HTML normalization rules. This may allow injection of arbitrary attributes into tags.",
      "cve": "CVE-2023-29400",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.19.9",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-29400",
          "value": "CVE-2023-29400",
          "url": "https://scout.docker.com/v/CVE-2023-29400?s=golang&n=stdlib&t=golang&vr=%3C1.19.9"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-29400?s=golang&n=stdlib&t=golang&vr=%3C1.19.9"
        }
      ]
    },
    {
      "id": "bf44d680df6faf350e7caaba3d4a118f3b7866033f9ae2dce637f4a02ce05edf",
      "category": "container_scanning",
      "message": "CVE-2018-25032 on alpine/zlib@1.2.11-r3",
      "cve": "CVE-2018-25032",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/zlib@1.2.11-r3 to 1.2.12-r0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/zlib@1.2.11-r3?os_name=alpine&os_version=3.14"
          },
          "version": "1.2.11-r3"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2018-25032",
          "value": "CVE-2018-25032",
          "url": "https://scout.docker.com/v/CVE-2018-25032?s=alpine&n=zlib&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.2.12-r0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2018-25032?s=alpine&n=zlib&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.2.12-r0"
        }
      ]
    },
    {
      "id": "1b30e22d7282a0e5d9e731b2c3810e580c1d6ad46300db0d8115ac97132bc32e",
      "category": "container_scanning",
      "message": "CVE-2020-7711 on github.com/russellhaering/goxmldsig@1.1.0",
      "description": "This affects all versions of package github.com/russellhaering/goxmldsig prior to 1.1.1. There is a crash on nil-pointer dereference caused by sending malformed XML signatures. This issue is patched in version 1.1.1.",
      "cve": "CVE-2020-7711",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/russellhaering/goxmldsig@1.1.0 to 1.1.1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/russellhaering/goxmldsig@1.1.0"
          },
          "version": "1.1.0"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2020-7711",
          "value": "CVE-2020-7711",
          "url": "https://scout.docker.com/v/CVE-2020-7711?s=github&n=goxmldsig&ns=github.com%2Frussellhaering&t=golang&vr=%3C1.1.1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2020-7711?s=github&n=goxmldsig&ns=github.com%2Frussellhaering&t=golang&vr=%3C1.1.1"
        }
      ]
    },
    {
      "id": "084f570a3263907967708dbfec9ddb73d05711c6b5a89fa2109640bbc54b3779",
      "category": "container_scanning",
      "message": "CVE-2020-7731 on github.com/russellhaering/goxmldsig@1.1.0",
      "description": "### Impact\nIn versions prior to v0.7.0 it was possible for an attacker to supply an invalid assertion which would trigger a panic due to a nil-pointer dereference.\n\n### Patches\nThe issue was patched in v0.7.0, released on March 2, 2022.\n\n### Workarounds\nCallers to `gosaml2` can use `recover()` to handle panics to mitigate a potential DoS.\n\n### References\nSee issue [#59](https://github.com/russellhaering/gosaml2/issues/59) for details.",
      "cve": "CVE-2020-7731",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/russellhaering/goxmldsig@1.1.0 to 1.1.1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/russellhaering/goxmldsig@1.1.0"
          },
          "version": "1.1.0"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2020-7731",
          "value": "CVE-2020-7731",
          "url": "https://scout.docker.com/v/CVE-2020-7731?s=github&n=goxmldsig&ns=github.com%2Frussellhaering&t=golang&vr=%3C1.1.1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2020-7731?s=github&n=goxmldsig&ns=github.com%2Frussellhaering&t=golang&vr=%3C1.1.1"
        }
      ]
    },
    {
      "id": "d76b39454a418c1eb637a92f3980aaa1bc4eb1e320f7be32460167eac6cb54ec",
      "category": "container_scanning",
      "message": "CVE-2021-38561 on golang.org/x/text@0.3.6",
      "description": "golang.org/x/text/language in golang.org/x/text before 0.3.7 can panic with an out-of-bounds read during BCP 47 language tag parsing. Index calculation is mishandled. If parsing untrusted user input, this can be used as a vector for a denial-of-service attack.",
      "cve": "CVE-2021-38561",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/text@0.3.6 to 0.3.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/text@0.3.6"
          },
          "version": "0.3.6"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-38561",
          "value": "CVE-2021-38561",
          "url": "https://scout.docker.com/v/CVE-2021-38561?s=github&n=text&ns=golang.org%2Fx&t=golang&vr=%3C0.3.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-38561?s=github&n=text&ns=golang.org%2Fx&t=golang&vr=%3C0.3.7"
        }
      ]
    },
    {
      "id": "01adbb2744395efd9ee0af3defab3048af2aa0ba2c55fbfd709d6e5401f25c5c",
      "category": "container_scanning",
      "message": "CVE-2021-39293 on stdlib@1.17",
      "description": "The NewReader and OpenReader functions in archive/zip can cause a panic or an unrecoverable fatal error when reading an archive that claims to contain a large number of files, regardless of its actual size. This is caused by an incomplete fix for CVE-2021-33196.",
      "cve": "CVE-2021-39293",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.17.1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-39293",
          "value": "CVE-2021-39293",
          "url": "https://scout.docker.com/v/CVE-2021-39293?s=golang&n=stdlib&t=golang&vr=%3E%3D1.17.0-0%2C%3C1.17.1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-39293?s=golang&n=stdlib&t=golang&vr=%3E%3D1.17.0-0%2C%3C1.17.1"
        }
      ]
    },
    {
      "id": "b60a9c338cd0d9df828451d5109278c2373198a2c7f094146407f921b2f56d17",
      "category": "container_scanning",
      "message": "CVE-2021-41771 on stdlib@1.17",
      "description": "Calling File.ImportedSymbols on a loaded file which contains an invalid dynamic symbol table command can cause a panic, in particular if the encoded number of undefined symbols is larger than the number of symbols in the symbol table.",
      "cve": "CVE-2021-41771",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.17.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-41771",
          "value": "CVE-2021-41771",
          "url": "https://scout.docker.com/v/CVE-2021-41771?s=golang&n=stdlib&t=golang&vr=%3E%3D1.17.0-0%2C%3C1.17.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-41771?s=golang&n=stdlib&t=golang&vr=%3E%3D1.17.0-0%2C%3C1.17.3"
        }
      ]
    },
    {
      "id": "75558d1f42189116c707750d9912e8eaa003c22e0ab9103a51c50e9d5f56603a",
      "category": "container_scanning",
      "message": "CVE-2021-41772 on stdlib@1.17",
      "description": "Previously, opening a zip with (*Reader).Open could result in a panic if the zip contained a file whose name was exclusively made up of slash characters or \"..\" path elements.\n\nOpen could also panic if passed the empty string directly as an argument.\n\nNow, any files in the zip whose name could not be made valid for fs.FS.Open will be skipped, and no longer added to the fs.FS file list, although they are still accessible through (*Reader).File.\n\nNote that it was already the case that a file could be accessible from (*Reader).Open with a name different from the one in (*Reader).File, as the former is the cleaned name, while the latter is the original one.\n\nFinally, the actual panic site was made robust as a defense-in-depth measure.",
      "cve": "CVE-2021-41772",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.17.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-41772",
          "value": "CVE-2021-41772",
          "url": "https://scout.docker.com/v/CVE-2021-41772?s=golang&n=stdlib&t=golang&vr=%3E%3D1.17.0-0%2C%3C1.17.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-41772?s=golang&n=stdlib&t=golang&vr=%3E%3D1.17.0-0%2C%3C1.17.3"
        }
      ]
    },
    {
      "id": "2b2f0ef26941b2d91cd97017adfd537534539ce8b41dd7e7fe0f0ff4a2b989ca",
      "category": "container_scanning",
      "message": "CVE-2021-43565 on golang.org/x/crypto@0.0.0-20210616213533-5ff15b29337e",
      "description": "The x/crypto/ssh package before 0.0.0-20211202192323-5770296d904e of golang.org/x/crypto allows an unauthenticated attacker to panic an SSH server. When using AES-GCM or ChaCha20Poly1305, consuming a malformed packet which contains an empty plaintext causes a panic.",
      "cve": "CVE-2021-43565",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/crypto@0.0.0-20210616213533-5ff15b29337e to 0.0.0-20211202192323-5770296d904e",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/crypto@0.0.0-20210616213533-5ff15b29337e"
          },
          "version": "0.0.0-20210616213533-5ff15b29337e"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-43565",
          "value": "CVE-2021-43565",
          "url": "https://scout.docker.com/v/CVE-2021-43565?s=github&n=crypto&ns=golang.org%2Fx&t=golang&vr=%3C0.0.0-20211202192323-5770296d904e"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-43565?s=github&n=crypto&ns=golang.org%2Fx&t=golang&vr=%3C0.0.0-20211202192323-5770296d904e"
        }
      ]
    },
    {
      "id": "69deed363e65e6cce30a3a0b7aebd5ec85409ab782f580aec993f6f2e45c6836",
      "category": "container_scanning",
      "message": "CVE-2021-44716 on stdlib@1.17",
      "description": "An attacker can cause unbounded memory growth in servers accepting HTTP/2 requests.",
      "cve": "CVE-2021-44716",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.17.5",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-44716",
          "value": "CVE-2021-44716",
          "url": "https://scout.docker.com/v/CVE-2021-44716?s=golang&n=stdlib&t=golang&vr=%3E%3D1.17.0-0%2C%3C1.17.5"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-44716?s=golang&n=stdlib&t=golang&vr=%3E%3D1.17.0-0%2C%3C1.17.5"
        }
      ]
    },
    {
      "id": "da932ea82dabc883037751ef48fe234b11b5aed6b6d59c6730e0a8e13b76c4b2",
      "category": "container_scanning",
      "message": "CVE-2021-44716 on golang.org/x/net@0.0.0-20210726213435-c6fcb2dbf985",
      "description": "An attacker can cause unbounded memory growth in servers accepting HTTP/2 requests.",
      "cve": "CVE-2021-44716",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/net@0.0.0-20210726213435-c6fcb2dbf985 to 0.0.0-20211209124913-491a49abca63",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/net@0.0.0-20210726213435-c6fcb2dbf985"
          },
          "version": "0.0.0-20210726213435-c6fcb2dbf985"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-44716",
          "value": "CVE-2021-44716",
          "url": "https://scout.docker.com/v/CVE-2021-44716?s=golang&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.0.0-20211209124913-491a49abca63"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-44716?s=golang&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.0.0-20211209124913-491a49abca63"
        }
      ]
    },
    {
      "id": "7ca5dc867d39eaef028371e8e9c73c723518a6387e402533808b06e04fb4c7d0",
      "category": "container_scanning",
      "message": "CVE-2021-46828 on alpine/libtirpc@1.3.2-r0",
      "cve": "CVE-2021-46828",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/libtirpc@1.3.2-r0 to 1.3.2-r1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/libtirpc@1.3.2-r0?os_name=alpine&os_version=3.14"
          },
          "version": "1.3.2-r0"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2021-46828",
          "value": "CVE-2021-46828",
          "url": "https://scout.docker.com/v/CVE-2021-46828?s=alpine&n=libtirpc&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.3.2-r1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2021-46828?s=alpine&n=libtirpc&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.3.2-r1"
        }
      ]
    },
    {
      "id": "a779d4ce6a904bda6942c49377641c2a9f4e49adb6c55fee5e61e5dee843d0dc",
      "category": "container_scanning",
      "message": "CVE-2022-0778 on alpine/libretls@3.3.3p1-r2",
      "cve": "CVE-2022-0778",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/libretls@3.3.3p1-r2 to 3.3.3p1-r3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/libretls@3.3.3p1-r2?os_name=alpine&os_version=3.14"
          },
          "version": "3.3.3p1-r2"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-0778",
          "value": "CVE-2022-0778",
          "url": "https://scout.docker.com/v/CVE-2022-0778?s=alpine&n=libretls&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C3.3.3p1-r3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-0778?s=alpine&n=libretls&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C3.3.3p1-r3"
        }
      ]
    },
    {
      "id": "80213446396fba7fabea2deeebca22323ed938d970ab7b29ee55293a3a91fd4f",
      "category": "container_scanning",
      "message": "CVE-2022-0778 on alpine/openssl@1.1.1l-r0",
      "cve": "CVE-2022-0778",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@1.1.1l-r0 to 1.1.1n-r0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@1.1.1l-r0?os_name=alpine&os_version=3.14"
          },
          "version": "1.1.1l-r0"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-0778",
          "value": "CVE-2022-0778",
          "url": "https://scout.docker.com/v/CVE-2022-0778?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.1.1n-r0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-0778?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.1.1n-r0"
        }
      ]
    },
    {
      "id": "b580d3e9299bccec761046164af85f01c08add35385ec495b877ac5a29f1ad6e",
      "category": "container_scanning",
      "message": "CVE-2022-21698 on github.com/prometheus/client_golang@1.11.0",
      "description": "This is the Go client library for Prometheus. It has two separate parts, one for instrumenting application code, and one for creating clients that talk to the Prometheus HTTP API. client_golang is the instrumentation library for Go applications in Prometheus, and the promhttp package in client_golang provides tooling around HTTP servers and clients.\n\n### Impact\n\nHTTP server susceptible to a Denial of Service through unbounded cardinality, and potential memory exhaustion, when handling requests with non-standard HTTP methods.\n\n###  Affected Configuration\n\nIn order to be affected, an instrumented software must\n\n* Use any of `promhttp.InstrumentHandler*` middleware except `RequestsInFlight`.\n* Do not filter any specific methods (e.g GET) before middleware.\n* Pass metric with `method` label name to our middleware.\n* Not have any firewall/LB/proxy that filters away requests with unknown `method`.\n\n### Patches\n\n* https://github.com/prometheus/client_golang/pull/962\n* https://github.com/prometheus/client_golang/pull/987\n\n### Workarounds\n\nIf you cannot upgrade to [v1.11.1 or above](https://github.com/prometheus/client_golang/releases/tag/v1.11.1), in order to stop being affected you can:\n\n* Remove `method` label name from counter/gauge you use in the InstrumentHandler.\n* Turn off affected promhttp handlers.\n* Add custom middleware before promhttp handler that will sanitize the request method given by Go http.Request.\n* Use a reverse proxy or web application firewall, configured to only allow a limited set of methods.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in https://github.com/prometheus/client_golang\n* Email us at `prometheus-team@googlegroups.com`\n",
      "cve": "CVE-2022-21698",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/prometheus/client_golang@1.11.0 to 1.11.1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/prometheus/client_golang@1.11.0"
          },
          "version": "1.11.0"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-21698",
          "value": "CVE-2022-21698",
          "url": "https://scout.docker.com/v/CVE-2022-21698?s=github&n=client_golang&ns=github.com%2Fprometheus&t=golang&vr=%3C1.11.1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-21698?s=github&n=client_golang&ns=github.com%2Fprometheus&t=golang&vr=%3C1.11.1"
        }
      ]
    },
    {
      "id": "1fced22426a98744922e5caffc7085ce317599989c3f022249f6268ccb6cde7c",
      "category": "container_scanning",
      "message": "CVE-2022-23772 on stdlib@1.17",
      "description": "Rat.SetString had an overflow issue that can lead to uncontrolled memory consumption.",
      "cve": "CVE-2022-23772",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.17.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-23772",
          "value": "CVE-2022-23772",
          "url": "https://scout.docker.com/v/CVE-2022-23772?s=golang&n=stdlib&t=golang&vr=%3E%3D1.17.0-0%2C%3C1.17.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-23772?s=golang&n=stdlib&t=golang&vr=%3E%3D1.17.0-0%2C%3C1.17.7"
        }
      ]
    },
    {
      "id": "c177adcd91a0c495c88c673b0f12ab2b6435901f89e72b29ef65eca736756915",
      "category": "container_scanning",
      "message": "CVE-2022-24675 on stdlib@1.17",
      "description": "encoding/pem in Go before 1.17.9 and 1.18.x before 1.18.1 has a Decode stack overflow via a large amount of PEM data.",
      "cve": "CVE-2022-24675",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.17.9",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-24675",
          "value": "CVE-2022-24675",
          "url": "https://scout.docker.com/v/CVE-2022-24675?s=golang&n=stdlib&t=golang&vr=%3C1.17.9"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-24675?s=golang&n=stdlib&t=golang&vr=%3C1.17.9"
        }
      ]
    },
    {
      "id": "bce145435a104eaafaa32e174a620de939282b90e041d2e863f716dcb751e766",
      "category": "container_scanning",
      "message": "CVE-2022-24921 on stdlib@1.17",
      "description": "On 64-bit platforms, an extremely deeply nested expression can cause regexp.Compile to cause goroutine stack exhaustion, forcing the program to exit. Note this applies to very large expressions, on the order of 2MB.",
      "cve": "CVE-2022-24921",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.17.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-24921",
          "value": "CVE-2022-24921",
          "url": "https://scout.docker.com/v/CVE-2022-24921?s=golang&n=stdlib&t=golang&vr=%3E%3D1.17.0-0%2C%3C1.17.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-24921?s=golang&n=stdlib&t=golang&vr=%3E%3D1.17.0-0%2C%3C1.17.8"
        }
      ]
    },
    {
      "id": "ec1e554ad8a9a7ae989535bdffa7d82554b0a199f5cfa65a42e05fe0efe17f6b",
      "category": "container_scanning",
      "message": "CVE-2022-27191 on golang.org/x/crypto@0.0.0-20210616213533-5ff15b29337e",
      "description": "The golang.org/x/crypto/ssh package before 0.0.0-20220314234659-1baeb1ce4c0b for Go allows an attacker to crash a server in certain circumstances involving AddHostKey.",
      "cve": "CVE-2022-27191",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/crypto@0.0.0-20210616213533-5ff15b29337e to 0.0.0-20220314234659-1baeb1ce4c0b",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/crypto@0.0.0-20210616213533-5ff15b29337e"
          },
          "version": "0.0.0-20210616213533-5ff15b29337e"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-27191",
          "value": "CVE-2022-27191",
          "url": "https://scout.docker.com/v/CVE-2022-27191?s=github&n=crypto&ns=golang.org%2Fx&t=golang&vr=%3C0.0.0-20220314234659-1baeb1ce4c0b"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-27191?s=github&n=crypto&ns=golang.org%2Fx&t=golang&vr=%3C0.0.0-20220314234659-1baeb1ce4c0b"
        }
      ]
    },
    {
      "id": "840f628a6437cf7b6419b4e5c1d1e8596216c5a2f3f688dac045a1d3ebfddeb5",
      "category": "container_scanning",
      "message": "CVE-2022-27664 on stdlib@1.17",
      "description": "HTTP/2 server connections can hang forever waiting for a clean shutdown that was preempted by a fatal error. This condition can be exploited by a malicious client to cause a denial of service.",
      "cve": "CVE-2022-27664",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.18.6",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-27664",
          "value": "CVE-2022-27664",
          "url": "https://scout.docker.com/v/CVE-2022-27664?s=golang&n=stdlib&t=golang&vr=%3C1.18.6"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-27664?s=golang&n=stdlib&t=golang&vr=%3C1.18.6"
        }
      ]
    },
    {
      "id": "d191662af7c7a134564ed8c3a063cb918c057f1e77124176cebaf84cae4f317f",
      "category": "container_scanning",
      "message": "CVE-2022-27664 on golang.org/x/net@0.0.0-20210726213435-c6fcb2dbf985",
      "description": "In net/http in Go before 1.18.6 and 1.19.x before 1.19.1, attackers can cause a denial of service because an HTTP/2 connection can hang during closing if shutdown were preempted by a fatal error.",
      "cve": "CVE-2022-27664",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/net@0.0.0-20210726213435-c6fcb2dbf985 to 0.0.0-20220906165146-f3363e06e74c",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/net@0.0.0-20210726213435-c6fcb2dbf985"
          },
          "version": "0.0.0-20210726213435-c6fcb2dbf985"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-27664",
          "value": "CVE-2022-27664",
          "url": "https://scout.docker.com/v/CVE-2022-27664?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.0.0-20220906165146-f3363e06e74c"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-27664?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.0.0-20220906165146-f3363e06e74c"
        }
      ]
    },
    {
      "id": "481c73ec3fcfd8edb7a705ce1310d210bb0a1f759e7729ab33a573a2c40a8ac5",
      "category": "container_scanning",
      "message": "CVE-2022-28131 on stdlib@1.17",
      "description": "Calling Decoder.Skip when parsing a deeply nested XML document can cause a panic due to stack exhaustion.",
      "cve": "CVE-2022-28131",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.17.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-28131",
          "value": "CVE-2022-28131",
          "url": "https://scout.docker.com/v/CVE-2022-28131?s=golang&n=stdlib&t=golang&vr=%3C1.17.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-28131?s=golang&n=stdlib&t=golang&vr=%3C1.17.12"
        }
      ]
    },
    {
      "id": "b7bbd7b5ceae5f65a9bbbc2d097048c72876c0d809ebafc6323f78174adb410f",
      "category": "container_scanning",
      "message": "CVE-2022-28327 on stdlib@1.17",
      "description": "A crafted scalar input longer than 32 bytes can cause P256().ScalarMult or P256().ScalarBaseMult to panic. Indirect uses through crypto/ecdsa and crypto/tls are unaffected. amd64, arm64, ppc64le, and s390x are unaffected.",
      "cve": "CVE-2022-28327",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.17.9",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-28327",
          "value": "CVE-2022-28327",
          "url": "https://scout.docker.com/v/CVE-2022-28327?s=golang&n=stdlib&t=golang&vr=%3C1.17.9"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-28327?s=golang&n=stdlib&t=golang&vr=%3C1.17.9"
        }
      ]
    },
    {
      "id": "e26328f5188bc8796c0f13e726c460a7eb67042739bc30264398e1754bb3e0a3",
      "category": "container_scanning",
      "message": "CVE-2022-2879 on stdlib@1.17",
      "description": "Reader.Read does not set a limit on the maximum size of file headers. A maliciously crafted archive could cause Read to allocate unbounded amounts of memory, potentially causing resource exhaustion or panics. After fix, Reader.Read limits the maximum size of header blocks to 1 MiB.",
      "cve": "CVE-2022-2879",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.18.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-2879",
          "value": "CVE-2022-2879",
          "url": "https://scout.docker.com/v/CVE-2022-2879?s=golang&n=stdlib&t=golang&vr=%3C1.18.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-2879?s=golang&n=stdlib&t=golang&vr=%3C1.18.7"
        }
      ]
    },
    {
      "id": "f336567448ea0e6ecc8bf6b16025c721fcdce78eab9d81cd0dcd13f878e9b7f8",
      "category": "container_scanning",
      "message": "CVE-2022-2880 on stdlib@1.17",
      "description": "Requests forwarded by ReverseProxy include the raw query parameters from the inbound request, including unparsable parameters rejected by net/http. This could permit query parameter smuggling when a Go proxy forwards a parameter with an unparsable value.\n\nAfter fix, ReverseProxy sanitizes the query parameters in the forwarded query when the outbound request's Form field is set after the ReverseProxy. Director function returns, indicating that the proxy has parsed the query parameters. Proxies which do not parse query parameters continue to forward the original query parameters unchanged.",
      "cve": "CVE-2022-2880",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.18.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-2880",
          "value": "CVE-2022-2880",
          "url": "https://scout.docker.com/v/CVE-2022-2880?s=golang&n=stdlib&t=golang&vr=%3C1.18.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-2880?s=golang&n=stdlib&t=golang&vr=%3C1.18.7"
        }
      ]
    },
    {
      "id": "2c261ce80b7cfdf1c0185f6e407ad12f3e1e05244f3e28de3c03303974716476",
      "category": "container_scanning",
      "message": "CVE-2022-28948 on gopkg.in/yaml.v3@3.0.0-20210107192922-496545a6307b",
      "description": "An issue in the Unmarshal function in Go-Yaml v3 can cause a program to panic when attempting to deserialize invalid input.",
      "cve": "CVE-2022-28948",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade gopkg.in/yaml.v3@3.0.0-20210107192922-496545a6307b to 3.0.0-20220521103104-8f96da9f5d5e",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/gopkg.in/yaml.v3@3.0.0-20210107192922-496545a6307b"
          },
          "version": "3.0.0-20210107192922-496545a6307b"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-28948",
          "value": "CVE-2022-28948",
          "url": "https://scout.docker.com/v/CVE-2022-28948?s=github&n=yaml.v3&ns=gopkg.in&t=golang&vr=%3C3.0.1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-28948?s=github&n=yaml.v3&ns=gopkg.in&t=golang&vr=%3C3.0.1"
        }
      ]
    },
    {
      "id": "e787f73760a1e249c737409be95a299d01cb7f5bf8841bbddc3463c089531552",
      "category": "container_scanning",
      "message": "CVE-2022-29804 on stdlib@1.17",
      "description": "On Windows, the filepath.Clean function can convert certain invalid paths to valid, absolute paths, potentially allowing a directory traversal attack.\n\nFor example, Clean(\".\\c:\") returns \"c:\".",
      "cve": "CVE-2022-29804",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.17.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-29804",
          "value": "CVE-2022-29804",
          "url": "https://scout.docker.com/v/CVE-2022-29804?s=golang&n=stdlib&t=golang&vr=%3C1.17.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-29804?s=golang&n=stdlib&t=golang&vr=%3C1.17.11"
        }
      ]
    },
    {
      "id": "910a618c6f923617a5eb4bbf80a50f82a7f3e957c17fbea44c284796cf129342",
      "category": "container_scanning",
      "message": "CVE-2022-30630 on stdlib@1.17",
      "description": "Calling Glob on a path which contains a large number of path separators can cause a panic due to stack exhaustion.",
      "cve": "CVE-2022-30630",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.17.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-30630",
          "value": "CVE-2022-30630",
          "url": "https://scout.docker.com/v/CVE-2022-30630?s=golang&n=stdlib&t=golang&vr=%3C1.17.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-30630?s=golang&n=stdlib&t=golang&vr=%3C1.17.12"
        }
      ]
    },
    {
      "id": "80fbbe7faeb01e8b9f97b8e88ada7f70d981a97a0fcc581bd87b33d936fd3dce",
      "category": "container_scanning",
      "message": "CVE-2022-30631 on stdlib@1.17",
      "description": "Calling Reader.Read on an archive containing a large number of concatenated 0-length compressed files can cause a panic due to stack exhaustion.",
      "cve": "CVE-2022-30631",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.17.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-30631",
          "value": "CVE-2022-30631",
          "url": "https://scout.docker.com/v/CVE-2022-30631?s=golang&n=stdlib&t=golang&vr=%3C1.17.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-30631?s=golang&n=stdlib&t=golang&vr=%3C1.17.12"
        }
      ]
    },
    {
      "id": "ceb32a544fb69a5c919d60ed4d34397cc8aa976133aae67c97d86b74f794ae43",
      "category": "container_scanning",
      "message": "CVE-2022-30632 on stdlib@1.17",
      "description": "Calling Glob on a path which contains a large number of path separators can cause a panic due to stack exhaustion.",
      "cve": "CVE-2022-30632",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.17.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-30632",
          "value": "CVE-2022-30632",
          "url": "https://scout.docker.com/v/CVE-2022-30632?s=golang&n=stdlib&t=golang&vr=%3C1.17.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-30632?s=golang&n=stdlib&t=golang&vr=%3C1.17.12"
        }
      ]
    },
    {
      "id": "72c69fb9fece4b61597c2c6af3cf649ed92a8e10b3b9acc3bf42fb0593e74b1b",
      "category": "container_scanning",
      "message": "CVE-2022-30633 on stdlib@1.17",
      "description": "Unmarshaling an XML document into a Go struct which has a nested field that uses the 'any' field tag can panic due to stack exhaustion.",
      "cve": "CVE-2022-30633",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.17.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-30633",
          "value": "CVE-2022-30633",
          "url": "https://scout.docker.com/v/CVE-2022-30633?s=golang&n=stdlib&t=golang&vr=%3C1.17.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-30633?s=golang&n=stdlib&t=golang&vr=%3C1.17.12"
        }
      ]
    },
    {
      "id": "ce582e143c736bc582ebcfb6ec0f766c571efd74a97472c4167933797af25cba",
      "category": "container_scanning",
      "message": "CVE-2022-30634 on stdlib@1.17",
      "description": "On Windows, rand.Read will hang indefinitely if passed a buffer larger than 1 << 32 - 1 bytes.",
      "cve": "CVE-2022-30634",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.17.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-30634",
          "value": "CVE-2022-30634",
          "url": "https://scout.docker.com/v/CVE-2022-30634?s=golang&n=stdlib&t=golang&vr=%3C1.17.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-30634?s=golang&n=stdlib&t=golang&vr=%3C1.17.11"
        }
      ]
    },
    {
      "id": "d0b02a70cfa9b6e3e04640dbf4a6f47eecb83096502ca8b422e44f20558b8aad",
      "category": "container_scanning",
      "message": "CVE-2022-30635 on stdlib@1.17",
      "description": "Calling Decoder.Decode on a message which contains deeply nested structures can cause a panic due to stack exhaustion.",
      "cve": "CVE-2022-30635",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.17.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-30635",
          "value": "CVE-2022-30635",
          "url": "https://scout.docker.com/v/CVE-2022-30635?s=golang&n=stdlib&t=golang&vr=%3C1.17.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-30635?s=golang&n=stdlib&t=golang&vr=%3C1.17.12"
        }
      ]
    },
    {
      "id": "700f048fd25cc8fb21254776482ea2aa45eb636b3ba5aa158ab7ec869c8ec218",
      "category": "container_scanning",
      "message": "CVE-2022-30636 on golang.org/x/crypto@0.0.0-20210616213533-5ff15b29337e",
      "description": "httpTokenCacheKey uses path.Base to extract the expected HTTP-01 token value to lookup in the DirCache implementation. On Windows, path.Base acts differently to filepath.Base, since Windows uses a different path separator (\\ vs. /), allowing a user to provide a relative path, i.e. .well-known/acme-challenge/..\\..\\asd becomes ..\\..\\asd. The extracted path is then suffixed with +http-01, joined with the cache directory, and opened.\n\nSince the controlled path is suffixed with +http-01 before opening, the impact of this is significantly limited, since it only allows reading arbitrary files on the system if and only if they have this suffix.",
      "cve": "CVE-2022-30636",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/crypto@0.0.0-20210616213533-5ff15b29337e to 0.0.0-20220525230936-793ad666bf5e",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/crypto@0.0.0-20210616213533-5ff15b29337e"
          },
          "version": "0.0.0-20210616213533-5ff15b29337e"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-30636",
          "value": "CVE-2022-30636",
          "url": "https://scout.docker.com/v/CVE-2022-30636?s=golang&n=crypto&ns=golang.org%2Fx&t=golang&vr=%3C0.0.0-20220525230936-793ad666bf5e"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-30636?s=golang&n=crypto&ns=golang.org%2Fx&t=golang&vr=%3C0.0.0-20220525230936-793ad666bf5e"
        }
      ]
    },
    {
      "id": "02b3d5584e6562f7c207aac2c416f89fc0df23cb2750613117b6cdf0e8bb45e1",
      "category": "container_scanning",
      "message": "CVE-2022-32149 on golang.org/x/text@0.3.6",
      "description": "The BCP 47 tag parser has quadratic time complexity due to inherent aspects of its design. Since the parser is, by design, exposed to untrusted user input, this can be leveraged to force a program to consume significant time parsing Accept-Language headers. The parser cannot be easily rewritten to fix this behavior for various reasons. Instead the solution implemented in this CL is to limit the total complexity of tags passed into ParseAcceptLanguage by limiting the number of dashes in the string to 1000. This should be more than enough for the majority of real world use cases, where the number of tags being sent is likely to be in the single digits.\n\n### Specific Go Packages Affected\ngolang.org/x/text/language",
      "cve": "CVE-2022-32149",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade golang.org/x/text@0.3.6 to 0.3.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/golang.org/x/text@0.3.6"
          },
          "version": "0.3.6"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-32149",
          "value": "CVE-2022-32149",
          "url": "https://scout.docker.com/v/CVE-2022-32149?s=github&n=text&ns=golang.org%2Fx&t=golang&vr=%3C0.3.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-32149?s=github&n=text&ns=golang.org%2Fx&t=golang&vr=%3C0.3.8"
        }
      ]
    },
    {
      "id": "78c9d81b5dcb4674b55e3a0c8fa5db4cf59fc4da7e6f51df5e8d06287b7acce4",
      "category": "container_scanning",
      "message": "CVE-2022-32189 on stdlib@1.17",
      "description": "Decoding big.Float and big.Rat types can panic if the encoded message is too short, potentially allowing a denial of service.",
      "cve": "CVE-2022-32189",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.17.13",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-32189",
          "value": "CVE-2022-32189",
          "url": "https://scout.docker.com/v/CVE-2022-32189?s=golang&n=stdlib&t=golang&vr=%3C1.17.13"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-32189?s=golang&n=stdlib&t=golang&vr=%3C1.17.13"
        }
      ]
    },
    {
      "id": "916d5007ac91d799f4e78882681bd47b7b62d3f543ac29f7a93396de661ed3b0",
      "category": "container_scanning",
      "message": "CVE-2022-41715 on stdlib@1.17",
      "description": "Programs which compile regular expressions from untrusted sources may be vulnerable to memory exhaustion or denial of service.\n\nThe parsed regexp representation is linear in the size of the input, but in some cases the constant factor can be as high as 40,000, making relatively small regexps consume much larger amounts of memory.\n\nAfter fix, each regexp being parsed is limited to a 256 MB memory footprint. Regular expressions whose representation would use more space than that are rejected. Normal use of regular expressions is unaffected.",
      "cve": "CVE-2022-41715",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.18.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-41715",
          "value": "CVE-2022-41715",
          "url": "https://scout.docker.com/v/CVE-2022-41715?s=golang&n=stdlib&t=golang&vr=%3C1.18.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-41715?s=golang&n=stdlib&t=golang&vr=%3C1.18.7"
        }
      ]
    },
    {
      "id": "a5094bd56e2c21f6ba5c255dcaf7b0bf4903f26fe3965315720d271ba3887104",
      "category": "container_scanning",
      "message": "CVE-2022-41716 on stdlib@1.17",
      "description": "Due to unsanitized NUL values, attackers may be able to maliciously set environment variables on Windows.\n\nIn syscall.StartProcess and os/exec.Cmd, invalid environment variable values containing NUL values are not properly checked for. A malicious environment variable value can exploit this behavior to set a value for a different environment variable. For example, the environment variable string \"A=B\\x00C=D\" sets the variables \"A=B\" and \"C=D\".",
      "cve": "CVE-2022-41716",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.18.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-41716",
          "value": "CVE-2022-41716",
          "url": "https://scout.docker.com/v/CVE-2022-41716?s=golang&n=stdlib&t=golang&vr=%3C1.18.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-41716?s=golang&n=stdlib&t=golang&vr=%3C1.18.8"
        }
      ]
    },
    {
      "id": "dab23cb7bce67b00a1984fd71607a40da6abadcd822bca0608dd45ae337dd87b",
      "category": "container_scanning",
      "message": "CVE-2022-41720 on stdlib@1.17",
      "description": "On Windows, restricted files can be accessed via os.DirFS and http.Dir.\n\nThe os.DirFS function and http.Dir type provide access to a tree of files rooted at a given directory. These functions permit access to Windows device files under that root. For example, os.DirFS(\"C:/tmp\").Open(\"COM1\") opens the COM1 device. Both os.DirFS and http.Dir only provide read-only filesystem access.\n\nIn addition, on Windows, an os.DirFS for the directory (the root of the current drive) can permit a maliciously crafted path to escape from the drive and access any path on the system.\n\nWith fix applied, the behavior of os.DirFS(\"\") has changed. Previously, an empty root was treated equivalently to \"/\", so os.DirFS(\"\").Open(\"tmp\") would open the path \"/tmp\". This now returns an error.",
      "cve": "CVE-2022-41720",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.18.9",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-41720",
          "value": "CVE-2022-41720",
          "url": "https://scout.docker.com/v/CVE-2022-41720?s=golang&n=stdlib&t=golang&vr=%3C1.18.9"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-41720?s=golang&n=stdlib&t=golang&vr=%3C1.18.9"
        }
      ]
    },
    {
      "id": "1b8e9ce5fc8bd3e42b4a8c2da7d2ef4f717e290c1439b8af5182b7f7d13f1be0",
      "category": "container_scanning",
      "message": "CVE-2022-41722 on stdlib@1.17",
      "description": "A path traversal vulnerability exists in filepath.Clean on Windows.\n\nOn Windows, the filepath.Clean function could transform an invalid path such as \"a/../c:/b\" into the valid path \"c:\\b\". This transformation of a relative (if invalid) path into an absolute path could enable a directory traversal attack.\n\nAfter fix, the filepath.Clean function transforms this path into the relative (but still invalid) path \".\\c:\\b\".",
      "cve": "CVE-2022-41722",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.19.6",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-41722",
          "value": "CVE-2022-41722",
          "url": "https://scout.docker.com/v/CVE-2022-41722?s=golang&n=stdlib&t=golang&vr=%3C1.19.6"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-41722?s=golang&n=stdlib&t=golang&vr=%3C1.19.6"
        }
      ]
    },
    {
      "id": "ce15965b1d27d54fa09ca822aecb2d9a50aa6d753069358267ed7fbf876248e6",
      "category": "container_scanning",
      "message": "CVE-2022-41723 on stdlib@1.17",
      "description": "A maliciously crafted HTTP/2 stream could cause excessive CPU consumption in the HPACK decoder, sufficient to cause a denial of service from a small number of small requests.",
      "cve": "CVE-2022-41723",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.19.6",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-41723",
          "value": "CVE-2022-41723",
          "url": "https://scout.docker.com/v/CVE-2022-41723?s=golang&n=stdlib&t=golang&vr=%3C1.19.6"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-41723?s=golang&n=stdlib&t=golang&vr=%3C1.19.6"
        }
      ]
    },
    {
      "id": "d6bcee52f8d2d0d5b12297ff5f1fa177ec254ec4a061a9b591d518313d1d8689",
      "category": "container_scanning",
      "message": "CVE-2022-41724 on stdlib@1.17",
      "description": "Large handshake records may cause panics in crypto/tls.\n\nBoth clients and servers may send large TLS handshake records which cause servers and clients, respectively, to panic when attempting to construct responses.\n\nThis affects all TLS 1.3 clients, TLS 1.2 clients which explicitly enable session resumption (by setting Config.ClientSessionCache to a non-nil value), and TLS 1.3 servers which request client certificates (by setting Config.ClientAuth >= RequestClientCert).",
      "cve": "CVE-2022-41724",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.19.6",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-41724",
          "value": "CVE-2022-41724",
          "url": "https://scout.docker.com/v/CVE-2022-41724?s=golang&n=stdlib&t=golang&vr=%3C1.19.6"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-41724?s=golang&n=stdlib&t=golang&vr=%3C1.19.6"
        }
      ]
    },
    {
      "id": "119de3870a6ccf4d61e195c64aeae7cd0e53ae643757966544f7ee1be332f803",
      "category": "container_scanning",
      "message": "CVE-2022-41725 on stdlib@1.17",
      "description": "A denial of service is possible from excessive resource consumption in net/http and mime/multipart.\n\nMultipart form parsing with mime/multipart.Reader.ReadForm can consume largely unlimited amounts of memory and disk files. This also affects form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue.\n\nReadForm takes a maxMemory parameter, and is documented as storing \"up to maxMemory bytes +10MB (reserved for non-file parts) in memory\". File parts which cannot be stored in memory are stored on disk in temporary files. The unconfigurable 10MB reserved for non-file parts is excessively large and can potentially open a denial of service vector on its own. However, ReadForm did not properly account for all memory consumed by a parsed form, such as map entry overhead, part names, and MIME headers, permitting a maliciously crafted form to consume well over 10MB. In addition, ReadForm contained no limit on the number of disk files created, permitting a relatively small request body to create a large number of disk temporary files.\n\nWith fix, ReadForm now properly accounts for various forms of memory overhead, and should now stay within its documented limit of 10MB + maxMemory bytes of memory consumption. Users should still be aware that this limit is high and may still be hazardous.\n\nIn addition, ReadForm now creates at most one on-disk temporary file, combining multiple form parts into a single temporary file. The mime/multipart.File interface type's documentation states, \"If stored on disk, the File's underlying concrete type will be an *os.File.\". This is no longer the case when a form contains more than one file part, due to this coalescing of parts into a single file. The previous behavior of using distinct files for each form part may be reenabled with the environment variable GODEBUG=multipartfiles=distinct.\n\nUsers should be aware that multipart.ReadForm and the http.Request methods that call it do not limit the amount of disk consumed by temporary files. Callers can limit the size of form data with http.MaxBytesReader.",
      "cve": "CVE-2022-41725",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.19.6",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-41725",
          "value": "CVE-2022-41725",
          "url": "https://scout.docker.com/v/CVE-2022-41725?s=golang&n=stdlib&t=golang&vr=%3C1.19.6"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-41725?s=golang&n=stdlib&t=golang&vr=%3C1.19.6"
        }
      ]
    },
    {
      "id": "4378035500b1f935cb4d82e42e10374bfa64e61cd7ba8cea3d8be463ef1b9f1b",
      "category": "container_scanning",
      "message": "CVE-2023-0464 on alpine/openssl@1.1.1l-r0",
      "cve": "CVE-2023-0464",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/openssl@1.1.1l-r0 to 1.1.1t-r1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/openssl@1.1.1l-r0?os_name=alpine&os_version=3.14"
          },
          "version": "1.1.1l-r0"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-0464",
          "value": "CVE-2023-0464",
          "url": "https://scout.docker.com/v/CVE-2023-0464?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.1.1t-r1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-0464?s=alpine&n=openssl&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.1.1t-r1"
        }
      ]
    },
    {
      "id": "bd8a47a1821e0a7d8b8adad5286c5a715ee64a985e94af291922f509d570ff03",
      "category": "container_scanning",
      "message": "CVE-2023-24534 on stdlib@1.17",
      "description": "HTTP and MIME header parsing can allocate large amounts of memory, even when parsing small inputs, potentially leading to a denial of service.\n\nCertain unusual patterns of input data can cause the common function used to parse HTTP and MIME headers to allocate substantially more memory than required to hold the parsed headers. An attacker can exploit this behavior to cause an HTTP server to allocate large amounts of memory from a small request, potentially leading to memory exhaustion and a denial of service.\n\nWith fix, header parsing now correctly allocates only the memory required to hold parsed headers.",
      "cve": "CVE-2023-24534",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.19.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-24534",
          "value": "CVE-2023-24534",
          "url": "https://scout.docker.com/v/CVE-2023-24534?s=golang&n=stdlib&t=golang&vr=%3C1.19.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-24534?s=golang&n=stdlib&t=golang&vr=%3C1.19.8"
        }
      ]
    },
    {
      "id": "520d6f8701e6eb9f1c5cf91416eb04a6912cd008322ccb74381efef4a56a9adf",
      "category": "container_scanning",
      "message": "CVE-2023-24536 on stdlib@1.17",
      "description": "Multipart form parsing can consume large amounts of CPU and memory when processing form inputs containing very large numbers of parts.\n\nThis stems from several causes:\n\n1. mime/multipart.Reader.ReadForm limits the total memory a parsed multipart form can consume. ReadForm can undercount the amount of memory consumed, leading it to accept larger inputs than intended.\n2. Limiting total memory does not account for increased pressure on the garbage collector from large numbers of small allocations in forms with many parts.\n3. ReadForm can allocate a large number of short-lived buffers, further increasing pressure on the garbage collector.\n\nThe combination of these factors can permit an attacker to cause an program that parses multipart forms to consume large amounts of CPU and memory, potentially resulting in a denial of service. This affects programs that use mime/multipart.Reader.ReadForm, as well as form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue.\n\nWith fix, ReadForm now does a better job of estimating the memory consumption of parsed forms, and performs many fewer short-lived allocations.\n\nIn addition, the fixed mime/multipart.Reader imposes the following limits on the size of parsed forms:\n\n1. Forms parsed with ReadForm may contain no more than 1000 parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxparts=.\n2. Form parts parsed with NextPart and NextRawPart may contain no more than 10,000 header fields. In addition, forms parsed with ReadForm may contain no more than 10,000 header fields across all parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxheaders=.",
      "cve": "CVE-2023-24536",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.19.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-24536",
          "value": "CVE-2023-24536",
          "url": "https://scout.docker.com/v/CVE-2023-24536?s=golang&n=stdlib&t=golang&vr=%3C1.19.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-24536?s=golang&n=stdlib&t=golang&vr=%3C1.19.8"
        }
      ]
    },
    {
      "id": "61410ab4cb93d04456b87163ba25b3642cd9a53b2e08f65fdff689e16160bcf9",
      "category": "container_scanning",
      "message": "CVE-2023-24537 on stdlib@1.17",
      "description": "Calling any of the Parse functions on Go source code which contains //line directives with very large line numbers can cause an infinite loop due to integer overflow.",
      "cve": "CVE-2023-24537",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.19.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-24537",
          "value": "CVE-2023-24537",
          "url": "https://scout.docker.com/v/CVE-2023-24537?s=golang&n=stdlib&t=golang&vr=%3C1.19.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-24537?s=golang&n=stdlib&t=golang&vr=%3C1.19.8"
        }
      ]
    },
    {
      "id": "e095492c29443d5bdc533b6c0a6127b62d4d05f6d1d921f51f24e9b8dc6b276d",
      "category": "container_scanning",
      "message": "CVE-2023-25151 on github.com/prometheus/client_golang@1.11.0",
      "description": "The Prometheus client_golang HTTP server is vulnerable to a denial of service attack when handling requests with non-standard HTTP methods.\n\nIn order to be affected, an instrumented software must use any of the promhttp.InstrumentHandler* middleware except RequestsInFlight; not filter any specific methods (e.g GET) before middleware; pass a metric with a \"method\" label name to a middleware; and not have any firewall/LB/proxy that filters away requests with unknown \"method\".",
      "cve": "CVE-2023-25151",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/prometheus/client_golang@1.11.0 to 1.11.1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/prometheus/client_golang@1.11.0"
          },
          "version": "1.11.0"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-25151",
          "value": "CVE-2023-25151",
          "url": "https://scout.docker.com/v/CVE-2023-25151?s=golang&n=client_golang&ns=github.com%2Fprometheus&t=golang&vr=%3C1.11.1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-25151?s=golang&n=client_golang&ns=github.com%2Fprometheus&t=golang&vr=%3C1.11.1"
        }
      ]
    },
    {
      "id": "20fd294e0e5997e738fd9ab189a02729d4cf41ddcb14eb016cad2e7de09489dc",
      "category": "container_scanning",
      "message": "CVE-2023-28119 on github.com/crewjam/saml@0.4.6-0.20201227203850-bca570abb2ce",
      "description": "Our use of flate.NewReader does not limit the size of the input. The user could pass more than 1 MB of data in the HTTP request to the processing functions, which will be decompressed server-side using the Deflate algorithm. Therefore, after repeating the same request multiple times, it is possible to achieve a reliable crash since the operating system kills the process.\n",
      "cve": "CVE-2023-28119",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/crewjam/saml@0.4.6-0.20201227203850-bca570abb2ce to 0.4.13",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/crewjam/saml@0.4.6-0.20201227203850-bca570abb2ce"
          },
          "version": "0.4.6-0.20201227203850-bca570abb2ce"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-28119",
          "value": "CVE-2023-28119",
          "url": "https://scout.docker.com/v/CVE-2023-28119?s=github&n=saml&ns=github.com%2Fcrewjam&t=golang&vr=%3C0.4.13"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-28119?s=github&n=saml&ns=github.com%2Fcrewjam&t=golang&vr=%3C0.4.13"
        }
      ]
    },
    {
      "id": "a1782a686f5ff6e9362ddd696db939a72135255c05756f60d13cde3edf93ad91",
      "category": "container_scanning",
      "message": "CVE-2023-39325 on stdlib@1.17",
      "description": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing.\n\nWith the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection.\n\nThis issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2.\n\nThe default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
      "cve": "CVE-2023-39325",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.20.10",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-39325",
          "value": "CVE-2023-39325",
          "url": "https://scout.docker.com/v/CVE-2023-39325?s=golang&n=stdlib&t=golang&vr=%3C1.20.10"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-39325?s=golang&n=stdlib&t=golang&vr=%3C1.20.10"
        }
      ]
    },
    {
      "id": "af1f4be0bd903a737824618bb3a7e8753bbccb2e7504be12bd5427c710cc7701",
      "category": "container_scanning",
      "message": "CVE-2023-44487 on google.golang.org/grpc@1.40.0",
      "description": "An attacker can send HTTP/2 requests, cancel them, and send subsequent requests. This is valid by the HTTP/2 protocol, but would cause the gRPC-Go server to launch more concurrent method handlers than the configured maximum stream limit, grpc.MaxConcurrentStreams. This results in a denial of service due to resource consumption.",
      "cve": "CVE-2023-44487",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade google.golang.org/grpc@1.40.0 to 1.56.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/google.golang.org/grpc@1.40.0"
          },
          "version": "1.40.0"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-44487",
          "value": "CVE-2023-44487",
          "url": "https://scout.docker.com/v/CVE-2023-44487?s=golang&n=grpc&ns=google.golang.org&t=golang&vr=%3C1.56.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-44487?s=golang&n=grpc&ns=google.golang.org&t=golang&vr=%3C1.56.3"
        }
      ]
    },
    {
      "id": "6dfb5d1f4bfa082e04fb5e9fc3a1696a2d31227334b196cfda635fd46572c5bb",
      "category": "container_scanning",
      "message": "CVE-2023-44487 on stdlib@1.17",
      "description": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing.\n\nWith the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection.\n\nThis issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2.\n\nThe default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
      "cve": "CVE-2023-44487",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.20.10",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-44487",
          "value": "CVE-2023-44487",
          "url": "https://scout.docker.com/v/CVE-2023-44487?s=golang&n=stdlib&t=golang&vr=%3C1.20.10"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-44487?s=golang&n=stdlib&t=golang&vr=%3C1.20.10"
        }
      ]
    },
    {
      "id": "0d4d98dcbbcbccf478bb7deb2984d785f236d5d99183c270c6a63199f5857999",
      "category": "container_scanning",
      "message": "CVE-2023-45142 on github.com/prometheus/client_golang@1.11.0",
      "description": "The Prometheus client_golang HTTP server is vulnerable to a denial of service attack when handling requests with non-standard HTTP methods.\n\nIn order to be affected, an instrumented software must use any of the promhttp.InstrumentHandler* middleware except RequestsInFlight; not filter any specific methods (e.g GET) before middleware; pass a metric with a \"method\" label name to a middleware; and not have any firewall/LB/proxy that filters away requests with unknown \"method\".",
      "cve": "CVE-2023-45142",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/prometheus/client_golang@1.11.0 to 1.11.1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/prometheus/client_golang@1.11.0"
          },
          "version": "1.11.0"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45142",
          "value": "CVE-2023-45142",
          "url": "https://scout.docker.com/v/CVE-2023-45142?s=golang&n=client_golang&ns=github.com%2Fprometheus&t=golang&vr=%3C1.11.1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45142?s=golang&n=client_golang&ns=github.com%2Fprometheus&t=golang&vr=%3C1.11.1"
        }
      ]
    },
    {
      "id": "1f56004cd53a9e2d9d3cbc78a176b2ab94b359f2b61ad783e3bf62453b4c0051",
      "category": "container_scanning",
      "message": "CVE-2023-45283 on stdlib@1.17",
      "description": "The filepath package does not recognize paths with a \\??\\ prefix as special.\n\nOn Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x.\n\nBefore fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b.\n\nSimilarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b.\n\nIn addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name.\n\nUPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.",
      "cve": "CVE-2023-45283",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.20.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45283",
          "value": "CVE-2023-45283",
          "url": "https://scout.docker.com/v/CVE-2023-45283?s=golang&n=stdlib&t=golang&vr=%3C1.20.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45283?s=golang&n=stdlib&t=golang&vr=%3C1.20.11"
        }
      ]
    },
    {
      "id": "a5ef5fa68b54a6538acd7592d9ad62cac1c5340da9042379fce56f2300f0dd24",
      "category": "container_scanning",
      "message": "CVE-2023-45287 on stdlib@1.17",
      "description": "Before Go 1.20, the RSA based TLS key exchanges used the math/big library, which is not constant time. RSA blinding was applied to prevent timing attacks, but analysis shows this may not have been fully effective. In particular it appears as if the removal of PKCS#1 padding may leak timing information, which in turn could be used to recover session key bits.\n\nIn Go 1.20, the crypto/tls library switched to a fully constant time RSA implementation, which we do not believe exhibits any timing side channels.",
      "cve": "CVE-2023-45287",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.20.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45287",
          "value": "CVE-2023-45287",
          "url": "https://scout.docker.com/v/CVE-2023-45287?s=golang&n=stdlib&t=golang&vr=%3C1.20.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45287?s=golang&n=stdlib&t=golang&vr=%3C1.20.0"
        }
      ]
    },
    {
      "id": "fcf4c3e663b0647a602343c47120ba9d26af0dd730bff800780e70bcba383134",
      "category": "container_scanning",
      "message": "CVE-2023-45288 on stdlib@1.17",
      "description": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames.\n\nMaintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed.\n\nThis permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send.\n\nThe fix sets a limit on the amount of excess header frames we will process before closing a connection.",
      "cve": "CVE-2023-45288",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.21.9",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-45288",
          "value": "CVE-2023-45288",
          "url": "https://scout.docker.com/v/CVE-2023-45288?s=golang&n=stdlib&t=golang&vr=%3C1.21.9"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-45288?s=golang&n=stdlib&t=golang&vr=%3C1.21.9"
        }
      ]
    },
    {
      "id": "b47d375268c6ee57ef0bb81b226e4d4127494fca07a5ee9b844efdf872663ac3",
      "category": "container_scanning",
      "message": "CVE-2024-24784 on stdlib@1.17",
      "description": "The ParseAddressList function incorrectly handles comments (text within parentheses) within display names. Since this is a misalignment with conforming address parsers, it can result in different trust decisions being made by programs using different parsers.",
      "cve": "CVE-2024-24784",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.21.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24784",
          "value": "CVE-2024-24784",
          "url": "https://scout.docker.com/v/CVE-2024-24784?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24784?s=golang&n=stdlib&t=golang&vr=%3C1.21.8"
        }
      ]
    },
    {
      "id": "9f865fb9f9ebdd2aa0537f31ac90702634d5dc1494473fbd8947ea0de923bda9",
      "category": "container_scanning",
      "message": "CVE-2024-24791 on stdlib@1.17",
      "description": "The net/http HTTP/1.1 client mishandled the case where a server responds to a request with an \"Expect: 100-continue\" header with a non-informational (200 or higher) status. This mishandling could leave a client connection in an invalid state, where the next request sent on the connection will fail.\n\nAn attacker sending a request to a net/http/httputil.ReverseProxy proxy can exploit this mishandling to cause a denial of service by sending \"Expect: 100-continue\" requests which elicit a non-informational response from the backend. Each such request leaves the proxy with an invalid connection, and causes one subsequent request using that connection to fail.",
      "cve": "CVE-2024-24791",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.21.12",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24791",
          "value": "CVE-2024-24791",
          "url": "https://scout.docker.com/v/CVE-2024-24791?s=golang&n=stdlib&t=golang&vr=%3C1.21.12"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24791?s=golang&n=stdlib&t=golang&vr=%3C1.21.12"
        }
      ]
    },
    {
      "id": "e9b0171829f9f62ca2683cc73081757ec02749015b522fd01524b8f255b13e49",
      "category": "container_scanning",
      "message": "CVE-2024-34156 on stdlib@1.17",
      "description": "Calling Decoder.Decode on a message which contains deeply nested structures can cause a panic due to stack exhaustion. This is a follow-up to CVE-2022-30635.",
      "cve": "CVE-2024-34156",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.22.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-34156",
          "value": "CVE-2024-34156",
          "url": "https://scout.docker.com/v/CVE-2024-34156?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-34156?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ]
    },
    {
      "id": "bec205577cabdab2fa8b22878fc49cc238f0be06904842deb826e3acb7d66119",
      "category": "container_scanning",
      "message": "CVE-2024-34158 on stdlib@1.17",
      "description": "Calling Parse on a \"// +build\" build tag line with deeply nested expressions can cause a panic due to stack exhaustion.",
      "cve": "CVE-2024-34158",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.22.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-34158",
          "value": "CVE-2024-34158",
          "url": "https://scout.docker.com/v/CVE-2024-34158?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-34158?s=golang&n=stdlib&t=golang&vr=%3C1.22.7"
        }
      ]
    },
    {
      "id": "d1ebf72aa28778a6c4da8e677ff77325ab18ef516dc65f5237f82696f3d1185a",
      "category": "container_scanning",
      "message": "GHSA-m425-mq94-257g on google.golang.org/grpc@1.40.0",
      "description": "### Impact\nIn affected releases of gRPC-Go, it is possible for an attacker to send HTTP/2 requests, cancel them, and send subsequent requests, which is valid by the HTTP/2 protocol, but would cause the gRPC-Go server to launch more concurrent method handlers than the configured maximum stream limit.\n\n### Patches\nThis vulnerability was addressed by #6703 and has been included in patch releases: 1.56.3, 1.57.1, 1.58.3.  It is also included in the latest release, 1.59.0.\n\nAlong with applying the patch, users should also ensure they are using the `grpc.MaxConcurrentStreams` server option to apply a limit to the server's resources used for any single connection.\n\n### Workarounds\nNone.\n\n### References\n#6703\n",
      "cve": "GHSA-m425-mq94-257g",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade google.golang.org/grpc@1.40.0 to 1.56.3",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/google.golang.org/grpc@1.40.0"
          },
          "version": "1.40.0"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "GHSA-m425-mq94-257g",
          "value": "GHSA-m425-mq94-257g",
          "url": "https://scout.docker.com/v/GHSA-m425-mq94-257g?s=github&n=grpc&ns=google.golang.org&t=golang&vr=%3C1.56.3"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/GHSA-m425-mq94-257g?s=github&n=grpc&ns=google.golang.org&t=golang&vr=%3C1.56.3"
        }
      ]
    },
    {
      "id": "6676be9f3943aa8f41493c2d8dc58764ef9635ad6a77d221e72f482de95dbbda",
      "category": "container_scanning",
      "message": "CVE-2022-1304 on alpine/e2fsprogs@1.46.2-r0",
      "cve": "CVE-2022-1304",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/e2fsprogs@1.46.2-r0 to 1.46.2-r1",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/e2fsprogs@1.46.2-r0?os_name=alpine&os_version=3.14"
          },
          "version": "1.46.2-r0"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-1304",
          "value": "CVE-2022-1304",
          "url": "https://scout.docker.com/v/CVE-2022-1304?s=alpine&n=e2fsprogs&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.46.2-r1"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-1304?s=alpine&n=e2fsprogs&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.46.2-r1"
        }
      ]
    },
    {
      "id": "8eceb7d64e397e51d396136cc514c957c863f64de0241a98cfd9e00a1ac09f0c",
      "category": "container_scanning",
      "message": "CVE-2022-30580 on stdlib@1.17",
      "description": "On Windows, executing Cmd.Run, Cmd.Start, Cmd.Output, or Cmd.CombinedOutput when Cmd.Path is unset will unintentionally trigger execution of any binaries in the working directory named either \"..com\" or \"..exe\".",
      "cve": "CVE-2022-30580",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.17.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-30580",
          "value": "CVE-2022-30580",
          "url": "https://scout.docker.com/v/CVE-2022-30580?s=golang&n=stdlib&t=golang&vr=%3C1.17.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-30580?s=golang&n=stdlib&t=golang&vr=%3C1.17.11"
        }
      ]
    },
    {
      "id": "a5d1e5a2b6f8f9f1f923ca9672ca1efd39b029389d62efb083955fba14a11725",
      "category": "container_scanning",
      "message": "CVE-2023-29403 on stdlib@1.17",
      "description": "On Unix platforms, the Go runtime does not behave differently when a binary is run with the setuid/setgid bits. This can be dangerous in certain cases, such as when dumping memory state, or assuming the status of standard i/o file descriptors.\n\nIf a setuid/setgid binary is executed with standard I/O file descriptors closed, opening any files can result in unexpected content being read or written with elevated privileges. Similarly, if a setuid/setgid program is terminated, either via panic or signal, it may leak the contents of its registers.",
      "cve": "CVE-2023-29403",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.19.10",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-29403",
          "value": "CVE-2023-29403",
          "url": "https://scout.docker.com/v/CVE-2023-29403?s=golang&n=stdlib&t=golang&vr=%3C1.19.10"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-29403?s=golang&n=stdlib&t=golang&vr=%3C1.19.10"
        }
      ]
    },
    {
      "id": "205967ca4b3b413720825e61f511adb95c158aac345dbdd88c273d2a8167056f",
      "category": "container_scanning",
      "message": "CVE-2022-28391 on alpine/busybox@1.33.1-r3",
      "cve": "CVE-2022-28391",
      "severity": "High",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/busybox@1.33.1-r3 to 1.33.1-r7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/busybox@1.33.1-r3?os_name=alpine&os_version=3.14"
          },
          "version": "1.33.1-r3"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-28391",
          "value": "CVE-2022-28391",
          "url": "https://scout.docker.com/v/CVE-2022-28391?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.33.1-r7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-28391?s=alpine&n=busybox&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.33.1-r7"
        }
      ]
    },
    {
      "id": "15904711b9e39b74810003d98e323ca16b6815667a66537690a5879a03bf2116",
      "category": "container_scanning",
      "message": "CVE-2022-23806 on stdlib@1.17",
      "description": "Some big.Int values that are not valid field elements (negative or overflowing) might cause Curve.IsOnCurve to incorrectly return true. Operating on those values may cause a panic or an invalid curve operation. Note that Unmarshal will never return such values.",
      "cve": "CVE-2022-23806",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.17.7",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-23806",
          "value": "CVE-2022-23806",
          "url": "https://scout.docker.com/v/CVE-2022-23806?s=golang&n=stdlib&t=golang&vr=%3E%3D1.17.0-0%2C%3C1.17.7"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-23806?s=golang&n=stdlib&t=golang&vr=%3E%3D1.17.0-0%2C%3C1.17.7"
        }
      ]
    },
    {
      "id": "630ad634e977da08b0cecae38e2fb4fe2a28164c179e47ea2329427fcbf20d51",
      "category": "container_scanning",
      "message": "CVE-2022-41912 on github.com/crewjam/saml@0.4.6-0.20201227203850-bca570abb2ce",
      "description": "### Impact\n\nThe crewjam/saml go library is vulnerable to an authentication bypass when processing SAML responses containing multiple Assertion elements.\n\n### Patches\n\nThis issue has been corrected in version 0.4.9.\n\n### Credit\n\nThis issue was reported by Felix Wilhelm from Google Project Zero.\n",
      "cve": "CVE-2022-41912",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/crewjam/saml@0.4.6-0.20201227203850-bca570abb2ce to 0.4.9",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/crewjam/saml@0.4.6-0.20201227203850-bca570abb2ce"
          },
          "version": "0.4.6-0.20201227203850-bca570abb2ce"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-41912",
          "value": "CVE-2022-41912",
          "url": "https://scout.docker.com/v/CVE-2022-41912?s=github&n=saml&ns=github.com%2Fcrewjam&t=golang&vr=%3C0.4.9"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-41912?s=github&n=saml&ns=github.com%2Fcrewjam&t=golang&vr=%3C0.4.9"
        }
      ]
    },
    {
      "id": "1c961b17edaf97a1f99c400ee95e6470662c4d52d4156c73c56fb2c4d69e546a",
      "category": "container_scanning",
      "message": "CVE-2024-8986 on github.com/grafana/grafana-plugin-sdk-go@0.114.0",
      "description": "The grafana plugin SDK bundles build metadata into the binaries it compiles; this metadata includes the repository URI for the plugin being built, as retrieved by running `git remote get-url origin`.\n \nIf credentials are included in the repository URI (for instance, to allow for fetching of private dependencies), the final binary will contain the full URI, including said credentials.",
      "cve": "CVE-2024-8986",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade github.com/grafana/grafana-plugin-sdk-go@0.114.0 to 0.250.0",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/github.com/grafana/grafana-plugin-sdk-go@0.114.0"
          },
          "version": "0.114.0"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-8986",
          "value": "CVE-2024-8986",
          "url": "https://scout.docker.com/v/CVE-2024-8986?s=github&n=grafana-plugin-sdk-go&ns=github.com%2Fgrafana&t=golang&vr=%3C%3D0.249.0"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-8986?s=github&n=grafana-plugin-sdk-go&ns=github.com%2Fgrafana&t=golang&vr=%3C%3D0.249.0"
        }
      ]
    },
    {
      "id": "1e7f48bdb824d350214155b141a453cf727c7bb8264f96276a05941e4c591aae",
      "category": "container_scanning",
      "message": "CVE-2025-22871 on stdlib@1.17",
      "description": "The net/http package improperly accepts a bare LF as a line terminator in chunked data chunk-size lines. This can permit request smuggling if a net/http server is used in conjunction with a server that incorrectly accepts a bare LF as part of a chunk-ext.",
      "cve": "CVE-2025-22871",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.23.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2025-22871",
          "value": "CVE-2025-22871",
          "url": "https://scout.docker.com/v/CVE-2025-22871?s=golang&n=stdlib&t=golang&vr=%3C1.23.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2025-22871?s=golang&n=stdlib&t=golang&vr=%3C1.23.8"
        }
      ]
    },
    {
      "id": "f29feb0063fa3ca305996e08ba5e161dacc4f2ea62b405b08fa940ebdbd349f8",
      "category": "container_scanning",
      "message": "CVE-2022-37434 on alpine/zlib@1.2.11-r3",
      "cve": "CVE-2022-37434",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade alpine/zlib@1.2.11-r3 to 1.2.12-r2",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:apk/alpine/zlib@1.2.11-r3?os_name=alpine&os_version=3.14"
          },
          "version": "1.2.11-r3"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2022-37434",
          "value": "CVE-2022-37434",
          "url": "https://scout.docker.com/v/CVE-2022-37434?s=alpine&n=zlib&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.2.12-r2"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2022-37434?s=alpine&n=zlib&ns=alpine&t=apk&osn=alpine&osv=3.14&vr=%3C1.2.12-r2"
        }
      ]
    },
    {
      "id": "1a51c093411bb4d2801707a1f760da21c82c80297d31f5d9946ca08fd4ec9b4d",
      "category": "container_scanning",
      "message": "CVE-2023-24538 on stdlib@1.17",
      "description": "Templates do not properly consider backticks (`) as Javascript string delimiters, and do not escape them as expected.\n\nBackticks are used, since ES6, for JS template literals. If a template contains a Go template action within a Javascript template literal, the contents of the action can be used to terminate the literal, injecting arbitrary Javascript code into the Go template.\n\nAs ES6 template literals are rather complex, and themselves can do string interpolation, the decision was made to simply disallow Go template actions from being used inside of them (e.g. \"var a = {{.}}\"), since there is no obviously safe way to allow this behavior. This takes the same approach as github.com/google/safehtml.\n\nWith fix, Template.Parse returns an Error when it encounters templates like this, with an ErrorCode of value 12. This ErrorCode is currently unexported, but will be exported in the release of Go 1.21.\n\nUsers who rely on the previous behavior can re-enable it using the GODEBUG flag jstmpllitinterp=1, with the caveat that backticks will now be escaped. This should be used with caution.",
      "cve": "CVE-2023-24538",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.19.8",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-24538",
          "value": "CVE-2023-24538",
          "url": "https://scout.docker.com/v/CVE-2023-24538?s=golang&n=stdlib&t=golang&vr=%3C1.19.8"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-24538?s=golang&n=stdlib&t=golang&vr=%3C1.19.8"
        }
      ]
    },
    {
      "id": "70c14b18a4b5b7572103fbc9b3b1931ea7d61892232337dd728f042ea7bf30d5",
      "category": "container_scanning",
      "message": "CVE-2023-24540 on stdlib@1.17",
      "description": "Not all valid JavaScript whitespace characters are considered to be whitespace. Templates containing whitespace characters outside of the character set \"\\t\\n\\f\\r\\u0020\\u2028\\u2029\" in JavaScript contexts that also contain actions may not be properly sanitized during execution.",
      "cve": "CVE-2023-24540",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.19.9",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2023-24540",
          "value": "CVE-2023-24540",
          "url": "https://scout.docker.com/v/CVE-2023-24540?s=golang&n=stdlib&t=golang&vr=%3C1.19.9"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2023-24540?s=golang&n=stdlib&t=golang&vr=%3C1.19.9"
        }
      ]
    },
    {
      "id": "140818fe5de6f297f548433bfb6cb5fdf59eae35a9989966109b76851c258977",
      "category": "container_scanning",
      "message": "CVE-2024-24790 on stdlib@1.17",
      "description": "The various Is methods (IsPrivate, IsLoopback, etc) did not work as expected for IPv4-mapped IPv6 addresses, returning false for addresses which would return true in their traditional IPv4 forms.",
      "cve": "CVE-2024-24790",
      "severity": "Critical",
      "confidence": "Unknown",
      "solution": "Upgrade stdlib@1.17 to 1.21.11",
      "scanner": {
        "id": "docker-scout",
        "name": "Docker Scout"
      },
      "location": {
        "dependency": {
          "package": {
            "name": "pkg:golang/stdlib@1.17"
          },
          "version": "1.17"
        },
        "operating_system": "alpine 3.14",
        "image": "grafana/grafana:8.2.0"
      },
      "identifiers": [
        {
          "type": "cve",
          "name": "CVE-2024-24790",
          "value": "CVE-2024-24790",
          "url": "https://scout.docker.com/v/CVE-2024-24790?s=golang&n=stdlib&t=golang&vr=%3C1.21.11"
        }
      ],
      "links": [
        {
          "url": "https://scout.docker.com/v/CVE-2024-24790?s=golang&n=stdlib&t=golang&vr=%3C1.21.11"
        }
      ]
    }
  ],
  "remediations": [],
  "scan": {
    "start_time": "2025-10-16T20:10:23",
    "end_time": "2025-10-16T20:10:23",
    "status": "success",
    "type": "container_scanning",
    "scanner": {
      "id": "docker-scout",
      "name": "Docker Scout",
      "version": "1.18.3",
      "vendor": {
        "name": "Docker"
      }
    },
    "analyzer": {
      "id": "docker-scout",
      "name": "Docker Scout",
      "version": "1.18.3",
      "vendor": {
        "name": "Docker"
      }
    }
  }
}
