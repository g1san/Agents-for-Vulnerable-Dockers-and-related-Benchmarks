{
    "files": [
        {
            "location": "./../../dockers/CVE-2020-7247/custom_no_tool/docker-compose.yml",
            "content": "services:\n  web:\n    build: ./app\n    ports:\n      - \"5000:5000\"\n    depends_on:\n      - db\n    environment:\n      MYSQL_HOST: db\n      MYSQL_USER: user\n      MYSQL_PASSWORD: pass\n      MYSQL_DB: vuln\n  db:\n    image: mysql:5.7\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: rootpass\n      MYSQL_DATABASE: vuln\n      MYSQL_USER: user\n      MYSQL_PASSWORD: pass\n    ports:\n      - \"3306:3306\"\n    volumes:\n      - db_data:/var/lib/mysql\n      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql\n  opensmtpd:\n    # Build the OpenSMTPD image locally to avoid pulling a non\u2011existent remote image\n    build: ./opensmtpd\n    ports:\n      - \"25:25\"\n  docker:\n    image: docker:20.10.24-dind\n    privileged: true\n    environment:\n      DOCKER_TLS_CERTDIR: \"\"\n    ports:\n      - \"2375:2375\"\nvolumes:\n  db_data:"
        },
        {
            "location": "./../../dockers/CVE-2020-7247/custom_no_tool/opensmtpd/Dockerfile",
            "content": "FROM debian:bullseye-slim\n\nENV DEBIAN_FRONTEND=noninteractive\n\n# Install a specific vulnerable version of OpenSMTPD (6.6.1)\n# The version is fetched from the official OpenSMTPD source archive.\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends wget ca-certificates build-essential && \\\n    wget -O /tmp/opensmtpd-6.6.1.tar.gz https://github.com/openbsd/src/archive/refs/tags/opensmtpd-6.6.1.tar.gz && \\\n    tar -xzf /tmp/opensmtpd-6.6.1.tar.gz -C /tmp && \\\n    cd /tmp/src-opensmtpd-6.6.1 && \\\n    ./configure && make && make install && \\\n    rm -rf /tmp/* && \\\n    apt-get purge -y --auto-remove wget build-essential && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN mkdir -p /etc/opensmtpd\nRUN echo \"listen on 0.0.0.0\" > /etc/opensmtpd/opensmtpd.conf\n\nEXPOSE 25\n\nCMD [\"smtpd\", \"-d\", \"-f\", \"/etc/opensmtpd/opensmtpd.conf\"]"
        },
        {
            "location": "./../../dockers/CVE-2020-7247/custom_no_tool/app/Dockerfile",
            "content": "FROM python:3.8-slim\n\n# Install build dependencies required by mysql-connector-python\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends gcc python3-dev default-libmysqlclient-dev && \\\n    rm -rf /var/lib/apt/lists/*\n\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\nCOPY . .\n\nCMD [\"python\", \"app.py\"]"
        },
        {
            "location": "./../../dockers/CVE-2020-7247/custom_no_tool/app/requirements.txt",
            "content": "flask\nmysql-connector-python"
        },
        {
            "location": "./../../dockers/CVE-2020-7247/custom_no_tool/app/app.py",
            "content": "from flask import Flask, request, jsonify\nimport mysql.connector\nimport os\n\napp = Flask(__name__)\n\ndef get_db():\n    conn = mysql.connector.connect(\n        host=os.getenv('MYSQL_HOST', 'db'),\n        user=os.getenv('MYSQL_USER', 'user'),\n        password=os.getenv('MYSQL_PASSWORD', 'pass'),\n        database=os.getenv('MYSQL_DB', 'vuln')\n    )\n    return conn\n\n@app.route('/search')\ndef search():\n    # Vulnerable to SQL injection (demonstrates CVE-2020-7247 exploit scenario)\n    query = request.args.get('q', '')\n    conn = get_db()\n    cursor = conn.cursor()\n    sql = f\"SELECT * FROM secrets WHERE data LIKE '%{query}%'\"\n    cursor.execute(sql)\n    rows = cursor.fetchall()\n    return jsonify(rows)\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
        },
        {
            "location": "./../../dockers/CVE-2020-7247/custom_no_tool/db/init.sql",
            "content": "CREATE TABLE secrets (id INT AUTO_INCREMENT PRIMARY KEY, data VARCHAR(255));\nINSERT INTO secrets (data) VALUES ('admin:password123'), ('user:letmein');"
        }
    ],
    "directory_tree": "CVE-2020-7247/custom_no_tool"
}