import os
import pymysql
from flask import Flask, request, jsonify

app = Flask(__name__)

# Database connection using environment variables
DB_HOST = os.getenv('DB_HOST', 'db')
DB_USER = os.getenv('DB_USER', 'user')
DB_PASSWORD = os.getenv('DB_PASSWORD', 'pass')
DB_NAME = os.getenv('DB_NAME', 'vuln')

def get_connection():
    return pymysql.connect(host=DB_HOST,
                           user=DB_USER,
                           password=DB_PASSWORD,
                           database=DB_NAME,
                           charset='utf8mb4',
                           cursorclass=pymysql.cursors.DictCursor)

# Initialize simple vulnerable schema and test data
def init_db():
    conn = get_connection()
    try:
        with conn.cursor() as cursor:
            cursor.execute("CREATE TABLE IF NOT EXISTS notes (id INT AUTO_INCREMENT PRIMARY KEY, content TEXT);")
            cursor.execute("INSERT INTO notes (content) VALUES ('sample note 1'), ('sample note 2'), ('admin secret data');")
        conn.commit()
    finally:
        conn.close()

@app.route('/')
def index():
    return "Vulnerable Flask app – use /search?term=your_term"

# Vulnerable endpoint – SQL injection via string concatenation
@app.route('/search')
def search():
    term = request.args.get('term', '')
    # NOTE: This is intentionally vulnerable for CVE-2020-7247 demonstration
    query = f"SELECT * FROM notes WHERE content LIKE '%{term}%';"
    conn = get_connection()
    try:
        with conn.cursor() as cursor:
            cursor.execute(query)
            results = cursor.fetchall()
    finally:
        conn.close()
    return jsonify(results)

if __name__ == '__main__':
    init_db()
    app.run(host='0.0.0.0', port=5000)