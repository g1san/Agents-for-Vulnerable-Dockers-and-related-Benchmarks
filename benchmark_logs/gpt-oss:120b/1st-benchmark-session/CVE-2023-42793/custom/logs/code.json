{
    "files": [
        {
            "location": "./../../dockers/CVE-2023-42793/custom/docker-compose.yml",
            "content": "services:\n  app:\n    build: ./app\n    ports:\n      - \"5000:5000\"\n    environment:\n      - FLASK_ENV=development\n      - DATABASE_URL=postgresql://teamcity:teamcitypass@postgres:5432/teamcitydb\n    depends_on:\n      - teamcity\n      - postgres\n    restart: unless-stopped\n\n  teamcity:\n    image: jetbrains/teamcity-server:2023.05.3\n    ports:\n      - \"8111:8111\"\n    environment:\n      - TEAMCITY_SERVER_MEM_OPTS=-Xmx2g -XX:+UseCompressedOops\n    depends_on:\n      - postgres\n    restart: unless-stopped\n\n  postgres:\n    image: postgres:15.5\n    environment:\n      POSTGRES_USER: teamcity\n      POSTGRES_PASSWORD: teamcitypass\n      POSTGRES_DB: teamcitydb\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - pgdata:/var/lib/postgresql/data\n      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro\n    restart: unless-stopped\n\nvolumes:\n  pgdata:"
        },
        {
            "location": "./../../dockers/CVE-2023-42793/custom/app/Dockerfile",
            "content": "FROM python:3.9-slim\nWORKDIR /app\nCOPY requirements.txt ./\nRUN pip install --no-cache-dir -r requirements.txt\n# Install netcat-openbsd and curl for health\u2011check waiting\nRUN apt-get update && apt-get install -y netcat-openbsd curl && rm -rf /var/lib/apt/lists/*\nCOPY . .\nCOPY wait-for-services.sh /usr/local/bin/\nRUN chmod +x /usr/local/bin/wait-for-services.sh\nEXPOSE 5000\nENV FLASK_APP=app.py\nHEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \\\n  CMD curl -f http://localhost:5000/ || exit 1\nENTRYPOINT [\"/usr/local/bin/wait-for-services.sh\"]\nCMD [\"flask\", \"run\", \"--host=0.0.0.0\"]"
        },
        {
            "location": "./../../dockers/CVE-2023-42793/custom/app/wait-for-services.sh",
            "content": "#!/bin/sh\nset -e\n\n# Wait for PostgreSQL to be reachable\nwhile ! nc -z postgres 5432; do\n  echo \"Waiting for PostgreSQL...\"\n  sleep 2\ndone\n\n# Wait for TeamCity to be reachable\nwhile ! nc -z teamcity 8111; do\n  echo \"Waiting for TeamCity...\"\n  sleep 5\ndone\n\n# Exec the original command\nexec \"$@\""
        },
        {
            "location": "./../../dockers/CVE-2023-42793/custom/app/requirements.txt",
            "content": "Flask==2.2.5"
        },
        {
            "location": "./../../dockers/CVE-2023-42793/custom/app/app.py",
            "content": "from flask import Flask, request, jsonify\nimport subprocess\n\napp = Flask(__name__)\n\n# Vulnerable endpoint: executes arbitrary shell commands supplied via the 'cmd' query parameter\n@app.route('/exec')\ndef exec_cmd():\n    cmd = request.args.get('cmd')\n    if not cmd:\n        return jsonify({'error': 'No command provided'}), 400\n    # Directly passes the user supplied command to the shell - CVE-2023-42793 demonstration\n    result = subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT, text=True)\n    return jsonify({'output': result})\n\n@app.route('/')\ndef index():\n    return 'Vulnerable Flask app - CVE-2023-42793 test endpoint at /exec?cmd=whoami'\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
        },
        {
            "location": "./../../dockers/CVE-2023-42793/custom/app/data/sample.txt",
            "content": "This is a placeholder file used to verify volume mounting."
        },
        {
            "location": "./../../dockers/CVE-2023-42793/custom/postgres/init.sql",
            "content": "-- Simple test data for TeamCity demo database\nCREATE TABLE IF NOT EXISTS sample (\n    id SERIAL PRIMARY KEY,\n    name TEXT NOT NULL\n);\nINSERT INTO sample (name) VALUES ('test1'), ('test2');"
        }
    ],
    "directory_tree": "/CVE-2023-42793"
}