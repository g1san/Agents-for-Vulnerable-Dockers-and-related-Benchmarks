package com.example;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import java.util.function.Function;

@SpringBootApplication
public class DemoApplication {
    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }

    // Vulnerable function exposed at /functionRouter
    @Bean
    public Function<String, String> echo() {
        return value -> {
            // The function simply returns the received payload.
            return "Echo: " + value;
        };
    }
}

@RestController
class ExploitController {
    // This endpoint demonstrates the vulnerable routing that triggers SpEL evaluation.
    // The vulnerable version of spring-cloud-function-web evaluates the "function" query parameter as SpEL.
    @org.springframework.web.bind.annotation.GetMapping("/functionRouter")
    public String route(@RequestParam("function") String function) {
        // In the vulnerable library this value is parsed as a SpEL expression.
        // Here we simply delegate to the Function bean by name, mimicking the vulnerable behavior.
        // The actual exploitation occurs inside the library, not in this code.
        return function; // placeholder; the vulnerable library will evaluate this.
    }
}