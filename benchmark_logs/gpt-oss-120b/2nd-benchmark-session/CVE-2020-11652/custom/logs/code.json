{
    "files": [
        {
            "location": "./../../dockers/CVE-2020-11652/custom/docker-compose.yml",
            "content": "version: '3.8'\nservices:\n  web:\n    build: ./app\n    ports:\n      - \"5000:5000\"\n    volumes:\n      - ./app:/app\n    depends_on:\n      db:\n        condition: service_healthy\n  db:\n    image: mysql:5.7\n    environment:\n      MYSQL_ROOT_PASSWORD: rootpw\n      MYSQL_DATABASE: testdb\n      MYSQL_USER: user\n      MYSQL_PASSWORD: userpw\n    ports:\n      - \"3306:3306\"\n    volumes:\n      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql\n    command: --default-authentication-plugin=mysql_native_password\n    healthcheck:\n      test: [\"CMD\", \"mysqladmin\", \"-uroot\", \"-prootpw\", \"ping\", \"-h\", \"localhost\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n  salt:\n    image: saltstack/salt:3000.1\n    command: salt-master -l debug\n    ports:\n      - \"4505:4505\"\n      - \"4506:4506\"\n    environment:\n      - SALT_MASTER=master\n    depends_on:\n      - db"
        },
        {
            "location": "./../../dockers/CVE-2020-11652/custom/app/Dockerfile",
            "content": "FROM python:3.8-slim\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\nCOPY . .\n# Create uploads directory and set correct ownership\nRUN mkdir -p /app/uploads && chown -R 1000:1000 /app/uploads\nEXPOSE 5000\n# Run the application as a non\u2011root user matching the directory ownership\nUSER 1000:1000\nCMD [\"python\", \"app.py\"]"
        },
        {
            "location": "./../../dockers/CVE-2020-11652/custom/app/requirements.txt",
            "content": "Flask==2.0.3\nwerkzeug==2.0.3\nmysql-connector-python==8.0.21"
        },
        {
            "location": "./../../dockers/CVE-2020-11652/custom/app/app.py",
            "content": "import os\nfrom flask import Flask, request, redirect, url_for, send_from_directory, render_template_string\nimport mysql.connector\n\nUPLOAD_FOLDER = '/app/uploads'\nos.makedirs(UPLOAD_FOLDER, exist_ok=True)\n\napp = Flask(__name__)\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\n# Database connection (no pooling for simplicity)\ndef get_db():\n    return mysql.connector.connect(\n        host='db',\n        user='user',\n        password='userpw',\n        database='testdb'\n    )\n\n@app.route('/')\ndef index():\n    db = get_db()\n    cursor = db.cursor(dictionary=True)\n    cursor.execute('SELECT id, filename FROM files')\n    rows = cursor.fetchall()\n    cursor.close()\n    db.close()\n    html = \"\"\"\n    <h1>File Upload</h1>\n    <form method=post enctype=multipart/form-data action='/upload'>\n      <input type=file name=file>\n      <input type=submit value=Upload>\n    </form>\n    <h2>Uploaded Files</h2>\n    <ul>\n    {% for row in rows %}\n      <li><a href=\"/files/{{ row.id }}\">{{ row.filename }}</a></li>\n    {% endfor %}\n    </ul>\n    \"\"\"\n    return render_template_string(html, rows=rows)\n\n@app.route('/upload', methods=['POST'])\ndef upload_file():\n    if 'file' not in request.files:\n        return 'No file part', 400\n    file = request.files['file']\n    if file.filename == '':\n        return 'No selected file', 400\n    # Save uploaded file securely\n    filename = os.path.basename(file.filename)\n    filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n    file.save(filepath)\n    db = get_db()\n    cursor = db.cursor()\n    cursor.execute('INSERT INTO files (filename) VALUES (%s)', (filename,))\n    db.commit()\n    cursor.close()\n    db.close()\n    return redirect(url_for('index'))\n\n@app.route('/files/<int:file_id>')\ndef serve_file(file_id):\n    db = get_db()\n    cursor = db.cursor(dictionary=True)\n    cursor.execute('SELECT filename FROM files WHERE id = %s', (file_id,))\n    row = cursor.fetchone()\n    cursor.close()\n    db.close()\n    if row:\n        return send_from_directory(app.config['UPLOAD_FOLDER'], row['filename'])\n    else:\n        return 'File not found', 404\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\n"
        },
        {
            "location": "./../../dockers/CVE-2020-11652/custom/db/init.sql",
            "content": "CREATE TABLE IF NOT EXISTS files (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  filename VARCHAR(255) NOT NULL\n) ENGINE=InnoDB;\nINSERT INTO files (filename) VALUES ('example.txt');"
        }
    ],
    "directory_tree": "CVE-2020-11652/\n  custom/\n    docker-compose.yml\n    app/\n      Dockerfile\n      requirements.txt\n      app.py\n    db/\n      init.sql"
}