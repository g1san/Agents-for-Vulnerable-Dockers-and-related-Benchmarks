{
    "files": [
        {
            "location": "./../../dockers/CVE-2021-28164/custom/docker-compose.yml",
            "content": "version: '3.8'\n\nservices:\n  jetty:\n    build:\n      context: ./app\n    ports:\n      - \"8080:8080\"\n    depends_on:\n      - db\n    environment:\n      - DATABASE_HOST=db\n      - DATABASE_PORT=5432\n      - DATABASE_USER=postgres\n      - DATABASE_PASSWORD=example\n      - DATABASE_NAME=vulndb\n\n  db:\n    image: postgres:9.6-alpine\n    restart: always\n    environment:\n      POSTGRES_PASSWORD: example\n      POSTGRES_DB: vulndb\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - db-data:/var/lib/postgresql/data\n      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql\n    healthcheck:\n      test: [\"CMD\", \"pg_isready\", \"-U\", \"postgres\"]\n      interval: 5s\n      timeout: 5s\n      retries: 5\n\nvolumes:\n  db-data:"
        },
        {
            "location": "./../../dockers/CVE-2021-28164/custom/app/Dockerfile",
            "content": "FROM jetty:9.4.41-jdk11\n\n# Copy the vulnerable web application (exploded WAR) into Jetty's webapps directory\nCOPY webapp/ /var/lib/jetty/webapps/ROOT/\n\nEXPOSE 8080"
        },
        {
            "location": "./../../dockers/CVE-2021-28164/custom/app/webapp/index.html",
            "content": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Vulnerable Jetty Demo</title>\n</head>\n<body>\n    <h1>Jetty CVE-2021-28164 Demo</h1>\n    <p>This application is intended to reproduce the Jetty URI normalization vulnerability.</p>\n</body>\n</html>"
        },
        {
            "location": "./../../dockers/CVE-2021-28164/custom/app/webapp/WEB-INF/web.xml",
            "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee\n                             http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\"\n         version=\"3.1\">\n    <display-name>Vulnerable Jetty Demo</display-name>\n</web-app>"
        },
        {
            "location": "./../../dockers/CVE-2021-28164/custom/app/package.json",
            "content": "{\n  \"name\": \"vulnerable-jetty-demo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Demo app for CVE-2021-28164\",\n  \"main\": \"server.js\",\n  \"scripts\": {\n    \"start\": \"node server.js\"\n  },\n  \"dependencies\": {\n    \"pg\": \"^8.7.1\"\n  }\n}"
        },
        {
            "location": "./../../dockers/CVE-2021-28164/custom/app/server.js",
            "content": "const http = require('http');\nconst { Client } = require('pg');\n\nconst client = new Client({\n  host: process.env.DATABASE_HOST || 'db',\n  port: process.env.DATABASE_PORT || 5432,\n  user: process.env.DATABASE_USER || 'postgres',\n  password: process.env.DATABASE_PASSWORD || 'example',\n  database: process.env.DATABASE_NAME || 'vulndb'\n});\n\nclient.connect();\n\nconst server = http.createServer(async (req, res) => {\n  const url = new URL(req.url, `http://${req.headers.host}`);\n  const q = url.searchParams.get('q');\n  if (!q) {\n    res.writeHead(400, { 'Content-Type': 'text/plain' });\n    return res.end('Missing query parameter \"q\"');\n  }\n  try {\n    const result = await client.query(q);\n    res.writeHead(200, { 'Content-Type': 'application/json' });\n    res.end(JSON.stringify(result.rows));\n  } catch (err) {\n    res.writeHead(500, { 'Content-Type': 'text/plain' });\n    res.end('Error: ' + err.message);\n  }\n});\n\nserver.listen(8080, () => {\n  console.log('Vulnerable app listening on port 8080');\n});"
        },
        {
            "location": "./../../dockers/CVE-2021-28164/custom/app/wait-for-db.sh",
            "content": "#!/bin/sh\n# wait-for-db.sh \u2013 blocks until PostgreSQL is ready or exits with error after timeout\nHOST=${DATABASE_HOST:-db}\nPORT=${DATABASE_PORT:-5432}\nUSER=${DATABASE_USER:-postgres}\nMAX_RETRIES=30\nSLEEP_INTERVAL=2\n\necho \"Waiting for PostgreSQL at $HOST:$PORT...\"\nfor i in $(seq 1 $MAX_RETRIES); do\n  if pg_isready -h \"$HOST\" -p \"$PORT\" -U \"$USER\" >/dev/null 2>&1; then\n    echo \"PostgreSQL is ready (attempt $i).\"\n    exit 0\n  fi\n  echo \"PostgreSQL not ready yet (attempt $i/$MAX_RETRIES). Sleeping $SLEEP_INTERVAL sec...\"\n  sleep $SLEEP_INTERVAL\ndone\n\necho \"ERROR: PostgreSQL did not become ready after $MAX_RETRIES attempts.\"\nexit 1"
        },
        {
            "location": "./../../dockers/CVE-2021-28164/custom/db/init.sql",
            "content": "CREATE TABLE users (\n  id SERIAL PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  password VARCHAR(100) NOT NULL\n);\n\nINSERT INTO users (username, password) VALUES\n('alice', 'password123'),\n('bob', 'qwerty'),\n('charlie', 'letmein');\n"
        }
    ],
    "directory_tree": "CVE-2021-28164/custom"
}