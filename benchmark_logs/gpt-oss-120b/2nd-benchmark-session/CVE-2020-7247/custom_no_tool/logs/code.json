{
    "files": [
        {
            "location": "./../../dockers/CVE-2020-7247/custom_no_tool/docker-compose.yml",
            "content": "services:\n  web:\n    build:\n      context: ./app\n    ports:\n      - \"8080:5000\"\n    depends_on:\n      db:\n        condition: service_healthy\n    environment:\n      - FLASK_ENV=development\n  db:\n    image: mysql:5.7\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: example\n      MYSQL_DATABASE: testdb\n      MYSQL_USER: tester\n      MYSQL_PASSWORD: testerpw\n    volumes:\n      - db_data:/var/lib/mysql\n      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql\n    ports:\n      - \"3306:3306\"\n    healthcheck:\n      test: [\"CMD\", \"mysqladmin\", \"ping\", \"-h\", \"localhost\"]\n      interval: 5s\n      timeout: 2s\n      retries: 10\n  redis:\n    image: redis:5\n    ports:\n      - \"6379:6379\"\n  smtp:\n    image: opensmtpd/opensmtpd:6.6.1\n    ports:\n      - \"25:25\"\n    healthcheck:\n      test: [\"CMD-SHELL\", \"smtpctl status || exit 1\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\nvolumes:\n  db_data:"
        },
        {
            "location": "./../../dockers/CVE-2020-7247/custom_no_tool/app/Dockerfile",
            "content": "FROM python:3.8-slim\nWORKDIR /app\n\n# Install system dependencies\nRUN apt-get update && \\\n    apt-get install -y --no-install-recommends \\\n        mysql-client \\\n        build-essential \\\n        python3-dev && \\\n    rm -rf /var/lib/apt/lists/*\n\n# Install Python dependencies (no strict version pins)\nRUN pip install --no-cache-dir Flask Jinja2 markupsafe redis mysql-connector-python itsdangerous\n\n# Copy application code and start\u2011up script\nCOPY wait-for-db.sh /usr/local/bin/wait-for-db.sh\nCOPY app.py .\n\n# Ensure the script is executable\nRUN chmod +x /usr/local/bin/wait-for-db.sh\n\nEXPOSE 5000\n\n# Use the wait\u2011for\u2011db script to start the Flask app\nCMD [\"sh\", \"/usr/local/bin/wait-for-db.sh\"]"
        },
        {
            "location": "./../../dockers/CVE-2020-7247/custom_no_tool/app/wait-for-db.sh",
            "content": "#!/bin/sh\n# Wait for MySQL to be ready before starting the Flask application\nset -e\nHOST=db\nPORT=3306\nMAX_ATTEMPTS=30\nattempt=1\nuntil mysqladmin ping -h\"$HOST\" -P\"$PORT\" --silent; do\n  if [ $attempt -ge $MAX_ATTEMPTS ]; then\n    echo \"MySQL not reachable after $attempt attempts, exiting.\"\n    exit 1\n  fi\n  echo \"Waiting for MySQL... ($attempt/$MAX_ATTEMPTS)\"\n  attempt=$((attempt + 1))\n  sleep 2\ndone\necho \"MySQL is up \u2013 launching Flask app\"\nexec python app.py"
        },
        {
            "location": "./../../dockers/CVE-2020-7247/custom_no_tool/app/app.py",
            "content": "import os\nimport time\nfrom flask import Flask, request, abort, send_file\nimport mysql.connector\nimport redis\n\napp = Flask(__name__)\n\n# Database configuration (used for lazy connections)\n_db_config = {\n    'user': 'tester',\n    'password': 'testerpw',\n    'host': 'db',\n    'database': 'testdb'\n}\n\n# Redis connection (ready immediately)\n_r = redis.Redis(host='redis', port=6379, db=0)\n\n\ndef _get_db_connection(retries: int = 5, delay: int = 2):\n    \"\"\"Attempt to obtain a MySQL connection, retrying until the DB is ready.\n    Raises the last exception if all attempts fail.\n    \"\"\"\n    last_err = None\n    for _ in range(retries):\n        try:\n            conn = mysql.connector.connect(**_db_config)\n            return conn\n        except mysql.connector.Error as err:\n            last_err = err\n            time.sleep(delay)\n    raise last_err\n\n@app.route('/')\ndef index():\n    return \"Vulnerable Flask App for CVE-2020-7247\"\n\n# Vulnerable endpoint: path traversal via 'file' query param (CVE-2020-7247 demonstration)\n@app.route('/read')\ndef read_file():\n    filename = request.args.get('file')\n    if not filename:\n        abort(400, 'Missing file parameter')\n    # NOTE: This is intentionally insecure for testing CVE-2020-7247\n    safe_path = os.path.abspath(os.path.join('/app', filename))\n    if not safe_path.startswith('/app'):\n        abort(403, 'Forbidden')\n    try:\n        return send_file(safe_path)\n    except Exception as e:\n        abort(404, str(e))\n\n# Simple DB test endpoint\n@app.route('/users')\ndef list_users():\n    try:\n        cnx = _get_db_connection()\n        cursor = cnx.cursor()\n        cursor.execute('SELECT id, name FROM users')\n        rows = cursor.fetchall()\n        cursor.close()\n        cnx.close()\n        return {'users': [{'id': r[0], 'name': r[1]} for r in rows]}\n    except Exception as exc:\n        abort(500, f'Database error: {exc}')\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
        },
        {
            "location": "./../../dockers/CVE-2020-7247/custom_no_tool/db/init.sql",
            "content": "CREATE DATABASE IF NOT EXISTS testdb;\nUSE testdb;\nCREATE TABLE IF NOT EXISTS users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(50) NOT NULL\n);\nINSERT INTO users (name) VALUES ('alice'), ('bob'), ('charlie');"
        }
    ],
    "directory_tree": "CVE-2020-7247/custom_no_tool"
}