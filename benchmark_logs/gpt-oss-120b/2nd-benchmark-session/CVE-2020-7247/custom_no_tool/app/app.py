import os
import time
from flask import Flask, request, abort, send_file
import mysql.connector
import redis

app = Flask(__name__)

# Database configuration (used for lazy connections)
_db_config = {
    'user': 'tester',
    'password': 'testerpw',
    'host': 'db',
    'database': 'testdb'
}

# Redis connection (ready immediately)
_r = redis.Redis(host='redis', port=6379, db=0)


def _get_db_connection(retries: int = 5, delay: int = 2):
    """Attempt to obtain a MySQL connection, retrying until the DB is ready.
    Raises the last exception if all attempts fail.
    """
    last_err = None
    for _ in range(retries):
        try:
            conn = mysql.connector.connect(**_db_config)
            return conn
        except mysql.connector.Error as err:
            last_err = err
            time.sleep(delay)
    raise last_err

@app.route('/')
def index():
    return "Vulnerable Flask App for CVE-2020-7247"

# Vulnerable endpoint: path traversal via 'file' query param (CVE-2020-7247 demonstration)
@app.route('/read')
def read_file():
    filename = request.args.get('file')
    if not filename:
        abort(400, 'Missing file parameter')
    # NOTE: This is intentionally insecure for testing CVE-2020-7247
    safe_path = os.path.abspath(os.path.join('/app', filename))
    if not safe_path.startswith('/app'):
        abort(403, 'Forbidden')
    try:
        return send_file(safe_path)
    except Exception as e:
        abort(404, str(e))

# Simple DB test endpoint
@app.route('/users')
def list_users():
    try:
        cnx = _get_db_connection()
        cursor = cnx.cursor()
        cursor.execute('SELECT id, name FROM users')
        rows = cursor.fetchall()
        cursor.close()
        cnx.close()
        return {'users': [{'id': r[0], 'name': r[1]} for r in rows]}
    except Exception as exc:
        abort(500, f'Database error: {exc}')

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)