package com.example.demo;

import org.springframework.expression.ExpressionParser;
import org.springframework.expression.spel.standard.SpelExpressionParser;
import org.springframework.expression.spel.support.StandardEvaluationContext;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import java.util.Map;

@RestController
public class ExploitController {

    @PostMapping("/function")
    public String vulnerableEndpoint(@RequestBody Map<String, String> payload) {
        // The vulnerable logic: directly evaluate the 'function' field via SpEL
        String expression = payload.get("function");
        if (expression == null) {
            return "No function provided";
        }
        ExpressionParser parser = new SpelExpressionParser();
        StandardEvaluationContext context = new StandardEvaluationContext();
        // No restrictions â€“ this is the insecure configuration that allows CVE-2022-22963 exploitation
        Object result = parser.parseExpression(expression).getValue(context);
        return result == null ? "null" : result.toString();
    }
}