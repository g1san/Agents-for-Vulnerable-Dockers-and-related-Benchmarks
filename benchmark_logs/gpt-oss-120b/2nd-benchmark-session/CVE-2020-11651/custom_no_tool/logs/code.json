{
    "files": [
        {
            "location": "./../../dockers/CVE-2020-11651/custom_no_tool/docker-compose.yml",
            "content": "services:\n  web:\n    build: ./app\n    ports:\n      - \"5000:5000\"\n    environment:\n      - DATABASE_HOST=db\n      - DATABASE_USER=root\n      - DATABASE_PASSWORD=example\n    depends_on:\n      - db\n  db:\n    image: mysql:5.7\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: example\n      MYSQL_DATABASE: testdb\n    ports:\n      - \"3306:3306\"\n    volumes:\n      - db_data:/var/lib/mysql\n      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql\n  salt-master:\n    image: saltstack/salt:3000.1\n    container_name: salt-master\n    ports:\n      - \"4505:4505\"\n      - \"4506:4506\"\n    environment:\n      - SALT_MASTER=yes\n      - SALT_API_ENABLE=yes\n    command: salt-master\n    depends_on:\n      - web\nvolumes:\n  db_data:"
        },
        {
            "location": "./../../dockers/CVE-2020-11651/custom_no_tool/app/Dockerfile",
            "content": "FROM python:3.7-slim\nWORKDIR /app\nRUN apt-get update && apt-get install -y gcc libmariadb-dev netcat-openbsd && rm -rf /var/lib/apt/lists/*\nCOPY requirements.txt ./\nRUN pip install --no-cache-dir -r requirements.txt\nCOPY app.py ./\nCOPY wait-for-db.sh ./\nRUN chmod +x wait-for-db.sh\nEXPOSE 5000\nCMD [\"./wait-for-db.sh\", \"python\", \"app.py\"]"
        },
        {
            "location": "./../../dockers/CVE-2020-11651/custom_no_tool/app/requirements.txt",
            "content": "Flask==2.2.5\nmysql-connector-python==8.0.23"
        },
        {
            "location": "./../../dockers/CVE-2020-11651/custom_no_tool/app/app.py",
            "content": "import os\nimport json\nfrom flask import Flask, request, jsonify\nimport mysql.connector\n\napp = Flask(__name__)\n\n# Database connection configuration\ndb_config = {\n    'host': os.getenv('DATABASE_HOST', 'db'),\n    'user': os.getenv('DATABASE_USER', 'root'),\n    'password': os.getenv('DATABASE_PASSWORD', 'example'),\n    'database': 'testdb'\n}\n\ndef get_db_connection():\n    return mysql.connector.connect(**db_config)\n\n@app.route('/')\ndef index():\n    return \"Secure Flask app for CVE-2020-11651 demonstration\"\n\n# Removed insecure eval endpoint\n\n@app.route('/users')\ndef list_users():\n    try:\n        conn = get_db_connection()\n        cursor = conn.cursor(dictionary=True)\n        cursor.execute('SELECT id, username FROM users')\n        rows = cursor.fetchall()\n    except mysql.connector.Error as err:\n        return jsonify({'error': str(err)}), 500\n    finally:\n        if 'cursor' in locals():\n            cursor.close()\n        if 'conn' in locals() and conn.is_connected():\n            conn.close()\n    return jsonify(rows)\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
        },
        {
            "location": "./../../dockers/CVE-2020-11651/custom_no_tool/app/wait-for-db.sh",
            "content": "#!/bin/sh\nhost=\"${DATABASE_HOST:-db}\"\nport=3306\n# Wait until MySQL is reachable\nwhile ! nc -z \"$host\" \"$port\"; do\n  echo \"Waiting for MySQL at $host:$port...\"\n  sleep 2\ndone\n# Execute the command passed as arguments\nexec \"$@\""
        },
        {
            "location": "./../../dockers/CVE-2020-11651/custom_no_tool/db/init.sql",
            "content": "CREATE TABLE IF NOT EXISTS users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    password VARCHAR(255) NOT NULL\n);\nINSERT INTO users (username, password) VALUES\n    ('alice', 'password1'),\n    ('bob', 'password2');"
        }
    ],
    "directory_tree": "CVE-2020-11651/custom_no_tool"
}