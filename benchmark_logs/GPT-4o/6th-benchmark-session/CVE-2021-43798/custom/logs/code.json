{
    "files": [
        {
            "location": "./../../dockers/CVE-2021-43798/custom/docker-compose.yml",
            "content": "services:\n  grafana:\n    image: grafana/grafana:8.3.1\n    ports:\n      - \"3000:3000\"\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=admin\n      - GF_DATABASE_TYPE=mysql\n      - GF_DATABASE_HOST=db:3306\n      - GF_DATABASE_NAME=grafana\n      - GF_DATABASE_USER=grafana\n      - GF_DATABASE_PASSWORD=grafana\n    depends_on:\n      db:\n        condition: service_healthy\n    volumes:\n      - grafana-storage:/var/lib/grafana\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://grafana:3000/api/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 5\n    command: [\"/bin/sh\", \"-c\", \"/wait-for-it.sh db:3306 -- /run.sh\"]\n    entrypoint: [\"/bin/sh\", \"-c\", \"chmod +x /wait-for-it.sh && /wait-for-it.sh db:3306 -- /run.sh\"]\n\n  db:\n    image: mysql:5.7\n    environment:\n      MYSQL_ROOT_PASSWORD: example\n      MYSQL_DATABASE: grafana\n      MYSQL_USER: grafana\n      MYSQL_PASSWORD: grafana\n    command: --init-file /docker-entrypoint-initdb.d/init.sql\n    volumes:\n      - db-data:/var/lib/mysql\n      - ./init.sql:/docker-entrypoint-initdb.d/init.sql\n    healthcheck:\n      test: [\"CMD\", \"mysqladmin\", \"ping\", \"-h\", \"localhost\"]\n      interval: 30s\n      timeout: 10s\n      retries: 5\n\n  nginx:\n    image: nginx:1.21.3\n    ports:\n      - \"8080:80\"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf\n    depends_on:\n      grafana:\n        condition: service_healthy\n\nvolumes:\n  grafana-storage:\n  db-data:\n"
        },
        {
            "location": "./../../dockers/CVE-2021-43798/custom/nginx.conf",
            "content": "events {}\nhttp {\n    server {\n        listen 80;\n\n        location / {\n            proxy_pass http://grafana:3000;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            # Add path normalization to mitigate path traversal\n            proxy_redirect off;\n            proxy_set_header Accept-Encoding \"\";\n            sub_filter_once off;\n            sub_filter_types *;\n            sub_filter \"../\" \"/\";\n        }\n    }\n}\n"
        },
        {
            "location": "./../../dockers/CVE-2021-43798/custom/init.sql",
            "content": "CREATE TABLE IF NOT EXISTS users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL UNIQUE\n);\n\nINSERT INTO users (name, email) VALUES ('Alice', 'alice@example.com');\nINSERT INTO users (name, email) VALUES ('Bob', 'bob@example.com');\n"
        },
        {
            "location": "./../../dockers/CVE-2021-43798/custom/wait-for-it.sh",
            "content": "#!/usr/bin/env bash\n#   Use this script to test if a given TCP host/port are available\n\n# The MIT License (MIT)\n#\n# Copyright (c) 2016 Vincent Driessen\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n# THE SOFTWARE.\n\nTIMEOUT=15\nQUIET=0\nHOST=\"\"\nPORT=\"\"\n\nechoerr() {\n    if [ \"$QUIET\" -ne 1 ]; then echo \"$@\" 1>&2; fi\n}\n\nusage() {\n    cat << USAGE >&2\nUsage:\n    $0 host:port [-t timeout] [-- command args]\n    -q | --quiet                        Do not output any status messages\n    -t TIMEOUT | --timeout=timeout      Timeout in seconds, zero for no timeout\n    -- COMMAND ARGS                     Execute command with args after the test finishes\n\nUSAGE\n    exit 1\n}\n\nwait_for() {\n    if [ \"$TIMEOUT\" -gt 0 ]; then\n        echoerr \"waiting $TIMEOUT seconds for $HOST:$PORT\"\n    else\n        echoerr \"waiting for $HOST:$PORT without a timeout\"\n    fi\n    START_TS=$(date +%s)\n    while :\n    do\n        if [ \"$ISBUSY\" = \"true\" ]; then\n            nc -z $HOST $PORT\n            RESULT=$?\n        else\n            (echo > /dev/tcp/$HOST/$PORT) >/dev/null 2>&1\n            RESULT=$?\n        fi\n        if [ $RESULT -eq 0 ]; then\n            END_TS=$(date +%s)\n            echoerr \"$HOST:$PORT is available after $((END_TS - START_TS)) seconds\"\n            break\n        fi\n        sleep 1\n    done\n    return $RESULT\n}\n\nwait_for_wrapper() {\n    # In order to support SIGINT during timeout: http://unix.stackexchange.com/a/57692\n    if [ \"$QUIET\" -eq 1 ]; then\n        timeout $TIMEOUT $0 --quiet --child --host=$HOST --port=$PORT --timeout=$TIMEOUT &\n    else\n        timeout $TIMEOUT $0 --child --host=$HOST --port=$PORT --timeout=$TIMEOUT &\n    fi\n    PID=$!\n    trap \"kill -INT -$PID\" INT\n    wait $PID\n    RESULT=$?\n    if [ $RESULT -ne 0 ]; then\n        echoerr \"timeout occurred after waiting $TIMEOUT seconds for $HOST:$PORT\"\n    fi\n    return $RESULT\n}\n\nwhile [ $# -gt 0 ]\ndo\n    case \"$1\" in\n        *:* )\n        HOST=$(printf \"%s\" \"$1\" | cut -d : -f 1)\n        PORT=$(printf \"%s\" \"$1\" | cut -d : -f 2)\n        shift 1\n        ;;\n        -q | --quiet)\n        QUIET=1\n        shift 1\n        ;;\n        -t)\n        TIMEOUT=\"$2\"\n        if [ \"$TIMEOUT\" = \"\" ]; then break; fi\n        shift 2\n        ;;\n        --timeout=*)\n        TIMEOUT=$(printf \"%s\" \"$1\" | cut -d = -f 2)\n        shift 1\n        ;;\n        --child)\n        shift 1\n        ;;\n        --host=*)\n        HOST=$(printf \"%s\" \"$1\" | cut -d = -f 2)\n        shift 1\n        ;;\n        --port=*)\n        PORT=$(printf \"%s\" \"$1\" | cut -d = -f 2)\n        shift 1\n        ;;\n        --)\n        shift\n        break\n        ;;\n        *)\n        echoerr \"Unknown argument: $1\"\n        usage\n        ;;\n    esac\n\ndone\n\nif [ \"$HOST\" = \"\" -o \"$PORT\" = \"\" ]; then\n    echoerr \"Error: you need to provide a host and port to test.\"\n    usage\nfi\n\nif [ \"$ISBUSY\" = \"true\" ]; then\n    wait_for_wrapper\nelse\n    wait_for\nfi\n\nRESULT=$?\n\nif [ $# -gt 0 ]; then\n    exec \"$@\"\nelse\n    exit $RESULT\nfi\n"
        }
    ],
    "directory_tree": "CVE-2021-43798/\n\u251c\u2500\u2500 custom\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 docker-compose.yml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 init.sql\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 nginx.conf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 wait-for-it.sh\n"
}