#!/usr/bin/env bash
#   Use this script to test if a given TCP host/port are available

# The MIT License (MIT)
#
# Copyright (c) 2016 Vincent Driessen
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

TIMEOUT=15
QUIET=0
HOST=""
PORT=""

echoerr() {
    if [ "$QUIET" -ne 1 ]; then echo "$@" 1>&2; fi
}

usage() {
    cat << USAGE >&2
Usage:
    $0 host:port [-t timeout] [-- command args]
    -q | --quiet                        Do not output any status messages
    -t TIMEOUT | --timeout=timeout      Timeout in seconds, zero for no timeout
    -- COMMAND ARGS                     Execute command with args after the test finishes

USAGE
    exit 1
}

wait_for() {
    if [ "$TIMEOUT" -gt 0 ]; then
        echoerr "waiting $TIMEOUT seconds for $HOST:$PORT"
    else
        echoerr "waiting for $HOST:$PORT without a timeout"
    fi
    START_TS=$(date +%s)
    while :
    do
        if [ "$ISBUSY" = "true" ]; then
            nc -z $HOST $PORT
            RESULT=$?
        else
            (echo > /dev/tcp/$HOST/$PORT) >/dev/null 2>&1
            RESULT=$?
        fi
        if [ $RESULT -eq 0 ]; then
            END_TS=$(date +%s)
            echoerr "$HOST:$PORT is available after $((END_TS - START_TS)) seconds"
            break
        fi
        sleep 1
    done
    return $RESULT
}

wait_for_wrapper() {
    # In order to support SIGINT during timeout: http://unix.stackexchange.com/a/57692
    if [ "$QUIET" -eq 1 ]; then
        timeout $TIMEOUT $0 --quiet --child --host=$HOST --port=$PORT --timeout=$TIMEOUT &
    else
        timeout $TIMEOUT $0 --child --host=$HOST --port=$PORT --timeout=$TIMEOUT &
    fi
    PID=$!
    trap "kill -INT -$PID" INT
    wait $PID
    RESULT=$?
    if [ $RESULT -ne 0 ]; then
        echoerr "timeout occurred after waiting $TIMEOUT seconds for $HOST:$PORT"
    fi
    return $RESULT
}

while [ $# -gt 0 ]
do
    case "$1" in
        *:* )
        HOST=$(printf "%s" "$1" | cut -d : -f 1)
        PORT=$(printf "%s" "$1" | cut -d : -f 2)
        shift 1
        ;;
        -q | --quiet)
        QUIET=1
        shift 1
        ;;
        -t)
        TIMEOUT="$2"
        if [ "$TIMEOUT" = "" ]; then break; fi
        shift 2
        ;;
        --timeout=*)
        TIMEOUT=$(printf "%s" "$1" | cut -d = -f 2)
        shift 1
        ;;
        --child)
        shift 1
        ;;
        --host=*)
        HOST=$(printf "%s" "$1" | cut -d = -f 2)
        shift 1
        ;;
        --port=*)
        PORT=$(printf "%s" "$1" | cut -d = -f 2)
        shift 1
        ;;
        --)
        shift
        break
        ;;
        *)
        echoerr "Unknown argument: $1"
        usage
        ;;
    esac

done

if [ "$HOST" = "" -o "$PORT" = "" ]; then
    echoerr "Error: you need to provide a host and port to test."
    usage
fi

if [ "$ISBUSY" = "true" ]; then
    wait_for_wrapper
else
    wait_for
fi

RESULT=$?

if [ $# -gt 0 ]; then
    exec "$@"
else
    exit $RESULT
fi
