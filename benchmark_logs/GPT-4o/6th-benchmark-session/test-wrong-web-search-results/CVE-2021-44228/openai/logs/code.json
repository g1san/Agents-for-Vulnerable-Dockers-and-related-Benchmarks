{
    "files": [
        {
            "location": "./../../dockers/CVE-2021-44228/openai/docker-compose.yml",
            "content": "version: '3.7'\n\nservices:\n  vulnerable-app:\n    build: ./vulnerable-app\n    ports:\n      - \"8080:8080\"\n\n  ldap-server:\n    image: osixia/openldap:1.5.0\n    environment:\n      LDAP_ORGANISATION: \"Example\"\n      LDAP_DOMAIN: \"example.org\"\n      LDAP_ADMIN_PASSWORD: \"admin\"\n    ports:\n      - \"389:389\"\n    command: --copy-service\n\n  malicious-server:\n    build: ./malicious-server\n    ports:\n      - \"1389:1389\"\n"
        },
        {
            "location": "./../../dockers/CVE-2021-44228/openai/vulnerable-app/Dockerfile",
            "content": "FROM openjdk:8-jdk-alpine\n\nWORKDIR /app\n\nCOPY . .\n\nRUN ./gradlew build\n\nCMD [\"java\", \"-jar\", \"build/libs/vulnerable-app.jar\"]"
        },
        {
            "location": "./../../dockers/CVE-2021-44228/openai/vulnerable-app/build.gradle",
            "content": "plugins {\n    id 'java'\n    id 'application'\n}\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation 'org.apache.logging.log4j:log4j-core:2.14.1'\n    implementation 'org.apache.logging.log4j:log4j-api:2.14.1'\n}\n\napplication {\n    mainClassName = 'com.example.VulnerableApp'\n}"
        },
        {
            "location": "./../../dockers/CVE-2021-44228/openai/vulnerable-app/src/main/java/com/example/VulnerableApp.java",
            "content": "package com.example;\n\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class VulnerableApp extends HttpServlet {\n    private static final Logger logger = LogManager.getLogger(VulnerableApp.class);\n\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String userAgent = req.getHeader(\"User-Agent\");\n        logger.info(\"Received request with User-Agent: {}\", userAgent);\n\n        OutputStream os = resp.getOutputStream();\n        os.write(\"<h1>Hello, this is a vulnerable app!</h1>\".getBytes());\n        os.flush();\n        os.close();\n    }\n}"
        },
        {
            "location": "./../../dockers/CVE-2021-44228/openai/malicious-server/Dockerfile",
            "content": "FROM openjdk:8-jdk-alpine\n\nWORKDIR /app\n\nCOPY . .\n\nCMD [\"java\", \"-cp\", \"/app\", \"ExploitServer\"]"
        },
        {
            "location": "./../../dockers/CVE-2021-44228/openai/malicious-server/ExploitServer.java",
            "content": "import com.sun.net.httpserver.HttpServer;\nimport com.sun.net.httpserver.HttpHandler;\nimport com.sun.net.httpserver.HttpExchange;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.net.InetSocketAddress;\n\npublic class ExploitServer {\n    public static void main(String[] args) throws IOException {\n        HttpServer server = HttpServer.create(new InetSocketAddress(1389), 0);\n        server.createContext(\"/Exploit\", new ExploitHandler());\n        server.setExecutor(null);\n        server.start();\n        System.out.println(\"Malicious server is running...\");\n    }\n\n    static class ExploitHandler implements HttpHandler {\n        @Override\n        public void handle(HttpExchange exchange) throws IOException {\n            String response = \"Exploit code here\";\n            exchange.sendResponseHeaders(200, response.length());\n            OutputStream os = exchange.getResponseBody();\n            os.write(response.getBytes());\n            os.close();\n        }\n    }\n}"
        }
    ],
    "directory_tree": "CVE-2021-44228/\n\u2514\u2500\u2500 openai/\n    \u251c\u2500\u2500 docker-compose.yml\n    \u251c\u2500\u2500 vulnerable-app/\n    \u2502   \u251c\u2500\u2500 Dockerfile\n    \u2502   \u251c\u2500\u2500 build.gradle\n    \u2502   \u2514\u2500\u2500 src/\n    \u2502       \u2514\u2500\u2500 main/\n    \u2502           \u2514\u2500\u2500 java/\n    \u2502               \u2514\u2500\u2500 com/\n    \u2502                   \u2514\u2500\u2500 example/\n    \u2502                       \u2514\u2500\u2500 VulnerableApp.java\n    \u2514\u2500\u2500 malicious-server/\n        \u251c\u2500\u2500 Dockerfile\n        \u2514\u2500\u2500 ExploitServer.java"
}