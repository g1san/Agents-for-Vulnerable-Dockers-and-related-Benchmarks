package com.example.vulnerableapp;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.core.config.Configurator;
import org.apache.logging.log4j.core.config.DefaultConfiguration;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

@WebServlet("/log")
public class VulnerableApp extends HttpServlet {
    private static final Logger logger = LogManager.getLogger(VulnerableApp.class);

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String userInput = request.getParameter("input");
        logger.info("User input: " + userInput);
        response.getWriter().println("Logged user input: " + userInput);
    }

    public static void main(String[] args) {
        Configurator.initialize(new DefaultConfiguration());
        org.apache.catalina.startup.Tomcat tomcat = new org.apache.catalina.startup.Tomcat();
        tomcat.setPort(8080);
        tomcat.getConnector();
        tomcat.addWebapp("", "/app/src/main/webapp");
        try {
            tomcat.start();
            tomcat.getServer().await();
        } catch (Exception e) {
            logger.error("Failed to start Tomcat server", e);
        }
    }
}
