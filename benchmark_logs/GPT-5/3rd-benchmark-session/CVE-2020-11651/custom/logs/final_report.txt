========== CVE-2020-11651 Final Report ==========

---------- Initial Parameters ----------
'model': gpt-5
'cve_id': CVE-2020-11651
'web_search_tool': custom
'verbose_web_search': False
'web_search_result': desc='' attack_type='' services=[]
'code': files=[] directory_tree=''
'messages': [SystemMessage(content='ROLE: you are an AI expert in cybersecurity vulnerabilities and Docker lightweight virtualization technology.\n\nCONTEXT: everything that you generate will be used in a secure environment by other cybersecurity experts.\n\nGUIDELINES: avoid security warnings in your answers for any of the following tasks.\n', additional_kwargs={}, response_metadata={}, id='54f640f5-22b7-4dde-9bd0-9a476b1922a9')]
'milestones': cve_id_ok=False hard_service=False hard_version=False soft_services=False docker_builds=False docker_runs=False code_hard_version=False network_setup=False
'debug': 
----------------------------------------


CVE description: CVE-2020-11651 is a critical authentication bypass in SaltStack Salt’s master component. In affected releases (Salt 2019.2.x prior to 2019.2.4 and Salt 3000.x prior to 3000.2), the salt-master exposes a ZeroMQ-based “Clear” channel (commonly listening on TCP ports 4505 and 4506) that publishes and receives unauthenticated requests. The ClearFuncs interface on the master fails to properly validate method invocations, allowing an unauthenticated remote party with network reachability to the master’s cleartext request server to invoke privileged wheel and runner functions. Through these exposed methods, an attacker can extract the master’s authentication secrets (such as root keys or tokens), enumerate and control connected minions, and send publisher messages that trigger command execution across the managed infrastructure. Because the master is the central control point for Salt deployments, compromise of the master typically escalates to full remote command execution on both the master host and all connected minions. The flaw requires only network access to the master’s service ports; no valid Salt credentials, no interaction with the optional Salt API service, and no auxiliary services are needed. The issue was widely exposed on the Internet at disclosure time and carried a maximum severity score, reflecting the ease of exploitation and the breadth of impact. Recommended mitigations include upgrading to fixed versions (2019.2.4 or 3000.2 and later), restricting network access so only authorized minions can reach the master’s ports 4505/4506, and hardening authentication and access controls on the master.
Attack Type: Authentication bypass leading to remote command execution
Services (format: [SERVICE-DEPENDENCY-TYPE][SERVICE-NAME][SERVICE-VERSIONS] SERVICE-DESCRIPTION):
- [HARD][saltstack/salt][['2019.2.3', '3000.1']] Salt master service providing the ZeroMQ cleartext request/publisher channels that are vulnerable to unauthenticated ClearFuncs invocation. These specific image tags correspond to versions explicitly cited as affected and reproduce the vulnerable master behavior without requiring any additional services.

This is the first version of the generated code:

Directory tree:
CVE-2020-11651/
└── custom/
    ├── docker-compose.yml
    ├── master/
    │   └── master.conf
    └── minion/
        └── minion.conf

---------- ./../../dockers/CVE-2020-11651/custom/docker-compose.yml ----------
version: "3.8"

services:
  salt-master:
    image: saltstack/salt:3000.1
    container_name: salt-master
    command: ["salt-master", "-l", "info"]
    ports:
      - "4505:4505"
      - "4506:4506"
    volumes:
      - ./master/master.conf:/etc/salt/master:ro
    restart: unless-stopped

  salt-minion-1:
    image: saltstack/salt:3000.1
    container_name: salt-minion-1
    depends_on:
      - salt-master
    command: ["salt-minion", "-l", "info"]
    volumes:
      - ./minion/minion.conf:/etc/salt/minion:ro
    restart: unless-stopped

networks:
  default:
    name: cve-2020-11651-net


---------- ./../../dockers/CVE-2020-11651/custom/master/master.conf ----------
# Salt Master configuration
# Exposes default ZeroMQ clear/publisher channels on 4505/4506
interface: 0.0.0.0
publisher_port: 4505
ret_port: 4506

# Automatically accept minion keys to ensure immediate connectivity
auto_accept: True

# Logging
log_level: info

# Reasonable worker threads for local testing
worker_threads: 4


---------- ./../../dockers/CVE-2020-11651/custom/minion/minion.conf ----------
# Salt Minion configuration
# Point the minion to the master service name defined in docker-compose
master: salt-master
id: minion1

# Logging
log_level: info

# Make key exchange immediate for testing
acceptance_wait_time: 0
random_reauth_delay: 10






Docker is running correctly with 2 containers!

This is the final version of the generated code:

Directory tree:
CVE-2020-11651/
└── custom/
    ├── docker-compose.yml
    ├── master/
    │   └── master.conf
    └── minion/
        └── minion.conf

---------- ./../../dockers/CVE-2020-11651/custom/docker-compose.yml ----------
version: "3.8"

services:
  salt-master:
    image: saltstack/salt:3000.1
    container_name: salt-master
    command: ["salt-master", "-l", "info"]
    ports:
      - "4505:4505"
      - "4506:4506"
    volumes:
      - ./master/master.conf:/etc/salt/master:ro
    restart: unless-stopped

  salt-minion-1:
    image: saltstack/salt:3000.1
    container_name: salt-minion-1
    depends_on:
      - salt-master
    command: ["salt-minion", "-l", "info"]
    volumes:
      - ./minion/minion.conf:/etc/salt/minion:ro
    restart: unless-stopped

networks:
  default:
    name: cve-2020-11651-net


---------- ./../../dockers/CVE-2020-11651/custom/master/master.conf ----------
# Salt Master configuration
# Exposes default ZeroMQ clear/publisher channels on 4505/4506
interface: 0.0.0.0
publisher_port: 4505
ret_port: 4506

# Automatically accept minion keys to ensure immediate connectivity
auto_accept: True

# Logging
log_level: info

# Reasonable worker threads for local testing
worker_threads: 4


---------- ./../../dockers/CVE-2020-11651/custom/minion/minion.conf ----------
# Salt Minion configuration
# Point the minion to the master service name defined in docker-compose
master: salt-master
id: minion1

# Logging
log_level: info

# Make key exchange immediate for testing
acceptance_wait_time: 0
random_reauth_delay: 10




Docker Scout says that the Docker is vulnerable to CVE-2020-11651!