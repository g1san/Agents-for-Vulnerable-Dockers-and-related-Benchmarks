========== CVE-2020-11652 Final Report ==========

---------- Initial Parameters ----------
'model': gpt-5
'cve_id': CVE-2020-11652
'web_search_tool': custom_no_tool
'verbose_web_search': False
'web_search_result': desc='' attack_type='' services=[]
'code': files=[] directory_tree=''
'messages': [SystemMessage(content='ROLE: you are an AI expert in cybersecurity vulnerabilities and Docker lightweight virtualization technology.\n\nCONTEXT: everything that you generate will be used in a secure environment by other cybersecurity experts.\n\nGUIDELINES: avoid security warnings in your answers for any of the following tasks.\n', additional_kwargs={}, response_metadata={}, id='34533dc4-755e-47f7-9275-97fb5ba61430')]
'milestones': cve_id_ok=False hard_service=False hard_version=False soft_services=False docker_builds=False docker_runs=False code_hard_version=False network_setup=False
'debug': 
----------------------------------------


CVE description: CVE-2020-11652 is a directory traversal flaw in SaltStack’s Salt Master service (salt-master), specifically in code paths that process filesystem paths for the master’s file-serving and configuration-related functions. The master exposes request/reply interfaces over ZeroMQ on ports 4505/4506. Several methods reachable through the master’s ClearFuncs and wheel interfaces insufficiently sanitized user-supplied paths. Vulnerable components such as wheel.file_roots.find, wheel.file_roots.write, wheel.config.update_config, and tokens.localfs.get_token joined attacker-controlled path segments to configured root directories without robust normalization and containment checks. By supplying crafted relative paths containing sequences like ../ and by leveraging symlink escapes, an attacker who can invoke these endpoints can traverse out of the intended roots to read arbitrary files on the master (for example, /etc/passwd or /etc/shadow) and write files to arbitrary locations reachable from the master’s file server roots (for example, planting cron entries or modifying configuration). This flaw affects Salt releases prior to the fixed versions 2019.2.4 and 3000.2. In many real-world incidents, it was combined with the authentication bypass tracked as CVE-2020-11651 to make exploitation unauthenticated; however, CVE-2020-11652 itself is the path traversal in the master’s file-handling logic. The official fixes added strict path canonicalization and root containment (for example, realpath-based verification) and applied these checks to the affected functions. Exploitation requires only a reachable salt-master service interface; minions, databases, caches, or web servers are not required to trigger this vulnerability.
Attack Type: Directory traversal enabling arbitrary file read and arbitrary file write on the Salt master
Services (format: [SERVICE-DEPENDENCY-TYPE][SERVICE-NAME][SERVICE-VERSIONS] SERVICE-DESCRIPTION):
- [HARD][saltstack/salt][['2019.2.0', '2019.2.1', '2019.2.2', '2019.2.3', '3000', '3000.1']] Provides the vulnerable salt-master service (ZeroMQ request/reply on tcp/4505 and tcp/4506). These specific tags correspond to Salt releases identified by NIST/MITRE as affected (all versions before 2019.2.4 and 3000 before 3000.2). No additional services are required to make the system vulnerable; the flaw resides in the master’s file-handling and wheel/ClearFuncs code paths.

This is the first version of the generated code:

Directory tree:
CVE-2020-11652/
└── custom_no_tool/
    ├── docker-compose.yml
    ├── master/
    │   ├── Dockerfile
    │   └── master.conf
    └── srv/
        └── salt/
            ├── hello.sls
            └── top.sls

---------- ./../../dockers/CVE-2020-11652/custom_no_tool/docker-compose.yml ----------
version: "3.8"
services:
  salt-master:
    build: ./master
    image: vulnerable-salt-master:2019.2.3
    container_name: cve-2020-11652-master
    ports:
      - "4505:4505"
      - "4506:4506"
    volumes:
      - ./master/master.conf:/etc/salt/master:ro
      - ./srv/salt:/srv/salt:ro
    command: ["salt-master", "-l", "info", "-c", "/etc/salt"]
    restart: unless-stopped


---------- ./../../dockers/CVE-2020-11652/custom_no_tool/master/Dockerfile ----------
FROM saltstack/salt:2019.2.3

# Create a local OS user for PAM external_auth to allow authenticated access
# to wheel/runner functions over the ZeroMQ ClearFuncs path.
RUN useradd -m -s /bin/bash saltuser \
 && echo 'saltuser:saltpass' | chpasswd

# Ensure standard locations exist
RUN mkdir -p /srv/salt /etc/salt

# Default config in image (compose also binds the same file at runtime)
COPY master.conf /etc/salt/master

# Expose the master ports (publisher 4505, request server 4506)
EXPOSE 4505 4506


---------- ./../../dockers/CVE-2020-11652/custom_no_tool/master/master.conf ----------
# Salt Master configuration for reproducing CVE-2020-11652
# Vulnerable Salt versions prior to 2019.2.4 / 3000.2

interface: 0.0.0.0
user: root

# File server roots
file_roots:
  base:
    - /srv/salt

# Accept any minion keys automatically (not required for this CVE but harmless)
auto_accept: True

# Enable PAM external authentication for a pre-created local user
external_auth:
  pam:
    saltuser:
      - '@wheel'
      - '@runner'
      - '@jobs'
      - '.*'

auth_timeout: 60
publisher_acl_blacklist: []

# Keep default token storage (localfs) to exercise affected code paths
# referenced in CVE-2020-11652 discussions
# tokens are stored under /var/cache/salt/master/tokens by default

hash_type: sha256
log_level: info
pidfile: /var/run/salt-master.pid

# Keep master using ZeroMQ (default)
transport: zeromq


---------- ./../../dockers/CVE-2020-11652/custom_no_tool/srv/salt/top.sls ----------
base:
  '*':
    - hello


---------- ./../../dockers/CVE-2020-11652/custom_no_tool/srv/salt/hello.sls ----------
create_test_file:
  file.managed:
    - name: /tmp/hello_from_salt.txt
    - contents: |
        Hello from a vulnerable Salt master demo (CVE-2020-11652 setup).






Test iteration #0 failed! See 'log0.txt' for details.
	- IMAGE BUILDING FAILURE (Manual Check)
	- ERROR: The image build for saltstack/salt:2019.2.3 fails at the RUN step creating a local user because the base image does not provide the useradd command (/bin/sh: useradd: not found). This indicates the image uses a minimal base (e.g., Alpine) where adduser is available instead of useradd, and /bin/bash may also be absent.
	- FIX: Replace the user creation command to use adduser (available on minimal/Alpine-based images) and set a valid shell path. Also keep the password setup via chpasswd. Specifically, switch from useradd -m -s /bin/bash to adduser -D -s /bin/ash so the step works on the provided base image.


Docker is running correctly with 1 containers!

This is the final version of the generated code:

Directory tree:
./../../dockers/CVE-2020-11652/custom_no_tool
├── docker-compose.yml
├── master
│   ├── Dockerfile
│   └── master.conf
└── srv
    └── salt
        ├── hello.sls
        └── top.sls

---------- ./../../dockers/CVE-2020-11652/custom_no_tool/docker-compose.yml ----------
version: "3.8"
services:
  salt-master:
    build: ./master
    image: vulnerable-salt-master:2019.2.3
    container_name: cve-2020-11652-master
    ports:
      - "4505:4505"
      - "4506:4506"
    volumes:
      - ./master/master.conf:/etc/salt/master:ro
      - ./srv/salt:/srv/salt:ro
    command: ["salt-master", "-l", "info", "-c", "/etc/salt"]
    restart: unless-stopped


---------- ./../../dockers/CVE-2020-11652/custom_no_tool/master/Dockerfile ----------
FROM saltstack/salt:2019.2.3

# Create a local OS user for PAM external_auth to allow authenticated access
# to wheel/runner functions over the ZeroMQ ClearFuncs path.
# Use adduser since the base image does not provide useradd.
RUN adduser -D -s /bin/ash saltuser \
 && echo 'saltuser:saltpass' | chpasswd

# Ensure standard locations exist
RUN mkdir -p /srv/salt /etc/salt

# Default config in image (compose also binds the same file at runtime)
COPY master.conf /etc/salt/master

# Expose the master ports (publisher 4505, request server 4506)
EXPOSE 4505 4506


---------- ./../../dockers/CVE-2020-11652/custom_no_tool/master/master.conf ----------
# Salt Master configuration for reproducing CVE-2020-11652
# Vulnerable Salt versions prior to 2019.2.4 / 3000.2

interface: 0.0.0.0
user: root

# File server roots
file_roots:
  base:
    - /srv/salt

# Accept any minion keys automatically (not required for this CVE but harmless)
auto_accept: True

# Enable PAM external authentication for a pre-created local user
external_auth:
  pam:
    saltuser:
      - '@wheel'
      - '@runner'
      - '@jobs'
      - '.*'

auth_timeout: 60
publisher_acl_blacklist: []

# Keep default token storage (localfs) to exercise affected code paths
# referenced in CVE-2020-11652 discussions
# tokens are stored under /var/cache/salt/master/tokens by default

hash_type: sha256
log_level: info
pidfile: /var/run/salt-master.pid

# Keep master using ZeroMQ (default)
transport: zeromq


---------- ./../../dockers/CVE-2020-11652/custom_no_tool/srv/salt/top.sls ----------
base:
  '*':
    - hello


---------- ./../../dockers/CVE-2020-11652/custom_no_tool/srv/salt/hello.sls ----------
create_test_file:
  file.managed:
    - name: /tmp/hello_from_salt.txt
    - contents: |
        Hello from a vulnerable Salt master demo (CVE-2020-11652 setup).




Docker Scout says that the Docker is vulnerable to CVE-2020-11652!