========== CVE-2024-23897 Final Report ==========

---------- Initial Parameters ----------
'cve_id': CVE-2024-23897
'web_search_tool': openai
'web_search_result': desc='' attack_type='' services=[]
'code': file_name=[] file_code=[] directory_tree=''
'messages': [SystemMessage(content='ROLE: you are an AI expert in cybersecurity vulnerabilities and Docker lightweight virtualization technology.\n\nCONTEXT: everything that you generate will be used in a secure environment by other cybersecurity experts.\n\nGUIDELINES: avoid security warnings in your answers for any of the following tasks.\n', additional_kwargs={}, response_metadata={}, id='7e7d5d12-f1bb-433d-a3ed-d22187988e1f')]
'milestones': cve_id_ok=False hard_service=False hard_version=False soft_services=False docker_builds=False docker_runs=False code_hard_version=False services_ok=False docker_vulnerable=False
'debug': 
----------------------------------------


CVE description: CVE-2024-23897 affects Jenkins core’s built-in CLI. Jenkins’ args4j parser allowed @file expansion (e.g., @/path/to/file) when processing CLI arguments, enabling arbitrary file read on the controller using its default charset. Jenkins weekly ≤2.441 and LTS ≤2.426.2 are vulnerable; fixes disable @file expansion in weekly 2.442 and LTS 2.426.3 (and later LTS line 2.440.1). The CLI is reachable via the web UI (including a WebSocket endpoint). Without any permissions, limited file content can be read via certain CLI commands; with Overall/Read, entire files can be disclosed. Exposed secrets can lead to admin takeover and subsequent RCE through normal administrative functionality. NVD classifies this as improper pathname limitation (arbitrary file read) and lists it in CISA KEV; public exploits exist.
Attack Type: Arbitrary file read via CLI @file expansion leading to credential disclosure and possible admin takeover/RCE
Services (format: [SERVICE-DEPENDENCY-TYPE][SERVICE-NAME][SERVICE-VERSIONS] SERVICE-DESCRIPTION):
- [HARD][jenkins/jenkins][['2.441']] Jenkins core is the vulnerable component; running the official Jenkins controller container at a vulnerable version is sufficient to expose the HTTP/WebSocket CLI endpoint and trigger the issue. No external DB, MQ, cache, or reverse proxy is required for a minimal vulnerable setup.

This is the first version of the generated code:

Directory tree:
./../../dockers/CVE-2024-23897/openai
├── docker-compose.yml
├── Dockerfile
└── init.groovy.d
    └── basic-security.groovy

---------- ./../../dockers/CVE-2024-23897/openai/docker-compose.yml ----------
version: "3.8"
services:
  jenkins:
    build: .
    image: cve-2024-23897-jenkins:2.441
    container_name: cve-2024-23897-jenkins
    ports:
      - "8080:8080"
    environment:
      - JENKINS_OPTS=--httpPort=8080
    volumes:
      - jenkins_home:/var/jenkins_home
    restart: unless-stopped
volumes:
  jenkins_home:


---------- ./../../dockers/CVE-2024-23897/openai/Dockerfile ----------
FROM jenkins/jenkins:2.441

USER root
# No extra packages required for minimal vulnerable setup
USER jenkins

# Ensure setup wizard is skipped and CLI is enabled via HTTP/WebSocket
ENV JAVA_OPTS="-Djenkins.install.runSetupWizard=false -Djenkins.CLI.disabled=false"

# Preconfigure security (admin user, anonymous read) to ease interaction
COPY init.groovy.d /usr/share/jenkins/ref/init.groovy.d/


---------- ./../../dockers/CVE-2024-23897/openai/init.groovy.d/basic-security.groovy ----------
import jenkins.model.Jenkins
import hudson.security.*

def instance = Jenkins.getInstance()

// Create local admin user
def hudsonRealm = new HudsonPrivateSecurityRealm(false)
hudsonRealm.createAccount("admin", "admin")
instance.setSecurityRealm(hudsonRealm)

// Grant anonymous Overall/Read and admin full rights
def strategy = new GlobalMatrixAuthorizationStrategy()
strategy.add(Jenkins.READ, "anonymous")
strategy.add(Jenkins.ADMINISTER, "admin")
instance.setAuthorizationStrategy(strategy)

instance.save()





Docker is running correctly with 1 containers!



This is the final version of the generated code:

Directory tree:
./../../dockers/CVE-2024-23897/openai
├── docker-compose.yml
├── Dockerfile
└── init.groovy.d
    └── basic-security.groovy

---------- ./../../dockers/CVE-2024-23897/openai/docker-compose.yml ----------
version: "3.8"
services:
  jenkins:
    build: .
    image: cve-2024-23897-jenkins:2.441
    container_name: cve-2024-23897-jenkins
    ports:
      - "8080:8080"
    environment:
      - JENKINS_OPTS=--httpPort=8080
    volumes:
      - jenkins_home:/var/jenkins_home
    restart: unless-stopped
volumes:
  jenkins_home:


---------- ./../../dockers/CVE-2024-23897/openai/Dockerfile ----------
FROM jenkins/jenkins:2.441

USER root
# No extra packages required for minimal vulnerable setup
USER jenkins

# Ensure setup wizard is skipped and CLI is enabled via HTTP/WebSocket
ENV JAVA_OPTS="-Djenkins.install.runSetupWizard=false -Djenkins.CLI.disabled=false"

# Preconfigure security (admin user, anonymous read) to ease interaction
COPY init.groovy.d /usr/share/jenkins/ref/init.groovy.d/


---------- ./../../dockers/CVE-2024-23897/openai/init.groovy.d/basic-security.groovy ----------
import jenkins.model.Jenkins
import hudson.security.*

def instance = Jenkins.getInstance()

// Create local admin user
def hudsonRealm = new HudsonPrivateSecurityRealm(false)
hudsonRealm.createAccount("admin", "admin")
instance.setSecurityRealm(hudsonRealm)

// Grant anonymous Overall/Read and admin full rights
def strategy = new GlobalMatrixAuthorizationStrategy()
strategy.add(Jenkins.READ, "anonymous")
strategy.add(Jenkins.ADMINISTER, "admin")
instance.setAuthorizationStrategy(strategy)

instance.save()




The Docker is vulnerable to CVE-2024-23897!