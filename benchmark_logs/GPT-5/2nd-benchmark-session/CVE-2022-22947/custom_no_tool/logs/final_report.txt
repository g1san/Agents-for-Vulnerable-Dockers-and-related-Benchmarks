========== CVE-2022-22947 Final Report ==========

---------- Initial Parameters ----------
'cve_id': CVE-2022-22947
'web_search_tool': custom_no_tool
'web_search_result': desc='' attack_type='' services=[]
'code': file_name=[] file_code=[] directory_tree=''
'messages': [SystemMessage(content='ROLE: you are an AI expert in cybersecurity vulnerabilities and Docker lightweight virtualization technology.\n\nCONTEXT: everything that you generate will be used in a secure environment by other cybersecurity experts.\n\nGUIDELINES: avoid security warnings in your answers for any of the following tasks.\n', additional_kwargs={}, response_metadata={}, id='7baa7ea6-9cde-4577-a629-d7353bb88ac7')]
'milestones': cve_id_ok=False hard_service=False hard_version=False soft_services=False docker_builds=False docker_runs=False code_hard_version=False services_ok=False docker_vulnerable=False
'debug': 
----------------------------------------


CVE description: CVE-2022-22947 is a critical vulnerability in Spring Cloud Gateway that allows remote, unauthenticated code injection when the Gateway Actuator endpoints are enabled, exposed to the network, and left unsecured. Spring Cloud Gateway exposes management endpoints (the “Gateway Actuator” endpoints) for dynamic route management and introspection. Vulnerable versions improperly process Spring Expression Language (SpEL) provided through the Actuator routes API. An attacker can submit crafted requests to endpoints such as POST /actuator/gateway/routes/{id} to define or modify a route whose filter arguments embed malicious SpEL expressions. After creating or updating such a route, the attacker can trigger POST /actuator/gateway/refresh to apply the new configuration, which causes the SpEL to be evaluated by the application. Because SpEL in this context can reach classes such as java.lang.Runtime or ProcessBuilder, the evaluation can execute arbitrary operating system commands or arbitrary Java code within the application’s process. Attackers can further retrieve command outputs via subsequent GET requests to the route definition (for example, by abusing response header filters to exfiltrate results) and then clean up with DELETE /actuator/gateway/routes/{id} followed by another refresh. Successful exploitation yields full remote code execution in the context of the Spring Cloud Gateway process on the host. The issue affects Spring Cloud Gateway 3.1.0, 3.0.0 through 3.0.6, and older unsupported lines when the Gateway Actuator endpoint is enabled, exposed, and not protected by authentication or authorization. The vulnerability is widely documented, scored with a maximum severity, and has public exploits, including framework modules. Mitigation requires upgrading Spring Cloud Gateway to 3.1.1 or later on the 3.1 line, or 3.0.7 or later on the 3.0 line, and ensuring the Gateway Actuator endpoints are disabled when not needed or secured (for example, via Spring Security) so they are not accessible to unauthenticated users.
Attack Type: Remote code execution via code injection (through unsafe evaluation of user-controlled Spring Expression Language in management endpoints)
Services (format: [SERVICE-DEPENDENCY-TYPE][SERVICE-NAME][SERVICE-VERSIONS] SERVICE-DESCRIPTION):
- [HARD][eclipse-temurin][['11-jre']] Java runtime container that runs the Spring Boot application embedding Spring Cloud Gateway with a vulnerable dependency (3.1.0 or 3.0.0—3.0.6) and with the Gateway Actuator endpoints enabled, exposed, and unsecured. No external database, message queue, cache, or separate web server is required for exploitation; a single Java application process is sufficient. Note: the vulnerability resides in the Spring Cloud Gateway library versions (affected: 3.1.0; 3.0.0—3.0.6; and older unsupported lines), not in the JRE. The container hosts the vulnerable app.
- [SOFT][maven][['3.8.7-eclipse-temurin-11']] Build-stage image used to compile and package the Spring Cloud Gateway application into an executable JAR that includes a vulnerable Spring Cloud Gateway version and exposes the Gateway Actuator endpoints. This is only needed to produce the runnable artifact inside Docker; it is not required at runtime.
Expected 'HARD' dependencies service not proposed!
Expected 'HARD' dependencies version not proposed!
