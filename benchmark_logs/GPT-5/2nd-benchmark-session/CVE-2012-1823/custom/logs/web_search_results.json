{
    "desc": "CVE-2012-1823 is a vulnerability in PHP when it is executed as a Common Gateway Interface (CGI) interpreter (php-cgi). In typical CGI deployments, the web server parses an incoming HTTP request and invokes the PHP interpreter to run a target script, often passing parts of the URL or query string to the interpreter. Due to improper input handling in php-cgi (notably in sapi/cgi/cgi_main.c), certain query strings\u2014especially those lacking an equals sign\u2014could be misinterpreted as command-line switches intended for the PHP interpreter itself. This allowed a remote, unauthenticated attacker to inject interpreter options via the URL. By crafting requests that smuggle option-like sequences (for example, using sequences that act as \u201c-d\u201d to set php.ini directives or \u201c-s\u201d to reveal source), an attacker could override security-relevant configuration at runtime, disclose source code, or cause the interpreter to automatically include attacker-controlled content. Common exploitation techniques included enabling allow_url_include and setting auto_prepend_file to php://input, so that attacker-supplied payloads are executed before the target script code runs. The vulnerability hinges on PHP being reachable in CGI mode or the php-cgi/php.exe binary being directly accessible via a web-exposed CGI path (for example, through Apache ScriptAlias or /cgi-bin). Setups that run PHP through other Server APIs (such as mod_php) or through FastCGI Process Manager (PHP-FPM) with safe configurations that do not allow arbitrary arguments to be passed are not inherently affected. The issue was addressed in PHP 5.3.12 and 5.4.2 by hardening how php-cgi parses and sanitizes inputs passed from the web server before processing command-line options. This class of argument-injection weakness later reappeared through a separate vector (CVE-2024-4577) that bypassed the 2012 mitigations on certain Windows and locale configurations by exploiting character encoding quirks; however, the core exploitation model\u2014injecting interpreter options via the request to reach php-cgi\u2014remains the same. In practice, a vulnerable, testable setup only requires a web server capable of invoking PHP via CGI and a vulnerable php-cgi binary; no database, cache, or message queue is necessary. The minimum Dockerized system therefore consists of: (1) a web server configured to dispatch .php or a specific route to php-cgi via CGI/CGI-PathInfo and (2) a PHP image that contains a vulnerable php-cgi interpreter. This arrangement reproduces the condition where the query string can be forwarded to php-cgi and parsed as command-line options, enabling configuration overrides, source disclosure, or code execution.",
    "attack_type": "Unauthenticated remote code execution (also enabling configuration manipulation and sensitive information disclosure)",
    "services": [
        {
            "name": "php",
            "version": [
                "5.0.0---5.3.11",
                "5.4.0---5.4.1"
            ],
            "dependency_type": "HARD",
            "description": "Vulnerable PHP when executed as CGI (php-cgi). These ranges reflect versions prior to 5.3.12 and 5.4.2, which contain the CGI argument injection flaw. The container must be configured to run php-cgi and be invoked by the web server via CGI/CGI-PathInfo."
        },
        {
            "name": "httpd",
            "version": [
                "2.4.59"
            ],
            "dependency_type": "SOFT-WEB",
            "description": "Apache HTTP Server used to expose HTTP endpoints and invoke php-cgi via its CGI handler (mod_cgi or mod_cgid). It routes requests to the PHP CGI interpreter, enabling the vulnerable argument-parsing path. Any recent 2.4.x works; 2.4.59 is a valid current tag on Docker Hub and compatible with the vulnerable PHP CGI setup."
        }
    ],
    "input_tokens": 11169,
    "output_tokens": 3601,
    "query": "CVE-2012-1823 PHP-CGI argument injection vulnerability details affected versions mitigation CVSS 10 exploit"
}