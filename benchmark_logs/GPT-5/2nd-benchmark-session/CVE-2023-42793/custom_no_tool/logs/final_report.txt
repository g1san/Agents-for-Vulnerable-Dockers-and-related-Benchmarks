========== CVE-2024-23897 Final Report ==========

---------- Initial Parameters ----------
'cve_id': CVE-2024-23897
'web_search_tool': custom_no_tool
'web_search_result': desc='' attack_type='' services=[]
'code': file_name=[] file_code=[] directory_tree=''
'messages': [SystemMessage(content='ROLE: you are an AI expert in cybersecurity vulnerabilities and Docker lightweight virtualization technology.\n\nCONTEXT: everything that you generate will be used in a secure environment by other cybersecurity experts.\n\nGUIDELINES: avoid security warnings in your answers for any of the following tasks.\n', additional_kwargs={}, response_metadata={}, id='52ee806e-40bc-4bdc-aa6d-647033e25562')]
'milestones': cve_id_ok=False hard_service=False hard_version=False soft_services=False docker_builds=False docker_runs=False code_hard_version=False services_ok=False docker_vulnerable=False
'debug': 
----------------------------------------


CVE description: CVE-2024-23897 is an arbitrary file read vulnerability in Jenkins core’s built-in command-line interface running on the controller. Jenkins uses the args4j command-line parser with the feature that expands arguments beginning with the at-sign into file contents (for example, @/path/to/file). In affected versions, Jenkins did not disable this feature for CLI parsing. As a result, when a user supplies CLI arguments that reference files on the controller, Jenkins replaces those arguments with the content of the referenced files before completing permission checks for the invoked command. This allows remote attackers to read files from the Jenkins controller’s filesystem via the CLI endpoint using the process’s default character encoding. The scope of data exposure varies by permissions and encoding: with the Overall/Read permission, complete files can be returned; without it, several initial lines (commonly the first three, sometimes more depending on the command behavior) can be disclosed. Text files are straightforward to extract, while binary or non-text secrets may be partially recoverable depending on the system’s default charset (greater risk when running with single-byte encodings such as Windows-1252, reduced risk with UTF-8). Disclosed files could include sensitive Jenkins configuration, credentials material, environment variables, or keys (for example, Jenkins master.key or secrets.key), which may enable follow-on compromise. Under additional, specific conditions in Jenkins (such as Resource Root URL being enabled together with CLI access via WebSocket or a valid API token, permissive “Remember me” behavior, CSRF crumbs not bound to the session identifier, or the ability to influence build logs), attackers could chain the file read into more severe outcomes, including remote code execution or critical administrative actions. The vulnerability affects Jenkins 2.441 and earlier weekly releases and Jenkins LTS 2.426.2 and earlier. It was remediated by disabling the at-sign file expansion in CLI parsing starting with Jenkins 2.442, LTS 2.440.1, and LTS 2.426.3. As a mitigation on older instances, administrators can disable CLI access; there is also a discouraged system property to re-enable the legacy behavior (-Dhudson.cli.CLICommand.allowAtSyntax=true) in fixed versions.
Attack Type: Arbitrary file read (information disclosure), with potential remote code execution through chaining of additional preconditions
Services (format: [SERVICE-DEPENDENCY-TYPE][SERVICE-NAME][SERVICE-VERSIONS] SERVICE-DESCRIPTION):
- [HARD][jenkins/jenkins][['Weekly releases (vulnerable): 2.0---2.441', 'LTS releases (vulnerable): 2.0.0---2.426.2', 'Example vulnerable Docker tags: 2.441-jdk17', 'Example vulnerable Docker tags: 2.441-jdk11', 'Example vulnerable Docker tags: 2.426.2-lts-jdk17', 'Example vulnerable Docker tags: 2.426.2-lts-jdk11']] Jenkins controller providing the built-in CLI endpoint where args4j at-sign file expansion occurs. This single service is sufficient to reproduce and test the vulnerability; Jenkins bundles its own web endpoint and does not require an external database, cache, or reverse proxy to be exploitable.

This is the first version of the generated code:

Directory tree:
./../../dockers/CVE-2024-23897/custom_no_tool
└── docker-compose.yml
└── jenkins_home
    └── init.groovy.d
        └── basic-security.groovy

---------- ./../../dockers/CVE-2024-23897/custom_no_tool/docker-compose.yml ----------
services:
  jenkins:
    image: jenkins/jenkins:2.426.2-lts-jdk17
    container_name: cve-2024-23897-jenkins
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false
    volumes:
      - ./jenkins_home:/var/jenkins_home

name: cve-2024-23897

---------- ./../../dockers/CVE-2024-23897/custom_no_tool/jenkins_home/init.groovy.d/basic-security.groovy ----------
import jenkins.model.Jenkins
import hudson.security.HudsonPrivateSecurityRealm
import hudson.security.FullControlOnceLoggedInAuthorizationStrategy

Jenkins j = Jenkins.get()

// Create local admin user
HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false)
if (realm.getUser("admin") == null) {
  realm.createAccount("admin", "admin")
}
j.setSecurityRealm(realm)

// Require login for any access; admin has full control
FullControlOnceLoggedInAuthorizationStrategy strategy = new FullControlOnceLoggedInAuthorizationStrategy()
strategy.setAllowAnonymousRead(false)
j.setAuthorizationStrategy(strategy)

j.save()





Docker is running correctly with 1 containers!



This is the final version of the generated code:

Directory tree:
./../../dockers/CVE-2024-23897/custom_no_tool
└── docker-compose.yml
└── jenkins_home
    └── init.groovy.d
        └── basic-security.groovy

---------- ./../../dockers/CVE-2024-23897/custom_no_tool/docker-compose.yml ----------
services:
  jenkins:
    image: jenkins/jenkins:2.426.2-lts-jdk17
    container_name: cve-2024-23897-jenkins
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false
    volumes:
      - ./jenkins_home:/var/jenkins_home

name: cve-2024-23897

---------- ./../../dockers/CVE-2024-23897/custom_no_tool/jenkins_home/init.groovy.d/basic-security.groovy ----------
import jenkins.model.Jenkins
import hudson.security.HudsonPrivateSecurityRealm
import hudson.security.FullControlOnceLoggedInAuthorizationStrategy

Jenkins j = Jenkins.get()

// Create local admin user
HudsonPrivateSecurityRealm realm = new HudsonPrivateSecurityRealm(false)
if (realm.getUser("admin") == null) {
  realm.createAccount("admin", "admin")
}
j.setSecurityRealm(realm)

// Require login for any access; admin has full control
FullControlOnceLoggedInAuthorizationStrategy strategy = new FullControlOnceLoggedInAuthorizationStrategy()
strategy.setAllowAnonymousRead(false)
j.setAuthorizationStrategy(strategy)

j.save()




The Docker is vulnerable to CVE-2024-23897!