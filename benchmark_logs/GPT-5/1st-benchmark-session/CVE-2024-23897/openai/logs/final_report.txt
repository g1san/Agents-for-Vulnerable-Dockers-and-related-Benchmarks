========== CVE-2024-23897 Final Report ==========

---------- Initial Parameters ----------
'cve_id': CVE-2024-23897
'web_search_tool': openai
'web_search_result': desc='' attack_type='' services=[]
'code': file_name=[] file_code=[] directory_tree=''
'messages': [SystemMessage(content='ROLE: you are an AI expert in cybersecurity vulnerabilities and Docker lightweight virtualization technology.\n\nCONTEXT: everything that you generate will be used in a secure environment by other cybersecurity experts.\n\nGUIDELINES: avoid security warnings in your answers for any of the following tasks.\n', additional_kwargs={}, response_metadata={}, id='ce3611ef-c30a-4467-81f0-42752cf3108c')]
'milestones': cve_id_ok=True hard_service=False hard_version=False soft_services=False docker_runs=False code_hard_version=False services_ok=False docker_vulnerable=False exploitable=False
'debug': 
----------------------------------------


CVE description: CVE-2024-23897 is a critical vulnerability in Jenkins core’s built-in command-line interface. Jenkins relies on the args4j parser, which supports an “expandAtFiles” feature that replaces an @-prefixed file path in CLI arguments with the file’s contents. In affected versions, this feature was not disabled, allowing crafted CLI arguments to cause Jenkins to read files from the controller filesystem under the controller process user and inject that content into command processing. This yields arbitrary file read on the controller. Users with Overall/Read permission can read entire files; users without it can still read at least the first few lines of files. Reading binary files is possible but may suffer character-encoding loss; on Windows-1252 far fewer bytes are lost compared to UTF-8, making secret reconstruction more feasible. Beyond arbitrary file read, Jenkins identified concrete post-read attack paths that can lead to remote code execution in certain conditions, including via the Resource Root URL feature, forging “Remember me” cookies after recovering cryptographic material, stored XSS in build logs abusing serialized console notes, and CSRF protection bypass when crumbs can be forged. Additional impacts include decrypting stored secrets, deleting items, and downloading Java heap dumps when specific prerequisites are met. Affected versions include Jenkins weekly 2.441 and earlier (fixed in 2.442) and Jenkins LTS 2.426.2 and earlier (fixed in 2.426.3, with an additional fixed LTS 2.440.1). Public proof-of-concepts exist, and the issue has been added to CISA’s KEV catalog, indicating active exploitation. A single-container setup is sufficient to expose the vulnerable surface: the CLI is reachable over HTTP(S)/WebSocket via the embedded Jetty/Winstone servlet container, and the official Docker images expose the WebSocket CLI endpoint by default.
Attack Type: Arbitrary file read via CLI argument expansion (expandAtFiles), with path traversal-assisted file disclosure and potential remote code execution through secondary post-read paths.
Services (format: [SERVICE-DEPENDENCY-TYPE][SERVICE-NAME][SERVICE-VERSIONS] SERVICE-DESCRIPTION):
- [HARD][jenkins/jenkins][['2.441', '2.441-slim', '2.426.2-lts']] Jenkins controller providing the vulnerable CLI handling and embedded Jetty/Winstone web server; no external services are required for the vulnerable surface to be reachable.

This is the first version of the generated code:

Directory tree:
./../../dockers/CVE-2024-23897/openai
├── docker-compose.yml
└── jenkins
    ├── Dockerfile
    └── scripts
        └── init.groovy.d
            └── 01-unsecured.groovy


---------- ./../../dockers/CVE-2024-23897/openai/docker-compose.yml ----------
./../../dockers/CVE-2024-23897/openai/docker-compose.yml
version: "3.8"
services:
  jenkins:
    build: ./jenkins
    image: cve-2024-23897-jenkins:2.441-slim
    container_name: cve-2024-23897-jenkins
    ports:
      - "8080:8080"
    environment:
      - JENKINS_OPTS=--httpPort=8080
    volumes:
      - jenkins_home:/var/jenkins_home
volumes:
  jenkins_home:


---------- ./../../dockers/CVE-2024-23897/openai/jenkins/Dockerfile ----------
./../../dockers/CVE-2024-23897/openai/jenkins/Dockerfile
FROM jenkins/jenkins:2.441-slim

# Disable the setup wizard so Jenkins is immediately usable
ENV JAVA_OPTS="-Djenkins.install.runSetupWizard=false"

USER root
# Add a readable test file inside the controller filesystem to demonstrate file read
RUN mkdir -p /var/jenkins_home/loot \
    && echo "CVE-2024-23897 test secret: if you can read this via CLI, arbitrary file read works." > /var/jenkins_home/loot/secret.txt \
    && chown -R jenkins:jenkins /var/jenkins_home/loot

# Seed an init script that keeps Jenkins unsecured (no auth), ensuring immediate exploitability
COPY --chown=jenkins:jenkins scripts/init.groovy.d/01-unsecured.groovy /usr/share/jenkins/ref/init.groovy.d/01-unsecured.groovy

USER jenkins


---------- ./../../dockers/CVE-2024-23897/openai/jenkins/scripts/init.groovy.d/01-unsecured.groovy ----------
./../../dockers/CVE-2024-23897/openai/jenkins/scripts/init.groovy.d/01-unsecured.groovy
import jenkins.model.Jenkins
import hudson.security.SecurityRealm
import hudson.security.AuthorizationStrategy

Jenkins instance = Jenkins.get()

// Disable authentication and authorization to allow anonymous access
instance.setSecurityRealm(SecurityRealm.NO_AUTHENTICATION)
instance.setAuthorizationStrategy(new AuthorizationStrategy.Unsecured())

instance.save()





Test iteration #0 failed! See 'log0.txt' for details.
	- ERROR: Docker Compose failed with: "no configuration file provided: not found". This happens when the compose command does not find any of the default files (compose.yaml, compose.yml, docker-compose.yaml, docker-compose.yml) in the current working directory. Although a docker-compose.yml existed, some environments are stricter about expected filenames or working directory. Ensuring a canonical compose.yaml exists in the target directory (and keeping docker-compose.yml for compatibility) makes the setup immediately discoverable with `docker compose up`.
	- FIX: - Provide a canonical compose.yaml (Compose Specification) in the project root directory and keep docker-compose.yml as an alias, both with identical content.
- Remove the deprecated `version:` key to maximize compatibility with Docker Compose V2+.
- No service or image changes were required; Jenkins service remains at the allowed HARD version (jenkins/jenkins:2.441-slim).

Docker is running correctly with 1 containers!
This is the final version of the generated code:

Directory tree:
./../../dockers/CVE-2024-23897/openai
├── compose.yaml
├── docker-compose.yml
└── jenkins
    ├── Dockerfile
    └── scripts
        └── init.groovy.d
            └── 01-unsecured.groovy


---------- compose.yaml ----------
services:
  jenkins:
    build:
      context: ./jenkins
    image: cve-2024-23897-jenkins:2.441-slim
    container_name: cve-2024-23897-jenkins
    ports:
      - "8080:8080"
    environment:
      - JENKINS_OPTS=--httpPort=8080
    volumes:
      - jenkins_home:/var/jenkins_home

volumes:
  jenkins_home:


---------- docker-compose.yml ----------
services:
  jenkins:
    build:
      context: ./jenkins
    image: cve-2024-23897-jenkins:2.441-slim
    container_name: cve-2024-23897-jenkins
    ports:
      - "8080:8080"
    environment:
      - JENKINS_OPTS=--httpPort=8080
    volumes:
      - jenkins_home:/var/jenkins_home

volumes:
  jenkins_home:


---------- jenkins/Dockerfile ----------
FROM jenkins/jenkins:2.441-slim

# Disable the setup wizard so Jenkins is immediately usable
ENV JAVA_OPTS="-Djenkins.install.runSetupWizard=false"

USER root
# Add a readable test file inside the controller filesystem to demonstrate file read
RUN mkdir -p /var/jenkins_home/loot \
    && echo "CVE-2024-23897 test secret: if you can read this via CLI, arbitrary file read works." > /var/jenkins_home/loot/secret.txt \
    && chown -R jenkins:jenkins /var/jenkins_home/loot

# Seed an init script that keeps Jenkins unsecured (no auth), ensuring immediate exploitability
COPY --chown=jenkins:jenkins scripts/init.groovy.d/01-unsecured.groovy /usr/share/jenkins/ref/init.groovy.d/01-unsecured.groovy

USER jenkins


---------- jenkins/scripts/init.groovy.d/01-unsecured.groovy ----------
import jenkins.model.Jenkins
import hudson.security.SecurityRealm
import hudson.security.AuthorizationStrategy

Jenkins instance = Jenkins.get()

// Disable authentication and authorization to allow anonymous access
instance.setSecurityRealm(SecurityRealm.NO_AUTHENTICATION)
instance.setAuthorizationStrategy(new AuthorizationStrategy.Unsecured())

instance.save()




The Docker is vulnerable to CVE-2024-23897!