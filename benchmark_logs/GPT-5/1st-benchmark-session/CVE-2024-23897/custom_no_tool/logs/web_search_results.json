{
    "desc": "CVE-2024-23897 is a critical flaw in the Jenkins core command-line interface (CLI) command parser that allows arbitrary file disclosure from the Jenkins controller filesystem. The root cause is the use of the args4j library with its expandAtFiles feature left enabled. When expandAtFiles is active, any CLI argument that begins with the at-sign followed by a path (for example, @/path/to/file) is replaced by the contents of that file before the command is processed. In Jenkins 2.441 and earlier, and in the Long-Term Support line 2.426.2 and earlier, this behavior was not disabled. As a result, an unauthenticated or low-privileged remote user who can reach the Jenkins CLI endpoint can coerce the controller into reading local files and reflecting their contents back over the network using the controller\u2019s default character encoding.\n\nImpact and data exposure: Attackers can extract plaintext data and, depending on the controller\u2019s file.encoding, recover useful portions of binary data. With the Overall/Read permission, entire files can be exfiltrated; without Overall/Read, only the first few lines are typically returned, which is still sufficient in many cases to leak secrets and configuration material. Sensitive files commonly discussed in public analyses include process environment and command line files (/proc/self/environ, /proc/self/cmdline), operating system accounts (/etc/passwd), Jenkins user and configuration files (/var/jenkins_home/users/users.xml and per-user config.xml containing password hashes), and Jenkins secret material (/var/jenkins_home/secrets/master.key and related keys). Disclosure of such data can enable follow-on attacks, including authentication bypass through stolen tokens or session material and, in realistic scenarios, progression to remote code execution by abusing recovered credentials or keys.\n\nExploitation conditions and surface: The vulnerability is reachable via Jenkins\u2019 built-in CLI. Access can occur over the HTTP-based CLI endpoints served by the embedded web server (Jetty) and, in modern deployments, the WebSocket-based CLI as well. Public write-ups note that even without broad privileges, certain CLI code paths process arguments and trigger the at-file expansion before rejecting the command, allowing the file-read side effect to occur. No user interaction is required beyond network access to the CLI interface. The extent of what can be read depends on the specific command path and the presence or absence of Overall/Read. Some escalation scenarios discussed by the Jenkins project require additional configuration factors (for example, the Resource Root URL being enabled, WebSocket reachability, availability of a known username or API token, \u201cRemember me\u201d behavior, or cross-site request forgery crumb configurations), but these are not prerequisites for the core arbitrary file disclosure itself.\n\nAffected versions: Jenkins weekly releases 2.441 and earlier, and Jenkins Long-Term Support releases 2.426.2 and earlier, are affected. The Jenkins project remediated the issue by disabling the args4j at-file expansion for CLI command parsing. Fixed versions are Jenkins 2.442 (weekly) and Jenkins LTS 2.426.3 and 2.440.1 and later. A common administrative workaround is to disable the CLI entirely until patched.\n\nSecurity characteristics: The vulnerability primarily compromises confidentiality by enabling reading of files on the controller host via the Jenkins process. Integrity and availability are not directly affected by the core bug. However, the confidentiality impact can be severe because disclosed secrets can facilitate subsequent compromise of the controller and agents.\n\nOperational notes for testing environments: Because Jenkins bundles its own web server and persists configuration to the local filesystem, no external database, cache, message queue, or reverse proxy is required for the vulnerability to be present. A single vulnerable Jenkins controller instance, reachable over the network on its HTTP interface, is sufficient to reproduce the at-file expansion behavior in the CLI and to validate that the system is vulnerable. Mitigation is achieved by upgrading to a fixed Jenkins version or disabling the CLI feature.",
    "attack_type": "Arbitrary file read via the Jenkins command-line interface with potential progression to remote code execution through secret disclosure",
    "services": [
        {
            "name": "jenkins/jenkins",
            "version": [
                "2.0---2.441",
                "2.0---2.426.2",
                "2.441-jdk17",
                "2.426.2-lts-jdk17"
            ],
            "dependency_type": "HARD",
            "description": "Jenkins controller providing the built-in web server and CLI endpoints. This single service is sufficient for the vulnerable at-file argument expansion to be reachable; no external database, cache, message queue, or reverse proxy is required."
        }
    ],
    "input_tokens": 10962,
    "output_tokens": 6187
}