========== CVE-2012-1823 Final Report ==========

---------- Initial Parameters ----------
'cve_id': CVE-2012-1823
'web_search_tool': custom_no_tool
'web_search_result': desc='' attack_type='' services=[]
'code': file_name=[] file_code=[] directory_tree=''
'messages': [SystemMessage(content='ROLE: you are an AI expert in cybersecurity vulnerabilities and Docker lightweight virtualization technology.\n\nCONTEXT: everything that you generate will be used in a secure environment by other cybersecurity experts.\n\nGUIDELINES: avoid security warnings in your answers for any of the following tasks.\n', additional_kwargs={}, response_metadata={}, id='ac83b366-7a9b-4d0e-8a72-23e8610004e3')]
'milestones': cve_id_ok=True hard_service=False hard_version=False soft_services=False docker_runs=False code_hard_version=False services_ok=False docker_vulnerable=False exploitable=False
'debug': 
----------------------------------------


CVE description: CVE-2012-1823 is a vulnerability in PHP when it is executed via the Common Gateway Interface (CGI) SAPI (often the php-cgi binary) behind a web server. The flaw arises from how php-cgi processes HTTP request query strings that do not contain an equals sign. In such cases, php-cgi mistakenly interprets the entire query string as command-line options intended for the PHP interpreter. If a front-end web server forwards the raw request URI or query string to php-cgi without filtering, an attacker can craft a request whose query string resembles PHP interpreter flags. This allows the attacker to inject php-cgi options at runtime. Practical impacts include: information disclosure (for example, using the syntax-highlighting option to return the source code of a PHP file, which can leak credentials, keys, or application logic) and remote code execution (for example, by setting interpreter options that change configuration values at runtime such as enabling remote file inclusion features and then causing PHP to execute attacker-controlled input). The root cause, as recorded by NIST, is that the CGI SAPI failed to correctly skip option parsing for certain cases when the query string lacked an equals sign, allowing php-cgi to treat user-supplied strings as if they were safe command-line switches. The vulnerability requires that PHP be deployed as CGI (not as an Apache module and not via PHP-FPM) and that the web server forwards unfiltered query strings to the CGI handler. Mitigations include upgrading to fixed PHP versions (5.3.12 or 5.4.2 and later for the original issue), and configuring the web server to reject or sanitize requests whose query strings could be interpreted as interpreter options before they reach php-cgi. Later security notes also highlight platform-specific bypasses of early mitigations (for example, certain Windows code page conversions causing unexpected hyphen characters), underscoring that the core issue is the unsafe interpretation of request-supplied data as interpreter flags in CGI mode.
Attack Type: remote code execution; information disclosure
Services (format: [SERVICE-DEPENDENCY-TYPE][SERVICE-NAME][SERVICE-VERSIONS] SERVICE-DESCRIPTION):
- [HARD][php][['5.3.0---5.3.11', '5.4.0---5.4.1']] PHP running as CGI (php-cgi) is the vulnerable component. These version ranges match the NIST statement that PHP CGI SAPI before 5.3.12 and 5.4.2 mishandles option-like query strings, enabling option injection that can lead to information disclosure and remote code execution. Ensure the PHP SAPI used is CGI; other SAPIs like Apache module or PHP-FPM are not affected by this specific issue.
- [SOFT-WEB][httpd][['2.4.58']] Apache HTTP Server acts as the front-end web server that invokes php-cgi and forwards the request URI/query string to it. Any modern 2.4.x release is suitable; it is not the vulnerable component but is needed to expose PHP via CGI so the flaw can be exercised.

This is the first version of the generated code:

Directory tree:
./../../dockers/CVE-2012-1823/custom_no_tool
├── docker-compose.yml
├── Dockerfile
├── conf
│   └── php-cgi.conf
├── cgi-bin
│   └── php-cgi
└── src
    ├── index.php
    └── secret.php

---------- ./../../dockers/CVE-2012-1823/custom_no_tool/docker-compose.yml ----------
# File: ./../../dockers/CVE-2012-1823/custom_no_tool/docker-compose.yml
version: "3.8"
services:
  web:
    build: .
    image: cve-2012-1823:httpd-2.4.58-php-5.4.1-cgi
    ports:
      - "8080:80"


---------- ./../../dockers/CVE-2012-1823/custom_no_tool/Dockerfile ----------
// File: ./../../dockers/CVE-2012-1823/custom_no_tool/Dockerfile
FROM httpd:2.4.58

# Build and install vulnerable PHP CGI (5.4.1)
RUN set -eux; \
    apt-get update; \
    apt-get install -y --no-install-recommends \
        ca-certificates curl build-essential autoconf pkg-config \
        libxml2-dev zlib1g-dev; \
    rm -rf /var/lib/apt/lists/*

# Fetch, compile, and install php-cgi 5.4.1 (affected by CVE-2012-1823)
RUN set -eux; \
    curl -fsSL https://museum.php.net/php5/php-5.4.1.tar.gz -o /tmp/php-5.4.1.tar.gz; \
    cd /tmp; \
    tar -xzf php-5.4.1.tar.gz; \
    cd php-5.4.1; \
    ./buildconf --force || true; \
    ./configure --enable-cgi --disable-all; \
    make -j"$(nproc)"; \
    make install; \
    cd /; \
    rm -rf /tmp/php-5.4.1 /tmp/php-5.4.1.tar.gz; \
    php-cgi -v

# Apache configuration to wire PHP via CGI SAPI
COPY conf/php-cgi.conf /usr/local/apache2/conf/extra/php-cgi.conf
RUN echo "\n# Include PHP CGI wiring for CVE-2012-1823 reproduction\nInclude conf/extra/php-cgi.conf\n" >> /usr/local/apache2/conf/httpd.conf

# CGI wrapper and sample vulnerable PHP app
COPY cgi-bin/php-cgi /usr/local/apache2/cgi-bin/php-cgi
RUN chmod +x /usr/local/apache2/cgi-bin/php-cgi

COPY src/ /usr/local/apache2/htdocs/


---------- ./../../dockers/CVE-2012-1823/custom_no_tool/conf/php-cgi.conf ----------
# File: ./../../dockers/CVE-2012-1823/custom_no_tool/conf/php-cgi.conf
# Enable CGI on Apache 2.4.58 and route .php to php-cgi (PHP 5.4.1)
LoadModule cgid_module modules/mod_cgid.so

ScriptAlias /cgi-bin/ "/usr/local/apache2/cgi-bin/"
<Directory "/usr/local/apache2/cgi-bin">
    AllowOverride None
    Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch
    Require all granted
</Directory>

# Ensure .php files are handled by php-cgi
AddHandler application/x-httpd-php .php
Action application/x-httpd-php /cgi-bin/php-cgi

DirectoryIndex index.php index.html


---------- ./../../dockers/CVE-2012-1823/custom_no_tool/cgi-bin/php-cgi ----------
#!/bin/sh
# File: ./../../dockers/CVE-2012-1823/custom_no_tool/cgi-bin/php-cgi
# Simple wrapper to execute the vulnerable php-cgi binary
exec /usr/local/bin/php-cgi


---------- ./../../dockers/CVE-2012-1823/custom_no_tool/src/index.php ----------
<?php
// File: ./../../dockers/CVE-2012-1823/custom_no_tool/src/index.php
header('Content-Type: text/plain');
echo "Vulnerable PHP CGI SAPI version: " . phpversion() . "\n";
echo "Request URI: " . $_SERVER['REQUEST_URI'] . "\n";

// Include a file so its source can be disclosed via the CGI option injection (-s)
include 'secret.php';

echo "\nTry accessing: /secret.php?-s to view highlighted source via CGI option injection.\n";


---------- ./../../dockers/CVE-2012-1823/custom_no_tool/src/secret.php ----------
<?php
// File: ./../../dockers/CVE-2012-1823/custom_no_tool/src/secret.php
// Example sensitive content that can be exposed via source disclosure
$secret = "SENSITIVE: database_password = 'p@ssw0rd!'";

if (isset($_GET['show'])) {
    echo $secret . "\n";
}




Test iteration #0 failed! See 'log0.txt' for details.
	- ERROR: Running `sudo docker compose up --build --detach` returned: `no configuration file provided: not found`. This typically means the Docker Compose CLI did not detect a Compose configuration file in the working directory. Although a docker-compose.yml exists, some environments only auto-detect compose.yaml/compose.yml by default. Additionally, I ensured Apache’s config includes the required mod_actions module and that the Include directive is appended correctly.
	- FIX: To guarantee Compose auto-detection, I added a compose.yaml alongside docker-compose.yml. I also adjusted the Dockerfile to append the Include line using printf (so line breaks are correct) and updated the Apache configuration to explicitly load mod_actions, which is required for the Action directive. No other service/version changes were made.
Test iteration #1 failed! See 'log1.txt' for details.
	- ERROR: Compose detected two config files (compose.yaml and docker-compose.yml) and chose compose.yaml, which then failed to parse with "yaml: line 2: mapping values are not allowed in this context". The failure is due to the compose.yaml file; removing it eliminates the ambiguity and allows Docker to use the valid docker-compose.yml.
	- FIX: Remove compose.yaml so Docker Compose unambiguously uses docker-compose.yml. No other service/image changes are required. After this change, run: docker compose up --build -d
Test iteration #2 failed! See 'log2.txt' for details.
	- ERROR: Docker Compose detected two config files and chose compose.yaml, which contains invalid YAML (yaml: line 2: mapping values are not allowed in this context). This stops Compose before any build starts.
	- FIX: Provide a valid compose.yaml and remove docker-compose.yml to eliminate ambiguity. Keep the Apache + PHP-CGI wiring unchanged. The new compose.yaml uses the modern Compose spec (no version key) and correctly defines the web service. After applying these files, run: docker compose up --build -d.

Docker is running correctly with 1 containers!
This is the final version of the generated code:

Directory tree:
./../../dockers/CVE-2012-1823/custom_no_tool
├── compose.yaml
├── Dockerfile
├── cgi-bin
│   └── php-cgi
├── conf
│   └── php-cgi.conf
└── src
    ├── index.php
    └── secret.php


---------- compose.yaml ----------
services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    image: cve-2012-1823:httpd-2.4.58-php-5.4.1-cgi
    ports:
      - "8080:80"


---------- Dockerfile ----------
FROM httpd:2.4.58

# Build and install vulnerable PHP CGI (5.4.1)
RUN set -eux; \
    apt-get update; \
    apt-get install -y --no-install-recommends \
        ca-certificates curl build-essential autoconf pkg-config \
        libxml2-dev zlib1g-dev; \
    rm -rf /var/lib/apt/lists/*

# Fetch, compile, and install php-cgi 5.4.1 (affected by CVE-2012-1823)
RUN set -eux; \
    curl -fsSL https://museum.php.net/php5/php-5.4.1.tar.gz -o /tmp/php-5.4.1.tar.gz; \
    cd /tmp; \
    tar -xzf php-5.4.1.tar.gz; \
    cd php-5.4.1; \
    ./buildconf --force || true; \
    ./configure --enable-cgi --disable-all; \
    make -j"$(nproc)"; \
    make install; \
    cd /; \
    rm -rf /tmp/php-5.4.1 /tmp/php-5.4.1.tar.gz; \
    php-cgi -v

# Apache configuration to wire PHP via CGI SAPI
COPY conf/php-cgi.conf /usr/local/apache2/conf/extra/php-cgi.conf
RUN set -eux; \
    printf "\n# Include PHP CGI wiring for CVE-2012-1823 reproduction\nInclude conf/extra/php-cgi.conf\n" >> /usr/local/apache2/conf/httpd.conf

# CGI wrapper and sample vulnerable PHP app
COPY cgi-bin/php-cgi /usr/local/apache2/cgi-bin/php-cgi
RUN chmod +x /usr/local/apache2/cgi-bin/php-cgi

COPY src/ /usr/local/apache2/htdocs/


---------- conf/php-cgi.conf ----------
# Enable CGI on Apache 2.4.58 and route .php to php-cgi (PHP 5.4.1)
LoadModule cgid_module modules/mod_cgid.so
LoadModule actions_module modules/mod_actions.so

ScriptAlias /cgi-bin/ "/usr/local/apache2/cgi-bin/"
<Directory "/usr/local/apache2/cgi-bin">
    AllowOverride None
    Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch
    Require all granted
</Directory>

# Ensure .php files are handled by php-cgi
AddHandler application/x-httpd-php .php
Action application/x-httpd-php /cgi-bin/php-cgi

DirectoryIndex index.php index.html


---------- cgi-bin/php-cgi ----------
#!/bin/sh
# Simple wrapper to execute the vulnerable php-cgi binary
exec /usr/local/bin/php-cgi


---------- src/index.php ----------
<?php
header('Content-Type: text/plain');
echo "Vulnerable PHP CGI SAPI version: " . phpversion() . "\n";
echo "Request URI: " . $_SERVER['REQUEST_URI'] . "\n";

// Include a file so its source can be disclosed via the CGI option injection (-s)
include 'secret.php';

echo "\nTry accessing: /secret.php?-s to view highlighted source via CGI option injection.\n";


---------- src/secret.php ----------
<?php
// Example sensitive content that can be exposed via source disclosure
$secret = "SENSITIVE: database_password = 'p@ssw0rd!'";

if (isset($_GET['show'])) {
    echo $secret . "\n";
}




