{
    "desc": "CVE-2021-34429 is a vulnerability in Eclipse Jetty\u2019s web application handling that stems from the order in which Uniform Resource Identifier processing is performed. In affected releases, Jetty normalizes path segments before decoding them. Because normalization happens first, certain path components that are meant to be treated specially, such as a single dot character or a null byte, can be introduced in encoded form and then decoded by later processing stages after normalization has already allowed them to influence path resolution. As a result, protections that normally prevent direct access to internal directories within a Java web application can be bypassed.\n\nThe classic target in this scenario is the WEB-INF directory, which is intended to be non-web-accessible according to the Java Servlet specification. On vulnerable Jetty versions, an attacker can craft a request path that includes an encoded dot or similar ambiguous segment, for example using the Unicode escape for a dot or a null byte. Examples that have been observed to work against affected versions include requests like /%u002e/WEB-INF/web.xml and /.%00/WEB-INF/web.xml. Jetty\u2019s processing misinterprets these crafted segments, ultimately allowing the request to resolve into the protected area and return sensitive files such as the application\u2019s deployment descriptor (web.xml) or other resources kept under WEB-INF.\n\nThis issue affects Jetty 9.4.37 through 9.4.42, 10.0.1 through 10.0.5, and 11.0.1 through 11.0.5. It is exploitable remotely over the network against the Jetty HTTP service, requires no authentication or user interaction, and primarily impacts confidentiality by enabling unauthorized file read of resources that should never be directly served. Integrity and availability are not directly affected by this specific flaw. The vulnerability is closely related to prior path handling weaknesses in Jetty and reflects the risks that arise when normalization and decoding are performed in the wrong order.\n\nThe Jetty project corrected the flaw by changing processing so that decoding happens before normalization, by rejecting ambiguous path segments, and by tightening alias checks. Fixed versions are 9.4.43 and later, 10.0.6 and later, and 11.0.6 and later. As a temporary mitigation, site operators could deploy front-end rewrite or filtering rules to block raw requests containing encoded dot or null characters in path segments; however, the recommended remediation is to upgrade Jetty to a fixed release. Because Jetty is often embedded in downstream products, those products inherit the risk until they update their embedded Jetty component. Multiple vendors documented exposure where Jetty is bundled inside their software.\n\nTo reproduce this vulnerability in a containerized environment, the only essential component is a vulnerable Jetty instance reachable over HTTP with any deployed web application that contains a WEB-INF directory, which is standard for Java web applications. No additional databases, message queues, reverse proxies, or external services are required for the vulnerability to exist or be exercised.",
    "attack_type": "Remote, unauthenticated access control bypass leading to unauthorized file read and sensitive information disclosure via crafted HTTP request paths",
    "services": [
        {
            "name": "jetty",
            "version": [
                "9.4.37---9.4.42",
                "10.0.1---10.0.5",
                "11.0.1---11.0.5"
            ],
            "dependency_type": "HARD",
            "description": "Eclipse Jetty HTTP server and servlet container providing the vulnerable web application handling (jetty-webapp). Affected versions allow crafted, encoded path segments to bypass protections and expose WEB-INF resources. No other services are required for the system to be vulnerable; a basic webapp with a WEB-INF directory deployed on this Jetty instance is sufficient."
        }
    ],
    "input_tokens": 55445,
    "output_tokens": 7743
}