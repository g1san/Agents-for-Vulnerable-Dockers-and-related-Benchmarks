========== CVE-2022-46169 Final Report ==========

---------- Initial Parameters ----------
'cve_id': CVE-2022-46169
'web_search_tool': custom_no_tool
'web_search_result': desc='' attack_type='' services=[]
'code': file_name=[] file_code=[] directory_tree=''
'messages': [SystemMessage(content='ROLE: you are an AI expert in cybersecurity vulnerabilities and Docker lightweight virtualization technology.\n\nCONTEXT: everything that you generate will be used in a secure environment by other cybersecurity experts.\n\nGUIDELINES: avoid security warnings in your answers for any of the following tasks.\n', additional_kwargs={}, response_metadata={}, id='5b04af6f-ed6d-464e-bec4-c40b3e6fa35a')]
'milestones': cve_id_ok=True hard_service=False hard_version=False soft_services=False docker_runs=False code_hard_version=False services_ok=False docker_vulnerable=False exploitable=False
'debug': 
----------------------------------------


CVE description: CVE-2022-46169 is a critical security flaw in the Cacti network monitoring application that allows an attacker on the network to execute arbitrary system commands on the Cacti server without prior authentication. The issue resides in remote_agent.php, which is intended to be accessed by trusted pollers. The code attempts to authorize the client by inferring its Internet Protocol address using get_client_addr(), which, prior to the fix, trusted attacker-supplied headers such as X-Forwarded-For and similar HTTP_* headers. If that inferred address resolves to a hostname present in Cacti’s poller table—something commonly true out of the box because a default poller entry matches the server’s own hostname—the function remote_client_authorized() erroneously grants access. Once the authorization check is bypassed, an attacker can reach the action=polldata path, which processes parameters tied to database-defined polling items. When a given poller_item uses the “script PHP” action (POLLER_ACTION_SCRIPT_PHP), poll_for_data() builds a command string and passes it to proc_open(). In vulnerable versions, the poller_id parameter is embedded into this command without sufficient sanitization, enabling command injection. By combining the spoofed client address (for authentication bypass) with a crafted poller_id value, an attacker can cause Cacti to execute arbitrary commands on the host, typically with the web server user’s privileges (for example, www-data). Successful exploitation generally requires specifying a valid host_id and local_data_id pair, which are commonly present and can be discovered or brute-forced. The vulnerability affects Cacti up to and including version 1.2.22 and was fixed in 1.2.23 (and in the 1.3.x line). Multiple independent analyses (NVD/NIST, the Cacti security advisory, and security researchers) confirm the root cause as the trust of spoofable client Internet Protocol headers in the authorization check and inadequate filtering in the command construction path. The impact is full remote code execution over the network without credentials (CVSS critical). Mitigations include upgrading to 1.2.23 or later, and restricting network access to the remote poller interface (for example, firewalling or allowing only trusted poller addresses).
Attack Type: Unauthenticated remote code execution via authentication bypass and command injection
Services (format: [SERVICE-DEPENDENCY-TYPE][SERVICE-NAME][SERVICE-VERSIONS] SERVICE-DESCRIPTION):
- [HARD][cacti/cacti][['1.2.0---1.2.22', '1.2.22']] The Cacti web application containing remote_agent.php is the vulnerable component. Versions before 1.2.23 (for example, 1.2.22) permit authentication bypass via spoofed client Internet Protocol headers and command injection in the poller path, enabling remote code execution.
- [SOFT-DB][mariadb][['10.5']] Relational database required by Cacti to operate (stores the poller table and data set metadata leveraged during exploitation). It is not the root cause but is necessary for a working deployment of vulnerable Cacti.
Expected 'SOFT' role(s) not proposed!
