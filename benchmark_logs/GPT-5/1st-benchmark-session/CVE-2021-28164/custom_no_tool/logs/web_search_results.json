{
    "desc": "CVE-2021-28164 is an information disclosure flaw in Eclipse Jetty\u2019s HTTP request handling that stems from the way Jetty normalized Uniform Resource Identifiers relative to percent-decoding. In default compliance mode, affected Jetty versions accepted paths containing percent-encoded dot segments and related ambiguous characters such as %2e (encoded \u201c.\u201d), %2e%2e (encoded \u201c..\u201d), %u002e (Unicode-escaped dot), and even encoded nulls. Because of the order of operations and alias handling introduced around Jetty 9.4.37, Jetty could normalize a path and apply security constraints before a subsequent decoding step or alias resolution changed the effective resource path. This created a window where an attacker could craft a request that appears to refer to a safe or constrained location during constraint checks, but resolves after decoding/aliasing to a different path under a protected area. The most visible impact is unauthorized read access to files under the WEB-INF directory of a deployed web application, which should never be directly accessible over HTTP. Example exploit requests include /%2e/WEB-INF/web.xml, /.%00/WEB-INF/web.xml, or /%u002e/WEB-INF/web.xml. An attacker needs only network access to the Jetty HTTP endpoint and does not require authentication. Successful exploitation can disclose sensitive configuration and application details, such as servlet mappings, classpaths, and framework settings contained in web.xml or other internal resources. The National Vulnerability Database describes the core affected range for this identifier as Eclipse Jetty 9.4.37.v20210219 through 9.4.38.v20210224. The Jetty project later documented a closely related variant of the same underlying issue that extended to additional releases (9.4.37\u20139.4.42 and also 10.0.1\u201310.0.5, 11.0.1\u201311.0.5), fixed in 9.4.43, 10.0.6, and 11.0.6 by restoring a decode-then-normalize processing order, rejecting ambiguous segments (encoded dots, separators, and nulls), preventing double-decode, and tightening alias checks. Real-world impact was observed in products that embed Jetty (for example, IBM InfoSphere Information Server and several Oracle components), where a remote unauthenticated user could retrieve protected files via crafted paths. Detection commonly involves requesting a known internal file such as /%2e/WEB-INF/web.xml and observing a successful response. Mitigations include upgrading to a fixed Jetty release, placing strict front-end rewrite rules to block percent-encoded dot segments and encoded nulls, and ensuring that Jetty\u2019s ports are not exposed to untrusted networks.",
    "attack_type": "Remote information disclosure through directory traversal and access control bypass",
    "services": [
        {
            "name": "jetty",
            "version": [
                "9.4.37",
                "9.4.38"
            ],
            "dependency_type": "HARD",
            "description": "Eclipse Jetty HTTP server and servlet container providing the vulnerable request handling. A minimal deployed web application with a WEB-INF directory (the standard Java webapp layout) is sufficient to make the issue testable. Use an affected tag such as jetty:9.4.37 or jetty:9.4.38 on Docker Hub and expose the HTTP port (commonly 8080). No additional services are required; the vulnerability is exercised directly against Jetty\u2019s HTTP endpoint."
        }
    ],
    "input_tokens": 48192,
    "output_tokens": 7106
}